
3ARA-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08007738  08007738  00017738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007860  08007860  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007860  08007860  00017860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007868  08007868  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007868  08007868  00017868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800786c  0800786c  0001786c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004264  20000010  08007880  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004274  08007880  00024274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029569  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050ea  00000000  00000000  000495a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f8  00000000  00000000  0004e698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001528  00000000  00000000  0004fd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d73  00000000  00000000  000512b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ee37  00000000  00000000  0007902b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d97c4  00000000  00000000  00097e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00171626  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d64  00000000  00000000  0017167c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007720 	.word	0x08007720

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007720 	.word	0x08007720

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <robotInfoInit>:
 *      Author: Ignacio
 */

#include "3ARAInfo.h"

void robotInfoInit(RobotInfoHandler *info_handler, osMutexId *mutex){
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	6039      	str	r1, [r7, #0]
	info_handler->mutexHandler = mutex;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	683a      	ldr	r2, [r7, #0]
 80004d6:	611a      	str	r2, [r3, #16]
	info_handler->angle_1 = 0;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	f04f 0200 	mov.w	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
	info_handler->angle_2 = 0;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	f04f 0200 	mov.w	r2, #0
 80004e6:	605a      	str	r2, [r3, #4]
	info_handler->angle_3 = 0;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f04f 0200 	mov.w	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
	info_handler->ticks = 0;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	f04f 0200 	mov.w	r2, #0
 80004f6:	60da      	str	r2, [r3, #12]
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <setAngle1>:

void setAngle1(RobotInfoHandler *info_handler, float angle){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	ed87 0a00 	vstr	s0, [r7]
	osMutexWait(*(info_handler->mutexHandler), osWaitForever);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	691b      	ldr	r3, [r3, #16]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f04f 31ff 	mov.w	r1, #4294967295
 800051a:	4618      	mov	r0, r3
 800051c:	f004 fda6 	bl	800506c <osMutexWait>
	info_handler->angle_1 = angle;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	683a      	ldr	r2, [r7, #0]
 8000524:	601a      	str	r2, [r3, #0]
	osMutexRelease(*(info_handler->mutexHandler));
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	691b      	ldr	r3, [r3, #16]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4618      	mov	r0, r3
 800052e:	f004 fdeb 	bl	8005108 <osMutexRelease>
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <setAngle2>:

void setAngle2(RobotInfoHandler *info_handler, float angle){
 800053a:	b580      	push	{r7, lr}
 800053c:	b082      	sub	sp, #8
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
 8000542:	ed87 0a00 	vstr	s0, [r7]
	osMutexWait(*(info_handler->mutexHandler), osWaitForever);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	691b      	ldr	r3, [r3, #16]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f04f 31ff 	mov.w	r1, #4294967295
 8000550:	4618      	mov	r0, r3
 8000552:	f004 fd8b 	bl	800506c <osMutexWait>
	info_handler->angle_2 = angle;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	683a      	ldr	r2, [r7, #0]
 800055a:	605a      	str	r2, [r3, #4]
	osMutexRelease(*(info_handler->mutexHandler));
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	691b      	ldr	r3, [r3, #16]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4618      	mov	r0, r3
 8000564:	f004 fdd0 	bl	8005108 <osMutexRelease>
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <setAngle3>:

void setAngle3(RobotInfoHandler *info_handler, float angle){
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	ed87 0a00 	vstr	s0, [r7]
	osMutexWait(*(info_handler->mutexHandler), osWaitForever);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	691b      	ldr	r3, [r3, #16]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f04f 31ff 	mov.w	r1, #4294967295
 8000586:	4618      	mov	r0, r3
 8000588:	f004 fd70 	bl	800506c <osMutexWait>
	info_handler->angle_3 = angle;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	683a      	ldr	r2, [r7, #0]
 8000590:	609a      	str	r2, [r3, #8]
	osMutexRelease(*(info_handler->mutexHandler));
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	691b      	ldr	r3, [r3, #16]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4618      	mov	r0, r3
 800059a:	f004 fdb5 	bl	8005108 <osMutexRelease>
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <_ZN7EncoderC1EP17TIM_HandleTypeDeff>:
#include "Encoder.hpp"

float ticks_1;

Encoder::Encoder(TIM_HandleTypeDef* encoder_timer, float count_per_turn){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	ed87 0a01 	vstr	s0, [r7, #4]
	timer = encoder_timer;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	68ba      	ldr	r2, [r7, #8]
 80005ba:	601a      	str	r2, [r3, #0]
	encoder_resolution = 360.0f / count_per_turn;
 80005bc:	eddf 6a09 	vldr	s13, [pc, #36]	; 80005e4 <_ZN7EncoderC1EP17TIM_HandleTypeDeff+0x3c>
 80005c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80005c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	edc3 7a03 	vstr	s15, [r3, #12]
	HAL_TIM_Encoder_Start(timer, TIM_CHANNEL_ALL);
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	213c      	movs	r1, #60	; 0x3c
 80005d4:	4618      	mov	r0, r3
 80005d6:	f003 f8b5 	bl	8003744 <HAL_TIM_Encoder_Start>
}
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	4618      	mov	r0, r3
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	43b40000 	.word	0x43b40000

080005e8 <_ZN7Encoder8getAngleEv>:

float Encoder::getAngle(){
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	ticks_1 = __HAL_TIM_GetCounter(timer);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005f8:	ee07 3a90 	vmov	s15, r3
 80005fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000600:	4b0e      	ldr	r3, [pc, #56]	; (800063c <_ZN7Encoder8getAngleEv+0x54>)
 8000602:	edc3 7a00 	vstr	s15, [r3]
	angle = __HAL_TIM_GetCounter(timer) * encoder_resolution;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800060e:	ee07 3a90 	vmov	s15, r3
 8000612:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	edd3 7a03 	vldr	s15, [r3, #12]
 800061c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	edc3 7a01 	vstr	s15, [r3, #4]
	return angle;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	ee07 3a90 	vmov	s15, r3
}
 800062e:	eeb0 0a67 	vmov.f32	s0, s15
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	2000002c 	.word	0x2000002c

08000640 <_ZN5MotorC1ER12MotorChannelR3PinS3_>:
#include "Motor.hpp"
#include "tim.h"
#include "stm32f4xx_hal_gpio.h"
#include "cmsis_os.h"

Motor::Motor(MotorChannel &motor_timer, Pin &motor_1, Pin &motor_2){
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	603b      	str	r3, [r7, #0]
	gpio_pin_1 = motor_1.pin;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	889a      	ldrh	r2, [r3, #4]
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	801a      	strh	r2, [r3, #0]
	gpio_pin_2 = motor_2.pin;
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	889a      	ldrh	r2, [r3, #4]
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	805a      	strh	r2, [r3, #2]
	gpio_port_1 = motor_1.port;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	605a      	str	r2, [r3, #4]
	gpio_port_2 = motor_2.port;
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	609a      	str	r2, [r3, #8]
	channel = motor_timer.channel;
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	685a      	ldr	r2, [r3, #4]
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	611a      	str	r2, [r3, #16]
	timer = motor_timer.timer;
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Start(motor_timer.timer, motor_timer.channel);
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	4619      	mov	r1, r3
 8000688:	4610      	mov	r0, r2
 800068a:	f002 feed 	bl	8003468 <HAL_TIM_PWM_Start>
}
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	4618      	mov	r0, r3
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <_ZN5Motor8turnLeftEm>:

void Motor::turnLeft(uint32_t duty){
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(gpio_port_1, gpio_pin_1, GPIO_PIN_SET);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6858      	ldr	r0, [r3, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	2201      	movs	r2, #1
 80006ac:	4619      	mov	r1, r3
 80006ae:	f001 ffa3 	bl	80025f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio_port_2, gpio_pin_2, GPIO_PIN_RESET);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	6898      	ldr	r0, [r3, #8]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	885b      	ldrh	r3, [r3, #2]
 80006ba:	2200      	movs	r2, #0
 80006bc:	4619      	mov	r1, r3
 80006be:	f001 ff9b 	bl	80025f8 <HAL_GPIO_WritePin>
	switch(channel){
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	691b      	ldr	r3, [r3, #16]
 80006c6:	2b0c      	cmp	r3, #12
 80006c8:	d834      	bhi.n	8000734 <_ZN5Motor8turnLeftEm+0x9c>
 80006ca:	a201      	add	r2, pc, #4	; (adr r2, 80006d0 <_ZN5Motor8turnLeftEm+0x38>)
 80006cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d0:	08000705 	.word	0x08000705
 80006d4:	08000735 	.word	0x08000735
 80006d8:	08000735 	.word	0x08000735
 80006dc:	08000735 	.word	0x08000735
 80006e0:	08000711 	.word	0x08000711
 80006e4:	08000735 	.word	0x08000735
 80006e8:	08000735 	.word	0x08000735
 80006ec:	08000735 	.word	0x08000735
 80006f0:	0800071d 	.word	0x0800071d
 80006f4:	08000735 	.word	0x08000735
 80006f8:	08000735 	.word	0x08000735
 80006fc:	08000735 	.word	0x08000735
 8000700:	08000729 	.word	0x08000729
		case TIM_CHANNEL_1:
			timer->Instance -> CCR1 = duty;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	683a      	ldr	r2, [r7, #0]
 800070c:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800070e:	e011      	b.n	8000734 <_ZN5Motor8turnLeftEm+0x9c>
		case TIM_CHANNEL_2:
			timer->Instance -> CCR2 = duty;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	683a      	ldr	r2, [r7, #0]
 8000718:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 800071a:	e00b      	b.n	8000734 <_ZN5Motor8turnLeftEm+0x9c>
		case TIM_CHANNEL_3:
			timer->Instance -> CCR3 = duty;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	683a      	ldr	r2, [r7, #0]
 8000724:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000726:	e005      	b.n	8000734 <_ZN5Motor8turnLeftEm+0x9c>
		case TIM_CHANNEL_4:
			timer->Instance -> CCR4 = duty;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	683a      	ldr	r2, [r7, #0]
 8000730:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000732:	bf00      	nop
	}
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <_ZN5Motor9turnRightEm>:

void Motor::turnRight(uint32_t duty){
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(gpio_port_1, gpio_pin_1, GPIO_PIN_RESET);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6858      	ldr	r0, [r3, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	2200      	movs	r2, #0
 8000750:	4619      	mov	r1, r3
 8000752:	f001 ff51 	bl	80025f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio_port_2, gpio_pin_2, GPIO_PIN_SET);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6898      	ldr	r0, [r3, #8]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	885b      	ldrh	r3, [r3, #2]
 800075e:	2201      	movs	r2, #1
 8000760:	4619      	mov	r1, r3
 8000762:	f001 ff49 	bl	80025f8 <HAL_GPIO_WritePin>
	switch(channel){
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	691b      	ldr	r3, [r3, #16]
 800076a:	2b0c      	cmp	r3, #12
 800076c:	d834      	bhi.n	80007d8 <_ZN5Motor9turnRightEm+0x9c>
 800076e:	a201      	add	r2, pc, #4	; (adr r2, 8000774 <_ZN5Motor9turnRightEm+0x38>)
 8000770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000774:	080007a9 	.word	0x080007a9
 8000778:	080007d9 	.word	0x080007d9
 800077c:	080007d9 	.word	0x080007d9
 8000780:	080007d9 	.word	0x080007d9
 8000784:	080007b5 	.word	0x080007b5
 8000788:	080007d9 	.word	0x080007d9
 800078c:	080007d9 	.word	0x080007d9
 8000790:	080007d9 	.word	0x080007d9
 8000794:	080007c1 	.word	0x080007c1
 8000798:	080007d9 	.word	0x080007d9
 800079c:	080007d9 	.word	0x080007d9
 80007a0:	080007d9 	.word	0x080007d9
 80007a4:	080007cd 	.word	0x080007cd
			case TIM_CHANNEL_1:
				timer->Instance -> CCR1 = duty;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	683a      	ldr	r2, [r7, #0]
 80007b0:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 80007b2:	e011      	b.n	80007d8 <_ZN5Motor9turnRightEm+0x9c>
			case TIM_CHANNEL_2:
				timer->Instance -> CCR2 = duty;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	683a      	ldr	r2, [r7, #0]
 80007bc:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 80007be:	e00b      	b.n	80007d8 <_ZN5Motor9turnRightEm+0x9c>
			case TIM_CHANNEL_3:
				timer->Instance -> CCR3 = duty;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	683a      	ldr	r2, [r7, #0]
 80007c8:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 80007ca:	e005      	b.n	80007d8 <_ZN5Motor9turnRightEm+0x9c>
			case TIM_CHANNEL_4:
				timer->Instance -> CCR4 = duty;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	683a      	ldr	r2, [r7, #0]
 80007d4:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 80007d6:	bf00      	nop
	}
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <_ZN5Motor14goHomePositionEv>:

void Motor::goHomePosition(){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	switch(channel){
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	691b      	ldr	r3, [r3, #16]
 80007ec:	2b0c      	cmp	r3, #12
 80007ee:	f200 8080 	bhi.w	80008f2 <_ZN5Motor14goHomePositionEv+0x112>
 80007f2:	a201      	add	r2, pc, #4	; (adr r2, 80007f8 <_ZN5Motor14goHomePositionEv+0x18>)
 80007f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f8:	0800082d 	.word	0x0800082d
 80007fc:	080008f3 	.word	0x080008f3
 8000800:	080008f3 	.word	0x080008f3
 8000804:	080008f3 	.word	0x080008f3
 8000808:	0800086b 	.word	0x0800086b
 800080c:	080008f3 	.word	0x080008f3
 8000810:	080008f3 	.word	0x080008f3
 8000814:	080008f3 	.word	0x080008f3
 8000818:	080008a9 	.word	0x080008a9
 800081c:	080008f3 	.word	0x080008f3
 8000820:	080008f3 	.word	0x080008f3
 8000824:	080008f3 	.word	0x080008f3
 8000828:	080008e7 	.word	0x080008e7
		// Motor 2
		case TIM_CHANNEL_1:
			Motor::turnRight(800);
 800082c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f7ff ff83 	bl	800073c <_ZN5Motor9turnRightEm>
			while(HAL_GPIO_ReadPin(HALL_SENSOR_2_GPIO_Port, HALL_SENSOR_2_Pin) == GPIO_PIN_SET){
 8000836:	2140      	movs	r1, #64	; 0x40
 8000838:	4830      	ldr	r0, [pc, #192]	; (80008fc <_ZN5Motor14goHomePositionEv+0x11c>)
 800083a:	f001 fec5 	bl	80025c8 <HAL_GPIO_ReadPin>
 800083e:	4603      	mov	r3, r0
 8000840:	2b01      	cmp	r3, #1
 8000842:	bf0c      	ite	eq
 8000844:	2301      	moveq	r3, #1
 8000846:	2300      	movne	r3, #0
 8000848:	b2db      	uxtb	r3, r3
 800084a:	2b00      	cmp	r3, #0
 800084c:	d003      	beq.n	8000856 <_ZN5Motor14goHomePositionEv+0x76>
				osDelay(2);
 800084e:	2002      	movs	r0, #2
 8000850:	f004 fbdf 	bl	8005012 <osDelay>
			while(HAL_GPIO_ReadPin(HALL_SENSOR_2_GPIO_Port, HALL_SENSOR_2_Pin) == GPIO_PIN_SET){
 8000854:	e7ef      	b.n	8000836 <_ZN5Motor14goHomePositionEv+0x56>
			}
			timer->Instance -> CCR1 = 0;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2200      	movs	r2, #0
 800085e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCounter(&ENCODER_2_TIMER, 0);
 8000860:	4b27      	ldr	r3, [pc, #156]	; (8000900 <_ZN5Motor14goHomePositionEv+0x120>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2200      	movs	r2, #0
 8000866:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8000868:	e043      	b.n	80008f2 <_ZN5Motor14goHomePositionEv+0x112>
		// Motor 1
		case TIM_CHANNEL_2:
			Motor::turnLeft(850);
 800086a:	f240 3152 	movw	r1, #850	; 0x352
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f7ff ff12 	bl	8000698 <_ZN5Motor8turnLeftEm>
			while(HAL_GPIO_ReadPin(HALL_SENSOR_1_GPIO_Port, HALL_SENSOR_1_Pin) == GPIO_PIN_SET){
 8000874:	2180      	movs	r1, #128	; 0x80
 8000876:	4821      	ldr	r0, [pc, #132]	; (80008fc <_ZN5Motor14goHomePositionEv+0x11c>)
 8000878:	f001 fea6 	bl	80025c8 <HAL_GPIO_ReadPin>
 800087c:	4603      	mov	r3, r0
 800087e:	2b01      	cmp	r3, #1
 8000880:	bf0c      	ite	eq
 8000882:	2301      	moveq	r3, #1
 8000884:	2300      	movne	r3, #0
 8000886:	b2db      	uxtb	r3, r3
 8000888:	2b00      	cmp	r3, #0
 800088a:	d003      	beq.n	8000894 <_ZN5Motor14goHomePositionEv+0xb4>
				osDelay(2);
 800088c:	2002      	movs	r0, #2
 800088e:	f004 fbc0 	bl	8005012 <osDelay>
			while(HAL_GPIO_ReadPin(HALL_SENSOR_1_GPIO_Port, HALL_SENSOR_1_Pin) == GPIO_PIN_SET){
 8000892:	e7ef      	b.n	8000874 <_ZN5Motor14goHomePositionEv+0x94>
			}
			timer->Instance -> CCR2 = 0;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2200      	movs	r2, #0
 800089c:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SetCounter(&ENCODER_1_TIMER, 0);
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <_ZN5Motor14goHomePositionEv+0x124>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 80008a6:	e024      	b.n	80008f2 <_ZN5Motor14goHomePositionEv+0x112>
	    // Motor 3
		case TIM_CHANNEL_3:
			Motor::turnRight(700);
 80008a8:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f7ff ff45 	bl	800073c <_ZN5Motor9turnRightEm>
			while(HAL_GPIO_ReadPin(HALL_SENSOR_3_GPIO_Port, HALL_SENSOR_3_Pin) == GPIO_PIN_SET){
 80008b2:	2120      	movs	r1, #32
 80008b4:	4811      	ldr	r0, [pc, #68]	; (80008fc <_ZN5Motor14goHomePositionEv+0x11c>)
 80008b6:	f001 fe87 	bl	80025c8 <HAL_GPIO_ReadPin>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b01      	cmp	r3, #1
 80008be:	bf0c      	ite	eq
 80008c0:	2301      	moveq	r3, #1
 80008c2:	2300      	movne	r3, #0
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d003      	beq.n	80008d2 <_ZN5Motor14goHomePositionEv+0xf2>
				osDelay(2);
 80008ca:	2002      	movs	r0, #2
 80008cc:	f004 fba1 	bl	8005012 <osDelay>
			while(HAL_GPIO_ReadPin(HALL_SENSOR_3_GPIO_Port, HALL_SENSOR_3_Pin) == GPIO_PIN_SET){
 80008d0:	e7ef      	b.n	80008b2 <_ZN5Motor14goHomePositionEv+0xd2>
			}
			timer->Instance -> CCR3 = 0;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	68db      	ldr	r3, [r3, #12]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2200      	movs	r2, #0
 80008da:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SetCounter(&ENCODER_3_TIMER, 0);
 80008dc:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <_ZN5Motor14goHomePositionEv+0x128>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2200      	movs	r2, #0
 80008e2:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 80008e4:	e005      	b.n	80008f2 <_ZN5Motor14goHomePositionEv+0x112>
		case TIM_CHANNEL_4:
			timer->Instance -> CCR4 = 0;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2200      	movs	r2, #0
 80008ee:	641a      	str	r2, [r3, #64]	; 0x40
			//__HAL_TIM_SetCounter(timer, 0);
			break;
 80008f0:	bf00      	nop
	}
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40020c00 	.word	0x40020c00
 8000900:	200040c8 	.word	0x200040c8
 8000904:	20004110 	.word	0x20004110
 8000908:	20004158 	.word	0x20004158

0800090c <startSerialComms>:
// Flag that activates when arrives a new package from serial port
bool data_received = false;
// Flag that indicates to send the data to the serial port
bool data_send = false;

void startSerialComms(RobotInfoHandler *info_handler){
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, (uint8_t*) rx_buffer, RECEIVED_BYTES);
 8000914:	220e      	movs	r2, #14
 8000916:	493e      	ldr	r1, [pc, #248]	; (8000a10 <startSerialComms+0x104>)
 8000918:	483e      	ldr	r0, [pc, #248]	; (8000a14 <startSerialComms+0x108>)
 800091a:	f003 fd74 	bl	8004406 <HAL_UART_Receive_IT>

	while(1){
		if(data_received == true){
 800091e:	4b3e      	ldr	r3, [pc, #248]	; (8000a18 <startSerialComms+0x10c>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d152      	bne.n	80009cc <startSerialComms+0xc0>
			data_received = false;
 8000926:	4b3c      	ldr	r3, [pc, #240]	; (8000a18 <startSerialComms+0x10c>)
 8000928:	2200      	movs	r2, #0
 800092a:	701a      	strb	r2, [r3, #0]
			if(rx_buffer[0] == START_OF_PACKAGE && rx_buffer[13] == END_OF_PACKAGE){
 800092c:	4b38      	ldr	r3, [pc, #224]	; (8000a10 <startSerialComms+0x104>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2ba1      	cmp	r3, #161	; 0xa1
 8000932:	d14b      	bne.n	80009cc <startSerialComms+0xc0>
 8000934:	4b36      	ldr	r3, [pc, #216]	; (8000a10 <startSerialComms+0x104>)
 8000936:	7b5b      	ldrb	r3, [r3, #13]
 8000938:	2bb1      	cmp	r3, #177	; 0xb1
 800093a:	d147      	bne.n	80009cc <startSerialComms+0xc0>
				angle_1.bytes[0] = rx_buffer[1];
 800093c:	4b34      	ldr	r3, [pc, #208]	; (8000a10 <startSerialComms+0x104>)
 800093e:	785a      	ldrb	r2, [r3, #1]
 8000940:	4b36      	ldr	r3, [pc, #216]	; (8000a1c <startSerialComms+0x110>)
 8000942:	701a      	strb	r2, [r3, #0]
				angle_1.bytes[1] = rx_buffer[2];
 8000944:	4b32      	ldr	r3, [pc, #200]	; (8000a10 <startSerialComms+0x104>)
 8000946:	789a      	ldrb	r2, [r3, #2]
 8000948:	4b34      	ldr	r3, [pc, #208]	; (8000a1c <startSerialComms+0x110>)
 800094a:	705a      	strb	r2, [r3, #1]
				angle_1.bytes[2] = rx_buffer[3];
 800094c:	4b30      	ldr	r3, [pc, #192]	; (8000a10 <startSerialComms+0x104>)
 800094e:	78da      	ldrb	r2, [r3, #3]
 8000950:	4b32      	ldr	r3, [pc, #200]	; (8000a1c <startSerialComms+0x110>)
 8000952:	709a      	strb	r2, [r3, #2]
				angle_1.bytes[3] = rx_buffer[4];
 8000954:	4b2e      	ldr	r3, [pc, #184]	; (8000a10 <startSerialComms+0x104>)
 8000956:	791a      	ldrb	r2, [r3, #4]
 8000958:	4b30      	ldr	r3, [pc, #192]	; (8000a1c <startSerialComms+0x110>)
 800095a:	70da      	strb	r2, [r3, #3]
				angle_2.bytes[0] = rx_buffer[5];
 800095c:	4b2c      	ldr	r3, [pc, #176]	; (8000a10 <startSerialComms+0x104>)
 800095e:	795a      	ldrb	r2, [r3, #5]
 8000960:	4b2f      	ldr	r3, [pc, #188]	; (8000a20 <startSerialComms+0x114>)
 8000962:	701a      	strb	r2, [r3, #0]
				angle_2.bytes[1] = rx_buffer[6];
 8000964:	4b2a      	ldr	r3, [pc, #168]	; (8000a10 <startSerialComms+0x104>)
 8000966:	799a      	ldrb	r2, [r3, #6]
 8000968:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <startSerialComms+0x114>)
 800096a:	705a      	strb	r2, [r3, #1]
				angle_2.bytes[2] = rx_buffer[7];
 800096c:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <startSerialComms+0x104>)
 800096e:	79da      	ldrb	r2, [r3, #7]
 8000970:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <startSerialComms+0x114>)
 8000972:	709a      	strb	r2, [r3, #2]
				angle_2.bytes[3] = rx_buffer[8];
 8000974:	4b26      	ldr	r3, [pc, #152]	; (8000a10 <startSerialComms+0x104>)
 8000976:	7a1a      	ldrb	r2, [r3, #8]
 8000978:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <startSerialComms+0x114>)
 800097a:	70da      	strb	r2, [r3, #3]
				angle_3.bytes[0] = rx_buffer[9];
 800097c:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <startSerialComms+0x104>)
 800097e:	7a5a      	ldrb	r2, [r3, #9]
 8000980:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <startSerialComms+0x118>)
 8000982:	701a      	strb	r2, [r3, #0]
				angle_3.bytes[1] = rx_buffer[10];
 8000984:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <startSerialComms+0x104>)
 8000986:	7a9a      	ldrb	r2, [r3, #10]
 8000988:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <startSerialComms+0x118>)
 800098a:	705a      	strb	r2, [r3, #1]
				angle_3.bytes[2] = rx_buffer[11];
 800098c:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <startSerialComms+0x104>)
 800098e:	7ada      	ldrb	r2, [r3, #11]
 8000990:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <startSerialComms+0x118>)
 8000992:	709a      	strb	r2, [r3, #2]
				angle_3.bytes[3] = rx_buffer[12];
 8000994:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <startSerialComms+0x104>)
 8000996:	7b1a      	ldrb	r2, [r3, #12]
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <startSerialComms+0x118>)
 800099a:	70da      	strb	r2, [r3, #3]
				setAngle1(info_handler, angle_1.float_value);
 800099c:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <startSerialComms+0x110>)
 800099e:	edd3 7a00 	vldr	s15, [r3]
 80009a2:	eeb0 0a67 	vmov.f32	s0, s15
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f7ff fdac 	bl	8000504 <setAngle1>
				setAngle2(info_handler, angle_2.float_value);
 80009ac:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <startSerialComms+0x114>)
 80009ae:	edd3 7a00 	vldr	s15, [r3]
 80009b2:	eeb0 0a67 	vmov.f32	s0, s15
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff fdbf 	bl	800053a <setAngle2>
				setAngle3(info_handler, angle_3.float_value);
 80009bc:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <startSerialComms+0x118>)
 80009be:	edd3 7a00 	vldr	s15, [r3]
 80009c2:	eeb0 0a67 	vmov.f32	s0, s15
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f7ff fdd2 	bl	8000570 <setAngle3>
			}
		}
		if(data_send == true){
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <startSerialComms+0x11c>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d118      	bne.n	8000a06 <startSerialComms+0xfa>
			//ticks.float_value= info_handler->ticks;
			//HAL_UART_Transmit(&huart2, ticks.bytes, sizeof(ticks.bytes), 1000);

			HAL_UART_Transmit(&huart2, angle_1.bytes, sizeof(angle_1.bytes), 1000);
 80009d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d8:	2204      	movs	r2, #4
 80009da:	4910      	ldr	r1, [pc, #64]	; (8000a1c <startSerialComms+0x110>)
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <startSerialComms+0x108>)
 80009de:	f003 fc80 	bl	80042e2 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, angle_2.bytes, sizeof(angle_2.bytes), 1000);
 80009e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e6:	2204      	movs	r2, #4
 80009e8:	490d      	ldr	r1, [pc, #52]	; (8000a20 <startSerialComms+0x114>)
 80009ea:	480a      	ldr	r0, [pc, #40]	; (8000a14 <startSerialComms+0x108>)
 80009ec:	f003 fc79 	bl	80042e2 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, angle_3.bytes, sizeof(angle_3.bytes), 1000);
 80009f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f4:	2204      	movs	r2, #4
 80009f6:	490b      	ldr	r1, [pc, #44]	; (8000a24 <startSerialComms+0x118>)
 80009f8:	4806      	ldr	r0, [pc, #24]	; (8000a14 <startSerialComms+0x108>)
 80009fa:	f003 fc72 	bl	80042e2 <HAL_UART_Transmit>

			osDelay(500);
 80009fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a02:	f004 fb06 	bl	8005012 <osDelay>
		}
		osDelay(100);
 8000a06:	2064      	movs	r0, #100	; 0x64
 8000a08:	f004 fb03 	bl	8005012 <osDelay>
		if(data_received == true){
 8000a0c:	e787      	b.n	800091e <startSerialComms+0x12>
 8000a0e:	bf00      	nop
 8000a10:	2000003c 	.word	0x2000003c
 8000a14:	2000422c 	.word	0x2000422c
 8000a18:	2000004a 	.word	0x2000004a
 8000a1c:	20000030 	.word	0x20000030
 8000a20:	20000034 	.word	0x20000034
 8000a24:	20000038 	.word	0x20000038
 8000a28:	2000004b 	.word	0x2000004b

08000a2c <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <HAL_UART_RxCpltCallback+0x2c>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d102      	bne.n	8000a44 <HAL_UART_RxCpltCallback+0x18>
		data_received = true;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <HAL_UART_RxCpltCallback+0x30>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t*) rx_buffer, RECEIVED_BYTES);
 8000a44:	220e      	movs	r2, #14
 8000a46:	4906      	ldr	r1, [pc, #24]	; (8000a60 <HAL_UART_RxCpltCallback+0x34>)
 8000a48:	4806      	ldr	r0, [pc, #24]	; (8000a64 <HAL_UART_RxCpltCallback+0x38>)
 8000a4a:	f003 fcdc 	bl	8004406 <HAL_UART_Receive_IT>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40004400 	.word	0x40004400
 8000a5c:	2000004a 	.word	0x2000004a
 8000a60:	2000003c 	.word	0x2000003c
 8000a64:	2000422c 	.word	0x2000422c

08000a68 <_ZN3PIDC1Effffff>:
#include "Task/PID/PID.hpp"


PID::PID(float kp, float kd, float ki, float max_output, float min_output, float update_rate){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b088      	sub	sp, #32
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	61f8      	str	r0, [r7, #28]
 8000a70:	ed87 0a06 	vstr	s0, [r7, #24]
 8000a74:	edc7 0a05 	vstr	s1, [r7, #20]
 8000a78:	ed87 1a04 	vstr	s2, [r7, #16]
 8000a7c:	edc7 1a03 	vstr	s3, [r7, #12]
 8000a80:	ed87 2a02 	vstr	s4, [r7, #8]
 8000a84:	edc7 2a01 	vstr	s5, [r7, #4]
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	4a15      	ldr	r2, [pc, #84]	; (8000ae0 <_ZN3PIDC1Effffff+0x78>)
 8000a8c:	611a      	str	r2, [r3, #16]
	kp_ = kp;
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	601a      	str	r2, [r3, #0]
	ki_ = ki;
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	609a      	str	r2, [r3, #8]
	kd_ = kd;
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	697a      	ldr	r2, [r7, #20]
 8000a9e:	605a      	str	r2, [r3, #4]
	pid_update_seconds = update_rate;
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	60da      	str	r2, [r3, #12]
	max_pid_output_ = max_output;
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	619a      	str	r2, [r3, #24]
	min_pid_output_ = min_output;
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	615a      	str	r2, [r3, #20]
	pid_.Kp = kp_;
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	63da      	str	r2, [r3, #60]	; 0x3c
	pid_.Ki = ki_;
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	689a      	ldr	r2, [r3, #8]
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	641a      	str	r2, [r3, #64]	; 0x40
	pid_.Kd = kd_;
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	685a      	ldr	r2, [r3, #4]
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	645a      	str	r2, [r3, #68]	; 0x44
	arm_pid_init_f32(&pid_, 1);
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3324      	adds	r3, #36	; 0x24
 8000ace:	2101      	movs	r1, #1
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f001 f9f0 	bl	8001eb6 <arm_pid_init_f32>
}
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3720      	adds	r7, #32
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40a00000 	.word	0x40a00000

08000ae4 <_ZN3PID9updatePIDEff>:

float PID::updatePID(float setpoint_position, float current_position){
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	ed87 0a02 	vstr	s0, [r7, #8]
 8000af0:	edc7 0a01 	vstr	s1, [r7, #4]
	error_ = setpoint_position - current_position;
 8000af4:	ed97 7a02 	vldr	s14, [r7, #8]
 8000af8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000afc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	edc3 7a07 	vstr	s15, [r3, #28]
	output = arm_pid_f32(&pid_, error_);
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	69db      	ldr	r3, [r3, #28]
 8000b10:	61fa      	str	r2, [r7, #28]
 8000b12:	61bb      	str	r3, [r7, #24]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	ed93 7a00 	vldr	s14, [r3]
 8000b1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000b1e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	edd3 6a01 	vldr	s13, [r3, #4]
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000b32:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	edd3 6a02 	vldr	s13, [r3, #8]
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b54:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Update state */
    S->state[1] = S->state[0];
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	68da      	ldr	r2, [r3, #12]
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	697a      	ldr	r2, [r7, #20]
 8000b6a:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8000b6c:	697a      	ldr	r2, [r7, #20]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	621a      	str	r2, [r3, #32]
	if(output > max_pid_output_) output = max_pid_output_;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	ed93 7a08 	vldr	s14, [r3, #32]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	edd3 7a06 	vldr	s15, [r3, #24]
 8000b7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b86:	dd04      	ble.n	8000b92 <_ZN3PID9updatePIDEff+0xae>
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	699a      	ldr	r2, [r3, #24]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	621a      	str	r2, [r3, #32]
 8000b90:	e00e      	b.n	8000bb0 <_ZN3PID9updatePIDEff+0xcc>
	else if(output < min_pid_output_) output = min_pid_output_;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	ed93 7a08 	vldr	s14, [r3, #32]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	edd3 7a05 	vldr	s15, [r3, #20]
 8000b9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ba6:	d503      	bpl.n	8000bb0 <_ZN3PID9updatePIDEff+0xcc>
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	695a      	ldr	r2, [r3, #20]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	621a      	str	r2, [r3, #32]
	if(error_ < 2.0f && error_ > -2.0f) output = 0;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	edd3 7a07 	vldr	s15, [r3, #28]
 8000bb6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000bba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bc2:	d50d      	bpl.n	8000be0 <_ZN3PID9updatePIDEff+0xfc>
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	edd3 7a07 	vldr	s15, [r3, #28]
 8000bca:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8000bce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd6:	dd03      	ble.n	8000be0 <_ZN3PID9updatePIDEff+0xfc>
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f04f 0200 	mov.w	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
	return output;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	6a1b      	ldr	r3, [r3, #32]
 8000be4:	ee07 3a90 	vmov	s15, r3
}
 8000be8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bec:	3724      	adds	r7, #36	; 0x24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
	...

08000bf8 <PID1Node>:
#include "Settings.h"

float output_pid_1=0;
//float current_angle = 0;

void PID1Node(RobotInfoHandler *robot_info_handler){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b0a4      	sub	sp, #144	; 0x90
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

	// Pins definition for motor 1
	Pin motor_1_a{MOTOR_1_L_GPIO_Port, MOTOR_1_L_Pin};
 8000c00:	4a44      	ldr	r2, [pc, #272]	; (8000d14 <PID1Node+0x11c>)
 8000c02:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000c06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c0a:	e883 0003 	stmia.w	r3, {r0, r1}
	Pin motor_1_b{MOTOR_1_R_GPIO_Port, MOTOR_1_R_Pin};
 8000c0e:	4a42      	ldr	r2, [pc, #264]	; (8000d18 <PID1Node+0x120>)
 8000c10:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c18:	e883 0003 	stmia.w	r3, {r0, r1}

	// Timer definition for motor 1
	MotorChannel motor_1_timer{&MOTOR_1_TIMER, MOTOR_1_CHANNEL};
 8000c1c:	4a3f      	ldr	r2, [pc, #252]	; (8000d1c <PID1Node+0x124>)
 8000c1e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c26:	e883 0003 	stmia.w	r3, {r0, r1}

	// Motor 1 object creation
	Motor motor1(motor_1_timer, motor_1_a, motor_1_b);
 8000c2a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c2e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000c32:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8000c36:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8000c3a:	f7ff fd01 	bl	8000640 <_ZN5MotorC1ER12MotorChannelR3PinS3_>

	// Encoder 1 object creation
	Encoder encoder1(&ENCODER_1_TIMER, ENCODER_1_STEPS);
 8000c3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c42:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8000d20 <PID1Node+0x128>
 8000c46:	4937      	ldr	r1, [pc, #220]	; (8000d24 <PID1Node+0x12c>)
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fcad 	bl	80005a8 <_ZN7EncoderC1EP17TIM_HandleTypeDeff>

	// PID 1 object creation
	PID pid1(KP_CONST_1, KD_CONST_1, KI_CONST_1, MAX_PID_OUTPUT, MIN_PID_OUTPUT, PID_UPDATE_TIME_S);
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	eddf 2a35 	vldr	s5, [pc, #212]	; 8000d28 <PID1Node+0x130>
 8000c56:	ed9f 2a35 	vldr	s4, [pc, #212]	; 8000d2c <PID1Node+0x134>
 8000c5a:	eddf 1a35 	vldr	s3, [pc, #212]	; 8000d30 <PID1Node+0x138>
 8000c5e:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
 8000c62:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000c66:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8000d34 <PID1Node+0x13c>
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fefc 	bl	8000a68 <_ZN3PIDC1Effffff>

	//float output_pid_1=0;
	float current_angle = 0;
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	//motor1.goHomePosition();

	while(1){
		if(robot_info_handler->angle_1 == 0){
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	edd3 7a00 	vldr	s15, [r3]
 8000c7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c86:	d105      	bne.n	8000c94 <PID1Node+0x9c>
			motor1.goHomePosition();
 8000c88:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fda7 	bl	80007e0 <_ZN5Motor14goHomePositionEv>
 8000c92:	e03a      	b.n	8000d0a <PID1Node+0x112>
			//current_angle = 0;
		}
		else{
			current_angle = encoder1.getAngle();
 8000c94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fca5 	bl	80005e8 <_ZN7Encoder8getAngleEv>
 8000c9e:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
			output_pid_1 = pid1.updatePID(robot_info_handler->angle_1, current_angle);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	edd3 7a00 	vldr	s15, [r3]
 8000ca8:	f107 0308 	add.w	r3, r7, #8
 8000cac:	edd7 0a23 	vldr	s1, [r7, #140]	; 0x8c
 8000cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff15 	bl	8000ae4 <_ZN3PID9updatePIDEff>
 8000cba:	eef0 7a40 	vmov.f32	s15, s0
 8000cbe:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <PID1Node+0x140>)
 8000cc0:	edc3 7a00 	vstr	s15, [r3]
			if(output_pid_1 > 0) motor1.turnRight(output_pid_1);
 8000cc4:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <PID1Node+0x140>)
 8000cc6:	edd3 7a00 	vldr	s15, [r3]
 8000cca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd2:	dd0c      	ble.n	8000cee <PID1Node+0xf6>
 8000cd4:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <PID1Node+0x140>)
 8000cd6:	edd3 7a00 	vldr	s15, [r3]
 8000cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cde:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000ce2:	ee17 1a90 	vmov	r1, s15
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fd28 	bl	800073c <_ZN5Motor9turnRightEm>
 8000cec:	e00d      	b.n	8000d0a <PID1Node+0x112>
			else motor1.turnLeft(-output_pid_1);
 8000cee:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <PID1Node+0x140>)
 8000cf0:	edd3 7a00 	vldr	s15, [r3]
 8000cf4:	eef1 7a67 	vneg.f32	s15, s15
 8000cf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cfc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000d00:	ee17 1a90 	vmov	r1, s15
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fcc7 	bl	8000698 <_ZN5Motor8turnLeftEm>
		}
		osDelay(PID_UPDATE_TIME_mS);
 8000d0a:	203c      	movs	r0, #60	; 0x3c
 8000d0c:	f004 f981 	bl	8005012 <osDelay>
		if(robot_info_handler->angle_1 == 0){
 8000d10:	e7b2      	b.n	8000c78 <PID1Node+0x80>
 8000d12:	bf00      	nop
 8000d14:	08007738 	.word	0x08007738
 8000d18:	08007740 	.word	0x08007740
 8000d1c:	08007748 	.word	0x08007748
 8000d20:	469d3e00 	.word	0x469d3e00
 8000d24:	20004110 	.word	0x20004110
 8000d28:	3d75c28f 	.word	0x3d75c28f
 8000d2c:	c47a0000 	.word	0xc47a0000
 8000d30:	447a0000 	.word	0x447a0000
 8000d34:	44480000 	.word	0x44480000
 8000d38:	2000004c 	.word	0x2000004c

08000d3c <PID2Node>:
#include "Encoder.hpp"
#include "Settings.h"

//float current_angle = 0, output_pid_2 = 0;

void PID2Node(RobotInfoHandler *robot_info_handler){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b0a6      	sub	sp, #152	; 0x98
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]

	// Pins definition for motor 2
	Pin motor_2_a{MOTOR_2_L_GPIO_Port, MOTOR_2_L_Pin};
 8000d44:	4a41      	ldr	r2, [pc, #260]	; (8000e4c <PID2Node+0x110>)
 8000d46:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000d4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d4e:	e883 0003 	stmia.w	r3, {r0, r1}
	Pin motor_2_b{MOTOR_2_R_GPIO_Port, MOTOR_2_R_Pin};
 8000d52:	4a3f      	ldr	r2, [pc, #252]	; (8000e50 <PID2Node+0x114>)
 8000d54:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000d58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d5c:	e883 0003 	stmia.w	r3, {r0, r1}

	// Timer definition for motor 2
	MotorChannel motor_2_timer{&MOTOR_2_TIMER, MOTOR_2_CHANNEL};
 8000d60:	4b3c      	ldr	r3, [pc, #240]	; (8000e54 <PID2Node+0x118>)
 8000d62:	67bb      	str	r3, [r7, #120]	; 0x78
 8000d64:	2300      	movs	r3, #0
 8000d66:	67fb      	str	r3, [r7, #124]	; 0x7c

	// Motor 2 object creation
	Motor motor2(motor_2_timer, motor_2_a, motor_2_b);
 8000d68:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000d6c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000d70:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000d74:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8000d78:	f7ff fc62 	bl	8000640 <_ZN5MotorC1ER12MotorChannelR3PinS3_>

	// Encoder 2 object creation
	Encoder encoder2(&ENCODER_2_TIMER, ENCODER_2_STEPS);
 8000d7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d80:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8000e58 <PID2Node+0x11c>
 8000d84:	4935      	ldr	r1, [pc, #212]	; (8000e5c <PID2Node+0x120>)
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fc0e 	bl	80005a8 <_ZN7EncoderC1EP17TIM_HandleTypeDeff>

	// PID 2 object creation
	PID pid2(KP_CONST_2, KD_CONST_2, KI_CONST_2, MAX_PID_OUTPUT, MIN_PID_OUTPUT, PID_UPDATE_TIME_S);
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	eddf 2a33 	vldr	s5, [pc, #204]	; 8000e60 <PID2Node+0x124>
 8000d94:	ed9f 2a33 	vldr	s4, [pc, #204]	; 8000e64 <PID2Node+0x128>
 8000d98:	eddf 1a33 	vldr	s3, [pc, #204]	; 8000e68 <PID2Node+0x12c>
 8000d9c:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
 8000da0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000da4:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8000e6c <PID2Node+0x130>
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fe5d 	bl	8000a68 <_ZN3PIDC1Effffff>

	float current_angle = 0, output_pid_2 = 0;
 8000dae:	f04f 0300 	mov.w	r3, #0
 8000db2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000db6:	f04f 0300 	mov.w	r3, #0
 8000dba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	while(1){
		if(robot_info_handler->angle_2 == 0){
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	edd3 7a01 	vldr	s15, [r3, #4]
 8000dc4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dcc:	d105      	bne.n	8000dda <PID2Node+0x9e>
			motor2.goHomePosition();
 8000dce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fd04 	bl	80007e0 <_ZN5Motor14goHomePositionEv>
 8000dd8:	e034      	b.n	8000e44 <PID2Node+0x108>
		}
		else{
			current_angle = encoder2.getAngle();
 8000dda:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fc02 	bl	80005e8 <_ZN7Encoder8getAngleEv>
 8000de4:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
			output_pid_2 = pid2.updatePID(robot_info_handler->angle_2, current_angle);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	edd3 7a01 	vldr	s15, [r3, #4]
 8000dee:	f107 030c 	add.w	r3, r7, #12
 8000df2:	edd7 0a25 	vldr	s1, [r7, #148]	; 0x94
 8000df6:	eeb0 0a67 	vmov.f32	s0, s15
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fe72 	bl	8000ae4 <_ZN3PID9updatePIDEff>
 8000e00:	ed87 0a24 	vstr	s0, [r7, #144]	; 0x90
			if(output_pid_2 > 0) motor2.turnLeft(output_pid_2);
 8000e04:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8000e08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e10:	dd0b      	ble.n	8000e2a <PID2Node+0xee>
 8000e12:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8000e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e1a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e1e:	ee17 1a90 	vmov	r1, s15
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fc38 	bl	8000698 <_ZN5Motor8turnLeftEm>
 8000e28:	e00c      	b.n	8000e44 <PID2Node+0x108>
			else motor2.turnRight(-output_pid_2);
 8000e2a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8000e2e:	eef1 7a67 	vneg.f32	s15, s15
 8000e32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e36:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e3a:	ee17 1a90 	vmov	r1, s15
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fc7c 	bl	800073c <_ZN5Motor9turnRightEm>
		}
		osDelay(PID_UPDATE_TIME_mS);
 8000e44:	203c      	movs	r0, #60	; 0x3c
 8000e46:	f004 f8e4 	bl	8005012 <osDelay>
		if(robot_info_handler->angle_2 == 0){
 8000e4a:	e7b8      	b.n	8000dbe <PID2Node+0x82>
 8000e4c:	08007750 	.word	0x08007750
 8000e50:	08007758 	.word	0x08007758
 8000e54:	200041a0 	.word	0x200041a0
 8000e58:	469d3e00 	.word	0x469d3e00
 8000e5c:	200040c8 	.word	0x200040c8
 8000e60:	3d75c28f 	.word	0x3d75c28f
 8000e64:	c47a0000 	.word	0xc47a0000
 8000e68:	447a0000 	.word	0x447a0000
 8000e6c:	44480000 	.word	0x44480000

08000e70 <PID3Node>:
#include "Encoder.hpp"
#include "Settings.h"

float current_angle = 0, output_pid_3 = 0;

void PID3Node(RobotInfoHandler *robot_info_handler){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b0a4      	sub	sp, #144	; 0x90
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	// Pins definition for motor 3
	Pin motor_3_a{MOTOR_3_L_GPIO_Port, MOTOR_3_L_Pin};
 8000e78:	4a45      	ldr	r2, [pc, #276]	; (8000f90 <PID3Node+0x120>)
 8000e7a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000e7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e82:	e883 0003 	stmia.w	r3, {r0, r1}
	Pin motor_3_b{MOTOR_3_R_GPIO_Port, MOTOR_3_R_Pin};
 8000e86:	4a43      	ldr	r2, [pc, #268]	; (8000f94 <PID3Node+0x124>)
 8000e88:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000e8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e90:	e883 0003 	stmia.w	r3, {r0, r1}

	// Timer definition for motor 3
	MotorChannel motor_3_timer{&MOTOR_3_TIMER, MOTOR_3_CHANNEL};
 8000e94:	4a40      	ldr	r2, [pc, #256]	; (8000f98 <PID3Node+0x128>)
 8000e96:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000e9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e9e:	e883 0003 	stmia.w	r3, {r0, r1}

	// Motor 3 object creation
	Motor motor3(motor_3_timer, motor_3_a, motor_3_b);
 8000ea2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000ea6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000eaa:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000eae:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8000eb2:	f7ff fbc5 	bl	8000640 <_ZN5MotorC1ER12MotorChannelR3PinS3_>

	// Encoder 3 object creation
	Encoder encoder3(&ENCODER_3_TIMER, ENCODER_3_STEPS);
 8000eb6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000eba:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8000f9c <PID3Node+0x12c>
 8000ebe:	4938      	ldr	r1, [pc, #224]	; (8000fa0 <PID3Node+0x130>)
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fb71 	bl	80005a8 <_ZN7EncoderC1EP17TIM_HandleTypeDeff>

	// PID 3 object creation
	PID pid3(KP_CONST_3, KD_CONST_3, KI_CONST_3, MAX_PID_OUTPUT, MIN_PID_OUTPUT, PID_UPDATE_TIME_S);
 8000ec6:	f107 030c 	add.w	r3, r7, #12
 8000eca:	eddf 2a36 	vldr	s5, [pc, #216]	; 8000fa4 <PID3Node+0x134>
 8000ece:	ed9f 2a36 	vldr	s4, [pc, #216]	; 8000fa8 <PID3Node+0x138>
 8000ed2:	eddf 1a36 	vldr	s3, [pc, #216]	; 8000fac <PID3Node+0x13c>
 8000ed6:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8000eda:	eddf 0a35 	vldr	s1, [pc, #212]	; 8000fb0 <PID3Node+0x140>
 8000ede:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8000fb4 <PID3Node+0x144>
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fdc0 	bl	8000a68 <_ZN3PIDC1Effffff>

	//float current_angle = 0, output_pid_3 = 0;

	while(1){
		if(robot_info_handler->angle_3 == 0){
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	edd3 7a02 	vldr	s15, [r3, #8]
 8000eee:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef6:	d105      	bne.n	8000f04 <PID3Node+0x94>
			motor3.goHomePosition();
 8000ef8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fc6f 	bl	80007e0 <_ZN5Motor14goHomePositionEv>
 8000f02:	e040      	b.n	8000f86 <PID3Node+0x116>
		}
		else{
			current_angle = encoder3.getAngle();
 8000f04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fb6d 	bl	80005e8 <_ZN7Encoder8getAngleEv>
 8000f0e:	eef0 7a40 	vmov.f32	s15, s0
 8000f12:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <PID3Node+0x148>)
 8000f14:	edc3 7a00 	vstr	s15, [r3]
			output_pid_3 = pid3.updatePID(robot_info_handler->angle_3, current_angle);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f1e:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <PID3Node+0x148>)
 8000f20:	ed93 7a00 	vldr	s14, [r3]
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	eef0 0a47 	vmov.f32	s1, s14
 8000f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fdd7 	bl	8000ae4 <_ZN3PID9updatePIDEff>
 8000f36:	eef0 7a40 	vmov.f32	s15, s0
 8000f3a:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <PID3Node+0x14c>)
 8000f3c:	edc3 7a00 	vstr	s15, [r3]
			if(output_pid_3 > 0) motor3.turnLeft(output_pid_3);
 8000f40:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <PID3Node+0x14c>)
 8000f42:	edd3 7a00 	vldr	s15, [r3]
 8000f46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f4e:	dd0c      	ble.n	8000f6a <PID3Node+0xfa>
 8000f50:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <PID3Node+0x14c>)
 8000f52:	edd3 7a00 	vldr	s15, [r3]
 8000f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f5a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f5e:	ee17 1a90 	vmov	r1, s15
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fb98 	bl	8000698 <_ZN5Motor8turnLeftEm>
 8000f68:	e00d      	b.n	8000f86 <PID3Node+0x116>
			else motor3.turnRight(-output_pid_3);
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <PID3Node+0x14c>)
 8000f6c:	edd3 7a00 	vldr	s15, [r3]
 8000f70:	eef1 7a67 	vneg.f32	s15, s15
 8000f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f7c:	ee17 1a90 	vmov	r1, s15
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fbdb 	bl	800073c <_ZN5Motor9turnRightEm>
		}
		osDelay(PID_UPDATE_TIME_mS);
 8000f86:	203c      	movs	r0, #60	; 0x3c
 8000f88:	f004 f843 	bl	8005012 <osDelay>
		if(robot_info_handler->angle_3 == 0){
 8000f8c:	e7ac      	b.n	8000ee8 <PID3Node+0x78>
 8000f8e:	bf00      	nop
 8000f90:	08007760 	.word	0x08007760
 8000f94:	08007768 	.word	0x08007768
 8000f98:	08007770 	.word	0x08007770
 8000f9c:	45872000 	.word	0x45872000
 8000fa0:	20004158 	.word	0x20004158
 8000fa4:	3d75c28f 	.word	0x3d75c28f
 8000fa8:	c47a0000 	.word	0xc47a0000
 8000fac:	447a0000 	.word	0x447a0000
 8000fb0:	3e4ccccd 	.word	0x3e4ccccd
 8000fb4:	42b40000 	.word	0x42b40000
 8000fb8:	20000050 	.word	0x20000050
 8000fbc:	20000054 	.word	0x20000054

08000fc0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4a07      	ldr	r2, [pc, #28]	; (8000fec <vApplicationGetIdleTaskMemory+0x2c>)
 8000fd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <vApplicationGetIdleTaskMemory+0x30>)
 8000fd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2280      	movs	r2, #128	; 0x80
 8000fdc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fde:	bf00      	nop
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000058 	.word	0x20000058
 8000ff0:	200000ac 	.word	0x200000ac

08000ff4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ff4:	b5b0      	push	{r4, r5, r7, lr}
 8000ff6:	b0a6      	sub	sp, #152	; 0x98
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of mutex */
  osMutexDef(mutex);
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001000:	2300      	movs	r3, #0
 8001002:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  mutexHandle = osMutexCreate(osMutex(mutex));
 8001006:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800100a:	4618      	mov	r0, r3
 800100c:	f004 f815 	bl	800503a <osMutexCreate>
 8001010:	4603      	mov	r3, r0
 8001012:	4a31      	ldr	r2, [pc, #196]	; (80010d8 <MX_FREERTOS_Init+0xe4>)
 8001014:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8001016:	4b31      	ldr	r3, [pc, #196]	; (80010dc <MX_FREERTOS_Init+0xe8>)
 8001018:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800101c:	461d      	mov	r5, r3
 800101e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001022:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001026:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800102a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f003 ffa2 	bl	8004f7a <osThreadCreate>
 8001036:	4603      	mov	r3, r0
 8001038:	4a29      	ldr	r2, [pc, #164]	; (80010e0 <MX_FREERTOS_Init+0xec>)
 800103a:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskPID1 */
  osThreadDef(taskPID1, startPID1, osPriorityIdle, 0, 512);
 800103c:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <MX_FREERTOS_Init+0xf0>)
 800103e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001042:	461d      	mov	r5, r3
 8001044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001048:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800104c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskPID1Handle = osThreadCreate(osThread(taskPID1), NULL);
 8001050:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f003 ff8f 	bl	8004f7a <osThreadCreate>
 800105c:	4603      	mov	r3, r0
 800105e:	4a22      	ldr	r2, [pc, #136]	; (80010e8 <MX_FREERTOS_Init+0xf4>)
 8001060:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskPID2 */
  osThreadDef(taskPID2, startPID2, osPriorityIdle, 0, 512);
 8001062:	4b22      	ldr	r3, [pc, #136]	; (80010ec <MX_FREERTOS_Init+0xf8>)
 8001064:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001068:	461d      	mov	r5, r3
 800106a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800106c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800106e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001072:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskPID2Handle = osThreadCreate(osThread(taskPID2), NULL);
 8001076:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f003 ff7c 	bl	8004f7a <osThreadCreate>
 8001082:	4603      	mov	r3, r0
 8001084:	4a1a      	ldr	r2, [pc, #104]	; (80010f0 <MX_FREERTOS_Init+0xfc>)
 8001086:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskPID3 */
  osThreadDef(taskPID3, startPID3, osPriorityNormal, 0, 512);
 8001088:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <MX_FREERTOS_Init+0x100>)
 800108a:	f107 0420 	add.w	r4, r7, #32
 800108e:	461d      	mov	r5, r3
 8001090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001094:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001098:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskPID3Handle = osThreadCreate(osThread(taskPID3), NULL);
 800109c:	f107 0320 	add.w	r3, r7, #32
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f003 ff69 	bl	8004f7a <osThreadCreate>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <MX_FREERTOS_Init+0x104>)
 80010ac:	6013      	str	r3, [r2, #0]

  /* definition and creation of ROSComms */
  osThreadDef(ROSComms, startROSComms, osPriorityNormal, 0, 1024);
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <MX_FREERTOS_Init+0x108>)
 80010b0:	1d3c      	adds	r4, r7, #4
 80010b2:	461d      	mov	r5, r3
 80010b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ROSCommsHandle = osThreadCreate(osThread(ROSComms), NULL);
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f003 ff58 	bl	8004f7a <osThreadCreate>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4a0c      	ldr	r2, [pc, #48]	; (8001100 <MX_FREERTOS_Init+0x10c>)
 80010ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80010d0:	bf00      	nop
 80010d2:	3798      	adds	r7, #152	; 0x98
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bdb0      	pop	{r4, r5, r7, pc}
 80010d8:	2000400c 	.word	0x2000400c
 80010dc:	080077b4 	.word	0x080077b4
 80010e0:	20004000 	.word	0x20004000
 80010e4:	080077d0 	.word	0x080077d0
 80010e8:	20004008 	.word	0x20004008
 80010ec:	080077ec 	.word	0x080077ec
 80010f0:	20004014 	.word	0x20004014
 80010f4:	08007808 	.word	0x08007808
 80010f8:	20004004 	.word	0x20004004
 80010fc:	08007824 	.word	0x08007824
 8001100:	20004010 	.word	0x20004010

08001104 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 800110c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001110:	4803      	ldr	r0, [pc, #12]	; (8001120 <StartDefaultTask+0x1c>)
 8001112:	f001 fa8a 	bl	800262a <HAL_GPIO_TogglePin>
    osDelay(2000);
 8001116:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800111a:	f003 ff7a 	bl	8005012 <osDelay>
	HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 800111e:	e7f5      	b.n	800110c <StartDefaultTask+0x8>
 8001120:	40021000 	.word	0x40021000

08001124 <startPID1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPID1 */
void startPID1(void const * argument)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPID1 */
	PID1Node(&robot_info_handler);
 800112c:	4803      	ldr	r0, [pc, #12]	; (800113c <startPID1+0x18>)
 800112e:	f7ff fd63 	bl	8000bf8 <PID1Node>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8001132:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001136:	f003 ff6c 	bl	8005012 <osDelay>
 800113a:	e7fa      	b.n	8001132 <startPID1+0xe>
 800113c:	20004018 	.word	0x20004018

08001140 <startPID2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPID2 */
void startPID2(void const * argument)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPID2 */
	PID2Node(&robot_info_handler);
 8001148:	4803      	ldr	r0, [pc, #12]	; (8001158 <startPID2+0x18>)
 800114a:	f7ff fdf7 	bl	8000d3c <PID2Node>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 800114e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001152:	f003 ff5e 	bl	8005012 <osDelay>
 8001156:	e7fa      	b.n	800114e <startPID2+0xe>
 8001158:	20004018 	.word	0x20004018

0800115c <startPID3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPID3 */
void startPID3(void const * argument)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPID3 */
	PID3Node(&robot_info_handler);
 8001164:	4803      	ldr	r0, [pc, #12]	; (8001174 <startPID3+0x18>)
 8001166:	f7ff fe83 	bl	8000e70 <PID3Node>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 800116a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800116e:	f003 ff50 	bl	8005012 <osDelay>
 8001172:	e7fa      	b.n	800116a <startPID3+0xe>
 8001174:	20004018 	.word	0x20004018

08001178 <startROSComms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startROSComms */
void startROSComms(void const * argument)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startROSComms */
	robotInfoInit(&robot_info_handler, &mutexHandle);
 8001180:	4905      	ldr	r1, [pc, #20]	; (8001198 <startROSComms+0x20>)
 8001182:	4806      	ldr	r0, [pc, #24]	; (800119c <startROSComms+0x24>)
 8001184:	f7ff f9a0 	bl	80004c8 <robotInfoInit>
	startSerialComms(&robot_info_handler);
 8001188:	4804      	ldr	r0, [pc, #16]	; (800119c <startROSComms+0x24>)
 800118a:	f7ff fbbf 	bl	800090c <startSerialComms>
  /* Infinite loop */
  for(;;)
  {
	osDelay(1);
 800118e:	2001      	movs	r0, #1
 8001190:	f003 ff3f 	bl	8005012 <osDelay>
 8001194:	e7fb      	b.n	800118e <startROSComms+0x16>
 8001196:	bf00      	nop
 8001198:	2000400c 	.word	0x2000400c
 800119c:	20004018 	.word	0x20004018

080011a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08c      	sub	sp, #48	; 0x30
 80011a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
 80011ba:	4b6a      	ldr	r3, [pc, #424]	; (8001364 <MX_GPIO_Init+0x1c4>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a69      	ldr	r2, [pc, #420]	; (8001364 <MX_GPIO_Init+0x1c4>)
 80011c0:	f043 0310 	orr.w	r3, r3, #16
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b67      	ldr	r3, [pc, #412]	; (8001364 <MX_GPIO_Init+0x1c4>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0310 	and.w	r3, r3, #16
 80011ce:	61bb      	str	r3, [r7, #24]
 80011d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	4b63      	ldr	r3, [pc, #396]	; (8001364 <MX_GPIO_Init+0x1c4>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a62      	ldr	r2, [pc, #392]	; (8001364 <MX_GPIO_Init+0x1c4>)
 80011dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b60      	ldr	r3, [pc, #384]	; (8001364 <MX_GPIO_Init+0x1c4>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	4b5c      	ldr	r3, [pc, #368]	; (8001364 <MX_GPIO_Init+0x1c4>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a5b      	ldr	r2, [pc, #364]	; (8001364 <MX_GPIO_Init+0x1c4>)
 80011f8:	f043 0304 	orr.w	r3, r3, #4
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b59      	ldr	r3, [pc, #356]	; (8001364 <MX_GPIO_Init+0x1c4>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b55      	ldr	r3, [pc, #340]	; (8001364 <MX_GPIO_Init+0x1c4>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a54      	ldr	r2, [pc, #336]	; (8001364 <MX_GPIO_Init+0x1c4>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b52      	ldr	r3, [pc, #328]	; (8001364 <MX_GPIO_Init+0x1c4>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	4b4e      	ldr	r3, [pc, #312]	; (8001364 <MX_GPIO_Init+0x1c4>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a4d      	ldr	r2, [pc, #308]	; (8001364 <MX_GPIO_Init+0x1c4>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b4b      	ldr	r3, [pc, #300]	; (8001364 <MX_GPIO_Init+0x1c4>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b47      	ldr	r3, [pc, #284]	; (8001364 <MX_GPIO_Init+0x1c4>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a46      	ldr	r2, [pc, #280]	; (8001364 <MX_GPIO_Init+0x1c4>)
 800124c:	f043 0308 	orr.w	r3, r3, #8
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b44      	ldr	r3, [pc, #272]	; (8001364 <MX_GPIO_Init+0x1c4>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MOTOR_2_R_Pin|MOTOR_2_L_Pin|GPIO_PIN_7|LED_2_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	f248 0194 	movw	r1, #32916	; 0x8094
 8001264:	4840      	ldr	r0, [pc, #256]	; (8001368 <MX_GPIO_Init+0x1c8>)
 8001266:	f001 f9c7 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|MOTOR_1_R_Pin, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	210a      	movs	r1, #10
 800126e:	483f      	ldr	r0, [pc, #252]	; (800136c <MX_GPIO_Init+0x1cc>)
 8001270:	f001 f9c2 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_1_L_GPIO_Port, MOTOR_1_L_Pin, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	2110      	movs	r1, #16
 8001278:	483d      	ldr	r0, [pc, #244]	; (8001370 <MX_GPIO_Init+0x1d0>)
 800127a:	f001 f9bd 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001284:	483b      	ldr	r0, [pc, #236]	; (8001374 <MX_GPIO_Init+0x1d4>)
 8001286:	f001 f9b7 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR_3_R_Pin|MOTOR_3_L_Pin, GPIO_PIN_RESET);
 800128a:	2200      	movs	r2, #0
 800128c:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8001290:	4839      	ldr	r0, [pc, #228]	; (8001378 <MX_GPIO_Init+0x1d8>)
 8001292:	f001 f9b1 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PE7 PEPin */
  GPIO_InitStruct.Pin = MOTOR_2_R_Pin|MOTOR_2_L_Pin|GPIO_PIN_7|LED_2_Pin;
 8001296:	f248 0394 	movw	r3, #32916	; 0x8094
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129c:	2301      	movs	r3, #1
 800129e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	4619      	mov	r1, r3
 80012ae:	482e      	ldr	r0, [pc, #184]	; (8001368 <MX_GPIO_Init+0x1c8>)
 80012b0:	f000 ffee 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|MOTOR_1_R_Pin;
 80012b4:	230a      	movs	r3, #10
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	4619      	mov	r1, r3
 80012ca:	4828      	ldr	r0, [pc, #160]	; (800136c <MX_GPIO_Init+0x1cc>)
 80012cc:	f000 ffe0 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_1_L_Pin;
 80012d0:	2310      	movs	r3, #16
 80012d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MOTOR_1_L_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	4619      	mov	r1, r3
 80012e6:	4822      	ldr	r0, [pc, #136]	; (8001370 <MX_GPIO_Init+0x1d0>)
 80012e8:	f000 ffd2 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80012ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f2:	2300      	movs	r3, #0
 80012f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80012fa:	f107 031c 	add.w	r3, r7, #28
 80012fe:	4619      	mov	r1, r3
 8001300:	4819      	ldr	r0, [pc, #100]	; (8001368 <MX_GPIO_Init+0x1c8>)
 8001302:	f000 ffc5 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001306:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	2301      	movs	r3, #1
 800130e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4619      	mov	r1, r3
 800131e:	4815      	ldr	r0, [pc, #84]	; (8001374 <MX_GPIO_Init+0x1d4>)
 8001320:	f000 ffb6 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = MOTOR_3_R_Pin|MOTOR_3_L_Pin;
 8001324:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132a:	2301      	movs	r3, #1
 800132c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001336:	f107 031c 	add.w	r3, r7, #28
 800133a:	4619      	mov	r1, r3
 800133c:	480e      	ldr	r0, [pc, #56]	; (8001378 <MX_GPIO_Init+0x1d8>)
 800133e:	f000 ffa7 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = HALL_SENSOR_3_Pin|HALL_SENSOR_2_Pin|HALL_SENSOR_1_Pin;
 8001342:	23e0      	movs	r3, #224	; 0xe0
 8001344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	4619      	mov	r1, r3
 8001354:	4808      	ldr	r0, [pc, #32]	; (8001378 <MX_GPIO_Init+0x1d8>)
 8001356:	f000 ff9b 	bl	8002290 <HAL_GPIO_Init>

}
 800135a:	bf00      	nop
 800135c:	3730      	adds	r7, #48	; 0x30
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	40021000 	.word	0x40021000
 800136c:	40020800 	.word	0x40020800
 8001370:	40020000 	.word	0x40020000
 8001374:	40020400 	.word	0x40020400
 8001378:	40020c00 	.word	0x40020c00

0800137c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <MX_I2C1_Init+0x50>)
 8001382:	4a13      	ldr	r2, [pc, #76]	; (80013d0 <MX_I2C1_Init+0x54>)
 8001384:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_I2C1_Init+0x50>)
 8001388:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <MX_I2C1_Init+0x58>)
 800138a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_I2C1_Init+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_I2C1_Init+0x50>)
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_I2C1_Init+0x50>)
 800139a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800139e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <MX_I2C1_Init+0x50>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_I2C1_Init+0x50>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <MX_I2C1_Init+0x50>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_I2C1_Init+0x50>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013b8:	4804      	ldr	r0, [pc, #16]	; (80013cc <MX_I2C1_Init+0x50>)
 80013ba:	f001 f951 	bl	8002660 <HAL_I2C_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013c4:	f000 f8e8 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	2000402c 	.word	0x2000402c
 80013d0:	40005400 	.word	0x40005400
 80013d4:	000186a0 	.word	0x000186a0

080013d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	; 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a19      	ldr	r2, [pc, #100]	; (800145c <HAL_I2C_MspInit+0x84>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d12b      	bne.n	8001452 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <HAL_I2C_MspInit+0x88>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a17      	ldr	r2, [pc, #92]	; (8001460 <HAL_I2C_MspInit+0x88>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_I2C_MspInit+0x88>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001416:	23c0      	movs	r3, #192	; 0xc0
 8001418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800141a:	2312      	movs	r3, #18
 800141c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800141e:	2301      	movs	r3, #1
 8001420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001426:	2304      	movs	r3, #4
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4619      	mov	r1, r3
 8001430:	480c      	ldr	r0, [pc, #48]	; (8001464 <HAL_I2C_MspInit+0x8c>)
 8001432:	f000 ff2d 	bl	8002290 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_I2C_MspInit+0x88>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	4a08      	ldr	r2, [pc, #32]	; (8001460 <HAL_I2C_MspInit+0x88>)
 8001440:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001444:	6413      	str	r3, [r2, #64]	; 0x40
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_I2C_MspInit+0x88>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001452:	bf00      	nop
 8001454:	3728      	adds	r7, #40	; 0x28
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40005400 	.word	0x40005400
 8001460:	40023800 	.word	0x40023800
 8001464:	40020400 	.word	0x40020400

08001468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800146c:	f000 fd5a 	bl	8001f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001470:	f000 f816 	bl	80014a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001474:	f7ff fe94 	bl	80011a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001478:	f000 fc24 	bl	8001cc4 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800147c:	f000 fa20 	bl	80018c0 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001480:	f000 f95c 	bl	800173c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001484:	f000 f9c8 	bl	8001818 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001488:	f000 fa6e 	bl	8001968 <MX_TIM8_Init>
  MX_UART5_Init();
 800148c:	f000 fbf0 	bl	8001c70 <MX_UART5_Init>
  MX_I2C1_Init();
 8001490:	f7ff ff74 	bl	800137c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001494:	f7ff fdae 	bl	8000ff4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001498:	f003 fd68 	bl	8004f6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800149c:	e7fe      	b.n	800149c <main+0x34>
	...

080014a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b094      	sub	sp, #80	; 0x50
 80014a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a6:	f107 0320 	add.w	r3, r7, #32
 80014aa:	2230      	movs	r2, #48	; 0x30
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f006 f92e 	bl	8007710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	4b28      	ldr	r3, [pc, #160]	; (800156c <SystemClock_Config+0xcc>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	4a27      	ldr	r2, [pc, #156]	; (800156c <SystemClock_Config+0xcc>)
 80014ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d2:	6413      	str	r3, [r2, #64]	; 0x40
 80014d4:	4b25      	ldr	r3, [pc, #148]	; (800156c <SystemClock_Config+0xcc>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	4b22      	ldr	r3, [pc, #136]	; (8001570 <SystemClock_Config+0xd0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a21      	ldr	r2, [pc, #132]	; (8001570 <SystemClock_Config+0xd0>)
 80014ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <SystemClock_Config+0xd0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014fc:	2301      	movs	r3, #1
 80014fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001500:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001506:	2302      	movs	r3, #2
 8001508:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800150a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800150e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001510:	2304      	movs	r3, #4
 8001512:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001514:	23a8      	movs	r3, #168	; 0xa8
 8001516:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001518:	2302      	movs	r3, #2
 800151a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800151c:	2304      	movs	r3, #4
 800151e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001520:	f107 0320 	add.w	r3, r7, #32
 8001524:	4618      	mov	r0, r3
 8001526:	f001 f9df 	bl	80028e8 <HAL_RCC_OscConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001530:	f000 f832 	bl	8001598 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001534:	230f      	movs	r3, #15
 8001536:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001538:	2302      	movs	r3, #2
 800153a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001540:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001544:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001546:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	2105      	movs	r1, #5
 8001552:	4618      	mov	r0, r3
 8001554:	f001 fc40 	bl	8002dd8 <HAL_RCC_ClockConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800155e:	f000 f81b 	bl	8001598 <Error_Handler>
  }
}
 8001562:	bf00      	nop
 8001564:	3750      	adds	r7, #80	; 0x50
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800
 8001570:	40007000 	.word	0x40007000

08001574 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a04      	ldr	r2, [pc, #16]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d101      	bne.n	800158a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001586:	f000 fcef 	bl	8001f68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40010000 	.word	0x40010000

08001598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_MspInit+0x54>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	4a11      	ldr	r2, [pc, #68]	; (80015fc <HAL_MspInit+0x54>)
 80015b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015bc:	6453      	str	r3, [r2, #68]	; 0x44
 80015be:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <HAL_MspInit+0x54>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	603b      	str	r3, [r7, #0]
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <HAL_MspInit+0x54>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <HAL_MspInit+0x54>)
 80015d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d8:	6413      	str	r3, [r2, #64]	; 0x40
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <HAL_MspInit+0x54>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	210f      	movs	r1, #15
 80015ea:	f06f 0001 	mvn.w	r0, #1
 80015ee:	f000 fd93 	bl	8002118 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800

08001600 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08c      	sub	sp, #48	; 0x30
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001610:	2200      	movs	r2, #0
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	2019      	movs	r0, #25
 8001616:	f000 fd7f 	bl	8002118 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800161a:	2019      	movs	r0, #25
 800161c:	f000 fd98 	bl	8002150 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <HAL_InitTick+0xa4>)
 8001626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001628:	4a1e      	ldr	r2, [pc, #120]	; (80016a4 <HAL_InitTick+0xa4>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6453      	str	r3, [r2, #68]	; 0x44
 8001630:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <HAL_InitTick+0xa4>)
 8001632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800163c:	f107 0210 	add.w	r2, r7, #16
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4611      	mov	r1, r2
 8001646:	4618      	mov	r0, r3
 8001648:	f001 fdc2 	bl	80031d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800164c:	f001 fdac 	bl	80031a8 <HAL_RCC_GetPCLK2Freq>
 8001650:	4603      	mov	r3, r0
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001658:	4a13      	ldr	r2, [pc, #76]	; (80016a8 <HAL_InitTick+0xa8>)
 800165a:	fba2 2303 	umull	r2, r3, r2, r3
 800165e:	0c9b      	lsrs	r3, r3, #18
 8001660:	3b01      	subs	r3, #1
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HAL_InitTick+0xac>)
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <HAL_InitTick+0xb0>)
 8001668:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <HAL_InitTick+0xac>)
 800166c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001670:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001672:	4a0e      	ldr	r2, [pc, #56]	; (80016ac <HAL_InitTick+0xac>)
 8001674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001676:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <HAL_InitTick+0xac>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <HAL_InitTick+0xac>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001684:	4809      	ldr	r0, [pc, #36]	; (80016ac <HAL_InitTick+0xac>)
 8001686:	f001 fdd5 	bl	8003234 <HAL_TIM_Base_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d104      	bne.n	800169a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001690:	4806      	ldr	r0, [pc, #24]	; (80016ac <HAL_InitTick+0xac>)
 8001692:	f001 fe29 	bl	80032e8 <HAL_TIM_Base_Start_IT>
 8001696:	4603      	mov	r3, r0
 8001698:	e000      	b.n	800169c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
}
 800169c:	4618      	mov	r0, r3
 800169e:	3730      	adds	r7, #48	; 0x30
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40023800 	.word	0x40023800
 80016a8:	431bde83 	.word	0x431bde83
 80016ac:	20004080 	.word	0x20004080
 80016b0:	40010000 	.word	0x40010000

080016b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <HardFault_Handler+0x4>

080016c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <MemManage_Handler+0x4>

080016ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <BusFault_Handler+0x4>

080016d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <UsageFault_Handler+0x4>

080016da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80016ee:	f002 f8b7 	bl	8003860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20004080 	.word	0x20004080

080016fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <USART2_IRQHandler+0x10>)
 8001702:	f002 feb1 	bl	8004468 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	2000422c 	.word	0x2000422c

08001710 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <SystemInit+0x28>)
 8001716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800171a:	4a07      	ldr	r2, [pc, #28]	; (8001738 <SystemInit+0x28>)
 800171c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001720:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <SystemInit+0x28>)
 8001726:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800172a:	609a      	str	r2, [r3, #8]
#endif
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	; 0x28
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001742:	f107 0320 	add.w	r3, r7, #32
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
 8001758:	611a      	str	r2, [r3, #16]
 800175a:	615a      	str	r2, [r3, #20]
 800175c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800175e:	4b2d      	ldr	r3, [pc, #180]	; (8001814 <MX_TIM2_Init+0xd8>)
 8001760:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001764:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001766:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <MX_TIM2_Init+0xd8>)
 8001768:	2253      	movs	r2, #83	; 0x53
 800176a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176c:	4b29      	ldr	r3, [pc, #164]	; (8001814 <MX_TIM2_Init+0xd8>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001772:	4b28      	ldr	r3, [pc, #160]	; (8001814 <MX_TIM2_Init+0xd8>)
 8001774:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001778:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177a:	4b26      	ldr	r3, [pc, #152]	; (8001814 <MX_TIM2_Init+0xd8>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001780:	4b24      	ldr	r3, [pc, #144]	; (8001814 <MX_TIM2_Init+0xd8>)
 8001782:	2200      	movs	r2, #0
 8001784:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001786:	4823      	ldr	r0, [pc, #140]	; (8001814 <MX_TIM2_Init+0xd8>)
 8001788:	f001 fe1e 	bl	80033c8 <HAL_TIM_PWM_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001792:	f7ff ff01 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001796:	2300      	movs	r3, #0
 8001798:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800179e:	f107 0320 	add.w	r3, r7, #32
 80017a2:	4619      	mov	r1, r3
 80017a4:	481b      	ldr	r0, [pc, #108]	; (8001814 <MX_TIM2_Init+0xd8>)
 80017a6:	f002 fcbf 	bl	8004128 <HAL_TIMEx_MasterConfigSynchronization>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80017b0:	f7ff fef2 	bl	8001598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017b4:	2360      	movs	r3, #96	; 0x60
 80017b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	2200      	movs	r2, #0
 80017c8:	4619      	mov	r1, r3
 80017ca:	4812      	ldr	r0, [pc, #72]	; (8001814 <MX_TIM2_Init+0xd8>)
 80017cc:	f002 f950 	bl	8003a70 <HAL_TIM_PWM_ConfigChannel>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80017d6:	f7ff fedf 	bl	8001598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	2204      	movs	r2, #4
 80017de:	4619      	mov	r1, r3
 80017e0:	480c      	ldr	r0, [pc, #48]	; (8001814 <MX_TIM2_Init+0xd8>)
 80017e2:	f002 f945 	bl	8003a70 <HAL_TIM_PWM_ConfigChannel>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80017ec:	f7ff fed4 	bl	8001598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	2208      	movs	r2, #8
 80017f4:	4619      	mov	r1, r3
 80017f6:	4807      	ldr	r0, [pc, #28]	; (8001814 <MX_TIM2_Init+0xd8>)
 80017f8:	f002 f93a 	bl	8003a70 <HAL_TIM_PWM_ConfigChannel>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001802:	f7ff fec9 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001806:	4803      	ldr	r0, [pc, #12]	; (8001814 <MX_TIM2_Init+0xd8>)
 8001808:	f000 f9da 	bl	8001bc0 <HAL_TIM_MspPostInit>

}
 800180c:	bf00      	nop
 800180e:	3728      	adds	r7, #40	; 0x28
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200041a0 	.word	0x200041a0

08001818 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08c      	sub	sp, #48	; 0x30
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800181e:	f107 030c 	add.w	r3, r7, #12
 8001822:	2224      	movs	r2, #36	; 0x24
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f005 ff72 	bl	8007710 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001834:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <MX_TIM3_Init+0xa0>)
 8001836:	4a21      	ldr	r2, [pc, #132]	; (80018bc <MX_TIM3_Init+0xa4>)
 8001838:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800183a:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <MX_TIM3_Init+0xa0>)
 800183c:	2200      	movs	r2, #0
 800183e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001840:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <MX_TIM3_Init+0xa0>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <MX_TIM3_Init+0xa0>)
 8001848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800184c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800184e:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <MX_TIM3_Init+0xa0>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <MX_TIM3_Init+0xa0>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800185a:	2301      	movs	r3, #1
 800185c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001862:	2301      	movs	r3, #1
 8001864:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001866:	2300      	movs	r3, #0
 8001868:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800186e:	2300      	movs	r3, #0
 8001870:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001872:	2301      	movs	r3, #1
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001876:	2300      	movs	r3, #0
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800187e:	f107 030c 	add.w	r3, r7, #12
 8001882:	4619      	mov	r1, r3
 8001884:	480c      	ldr	r0, [pc, #48]	; (80018b8 <MX_TIM3_Init+0xa0>)
 8001886:	f001 feb7 	bl	80035f8 <HAL_TIM_Encoder_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001890:	f7ff fe82 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001894:	2300      	movs	r3, #0
 8001896:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	4619      	mov	r1, r3
 80018a0:	4805      	ldr	r0, [pc, #20]	; (80018b8 <MX_TIM3_Init+0xa0>)
 80018a2:	f002 fc41 	bl	8004128 <HAL_TIMEx_MasterConfigSynchronization>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80018ac:	f7ff fe74 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018b0:	bf00      	nop
 80018b2:	3730      	adds	r7, #48	; 0x30
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20004158 	.word	0x20004158
 80018bc:	40000400 	.word	0x40000400

080018c0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08c      	sub	sp, #48	; 0x30
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	2224      	movs	r2, #36	; 0x24
 80018cc:	2100      	movs	r1, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f005 ff1e 	bl	8007710 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018dc:	4b20      	ldr	r3, [pc, #128]	; (8001960 <MX_TIM4_Init+0xa0>)
 80018de:	4a21      	ldr	r2, [pc, #132]	; (8001964 <MX_TIM4_Init+0xa4>)
 80018e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80018e2:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <MX_TIM4_Init+0xa0>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e8:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <MX_TIM4_Init+0xa0>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20127;
 80018ee:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <MX_TIM4_Init+0xa0>)
 80018f0:	f644 629f 	movw	r2, #20127	; 0x4e9f
 80018f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f6:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <MX_TIM4_Init+0xa0>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fc:	4b18      	ldr	r3, [pc, #96]	; (8001960 <MX_TIM4_Init+0xa0>)
 80018fe:	2200      	movs	r2, #0
 8001900:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001902:	2301      	movs	r3, #1
 8001904:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800190a:	2301      	movs	r3, #1
 800190c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800190e:	2300      	movs	r3, #0
 8001910:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001912:	230f      	movs	r3, #15
 8001914:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001916:	2300      	movs	r3, #0
 8001918:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800191a:	2301      	movs	r3, #1
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800191e:	2300      	movs	r3, #0
 8001920:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001922:	230f      	movs	r3, #15
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001926:	f107 030c 	add.w	r3, r7, #12
 800192a:	4619      	mov	r1, r3
 800192c:	480c      	ldr	r0, [pc, #48]	; (8001960 <MX_TIM4_Init+0xa0>)
 800192e:	f001 fe63 	bl	80035f8 <HAL_TIM_Encoder_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001938:	f7ff fe2e 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193c:	2300      	movs	r3, #0
 800193e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001944:	1d3b      	adds	r3, r7, #4
 8001946:	4619      	mov	r1, r3
 8001948:	4805      	ldr	r0, [pc, #20]	; (8001960 <MX_TIM4_Init+0xa0>)
 800194a:	f002 fbed 	bl	8004128 <HAL_TIMEx_MasterConfigSynchronization>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001954:	f7ff fe20 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001958:	bf00      	nop
 800195a:	3730      	adds	r7, #48	; 0x30
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20004110 	.word	0x20004110
 8001964:	40000800 	.word	0x40000800

08001968 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08c      	sub	sp, #48	; 0x30
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800196e:	f107 030c 	add.w	r3, r7, #12
 8001972:	2224      	movs	r2, #36	; 0x24
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f005 feca 	bl	8007710 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001984:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <MX_TIM8_Init+0xa8>)
 8001986:	4a23      	ldr	r2, [pc, #140]	; (8001a14 <MX_TIM8_Init+0xac>)
 8001988:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800198a:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <MX_TIM8_Init+0xa8>)
 800198c:	2200      	movs	r2, #0
 800198e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001990:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <MX_TIM8_Init+0xa8>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001996:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <MX_TIM8_Init+0xa8>)
 8001998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800199c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199e:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <MX_TIM8_Init+0xa8>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80019a4:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <MX_TIM8_Init+0xa8>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019aa:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <MX_TIM8_Init+0xa8>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80019b0:	2301      	movs	r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019b4:	2300      	movs	r3, #0
 80019b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019b8:	2301      	movs	r3, #1
 80019ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019bc:	2300      	movs	r3, #0
 80019be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019c8:	2301      	movs	r3, #1
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019cc:	2300      	movs	r3, #0
 80019ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80019d4:	f107 030c 	add.w	r3, r7, #12
 80019d8:	4619      	mov	r1, r3
 80019da:	480d      	ldr	r0, [pc, #52]	; (8001a10 <MX_TIM8_Init+0xa8>)
 80019dc:	f001 fe0c 	bl	80035f8 <HAL_TIM_Encoder_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80019e6:	f7ff fdd7 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ea:	2300      	movs	r3, #0
 80019ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	4619      	mov	r1, r3
 80019f6:	4806      	ldr	r0, [pc, #24]	; (8001a10 <MX_TIM8_Init+0xa8>)
 80019f8:	f002 fb96 	bl	8004128 <HAL_TIMEx_MasterConfigSynchronization>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001a02:	f7ff fdc9 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001a06:	bf00      	nop
 8001a08:	3730      	adds	r7, #48	; 0x30
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200040c8 	.word	0x200040c8
 8001a14:	40010400 	.word	0x40010400

08001a18 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a28:	d10d      	bne.n	8001a46 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	4a08      	ldr	r2, [pc, #32]	; (8001a54 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800

08001a58 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08e      	sub	sp, #56	; 0x38
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a4b      	ldr	r2, [pc, #300]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x14c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d12c      	bne.n	8001ad4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
 8001a7e:	4b4a      	ldr	r3, [pc, #296]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	4a49      	ldr	r2, [pc, #292]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8a:	4b47      	ldr	r3, [pc, #284]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	623b      	str	r3, [r7, #32]
 8001a94:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
 8001a9a:	4b43      	ldr	r3, [pc, #268]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a42      	ldr	r2, [pc, #264]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b40      	ldr	r3, [pc, #256]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	61fb      	str	r3, [r7, #28]
 8001ab0:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ab2:	23c0      	movs	r3, #192	; 0xc0
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aca:	4619      	mov	r1, r3
 8001acc:	4837      	ldr	r0, [pc, #220]	; (8001bac <HAL_TIM_Encoder_MspInit+0x154>)
 8001ace:	f000 fbdf 	bl	8002290 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001ad2:	e063      	b.n	8001b9c <HAL_TIM_Encoder_MspInit+0x144>
  else if(tim_encoderHandle->Instance==TIM4)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a35      	ldr	r2, [pc, #212]	; (8001bb0 <HAL_TIM_Encoder_MspInit+0x158>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d12d      	bne.n	8001b3a <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61bb      	str	r3, [r7, #24]
 8001ae2:	4b31      	ldr	r3, [pc, #196]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	4a30      	ldr	r2, [pc, #192]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	6413      	str	r3, [r2, #64]	; 0x40
 8001aee:	4b2e      	ldr	r3, [pc, #184]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	61bb      	str	r3, [r7, #24]
 8001af8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a29      	ldr	r2, [pc, #164]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b04:	f043 0308 	orr.w	r3, r3, #8
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b27      	ldr	r3, [pc, #156]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001b16:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b24:	2300      	movs	r3, #0
 8001b26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b30:	4619      	mov	r1, r3
 8001b32:	4820      	ldr	r0, [pc, #128]	; (8001bb4 <HAL_TIM_Encoder_MspInit+0x15c>)
 8001b34:	f000 fbac 	bl	8002290 <HAL_GPIO_Init>
}
 8001b38:	e030      	b.n	8001b9c <HAL_TIM_Encoder_MspInit+0x144>
  else if(tim_encoderHandle->Instance==TIM8)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a1e      	ldr	r2, [pc, #120]	; (8001bb8 <HAL_TIM_Encoder_MspInit+0x160>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d12b      	bne.n	8001b9c <HAL_TIM_Encoder_MspInit+0x144>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b44:	2300      	movs	r3, #0
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4c:	4a16      	ldr	r2, [pc, #88]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b4e:	f043 0302 	orr.w	r3, r3, #2
 8001b52:	6453      	str	r3, [r2, #68]	; 0x44
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b68:	4a0f      	ldr	r2, [pc, #60]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b6a:	f043 0304 	orr.w	r3, r3, #4
 8001b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b70:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b7c:	23c0      	movs	r3, #192	; 0xc0
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b80:	2302      	movs	r3, #2
 8001b82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b94:	4619      	mov	r1, r3
 8001b96:	4809      	ldr	r0, [pc, #36]	; (8001bbc <HAL_TIM_Encoder_MspInit+0x164>)
 8001b98:	f000 fb7a 	bl	8002290 <HAL_GPIO_Init>
}
 8001b9c:	bf00      	nop
 8001b9e:	3738      	adds	r7, #56	; 0x38
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40000400 	.word	0x40000400
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40020000 	.word	0x40020000
 8001bb0:	40000800 	.word	0x40000800
 8001bb4:	40020c00 	.word	0x40020c00
 8001bb8:	40010400 	.word	0x40010400
 8001bbc:	40020800 	.word	0x40020800

08001bc0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be0:	d13c      	bne.n	8001c5c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	4b1f      	ldr	r3, [pc, #124]	; (8001c64 <HAL_TIM_MspPostInit+0xa4>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a1e      	ldr	r2, [pc, #120]	; (8001c64 <HAL_TIM_MspPostInit+0xa4>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <HAL_TIM_MspPostInit+0xa4>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <HAL_TIM_MspPostInit+0xa4>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a17      	ldr	r2, [pc, #92]	; (8001c64 <HAL_TIM_MspPostInit+0xa4>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <HAL_TIM_MspPostInit+0xa4>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_2_Pin|MOTOR_1_Pin;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2300      	movs	r3, #0
 8001c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	4619      	mov	r1, r3
 8001c34:	480c      	ldr	r0, [pc, #48]	; (8001c68 <HAL_TIM_MspPostInit+0xa8>)
 8001c36:	f000 fb2b 	bl	8002290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_3_Pin;
 8001c3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c40:	2302      	movs	r3, #2
 8001c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_3_GPIO_Port, &GPIO_InitStruct);
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	4619      	mov	r1, r3
 8001c56:	4805      	ldr	r0, [pc, #20]	; (8001c6c <HAL_TIM_MspPostInit+0xac>)
 8001c58:	f000 fb1a 	bl	8002290 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c5c:	bf00      	nop
 8001c5e:	3728      	adds	r7, #40	; 0x28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40020000 	.word	0x40020000
 8001c6c:	40020400 	.word	0x40020400

08001c70 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart2;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <MX_UART5_Init+0x4c>)
 8001c76:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <MX_UART5_Init+0x50>)
 8001c78:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <MX_UART5_Init+0x4c>)
 8001c7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c80:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <MX_UART5_Init+0x4c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <MX_UART5_Init+0x4c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <MX_UART5_Init+0x4c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <MX_UART5_Init+0x4c>)
 8001c96:	220c      	movs	r2, #12
 8001c98:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <MX_UART5_Init+0x4c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <MX_UART5_Init+0x4c>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001ca6:	4805      	ldr	r0, [pc, #20]	; (8001cbc <MX_UART5_Init+0x4c>)
 8001ca8:	f002 face 	bl	8004248 <HAL_UART_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001cb2:	f7ff fc71 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200041e8 	.word	0x200041e8
 8001cc0:	40005000 	.word	0x40005000

08001cc4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cca:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <MX_USART2_UART_Init+0x50>)
 8001ccc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cd0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001cd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cea:	220c      	movs	r2, #12
 8001cec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cee:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cfc:	f002 faa4 	bl	8004248 <HAL_UART_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d06:	f7ff fc47 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	2000422c 	.word	0x2000422c
 8001d14:	40004400 	.word	0x40004400

08001d18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08c      	sub	sp, #48	; 0x30
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 031c 	add.w	r3, r7, #28
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a45      	ldr	r2, [pc, #276]	; (8001e4c <HAL_UART_MspInit+0x134>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d14b      	bne.n	8001dd2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
 8001d3e:	4b44      	ldr	r3, [pc, #272]	; (8001e50 <HAL_UART_MspInit+0x138>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	4a43      	ldr	r2, [pc, #268]	; (8001e50 <HAL_UART_MspInit+0x138>)
 8001d44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d48:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4a:	4b41      	ldr	r3, [pc, #260]	; (8001e50 <HAL_UART_MspInit+0x138>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d52:	61bb      	str	r3, [r7, #24]
 8001d54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	4b3d      	ldr	r3, [pc, #244]	; (8001e50 <HAL_UART_MspInit+0x138>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a3c      	ldr	r2, [pc, #240]	; (8001e50 <HAL_UART_MspInit+0x138>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b3a      	ldr	r3, [pc, #232]	; (8001e50 <HAL_UART_MspInit+0x138>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	4b36      	ldr	r3, [pc, #216]	; (8001e50 <HAL_UART_MspInit+0x138>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a35      	ldr	r2, [pc, #212]	; (8001e50 <HAL_UART_MspInit+0x138>)
 8001d7c:	f043 0308 	orr.w	r3, r3, #8
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b33      	ldr	r3, [pc, #204]	; (8001e50 <HAL_UART_MspInit+0x138>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001da0:	2308      	movs	r3, #8
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	4619      	mov	r1, r3
 8001daa:	482a      	ldr	r0, [pc, #168]	; (8001e54 <HAL_UART_MspInit+0x13c>)
 8001dac:	f000 fa70 	bl	8002290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001db0:	2304      	movs	r3, #4
 8001db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001db8:	2301      	movs	r3, #1
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001dc0:	2308      	movs	r3, #8
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dc4:	f107 031c 	add.w	r3, r7, #28
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4823      	ldr	r0, [pc, #140]	; (8001e58 <HAL_UART_MspInit+0x140>)
 8001dcc:	f000 fa60 	bl	8002290 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001dd0:	e038      	b.n	8001e44 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART2)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a21      	ldr	r2, [pc, #132]	; (8001e5c <HAL_UART_MspInit+0x144>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d133      	bne.n	8001e44 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <HAL_UART_MspInit+0x138>)
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	4a1a      	ldr	r2, [pc, #104]	; (8001e50 <HAL_UART_MspInit+0x138>)
 8001de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dea:	6413      	str	r3, [r2, #64]	; 0x40
 8001dec:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <HAL_UART_MspInit+0x138>)
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <HAL_UART_MspInit+0x138>)
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	4a13      	ldr	r2, [pc, #76]	; (8001e50 <HAL_UART_MspInit+0x138>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	6313      	str	r3, [r2, #48]	; 0x30
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <HAL_UART_MspInit+0x138>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e14:	230c      	movs	r3, #12
 8001e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e20:	2303      	movs	r3, #3
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e24:	2307      	movs	r3, #7
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e28:	f107 031c 	add.w	r3, r7, #28
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	480c      	ldr	r0, [pc, #48]	; (8001e60 <HAL_UART_MspInit+0x148>)
 8001e30:	f000 fa2e 	bl	8002290 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001e34:	2200      	movs	r2, #0
 8001e36:	2105      	movs	r1, #5
 8001e38:	2026      	movs	r0, #38	; 0x26
 8001e3a:	f000 f96d 	bl	8002118 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e3e:	2026      	movs	r0, #38	; 0x26
 8001e40:	f000 f986 	bl	8002150 <HAL_NVIC_EnableIRQ>
}
 8001e44:	bf00      	nop
 8001e46:	3730      	adds	r7, #48	; 0x30
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40005000 	.word	0x40005000
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40020800 	.word	0x40020800
 8001e58:	40020c00 	.word	0x40020c00
 8001e5c:	40004400 	.word	0x40004400
 8001e60:	40020000 	.word	0x40020000

08001e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e6a:	e003      	b.n	8001e74 <LoopCopyDataInit>

08001e6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e72:	3104      	adds	r1, #4

08001e74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e74:	480b      	ldr	r0, [pc, #44]	; (8001ea4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e76:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e7c:	d3f6      	bcc.n	8001e6c <CopyDataInit>
  ldr  r2, =_sbss
 8001e7e:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e80:	e002      	b.n	8001e88 <LoopFillZerobss>

08001e82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e84:	f842 3b04 	str.w	r3, [r2], #4

08001e88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e8c:	d3f9      	bcc.n	8001e82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e8e:	f7ff fc3f 	bl	8001710 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e92:	f005 fc0b 	bl	80076ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e96:	f7ff fae7 	bl	8001468 <main>
  bx  lr    
 8001e9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e9c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ea0:	08007870 	.word	0x08007870
  ldr  r0, =_sdata
 8001ea4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ea8:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001eac:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001eb0:	20004274 	.word	0x20004274

08001eb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb4:	e7fe      	b.n	8001eb4 <ADC_IRQHandler>

08001eb6 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	6039      	str	r1, [r7, #0]

  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	ed93 7a06 	vldr	s14, [r3, #24]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ecc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0 * S->Kd);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ee6:	eeb1 7a67 	vneg.f32	s14, s15
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ef0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ef4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a1a      	ldr	r2, [r3, #32]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d006      	beq.n	8001f1a <arm_pid_init_f32+0x64>
  {
    /* Clear the state buffer.  The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	330c      	adds	r3, #12
 8001f10:	220c      	movs	r2, #12
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f005 fbfb 	bl	8007710 <memset>
  }

}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f28:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <HAL_Init+0x40>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <HAL_Init+0x40>)
 8001f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_Init+0x40>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <HAL_Init+0x40>)
 8001f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HAL_Init+0x40>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a07      	ldr	r2, [pc, #28]	; (8001f64 <HAL_Init+0x40>)
 8001f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f4c:	2003      	movs	r0, #3
 8001f4e:	f000 f8d8 	bl	8002102 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f52:	2000      	movs	r0, #0
 8001f54:	f7ff fb54 	bl	8001600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f58:	f7ff fb26 	bl	80015a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023c00 	.word	0x40023c00

08001f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_IncTick+0x20>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_IncTick+0x24>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <HAL_IncTick+0x24>)
 8001f7a:	6013      	str	r3, [r2, #0]
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000008 	.word	0x20000008
 8001f8c:	20004270 	.word	0x20004270

08001f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return uwTick;
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <HAL_GetTick+0x14>)
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20004270 	.word	0x20004270

08001fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <__NVIC_SetPriorityGrouping+0x44>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fda:	4a04      	ldr	r2, [pc, #16]	; (8001fec <__NVIC_SetPriorityGrouping+0x44>)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	60d3      	str	r3, [r2, #12]
}
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff4:	4b04      	ldr	r3, [pc, #16]	; (8002008 <__NVIC_GetPriorityGrouping+0x18>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	0a1b      	lsrs	r3, r3, #8
 8001ffa:	f003 0307 	and.w	r3, r3, #7
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	2b00      	cmp	r3, #0
 800201c:	db0b      	blt.n	8002036 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	f003 021f 	and.w	r2, r3, #31
 8002024:	4907      	ldr	r1, [pc, #28]	; (8002044 <__NVIC_EnableIRQ+0x38>)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	2001      	movs	r0, #1
 800202e:	fa00 f202 	lsl.w	r2, r0, r2
 8002032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000e100 	.word	0xe000e100

08002048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	6039      	str	r1, [r7, #0]
 8002052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002058:	2b00      	cmp	r3, #0
 800205a:	db0a      	blt.n	8002072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	b2da      	uxtb	r2, r3
 8002060:	490c      	ldr	r1, [pc, #48]	; (8002094 <__NVIC_SetPriority+0x4c>)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	0112      	lsls	r2, r2, #4
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	440b      	add	r3, r1
 800206c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002070:	e00a      	b.n	8002088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4908      	ldr	r1, [pc, #32]	; (8002098 <__NVIC_SetPriority+0x50>)
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	3b04      	subs	r3, #4
 8002080:	0112      	lsls	r2, r2, #4
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	440b      	add	r3, r1
 8002086:	761a      	strb	r2, [r3, #24]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000e100 	.word	0xe000e100
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800209c:	b480      	push	{r7}
 800209e:	b089      	sub	sp, #36	; 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f1c3 0307 	rsb	r3, r3, #7
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	bf28      	it	cs
 80020ba:	2304      	movcs	r3, #4
 80020bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3304      	adds	r3, #4
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	d902      	bls.n	80020cc <NVIC_EncodePriority+0x30>
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3b03      	subs	r3, #3
 80020ca:	e000      	b.n	80020ce <NVIC_EncodePriority+0x32>
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d0:	f04f 32ff 	mov.w	r2, #4294967295
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43da      	mvns	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	401a      	ands	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e4:	f04f 31ff 	mov.w	r1, #4294967295
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	43d9      	mvns	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f4:	4313      	orrs	r3, r2
         );
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3724      	adds	r7, #36	; 0x24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff ff4c 	bl	8001fa8 <__NVIC_SetPriorityGrouping>
}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800212a:	f7ff ff61 	bl	8001ff0 <__NVIC_GetPriorityGrouping>
 800212e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	68b9      	ldr	r1, [r7, #8]
 8002134:	6978      	ldr	r0, [r7, #20]
 8002136:	f7ff ffb1 	bl	800209c <NVIC_EncodePriority>
 800213a:	4602      	mov	r2, r0
 800213c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002140:	4611      	mov	r1, r2
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff ff80 	bl	8002048 <__NVIC_SetPriority>
}
 8002148:	bf00      	nop
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff ff54 	bl	800200c <__NVIC_EnableIRQ>
}
 8002164:	bf00      	nop
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002178:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800217a:	f7ff ff09 	bl	8001f90 <HAL_GetTick>
 800217e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d008      	beq.n	800219e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2280      	movs	r2, #128	; 0x80
 8002190:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e052      	b.n	8002244 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0216 	bic.w	r2, r2, #22
 80021ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d103      	bne.n	80021ce <HAL_DMA_Abort+0x62>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d007      	beq.n	80021de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0208 	bic.w	r2, r2, #8
 80021dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0201 	bic.w	r2, r2, #1
 80021ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021ee:	e013      	b.n	8002218 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021f0:	f7ff fece 	bl	8001f90 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b05      	cmp	r3, #5
 80021fc:	d90c      	bls.n	8002218 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2220      	movs	r2, #32
 8002202:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2203      	movs	r2, #3
 8002210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e015      	b.n	8002244 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1e4      	bne.n	80021f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222a:	223f      	movs	r2, #63	; 0x3f
 800222c:	409a      	lsls	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d004      	beq.n	800226a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2280      	movs	r2, #128	; 0x80
 8002264:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e00c      	b.n	8002284 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2205      	movs	r2, #5
 800226e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0201 	bic.w	r2, r2, #1
 8002280:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002290:	b480      	push	{r7}
 8002292:	b089      	sub	sp, #36	; 0x24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	e16b      	b.n	8002584 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022ac:	2201      	movs	r2, #1
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	4013      	ands	r3, r2
 80022be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	f040 815a 	bne.w	800257e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d005      	beq.n	80022e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d130      	bne.n	8002344 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	2203      	movs	r2, #3
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002318:	2201      	movs	r2, #1
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	091b      	lsrs	r3, r3, #4
 800232e:	f003 0201 	and.w	r2, r3, #1
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b03      	cmp	r3, #3
 800234e:	d017      	beq.n	8002380 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	2203      	movs	r2, #3
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d123      	bne.n	80023d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	08da      	lsrs	r2, r3, #3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3208      	adds	r2, #8
 8002394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002398:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	220f      	movs	r2, #15
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	08da      	lsrs	r2, r3, #3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3208      	adds	r2, #8
 80023ce:	69b9      	ldr	r1, [r7, #24]
 80023d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	2203      	movs	r2, #3
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0203 	and.w	r2, r3, #3
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 80b4 	beq.w	800257e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	4b60      	ldr	r3, [pc, #384]	; (800259c <HAL_GPIO_Init+0x30c>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	4a5f      	ldr	r2, [pc, #380]	; (800259c <HAL_GPIO_Init+0x30c>)
 8002420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002424:	6453      	str	r3, [r2, #68]	; 0x44
 8002426:	4b5d      	ldr	r3, [pc, #372]	; (800259c <HAL_GPIO_Init+0x30c>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002432:	4a5b      	ldr	r2, [pc, #364]	; (80025a0 <HAL_GPIO_Init+0x310>)
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	089b      	lsrs	r3, r3, #2
 8002438:	3302      	adds	r3, #2
 800243a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	220f      	movs	r2, #15
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a52      	ldr	r2, [pc, #328]	; (80025a4 <HAL_GPIO_Init+0x314>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d02b      	beq.n	80024b6 <HAL_GPIO_Init+0x226>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a51      	ldr	r2, [pc, #324]	; (80025a8 <HAL_GPIO_Init+0x318>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d025      	beq.n	80024b2 <HAL_GPIO_Init+0x222>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a50      	ldr	r2, [pc, #320]	; (80025ac <HAL_GPIO_Init+0x31c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d01f      	beq.n	80024ae <HAL_GPIO_Init+0x21e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a4f      	ldr	r2, [pc, #316]	; (80025b0 <HAL_GPIO_Init+0x320>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d019      	beq.n	80024aa <HAL_GPIO_Init+0x21a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a4e      	ldr	r2, [pc, #312]	; (80025b4 <HAL_GPIO_Init+0x324>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d013      	beq.n	80024a6 <HAL_GPIO_Init+0x216>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a4d      	ldr	r2, [pc, #308]	; (80025b8 <HAL_GPIO_Init+0x328>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d00d      	beq.n	80024a2 <HAL_GPIO_Init+0x212>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a4c      	ldr	r2, [pc, #304]	; (80025bc <HAL_GPIO_Init+0x32c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d007      	beq.n	800249e <HAL_GPIO_Init+0x20e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a4b      	ldr	r2, [pc, #300]	; (80025c0 <HAL_GPIO_Init+0x330>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d101      	bne.n	800249a <HAL_GPIO_Init+0x20a>
 8002496:	2307      	movs	r3, #7
 8002498:	e00e      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 800249a:	2308      	movs	r3, #8
 800249c:	e00c      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 800249e:	2306      	movs	r3, #6
 80024a0:	e00a      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024a2:	2305      	movs	r3, #5
 80024a4:	e008      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024a6:	2304      	movs	r3, #4
 80024a8:	e006      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024aa:	2303      	movs	r3, #3
 80024ac:	e004      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e002      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024b6:	2300      	movs	r3, #0
 80024b8:	69fa      	ldr	r2, [r7, #28]
 80024ba:	f002 0203 	and.w	r2, r2, #3
 80024be:	0092      	lsls	r2, r2, #2
 80024c0:	4093      	lsls	r3, r2
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024c8:	4935      	ldr	r1, [pc, #212]	; (80025a0 <HAL_GPIO_Init+0x310>)
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	3302      	adds	r3, #2
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d6:	4b3b      	ldr	r3, [pc, #236]	; (80025c4 <HAL_GPIO_Init+0x334>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024fa:	4a32      	ldr	r2, [pc, #200]	; (80025c4 <HAL_GPIO_Init+0x334>)
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002500:	4b30      	ldr	r3, [pc, #192]	; (80025c4 <HAL_GPIO_Init+0x334>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002524:	4a27      	ldr	r2, [pc, #156]	; (80025c4 <HAL_GPIO_Init+0x334>)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800252a:	4b26      	ldr	r3, [pc, #152]	; (80025c4 <HAL_GPIO_Init+0x334>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800254e:	4a1d      	ldr	r2, [pc, #116]	; (80025c4 <HAL_GPIO_Init+0x334>)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002554:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <HAL_GPIO_Init+0x334>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002578:	4a12      	ldr	r2, [pc, #72]	; (80025c4 <HAL_GPIO_Init+0x334>)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3301      	adds	r3, #1
 8002582:	61fb      	str	r3, [r7, #28]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	2b0f      	cmp	r3, #15
 8002588:	f67f ae90 	bls.w	80022ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800258c:	bf00      	nop
 800258e:	bf00      	nop
 8002590:	3724      	adds	r7, #36	; 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800
 80025a0:	40013800 	.word	0x40013800
 80025a4:	40020000 	.word	0x40020000
 80025a8:	40020400 	.word	0x40020400
 80025ac:	40020800 	.word	0x40020800
 80025b0:	40020c00 	.word	0x40020c00
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40021400 	.word	0x40021400
 80025bc:	40021800 	.word	0x40021800
 80025c0:	40021c00 	.word	0x40021c00
 80025c4:	40013c00 	.word	0x40013c00

080025c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	887b      	ldrh	r3, [r7, #2]
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
 80025e4:	e001      	b.n	80025ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025e6:	2300      	movs	r3, #0
 80025e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	807b      	strh	r3, [r7, #2]
 8002604:	4613      	mov	r3, r2
 8002606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002608:	787b      	ldrb	r3, [r7, #1]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800260e:	887a      	ldrh	r2, [r7, #2]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002614:	e003      	b.n	800261e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002616:	887b      	ldrh	r3, [r7, #2]
 8002618:	041a      	lsls	r2, r3, #16
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	619a      	str	r2, [r3, #24]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800262a:	b480      	push	{r7}
 800262c:	b085      	sub	sp, #20
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	460b      	mov	r3, r1
 8002634:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800263c:	887a      	ldrh	r2, [r7, #2]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4013      	ands	r3, r2
 8002642:	041a      	lsls	r2, r3, #16
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	43d9      	mvns	r1, r3
 8002648:	887b      	ldrh	r3, [r7, #2]
 800264a:	400b      	ands	r3, r1
 800264c:	431a      	orrs	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	619a      	str	r2, [r3, #24]
}
 8002652:	bf00      	nop
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e12b      	b.n	80028ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d106      	bne.n	800268c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7fe fea6 	bl	80013d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2224      	movs	r2, #36	; 0x24
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0201 	bic.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026c4:	f000 fd5c 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
 80026c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	4a81      	ldr	r2, [pc, #516]	; (80028d4 <HAL_I2C_Init+0x274>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d807      	bhi.n	80026e4 <HAL_I2C_Init+0x84>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4a80      	ldr	r2, [pc, #512]	; (80028d8 <HAL_I2C_Init+0x278>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	bf94      	ite	ls
 80026dc:	2301      	movls	r3, #1
 80026de:	2300      	movhi	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	e006      	b.n	80026f2 <HAL_I2C_Init+0x92>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4a7d      	ldr	r2, [pc, #500]	; (80028dc <HAL_I2C_Init+0x27c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	bf94      	ite	ls
 80026ec:	2301      	movls	r3, #1
 80026ee:	2300      	movhi	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e0e7      	b.n	80028ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4a78      	ldr	r2, [pc, #480]	; (80028e0 <HAL_I2C_Init+0x280>)
 80026fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002702:	0c9b      	lsrs	r3, r3, #18
 8002704:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	430a      	orrs	r2, r1
 8002718:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	4a6a      	ldr	r2, [pc, #424]	; (80028d4 <HAL_I2C_Init+0x274>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d802      	bhi.n	8002734 <HAL_I2C_Init+0xd4>
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	3301      	adds	r3, #1
 8002732:	e009      	b.n	8002748 <HAL_I2C_Init+0xe8>
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800273a:	fb02 f303 	mul.w	r3, r2, r3
 800273e:	4a69      	ldr	r2, [pc, #420]	; (80028e4 <HAL_I2C_Init+0x284>)
 8002740:	fba2 2303 	umull	r2, r3, r2, r3
 8002744:	099b      	lsrs	r3, r3, #6
 8002746:	3301      	adds	r3, #1
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	430b      	orrs	r3, r1
 800274e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800275a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	495c      	ldr	r1, [pc, #368]	; (80028d4 <HAL_I2C_Init+0x274>)
 8002764:	428b      	cmp	r3, r1
 8002766:	d819      	bhi.n	800279c <HAL_I2C_Init+0x13c>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1e59      	subs	r1, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	fbb1 f3f3 	udiv	r3, r1, r3
 8002776:	1c59      	adds	r1, r3, #1
 8002778:	f640 73fc 	movw	r3, #4092	; 0xffc
 800277c:	400b      	ands	r3, r1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <HAL_I2C_Init+0x138>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1e59      	subs	r1, r3, #1
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002790:	3301      	adds	r3, #1
 8002792:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002796:	e051      	b.n	800283c <HAL_I2C_Init+0x1dc>
 8002798:	2304      	movs	r3, #4
 800279a:	e04f      	b.n	800283c <HAL_I2C_Init+0x1dc>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d111      	bne.n	80027c8 <HAL_I2C_Init+0x168>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	1e58      	subs	r0, r3, #1
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6859      	ldr	r1, [r3, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	440b      	add	r3, r1
 80027b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027b6:	3301      	adds	r3, #1
 80027b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027bc:	2b00      	cmp	r3, #0
 80027be:	bf0c      	ite	eq
 80027c0:	2301      	moveq	r3, #1
 80027c2:	2300      	movne	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	e012      	b.n	80027ee <HAL_I2C_Init+0x18e>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	1e58      	subs	r0, r3, #1
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6859      	ldr	r1, [r3, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	0099      	lsls	r1, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	fbb0 f3f3 	udiv	r3, r0, r3
 80027de:	3301      	adds	r3, #1
 80027e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	bf0c      	ite	eq
 80027e8:	2301      	moveq	r3, #1
 80027ea:	2300      	movne	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_I2C_Init+0x196>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e022      	b.n	800283c <HAL_I2C_Init+0x1dc>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10e      	bne.n	800281c <HAL_I2C_Init+0x1bc>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1e58      	subs	r0, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6859      	ldr	r1, [r3, #4]
 8002806:	460b      	mov	r3, r1
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	440b      	add	r3, r1
 800280c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002810:	3301      	adds	r3, #1
 8002812:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002816:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800281a:	e00f      	b.n	800283c <HAL_I2C_Init+0x1dc>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1e58      	subs	r0, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	0099      	lsls	r1, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002832:	3301      	adds	r3, #1
 8002834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002838:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	6809      	ldr	r1, [r1, #0]
 8002840:	4313      	orrs	r3, r2
 8002842:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69da      	ldr	r2, [r3, #28]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800286a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6911      	ldr	r1, [r2, #16]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68d2      	ldr	r2, [r2, #12]
 8002876:	4311      	orrs	r1, r2
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	430b      	orrs	r3, r1
 800287e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	000186a0 	.word	0x000186a0
 80028d8:	001e847f 	.word	0x001e847f
 80028dc:	003d08ff 	.word	0x003d08ff
 80028e0:	431bde83 	.word	0x431bde83
 80028e4:	10624dd3 	.word	0x10624dd3

080028e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e264      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d075      	beq.n	80029f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002906:	4ba3      	ldr	r3, [pc, #652]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	2b04      	cmp	r3, #4
 8002910:	d00c      	beq.n	800292c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002912:	4ba0      	ldr	r3, [pc, #640]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800291a:	2b08      	cmp	r3, #8
 800291c:	d112      	bne.n	8002944 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800291e:	4b9d      	ldr	r3, [pc, #628]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002926:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800292a:	d10b      	bne.n	8002944 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800292c:	4b99      	ldr	r3, [pc, #612]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d05b      	beq.n	80029f0 <HAL_RCC_OscConfig+0x108>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d157      	bne.n	80029f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e23f      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800294c:	d106      	bne.n	800295c <HAL_RCC_OscConfig+0x74>
 800294e:	4b91      	ldr	r3, [pc, #580]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a90      	ldr	r2, [pc, #576]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 8002954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	e01d      	b.n	8002998 <HAL_RCC_OscConfig+0xb0>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002964:	d10c      	bne.n	8002980 <HAL_RCC_OscConfig+0x98>
 8002966:	4b8b      	ldr	r3, [pc, #556]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a8a      	ldr	r2, [pc, #552]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 800296c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	4b88      	ldr	r3, [pc, #544]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a87      	ldr	r2, [pc, #540]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 8002978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	e00b      	b.n	8002998 <HAL_RCC_OscConfig+0xb0>
 8002980:	4b84      	ldr	r3, [pc, #528]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a83      	ldr	r2, [pc, #524]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 8002986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	4b81      	ldr	r3, [pc, #516]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a80      	ldr	r2, [pc, #512]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 8002992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d013      	beq.n	80029c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7ff faf6 	bl	8001f90 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029a8:	f7ff faf2 	bl	8001f90 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b64      	cmp	r3, #100	; 0x64
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e204      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ba:	4b76      	ldr	r3, [pc, #472]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0xc0>
 80029c6:	e014      	b.n	80029f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c8:	f7ff fae2 	bl	8001f90 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029d0:	f7ff fade 	bl	8001f90 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b64      	cmp	r3, #100	; 0x64
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e1f0      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e2:	4b6c      	ldr	r3, [pc, #432]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0xe8>
 80029ee:	e000      	b.n	80029f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d063      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029fe:	4b65      	ldr	r3, [pc, #404]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00b      	beq.n	8002a22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a0a:	4b62      	ldr	r3, [pc, #392]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d11c      	bne.n	8002a50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a16:	4b5f      	ldr	r3, [pc, #380]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d116      	bne.n	8002a50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a22:	4b5c      	ldr	r3, [pc, #368]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <HAL_RCC_OscConfig+0x152>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d001      	beq.n	8002a3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e1c4      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a3a:	4b56      	ldr	r3, [pc, #344]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4952      	ldr	r1, [pc, #328]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4e:	e03a      	b.n	8002ac6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d020      	beq.n	8002a9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a58:	4b4f      	ldr	r3, [pc, #316]	; (8002b98 <HAL_RCC_OscConfig+0x2b0>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5e:	f7ff fa97 	bl	8001f90 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a66:	f7ff fa93 	bl	8001f90 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e1a5      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a78:	4b46      	ldr	r3, [pc, #280]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0f0      	beq.n	8002a66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a84:	4b43      	ldr	r3, [pc, #268]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	4940      	ldr	r1, [pc, #256]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	600b      	str	r3, [r1, #0]
 8002a98:	e015      	b.n	8002ac6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a9a:	4b3f      	ldr	r3, [pc, #252]	; (8002b98 <HAL_RCC_OscConfig+0x2b0>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa0:	f7ff fa76 	bl	8001f90 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aa8:	f7ff fa72 	bl	8001f90 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e184      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aba:	4b36      	ldr	r3, [pc, #216]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d030      	beq.n	8002b34 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d016      	beq.n	8002b08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ada:	4b30      	ldr	r3, [pc, #192]	; (8002b9c <HAL_RCC_OscConfig+0x2b4>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae0:	f7ff fa56 	bl	8001f90 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ae8:	f7ff fa52 	bl	8001f90 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e164      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002afa:	4b26      	ldr	r3, [pc, #152]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 8002afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x200>
 8002b06:	e015      	b.n	8002b34 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b08:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <HAL_RCC_OscConfig+0x2b4>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0e:	f7ff fa3f 	bl	8001f90 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b16:	f7ff fa3b 	bl	8001f90 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e14d      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b28:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 8002b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1f0      	bne.n	8002b16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80a0 	beq.w	8002c82 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b42:	2300      	movs	r3, #0
 8002b44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b46:	4b13      	ldr	r3, [pc, #76]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10f      	bne.n	8002b72 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	4b0f      	ldr	r3, [pc, #60]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	4a0e      	ldr	r2, [pc, #56]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b60:	6413      	str	r3, [r2, #64]	; 0x40
 8002b62:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	60bb      	str	r3, [r7, #8]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b72:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <HAL_RCC_OscConfig+0x2b8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d121      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b7e:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <HAL_RCC_OscConfig+0x2b8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a07      	ldr	r2, [pc, #28]	; (8002ba0 <HAL_RCC_OscConfig+0x2b8>)
 8002b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b8a:	f7ff fa01 	bl	8001f90 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b90:	e011      	b.n	8002bb6 <HAL_RCC_OscConfig+0x2ce>
 8002b92:	bf00      	nop
 8002b94:	40023800 	.word	0x40023800
 8002b98:	42470000 	.word	0x42470000
 8002b9c:	42470e80 	.word	0x42470e80
 8002ba0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba4:	f7ff f9f4 	bl	8001f90 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e106      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb6:	4b85      	ldr	r3, [pc, #532]	; (8002dcc <HAL_RCC_OscConfig+0x4e4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d106      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x2f0>
 8002bca:	4b81      	ldr	r3, [pc, #516]	; (8002dd0 <HAL_RCC_OscConfig+0x4e8>)
 8002bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bce:	4a80      	ldr	r2, [pc, #512]	; (8002dd0 <HAL_RCC_OscConfig+0x4e8>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd6:	e01c      	b.n	8002c12 <HAL_RCC_OscConfig+0x32a>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	2b05      	cmp	r3, #5
 8002bde:	d10c      	bne.n	8002bfa <HAL_RCC_OscConfig+0x312>
 8002be0:	4b7b      	ldr	r3, [pc, #492]	; (8002dd0 <HAL_RCC_OscConfig+0x4e8>)
 8002be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be4:	4a7a      	ldr	r2, [pc, #488]	; (8002dd0 <HAL_RCC_OscConfig+0x4e8>)
 8002be6:	f043 0304 	orr.w	r3, r3, #4
 8002bea:	6713      	str	r3, [r2, #112]	; 0x70
 8002bec:	4b78      	ldr	r3, [pc, #480]	; (8002dd0 <HAL_RCC_OscConfig+0x4e8>)
 8002bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf0:	4a77      	ldr	r2, [pc, #476]	; (8002dd0 <HAL_RCC_OscConfig+0x4e8>)
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf8:	e00b      	b.n	8002c12 <HAL_RCC_OscConfig+0x32a>
 8002bfa:	4b75      	ldr	r3, [pc, #468]	; (8002dd0 <HAL_RCC_OscConfig+0x4e8>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfe:	4a74      	ldr	r2, [pc, #464]	; (8002dd0 <HAL_RCC_OscConfig+0x4e8>)
 8002c00:	f023 0301 	bic.w	r3, r3, #1
 8002c04:	6713      	str	r3, [r2, #112]	; 0x70
 8002c06:	4b72      	ldr	r3, [pc, #456]	; (8002dd0 <HAL_RCC_OscConfig+0x4e8>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0a:	4a71      	ldr	r2, [pc, #452]	; (8002dd0 <HAL_RCC_OscConfig+0x4e8>)
 8002c0c:	f023 0304 	bic.w	r3, r3, #4
 8002c10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d015      	beq.n	8002c46 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1a:	f7ff f9b9 	bl	8001f90 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c20:	e00a      	b.n	8002c38 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c22:	f7ff f9b5 	bl	8001f90 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e0c5      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c38:	4b65      	ldr	r3, [pc, #404]	; (8002dd0 <HAL_RCC_OscConfig+0x4e8>)
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0ee      	beq.n	8002c22 <HAL_RCC_OscConfig+0x33a>
 8002c44:	e014      	b.n	8002c70 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c46:	f7ff f9a3 	bl	8001f90 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c4c:	e00a      	b.n	8002c64 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c4e:	f7ff f99f 	bl	8001f90 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e0af      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c64:	4b5a      	ldr	r3, [pc, #360]	; (8002dd0 <HAL_RCC_OscConfig+0x4e8>)
 8002c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1ee      	bne.n	8002c4e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c70:	7dfb      	ldrb	r3, [r7, #23]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d105      	bne.n	8002c82 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c76:	4b56      	ldr	r3, [pc, #344]	; (8002dd0 <HAL_RCC_OscConfig+0x4e8>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	4a55      	ldr	r2, [pc, #340]	; (8002dd0 <HAL_RCC_OscConfig+0x4e8>)
 8002c7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 809b 	beq.w	8002dc2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c8c:	4b50      	ldr	r3, [pc, #320]	; (8002dd0 <HAL_RCC_OscConfig+0x4e8>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 030c 	and.w	r3, r3, #12
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d05c      	beq.n	8002d52 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d141      	bne.n	8002d24 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca0:	4b4c      	ldr	r3, [pc, #304]	; (8002dd4 <HAL_RCC_OscConfig+0x4ec>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca6:	f7ff f973 	bl	8001f90 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cae:	f7ff f96f 	bl	8001f90 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e081      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc0:	4b43      	ldr	r3, [pc, #268]	; (8002dd0 <HAL_RCC_OscConfig+0x4e8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1f0      	bne.n	8002cae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69da      	ldr	r2, [r3, #28]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	019b      	lsls	r3, r3, #6
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce2:	085b      	lsrs	r3, r3, #1
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	041b      	lsls	r3, r3, #16
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	061b      	lsls	r3, r3, #24
 8002cf0:	4937      	ldr	r1, [pc, #220]	; (8002dd0 <HAL_RCC_OscConfig+0x4e8>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf6:	4b37      	ldr	r3, [pc, #220]	; (8002dd4 <HAL_RCC_OscConfig+0x4ec>)
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfc:	f7ff f948 	bl	8001f90 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d04:	f7ff f944 	bl	8001f90 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e056      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d16:	4b2e      	ldr	r3, [pc, #184]	; (8002dd0 <HAL_RCC_OscConfig+0x4e8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0x41c>
 8002d22:	e04e      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d24:	4b2b      	ldr	r3, [pc, #172]	; (8002dd4 <HAL_RCC_OscConfig+0x4ec>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2a:	f7ff f931 	bl	8001f90 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d32:	f7ff f92d 	bl	8001f90 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e03f      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d44:	4b22      	ldr	r3, [pc, #136]	; (8002dd0 <HAL_RCC_OscConfig+0x4e8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1f0      	bne.n	8002d32 <HAL_RCC_OscConfig+0x44a>
 8002d50:	e037      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e032      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d5e:	4b1c      	ldr	r3, [pc, #112]	; (8002dd0 <HAL_RCC_OscConfig+0x4e8>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d028      	beq.n	8002dbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d121      	bne.n	8002dbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d11a      	bne.n	8002dbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d8e:	4013      	ands	r3, r2
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d94:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d111      	bne.n	8002dbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da4:	085b      	lsrs	r3, r3, #1
 8002da6:	3b01      	subs	r3, #1
 8002da8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d107      	bne.n	8002dbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d001      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40007000 	.word	0x40007000
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	42470060 	.word	0x42470060

08002dd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0cc      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dec:	4b68      	ldr	r3, [pc, #416]	; (8002f90 <HAL_RCC_ClockConfig+0x1b8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d90c      	bls.n	8002e14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfa:	4b65      	ldr	r3, [pc, #404]	; (8002f90 <HAL_RCC_ClockConfig+0x1b8>)
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e02:	4b63      	ldr	r3, [pc, #396]	; (8002f90 <HAL_RCC_ClockConfig+0x1b8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0b8      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d020      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e2c:	4b59      	ldr	r3, [pc, #356]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	4a58      	ldr	r2, [pc, #352]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d005      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e44:	4b53      	ldr	r3, [pc, #332]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	4a52      	ldr	r2, [pc, #328]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e50:	4b50      	ldr	r3, [pc, #320]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	494d      	ldr	r1, [pc, #308]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d044      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d107      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e76:	4b47      	ldr	r3, [pc, #284]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d119      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e07f      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d003      	beq.n	8002e96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	d107      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e96:	4b3f      	ldr	r3, [pc, #252]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d109      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e06f      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea6:	4b3b      	ldr	r3, [pc, #236]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e067      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eb6:	4b37      	ldr	r3, [pc, #220]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f023 0203 	bic.w	r2, r3, #3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	4934      	ldr	r1, [pc, #208]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ec8:	f7ff f862 	bl	8001f90 <HAL_GetTick>
 8002ecc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ece:	e00a      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed0:	f7ff f85e 	bl	8001f90 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e04f      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee6:	4b2b      	ldr	r3, [pc, #172]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 020c 	and.w	r2, r3, #12
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d1eb      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef8:	4b25      	ldr	r3, [pc, #148]	; (8002f90 <HAL_RCC_ClockConfig+0x1b8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d20c      	bcs.n	8002f20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f06:	4b22      	ldr	r3, [pc, #136]	; (8002f90 <HAL_RCC_ClockConfig+0x1b8>)
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0e:	4b20      	ldr	r3, [pc, #128]	; (8002f90 <HAL_RCC_ClockConfig+0x1b8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d001      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e032      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d008      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f2c:	4b19      	ldr	r3, [pc, #100]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	4916      	ldr	r1, [pc, #88]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d009      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f4a:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	490e      	ldr	r1, [pc, #56]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f5e:	f000 f821 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 8002f62:	4602      	mov	r2, r0
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	490a      	ldr	r1, [pc, #40]	; (8002f98 <HAL_RCC_ClockConfig+0x1c0>)
 8002f70:	5ccb      	ldrb	r3, [r1, r3]
 8002f72:	fa22 f303 	lsr.w	r3, r2, r3
 8002f76:	4a09      	ldr	r2, [pc, #36]	; (8002f9c <HAL_RCC_ClockConfig+0x1c4>)
 8002f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f7a:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fe fb3e 	bl	8001600 <HAL_InitTick>

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40023c00 	.word	0x40023c00
 8002f94:	40023800 	.word	0x40023800
 8002f98:	08007848 	.word	0x08007848
 8002f9c:	20000000 	.word	0x20000000
 8002fa0:	20000004 	.word	0x20000004

08002fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002fa8:	b084      	sub	sp, #16
 8002faa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	607b      	str	r3, [r7, #4]
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fbc:	4b67      	ldr	r3, [pc, #412]	; (800315c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 030c 	and.w	r3, r3, #12
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d00d      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x40>
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	f200 80bd 	bhi.w	8003148 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d003      	beq.n	8002fde <HAL_RCC_GetSysClockFreq+0x3a>
 8002fd6:	e0b7      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fd8:	4b61      	ldr	r3, [pc, #388]	; (8003160 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002fda:	60bb      	str	r3, [r7, #8]
       break;
 8002fdc:	e0b7      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fde:	4b61      	ldr	r3, [pc, #388]	; (8003164 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002fe0:	60bb      	str	r3, [r7, #8]
      break;
 8002fe2:	e0b4      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fe4:	4b5d      	ldr	r3, [pc, #372]	; (800315c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fee:	4b5b      	ldr	r3, [pc, #364]	; (800315c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d04d      	beq.n	8003096 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ffa:	4b58      	ldr	r3, [pc, #352]	; (800315c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	099b      	lsrs	r3, r3, #6
 8003000:	461a      	mov	r2, r3
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	f240 10ff 	movw	r0, #511	; 0x1ff
 800300a:	f04f 0100 	mov.w	r1, #0
 800300e:	ea02 0800 	and.w	r8, r2, r0
 8003012:	ea03 0901 	and.w	r9, r3, r1
 8003016:	4640      	mov	r0, r8
 8003018:	4649      	mov	r1, r9
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	014b      	lsls	r3, r1, #5
 8003024:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003028:	0142      	lsls	r2, r0, #5
 800302a:	4610      	mov	r0, r2
 800302c:	4619      	mov	r1, r3
 800302e:	ebb0 0008 	subs.w	r0, r0, r8
 8003032:	eb61 0109 	sbc.w	r1, r1, r9
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	018b      	lsls	r3, r1, #6
 8003040:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003044:	0182      	lsls	r2, r0, #6
 8003046:	1a12      	subs	r2, r2, r0
 8003048:	eb63 0301 	sbc.w	r3, r3, r1
 800304c:	f04f 0000 	mov.w	r0, #0
 8003050:	f04f 0100 	mov.w	r1, #0
 8003054:	00d9      	lsls	r1, r3, #3
 8003056:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800305a:	00d0      	lsls	r0, r2, #3
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	eb12 0208 	adds.w	r2, r2, r8
 8003064:	eb43 0309 	adc.w	r3, r3, r9
 8003068:	f04f 0000 	mov.w	r0, #0
 800306c:	f04f 0100 	mov.w	r1, #0
 8003070:	0259      	lsls	r1, r3, #9
 8003072:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003076:	0250      	lsls	r0, r2, #9
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	461a      	mov	r2, r3
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	f7fd f8a2 	bl	80001d0 <__aeabi_uldivmod>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4613      	mov	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	e04a      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003096:	4b31      	ldr	r3, [pc, #196]	; (800315c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	099b      	lsrs	r3, r3, #6
 800309c:	461a      	mov	r2, r3
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030a6:	f04f 0100 	mov.w	r1, #0
 80030aa:	ea02 0400 	and.w	r4, r2, r0
 80030ae:	ea03 0501 	and.w	r5, r3, r1
 80030b2:	4620      	mov	r0, r4
 80030b4:	4629      	mov	r1, r5
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	014b      	lsls	r3, r1, #5
 80030c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030c4:	0142      	lsls	r2, r0, #5
 80030c6:	4610      	mov	r0, r2
 80030c8:	4619      	mov	r1, r3
 80030ca:	1b00      	subs	r0, r0, r4
 80030cc:	eb61 0105 	sbc.w	r1, r1, r5
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	018b      	lsls	r3, r1, #6
 80030da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030de:	0182      	lsls	r2, r0, #6
 80030e0:	1a12      	subs	r2, r2, r0
 80030e2:	eb63 0301 	sbc.w	r3, r3, r1
 80030e6:	f04f 0000 	mov.w	r0, #0
 80030ea:	f04f 0100 	mov.w	r1, #0
 80030ee:	00d9      	lsls	r1, r3, #3
 80030f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030f4:	00d0      	lsls	r0, r2, #3
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	1912      	adds	r2, r2, r4
 80030fc:	eb45 0303 	adc.w	r3, r5, r3
 8003100:	f04f 0000 	mov.w	r0, #0
 8003104:	f04f 0100 	mov.w	r1, #0
 8003108:	0299      	lsls	r1, r3, #10
 800310a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800310e:	0290      	lsls	r0, r2, #10
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4610      	mov	r0, r2
 8003116:	4619      	mov	r1, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	461a      	mov	r2, r3
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	f7fd f856 	bl	80001d0 <__aeabi_uldivmod>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4613      	mov	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800312c:	4b0b      	ldr	r3, [pc, #44]	; (800315c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	0c1b      	lsrs	r3, r3, #16
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	3301      	adds	r3, #1
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	fbb2 f3f3 	udiv	r3, r2, r3
 8003144:	60bb      	str	r3, [r7, #8]
      break;
 8003146:	e002      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800314a:	60bb      	str	r3, [r7, #8]
      break;
 800314c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800314e:	68bb      	ldr	r3, [r7, #8]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800
 8003160:	00f42400 	.word	0x00f42400
 8003164:	007a1200 	.word	0x007a1200

08003168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800316c:	4b03      	ldr	r3, [pc, #12]	; (800317c <HAL_RCC_GetHCLKFreq+0x14>)
 800316e:	681b      	ldr	r3, [r3, #0]
}
 8003170:	4618      	mov	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	20000000 	.word	0x20000000

08003180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003184:	f7ff fff0 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 8003188:	4602      	mov	r2, r0
 800318a:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	0a9b      	lsrs	r3, r3, #10
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	4903      	ldr	r1, [pc, #12]	; (80031a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003196:	5ccb      	ldrb	r3, [r1, r3]
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800319c:	4618      	mov	r0, r3
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40023800 	.word	0x40023800
 80031a4:	08007858 	.word	0x08007858

080031a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031ac:	f7ff ffdc 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 80031b0:	4602      	mov	r2, r0
 80031b2:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	0b5b      	lsrs	r3, r3, #13
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	4903      	ldr	r1, [pc, #12]	; (80031cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031be:	5ccb      	ldrb	r3, [r1, r3]
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40023800 	.word	0x40023800
 80031cc:	08007858 	.word	0x08007858

080031d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	220f      	movs	r2, #15
 80031de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031e0:	4b12      	ldr	r3, [pc, #72]	; (800322c <HAL_RCC_GetClockConfig+0x5c>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 0203 	and.w	r2, r3, #3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80031ec:	4b0f      	ldr	r3, [pc, #60]	; (800322c <HAL_RCC_GetClockConfig+0x5c>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80031f8:	4b0c      	ldr	r3, [pc, #48]	; (800322c <HAL_RCC_GetClockConfig+0x5c>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003204:	4b09      	ldr	r3, [pc, #36]	; (800322c <HAL_RCC_GetClockConfig+0x5c>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	08db      	lsrs	r3, r3, #3
 800320a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003212:	4b07      	ldr	r3, [pc, #28]	; (8003230 <HAL_RCC_GetClockConfig+0x60>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0207 	and.w	r2, r3, #7
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	601a      	str	r2, [r3, #0]
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40023800 	.word	0x40023800
 8003230:	40023c00 	.word	0x40023c00

08003234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e041      	b.n	80032ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d106      	bne.n	8003260 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f839 	bl	80032d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3304      	adds	r3, #4
 8003270:	4619      	mov	r1, r3
 8003272:	4610      	mov	r0, r2
 8003274:	f000 fce2 	bl	8003c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d001      	beq.n	8003300 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e04e      	b.n	800339e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0201 	orr.w	r2, r2, #1
 8003316:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a23      	ldr	r2, [pc, #140]	; (80033ac <HAL_TIM_Base_Start_IT+0xc4>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d022      	beq.n	8003368 <HAL_TIM_Base_Start_IT+0x80>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332a:	d01d      	beq.n	8003368 <HAL_TIM_Base_Start_IT+0x80>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a1f      	ldr	r2, [pc, #124]	; (80033b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d018      	beq.n	8003368 <HAL_TIM_Base_Start_IT+0x80>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a1e      	ldr	r2, [pc, #120]	; (80033b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d013      	beq.n	8003368 <HAL_TIM_Base_Start_IT+0x80>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a1c      	ldr	r2, [pc, #112]	; (80033b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d00e      	beq.n	8003368 <HAL_TIM_Base_Start_IT+0x80>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a1b      	ldr	r2, [pc, #108]	; (80033bc <HAL_TIM_Base_Start_IT+0xd4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d009      	beq.n	8003368 <HAL_TIM_Base_Start_IT+0x80>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a19      	ldr	r2, [pc, #100]	; (80033c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d004      	beq.n	8003368 <HAL_TIM_Base_Start_IT+0x80>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a18      	ldr	r2, [pc, #96]	; (80033c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d111      	bne.n	800338c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2b06      	cmp	r3, #6
 8003378:	d010      	beq.n	800339c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f042 0201 	orr.w	r2, r2, #1
 8003388:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800338a:	e007      	b.n	800339c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40010000 	.word	0x40010000
 80033b0:	40000400 	.word	0x40000400
 80033b4:	40000800 	.word	0x40000800
 80033b8:	40000c00 	.word	0x40000c00
 80033bc:	40010400 	.word	0x40010400
 80033c0:	40014000 	.word	0x40014000
 80033c4:	40001800 	.word	0x40001800

080033c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e041      	b.n	800345e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fe fb12 	bl	8001a18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3304      	adds	r3, #4
 8003404:	4619      	mov	r1, r3
 8003406:	4610      	mov	r0, r2
 8003408:	f000 fc18 	bl	8003c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d109      	bne.n	800348c <HAL_TIM_PWM_Start+0x24>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b01      	cmp	r3, #1
 8003482:	bf14      	ite	ne
 8003484:	2301      	movne	r3, #1
 8003486:	2300      	moveq	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	e022      	b.n	80034d2 <HAL_TIM_PWM_Start+0x6a>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	2b04      	cmp	r3, #4
 8003490:	d109      	bne.n	80034a6 <HAL_TIM_PWM_Start+0x3e>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	bf14      	ite	ne
 800349e:	2301      	movne	r3, #1
 80034a0:	2300      	moveq	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	e015      	b.n	80034d2 <HAL_TIM_PWM_Start+0x6a>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d109      	bne.n	80034c0 <HAL_TIM_PWM_Start+0x58>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	bf14      	ite	ne
 80034b8:	2301      	movne	r3, #1
 80034ba:	2300      	moveq	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	e008      	b.n	80034d2 <HAL_TIM_PWM_Start+0x6a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	bf14      	ite	ne
 80034cc:	2301      	movne	r3, #1
 80034ce:	2300      	moveq	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e07c      	b.n	80035d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d104      	bne.n	80034ea <HAL_TIM_PWM_Start+0x82>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034e8:	e013      	b.n	8003512 <HAL_TIM_PWM_Start+0xaa>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d104      	bne.n	80034fa <HAL_TIM_PWM_Start+0x92>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034f8:	e00b      	b.n	8003512 <HAL_TIM_PWM_Start+0xaa>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d104      	bne.n	800350a <HAL_TIM_PWM_Start+0xa2>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003508:	e003      	b.n	8003512 <HAL_TIM_PWM_Start+0xaa>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2202      	movs	r2, #2
 800350e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2201      	movs	r2, #1
 8003518:	6839      	ldr	r1, [r7, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fdde 	bl	80040dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a2d      	ldr	r2, [pc, #180]	; (80035dc <HAL_TIM_PWM_Start+0x174>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d004      	beq.n	8003534 <HAL_TIM_PWM_Start+0xcc>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a2c      	ldr	r2, [pc, #176]	; (80035e0 <HAL_TIM_PWM_Start+0x178>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d101      	bne.n	8003538 <HAL_TIM_PWM_Start+0xd0>
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <HAL_TIM_PWM_Start+0xd2>
 8003538:	2300      	movs	r3, #0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d007      	beq.n	800354e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800354c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a22      	ldr	r2, [pc, #136]	; (80035dc <HAL_TIM_PWM_Start+0x174>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d022      	beq.n	800359e <HAL_TIM_PWM_Start+0x136>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003560:	d01d      	beq.n	800359e <HAL_TIM_PWM_Start+0x136>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a1f      	ldr	r2, [pc, #124]	; (80035e4 <HAL_TIM_PWM_Start+0x17c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d018      	beq.n	800359e <HAL_TIM_PWM_Start+0x136>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a1d      	ldr	r2, [pc, #116]	; (80035e8 <HAL_TIM_PWM_Start+0x180>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d013      	beq.n	800359e <HAL_TIM_PWM_Start+0x136>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a1c      	ldr	r2, [pc, #112]	; (80035ec <HAL_TIM_PWM_Start+0x184>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d00e      	beq.n	800359e <HAL_TIM_PWM_Start+0x136>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a16      	ldr	r2, [pc, #88]	; (80035e0 <HAL_TIM_PWM_Start+0x178>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d009      	beq.n	800359e <HAL_TIM_PWM_Start+0x136>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a18      	ldr	r2, [pc, #96]	; (80035f0 <HAL_TIM_PWM_Start+0x188>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d004      	beq.n	800359e <HAL_TIM_PWM_Start+0x136>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a16      	ldr	r2, [pc, #88]	; (80035f4 <HAL_TIM_PWM_Start+0x18c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d111      	bne.n	80035c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2b06      	cmp	r3, #6
 80035ae:	d010      	beq.n	80035d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c0:	e007      	b.n	80035d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f042 0201 	orr.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40010000 	.word	0x40010000
 80035e0:	40010400 	.word	0x40010400
 80035e4:	40000400 	.word	0x40000400
 80035e8:	40000800 	.word	0x40000800
 80035ec:	40000c00 	.word	0x40000c00
 80035f0:	40014000 	.word	0x40014000
 80035f4:	40001800 	.word	0x40001800

080035f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e097      	b.n	800373c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d106      	bne.n	8003626 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7fe fa19 	bl	8001a58 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2202      	movs	r2, #2
 800362a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800363c:	f023 0307 	bic.w	r3, r3, #7
 8003640:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	3304      	adds	r3, #4
 800364a:	4619      	mov	r1, r3
 800364c:	4610      	mov	r0, r2
 800364e:	f000 faf5 	bl	8003c3c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800367a:	f023 0303 	bic.w	r3, r3, #3
 800367e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	021b      	lsls	r3, r3, #8
 800368a:	4313      	orrs	r3, r2
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003698:	f023 030c 	bic.w	r3, r3, #12
 800369c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	021b      	lsls	r3, r3, #8
 80036b4:	4313      	orrs	r3, r2
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	011a      	lsls	r2, r3, #4
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	031b      	lsls	r3, r3, #12
 80036c8:	4313      	orrs	r3, r2
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80036d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80036de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	4313      	orrs	r3, r2
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003754:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800375c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003764:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800376c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d110      	bne.n	8003796 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d102      	bne.n	8003780 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800377a:	7b7b      	ldrb	r3, [r7, #13]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d001      	beq.n	8003784 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e069      	b.n	8003858 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003794:	e031      	b.n	80037fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	2b04      	cmp	r3, #4
 800379a:	d110      	bne.n	80037be <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800379c:	7bbb      	ldrb	r3, [r7, #14]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d102      	bne.n	80037a8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80037a2:	7b3b      	ldrb	r3, [r7, #12]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d001      	beq.n	80037ac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e055      	b.n	8003858 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037bc:	e01d      	b.n	80037fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037be:	7bfb      	ldrb	r3, [r7, #15]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d108      	bne.n	80037d6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80037c4:	7bbb      	ldrb	r3, [r7, #14]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d105      	bne.n	80037d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037ca:	7b7b      	ldrb	r3, [r7, #13]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d102      	bne.n	80037d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80037d0:	7b3b      	ldrb	r3, [r7, #12]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d001      	beq.n	80037da <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e03e      	b.n	8003858 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2202      	movs	r2, #2
 80037de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2202      	movs	r2, #2
 80037e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2202      	movs	r2, #2
 80037ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2202      	movs	r2, #2
 80037f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <HAL_TIM_Encoder_Start+0xc4>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	2b04      	cmp	r3, #4
 8003804:	d008      	beq.n	8003818 <HAL_TIM_Encoder_Start+0xd4>
 8003806:	e00f      	b.n	8003828 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2201      	movs	r2, #1
 800380e:	2100      	movs	r1, #0
 8003810:	4618      	mov	r0, r3
 8003812:	f000 fc63 	bl	80040dc <TIM_CCxChannelCmd>
      break;
 8003816:	e016      	b.n	8003846 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2201      	movs	r2, #1
 800381e:	2104      	movs	r1, #4
 8003820:	4618      	mov	r0, r3
 8003822:	f000 fc5b 	bl	80040dc <TIM_CCxChannelCmd>
      break;
 8003826:	e00e      	b.n	8003846 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2201      	movs	r2, #1
 800382e:	2100      	movs	r1, #0
 8003830:	4618      	mov	r0, r3
 8003832:	f000 fc53 	bl	80040dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2201      	movs	r2, #1
 800383c:	2104      	movs	r1, #4
 800383e:	4618      	mov	r0, r3
 8003840:	f000 fc4c 	bl	80040dc <TIM_CCxChannelCmd>
      break;
 8003844:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f042 0201 	orr.w	r2, r2, #1
 8003854:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b02      	cmp	r3, #2
 8003874:	d122      	bne.n	80038bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b02      	cmp	r3, #2
 8003882:	d11b      	bne.n	80038bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0202 	mvn.w	r2, #2
 800388c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f9ac 	bl	8003c00 <HAL_TIM_IC_CaptureCallback>
 80038a8:	e005      	b.n	80038b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f99e 	bl	8003bec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f9af 	bl	8003c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d122      	bne.n	8003910 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d11b      	bne.n	8003910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0204 	mvn.w	r2, #4
 80038e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2202      	movs	r2, #2
 80038e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f982 	bl	8003c00 <HAL_TIM_IC_CaptureCallback>
 80038fc:	e005      	b.n	800390a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f974 	bl	8003bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f985 	bl	8003c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b08      	cmp	r3, #8
 800391c:	d122      	bne.n	8003964 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b08      	cmp	r3, #8
 800392a:	d11b      	bne.n	8003964 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f06f 0208 	mvn.w	r2, #8
 8003934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2204      	movs	r2, #4
 800393a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f958 	bl	8003c00 <HAL_TIM_IC_CaptureCallback>
 8003950:	e005      	b.n	800395e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f94a 	bl	8003bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f95b 	bl	8003c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	f003 0310 	and.w	r3, r3, #16
 800396e:	2b10      	cmp	r3, #16
 8003970:	d122      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b10      	cmp	r3, #16
 800397e:	d11b      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f06f 0210 	mvn.w	r2, #16
 8003988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2208      	movs	r2, #8
 800398e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f92e 	bl	8003c00 <HAL_TIM_IC_CaptureCallback>
 80039a4:	e005      	b.n	80039b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f920 	bl	8003bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f931 	bl	8003c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d10e      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d107      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f06f 0201 	mvn.w	r2, #1
 80039dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fd fdc8 	bl	8001574 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ee:	2b80      	cmp	r3, #128	; 0x80
 80039f0:	d10e      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fc:	2b80      	cmp	r3, #128	; 0x80
 80039fe:	d107      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fc12 	bl	8004234 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1a:	2b40      	cmp	r3, #64	; 0x40
 8003a1c:	d10e      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a28:	2b40      	cmp	r3, #64	; 0x40
 8003a2a:	d107      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f8f6 	bl	8003c28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	d10e      	bne.n	8003a68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f003 0320 	and.w	r3, r3, #32
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	d107      	bne.n	8003a68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f06f 0220 	mvn.w	r2, #32
 8003a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fbdc 	bl	8004220 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a68:	bf00      	nop
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e0ac      	b.n	8003be4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b0c      	cmp	r3, #12
 8003a96:	f200 809f 	bhi.w	8003bd8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003a9a:	a201      	add	r2, pc, #4	; (adr r2, 8003aa0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa0:	08003ad5 	.word	0x08003ad5
 8003aa4:	08003bd9 	.word	0x08003bd9
 8003aa8:	08003bd9 	.word	0x08003bd9
 8003aac:	08003bd9 	.word	0x08003bd9
 8003ab0:	08003b15 	.word	0x08003b15
 8003ab4:	08003bd9 	.word	0x08003bd9
 8003ab8:	08003bd9 	.word	0x08003bd9
 8003abc:	08003bd9 	.word	0x08003bd9
 8003ac0:	08003b57 	.word	0x08003b57
 8003ac4:	08003bd9 	.word	0x08003bd9
 8003ac8:	08003bd9 	.word	0x08003bd9
 8003acc:	08003bd9 	.word	0x08003bd9
 8003ad0:	08003b97 	.word	0x08003b97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68b9      	ldr	r1, [r7, #8]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 f94e 	bl	8003d7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699a      	ldr	r2, [r3, #24]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0208 	orr.w	r2, r2, #8
 8003aee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0204 	bic.w	r2, r2, #4
 8003afe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6999      	ldr	r1, [r3, #24]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	691a      	ldr	r2, [r3, #16]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	619a      	str	r2, [r3, #24]
      break;
 8003b12:	e062      	b.n	8003bda <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 f99e 	bl	8003e5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6999      	ldr	r1, [r3, #24]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	021a      	lsls	r2, r3, #8
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	619a      	str	r2, [r3, #24]
      break;
 8003b54:	e041      	b.n	8003bda <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68b9      	ldr	r1, [r7, #8]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 f9f3 	bl	8003f48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69da      	ldr	r2, [r3, #28]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0208 	orr.w	r2, r2, #8
 8003b70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69da      	ldr	r2, [r3, #28]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0204 	bic.w	r2, r2, #4
 8003b80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69d9      	ldr	r1, [r3, #28]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	61da      	str	r2, [r3, #28]
      break;
 8003b94:	e021      	b.n	8003bda <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68b9      	ldr	r1, [r7, #8]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fa47 	bl	8004030 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69da      	ldr	r2, [r3, #28]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69d9      	ldr	r1, [r3, #28]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	021a      	lsls	r2, r3, #8
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	61da      	str	r2, [r3, #28]
      break;
 8003bd6:	e000      	b.n	8003bda <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003bd8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a40      	ldr	r2, [pc, #256]	; (8003d50 <TIM_Base_SetConfig+0x114>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d013      	beq.n	8003c7c <TIM_Base_SetConfig+0x40>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c5a:	d00f      	beq.n	8003c7c <TIM_Base_SetConfig+0x40>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a3d      	ldr	r2, [pc, #244]	; (8003d54 <TIM_Base_SetConfig+0x118>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d00b      	beq.n	8003c7c <TIM_Base_SetConfig+0x40>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a3c      	ldr	r2, [pc, #240]	; (8003d58 <TIM_Base_SetConfig+0x11c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d007      	beq.n	8003c7c <TIM_Base_SetConfig+0x40>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a3b      	ldr	r2, [pc, #236]	; (8003d5c <TIM_Base_SetConfig+0x120>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d003      	beq.n	8003c7c <TIM_Base_SetConfig+0x40>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a3a      	ldr	r2, [pc, #232]	; (8003d60 <TIM_Base_SetConfig+0x124>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d108      	bne.n	8003c8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a2f      	ldr	r2, [pc, #188]	; (8003d50 <TIM_Base_SetConfig+0x114>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d02b      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c9c:	d027      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a2c      	ldr	r2, [pc, #176]	; (8003d54 <TIM_Base_SetConfig+0x118>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d023      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a2b      	ldr	r2, [pc, #172]	; (8003d58 <TIM_Base_SetConfig+0x11c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d01f      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a2a      	ldr	r2, [pc, #168]	; (8003d5c <TIM_Base_SetConfig+0x120>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d01b      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a29      	ldr	r2, [pc, #164]	; (8003d60 <TIM_Base_SetConfig+0x124>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d017      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a28      	ldr	r2, [pc, #160]	; (8003d64 <TIM_Base_SetConfig+0x128>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d013      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a27      	ldr	r2, [pc, #156]	; (8003d68 <TIM_Base_SetConfig+0x12c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00f      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a26      	ldr	r2, [pc, #152]	; (8003d6c <TIM_Base_SetConfig+0x130>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00b      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a25      	ldr	r2, [pc, #148]	; (8003d70 <TIM_Base_SetConfig+0x134>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d007      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a24      	ldr	r2, [pc, #144]	; (8003d74 <TIM_Base_SetConfig+0x138>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d003      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a23      	ldr	r2, [pc, #140]	; (8003d78 <TIM_Base_SetConfig+0x13c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d108      	bne.n	8003d00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a0a      	ldr	r2, [pc, #40]	; (8003d50 <TIM_Base_SetConfig+0x114>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d003      	beq.n	8003d34 <TIM_Base_SetConfig+0xf8>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a0c      	ldr	r2, [pc, #48]	; (8003d60 <TIM_Base_SetConfig+0x124>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d103      	bne.n	8003d3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	615a      	str	r2, [r3, #20]
}
 8003d42:	bf00      	nop
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40010000 	.word	0x40010000
 8003d54:	40000400 	.word	0x40000400
 8003d58:	40000800 	.word	0x40000800
 8003d5c:	40000c00 	.word	0x40000c00
 8003d60:	40010400 	.word	0x40010400
 8003d64:	40014000 	.word	0x40014000
 8003d68:	40014400 	.word	0x40014400
 8003d6c:	40014800 	.word	0x40014800
 8003d70:	40001800 	.word	0x40001800
 8003d74:	40001c00 	.word	0x40001c00
 8003d78:	40002000 	.word	0x40002000

08003d7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	f023 0201 	bic.w	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 0303 	bic.w	r3, r3, #3
 8003db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f023 0302 	bic.w	r3, r3, #2
 8003dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a20      	ldr	r2, [pc, #128]	; (8003e54 <TIM_OC1_SetConfig+0xd8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d003      	beq.n	8003de0 <TIM_OC1_SetConfig+0x64>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a1f      	ldr	r2, [pc, #124]	; (8003e58 <TIM_OC1_SetConfig+0xdc>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d10c      	bne.n	8003dfa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f023 0308 	bic.w	r3, r3, #8
 8003de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f023 0304 	bic.w	r3, r3, #4
 8003df8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a15      	ldr	r2, [pc, #84]	; (8003e54 <TIM_OC1_SetConfig+0xd8>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d003      	beq.n	8003e0a <TIM_OC1_SetConfig+0x8e>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a14      	ldr	r2, [pc, #80]	; (8003e58 <TIM_OC1_SetConfig+0xdc>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d111      	bne.n	8003e2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	621a      	str	r2, [r3, #32]
}
 8003e48:	bf00      	nop
 8003e4a:	371c      	adds	r7, #28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	40010000 	.word	0x40010000
 8003e58:	40010400 	.word	0x40010400

08003e5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	f023 0210 	bic.w	r2, r3, #16
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	021b      	lsls	r3, r3, #8
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f023 0320 	bic.w	r3, r3, #32
 8003ea6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a22      	ldr	r2, [pc, #136]	; (8003f40 <TIM_OC2_SetConfig+0xe4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d003      	beq.n	8003ec4 <TIM_OC2_SetConfig+0x68>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a21      	ldr	r2, [pc, #132]	; (8003f44 <TIM_OC2_SetConfig+0xe8>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d10d      	bne.n	8003ee0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	011b      	lsls	r3, r3, #4
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ede:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a17      	ldr	r2, [pc, #92]	; (8003f40 <TIM_OC2_SetConfig+0xe4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d003      	beq.n	8003ef0 <TIM_OC2_SetConfig+0x94>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a16      	ldr	r2, [pc, #88]	; (8003f44 <TIM_OC2_SetConfig+0xe8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d113      	bne.n	8003f18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ef6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003efe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	621a      	str	r2, [r3, #32]
}
 8003f32:	bf00      	nop
 8003f34:	371c      	adds	r7, #28
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40010000 	.word	0x40010000
 8003f44:	40010400 	.word	0x40010400

08003f48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0303 	bic.w	r3, r3, #3
 8003f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	021b      	lsls	r3, r3, #8
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a21      	ldr	r2, [pc, #132]	; (8004028 <TIM_OC3_SetConfig+0xe0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d003      	beq.n	8003fae <TIM_OC3_SetConfig+0x66>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a20      	ldr	r2, [pc, #128]	; (800402c <TIM_OC3_SetConfig+0xe4>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d10d      	bne.n	8003fca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	021b      	lsls	r3, r3, #8
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a16      	ldr	r2, [pc, #88]	; (8004028 <TIM_OC3_SetConfig+0xe0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d003      	beq.n	8003fda <TIM_OC3_SetConfig+0x92>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a15      	ldr	r2, [pc, #84]	; (800402c <TIM_OC3_SetConfig+0xe4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d113      	bne.n	8004002 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	621a      	str	r2, [r3, #32]
}
 800401c:	bf00      	nop
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	40010000 	.word	0x40010000
 800402c:	40010400 	.word	0x40010400

08004030 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800405e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004066:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	4313      	orrs	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800407a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	031b      	lsls	r3, r3, #12
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a12      	ldr	r2, [pc, #72]	; (80040d4 <TIM_OC4_SetConfig+0xa4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d003      	beq.n	8004098 <TIM_OC4_SetConfig+0x68>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a11      	ldr	r2, [pc, #68]	; (80040d8 <TIM_OC4_SetConfig+0xa8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d109      	bne.n	80040ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800409e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	019b      	lsls	r3, r3, #6
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	621a      	str	r2, [r3, #32]
}
 80040c6:	bf00      	nop
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40010000 	.word	0x40010000
 80040d8:	40010400 	.word	0x40010400

080040dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f003 031f 	and.w	r3, r3, #31
 80040ee:	2201      	movs	r2, #1
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a1a      	ldr	r2, [r3, #32]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	43db      	mvns	r3, r3
 80040fe:	401a      	ands	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a1a      	ldr	r2, [r3, #32]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f003 031f 	and.w	r3, r3, #31
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	fa01 f303 	lsl.w	r3, r1, r3
 8004114:	431a      	orrs	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	621a      	str	r2, [r3, #32]
}
 800411a:	bf00      	nop
 800411c:	371c      	adds	r7, #28
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
	...

08004128 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800413c:	2302      	movs	r3, #2
 800413e:	e05a      	b.n	80041f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004166:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	4313      	orrs	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a21      	ldr	r2, [pc, #132]	; (8004204 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d022      	beq.n	80041ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418c:	d01d      	beq.n	80041ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a1d      	ldr	r2, [pc, #116]	; (8004208 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d018      	beq.n	80041ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a1b      	ldr	r2, [pc, #108]	; (800420c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d013      	beq.n	80041ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a1a      	ldr	r2, [pc, #104]	; (8004210 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d00e      	beq.n	80041ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a18      	ldr	r2, [pc, #96]	; (8004214 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d009      	beq.n	80041ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a17      	ldr	r2, [pc, #92]	; (8004218 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d004      	beq.n	80041ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a15      	ldr	r2, [pc, #84]	; (800421c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d10c      	bne.n	80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	4313      	orrs	r3, r2
 80041da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40010000 	.word	0x40010000
 8004208:	40000400 	.word	0x40000400
 800420c:	40000800 	.word	0x40000800
 8004210:	40000c00 	.word	0x40000c00
 8004214:	40010400 	.word	0x40010400
 8004218:	40014000 	.word	0x40014000
 800421c:	40001800 	.word	0x40001800

08004220 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e03f      	b.n	80042da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d106      	bne.n	8004274 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7fd fd52 	bl	8001d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2224      	movs	r2, #36	; 0x24
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800428a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 fc7b 	bl	8004b88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695a      	ldr	r2, [r3, #20]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68da      	ldr	r2, [r3, #12]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b08a      	sub	sp, #40	; 0x28
 80042e6:	af02      	add	r7, sp, #8
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	603b      	str	r3, [r7, #0]
 80042ee:	4613      	mov	r3, r2
 80042f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b20      	cmp	r3, #32
 8004300:	d17c      	bne.n	80043fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d002      	beq.n	800430e <HAL_UART_Transmit+0x2c>
 8004308:	88fb      	ldrh	r3, [r7, #6]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e075      	b.n	80043fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_UART_Transmit+0x3e>
 800431c:	2302      	movs	r3, #2
 800431e:	e06e      	b.n	80043fe <HAL_UART_Transmit+0x11c>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2221      	movs	r2, #33	; 0x21
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004336:	f7fd fe2b 	bl	8001f90 <HAL_GetTick>
 800433a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	88fa      	ldrh	r2, [r7, #6]
 8004340:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	88fa      	ldrh	r2, [r7, #6]
 8004346:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004350:	d108      	bne.n	8004364 <HAL_UART_Transmit+0x82>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d104      	bne.n	8004364 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800435a:	2300      	movs	r3, #0
 800435c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	61bb      	str	r3, [r7, #24]
 8004362:	e003      	b.n	800436c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004368:	2300      	movs	r3, #0
 800436a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004374:	e02a      	b.n	80043cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2200      	movs	r2, #0
 800437e:	2180      	movs	r1, #128	; 0x80
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 fa3d 	bl	8004800 <UART_WaitOnFlagUntilTimeout>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e036      	b.n	80043fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10b      	bne.n	80043ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	3302      	adds	r3, #2
 80043aa:	61bb      	str	r3, [r7, #24]
 80043ac:	e007      	b.n	80043be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	781a      	ldrb	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	3301      	adds	r3, #1
 80043bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1cf      	bne.n	8004376 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2200      	movs	r2, #0
 80043de:	2140      	movs	r1, #64	; 0x40
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 fa0d 	bl	8004800 <UART_WaitOnFlagUntilTimeout>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e006      	b.n	80043fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	e000      	b.n	80043fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80043fc:	2302      	movs	r3, #2
  }
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3720      	adds	r7, #32
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b084      	sub	sp, #16
 800440a:	af00      	add	r7, sp, #0
 800440c:	60f8      	str	r0, [r7, #12]
 800440e:	60b9      	str	r1, [r7, #8]
 8004410:	4613      	mov	r3, r2
 8004412:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b20      	cmp	r3, #32
 800441e:	d11d      	bne.n	800445c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <HAL_UART_Receive_IT+0x26>
 8004426:	88fb      	ldrh	r3, [r7, #6]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e016      	b.n	800445e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004436:	2b01      	cmp	r3, #1
 8004438:	d101      	bne.n	800443e <HAL_UART_Receive_IT+0x38>
 800443a:	2302      	movs	r3, #2
 800443c:	e00f      	b.n	800445e <HAL_UART_Receive_IT+0x58>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800444c:	88fb      	ldrh	r3, [r7, #6]
 800444e:	461a      	mov	r2, r3
 8004450:	68b9      	ldr	r1, [r7, #8]
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 fa1e 	bl	8004894 <UART_Start_Receive_IT>
 8004458:	4603      	mov	r3, r0
 800445a:	e000      	b.n	800445e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800445c:	2302      	movs	r3, #2
  }
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08a      	sub	sp, #40	; 0x28
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004488:	2300      	movs	r3, #0
 800448a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10d      	bne.n	80044ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	f003 0320 	and.w	r3, r3, #32
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d008      	beq.n	80044ba <HAL_UART_IRQHandler+0x52>
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	f003 0320 	and.w	r3, r3, #32
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fad1 	bl	8004a5a <UART_Receive_IT>
      return;
 80044b8:	e17c      	b.n	80047b4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 80b1 	beq.w	8004624 <HAL_UART_IRQHandler+0x1bc>
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d105      	bne.n	80044d8 <HAL_UART_IRQHandler+0x70>
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 80a6 	beq.w	8004624 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <HAL_UART_IRQHandler+0x90>
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d005      	beq.n	80044f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	f043 0201 	orr.w	r2, r3, #1
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	f003 0304 	and.w	r3, r3, #4
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <HAL_UART_IRQHandler+0xb0>
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d005      	beq.n	8004518 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	f043 0202 	orr.w	r2, r3, #2
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <HAL_UART_IRQHandler+0xd0>
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	f043 0204 	orr.w	r2, r3, #4
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00f      	beq.n	8004562 <HAL_UART_IRQHandler+0xfa>
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	f003 0320 	and.w	r3, r3, #32
 8004548:	2b00      	cmp	r3, #0
 800454a:	d104      	bne.n	8004556 <HAL_UART_IRQHandler+0xee>
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	f043 0208 	orr.w	r2, r3, #8
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 811f 	beq.w	80047aa <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	2b00      	cmp	r3, #0
 8004574:	d007      	beq.n	8004586 <HAL_UART_IRQHandler+0x11e>
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	f003 0320 	and.w	r3, r3, #32
 800457c:	2b00      	cmp	r3, #0
 800457e:	d002      	beq.n	8004586 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 fa6a 	bl	8004a5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004590:	2b40      	cmp	r3, #64	; 0x40
 8004592:	bf0c      	ite	eq
 8004594:	2301      	moveq	r3, #1
 8004596:	2300      	movne	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	f003 0308 	and.w	r3, r3, #8
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d102      	bne.n	80045ae <HAL_UART_IRQHandler+0x146>
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d031      	beq.n	8004612 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f9aa 	bl	8004908 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045be:	2b40      	cmp	r3, #64	; 0x40
 80045c0:	d123      	bne.n	800460a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	695a      	ldr	r2, [r3, #20]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045d0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d013      	beq.n	8004602 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	4a77      	ldr	r2, [pc, #476]	; (80047bc <HAL_UART_IRQHandler+0x354>)
 80045e0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fd fe30 	bl	800224c <HAL_DMA_Abort_IT>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d016      	beq.n	8004620 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045fc:	4610      	mov	r0, r2
 80045fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004600:	e00e      	b.n	8004620 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f8e6 	bl	80047d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004608:	e00a      	b.n	8004620 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f8e2 	bl	80047d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004610:	e006      	b.n	8004620 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f8de 	bl	80047d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800461e:	e0c4      	b.n	80047aa <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004620:	bf00      	nop
    return;
 8004622:	e0c2      	b.n	80047aa <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004628:	2b01      	cmp	r3, #1
 800462a:	f040 80a2 	bne.w	8004772 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	f003 0310 	and.w	r3, r3, #16
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 809c 	beq.w	8004772 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	f003 0310 	and.w	r3, r3, #16
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 8096 	beq.w	8004772 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004646:	2300      	movs	r3, #0
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	60fb      	str	r3, [r7, #12]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004666:	2b40      	cmp	r3, #64	; 0x40
 8004668:	d14f      	bne.n	800470a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004674:	8a3b      	ldrh	r3, [r7, #16]
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 8099 	beq.w	80047ae <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004680:	8a3a      	ldrh	r2, [r7, #16]
 8004682:	429a      	cmp	r2, r3
 8004684:	f080 8093 	bcs.w	80047ae <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	8a3a      	ldrh	r2, [r7, #16]
 800468c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004698:	d02b      	beq.n	80046f2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046a8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	695a      	ldr	r2, [r3, #20]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0201 	bic.w	r2, r2, #1
 80046b8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695a      	ldr	r2, [r3, #20]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046c8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0210 	bic.w	r2, r2, #16
 80046e6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fd fd3d 	bl	800216c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	b29b      	uxth	r3, r3
 8004700:	4619      	mov	r1, r3
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f870 	bl	80047e8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004708:	e051      	b.n	80047ae <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004712:	b29b      	uxth	r3, r3
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d047      	beq.n	80047b2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004722:	8a7b      	ldrh	r3, [r7, #18]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d044      	beq.n	80047b2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68da      	ldr	r2, [r3, #12]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004736:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695a      	ldr	r2, [r3, #20]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0201 	bic.w	r2, r2, #1
 8004746:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2220      	movs	r2, #32
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0210 	bic.w	r2, r2, #16
 8004764:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004766:	8a7b      	ldrh	r3, [r7, #18]
 8004768:	4619      	mov	r1, r3
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f83c 	bl	80047e8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004770:	e01f      	b.n	80047b2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004778:	2b00      	cmp	r3, #0
 800477a:	d008      	beq.n	800478e <HAL_UART_IRQHandler+0x326>
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f8ff 	bl	800498a <UART_Transmit_IT>
    return;
 800478c:	e012      	b.n	80047b4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00d      	beq.n	80047b4 <HAL_UART_IRQHandler+0x34c>
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d008      	beq.n	80047b4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f941 	bl	8004a2a <UART_EndTransmit_IT>
    return;
 80047a8:	e004      	b.n	80047b4 <HAL_UART_IRQHandler+0x34c>
    return;
 80047aa:	bf00      	nop
 80047ac:	e002      	b.n	80047b4 <HAL_UART_IRQHandler+0x34c>
      return;
 80047ae:	bf00      	nop
 80047b0:	e000      	b.n	80047b4 <HAL_UART_IRQHandler+0x34c>
      return;
 80047b2:	bf00      	nop
  }
}
 80047b4:	3728      	adds	r7, #40	; 0x28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	08004963 	.word	0x08004963

080047c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	4613      	mov	r3, r2
 800480e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004810:	e02c      	b.n	800486c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004818:	d028      	beq.n	800486c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d007      	beq.n	8004830 <UART_WaitOnFlagUntilTimeout+0x30>
 8004820:	f7fd fbb6 	bl	8001f90 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	429a      	cmp	r2, r3
 800482e:	d21d      	bcs.n	800486c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800483e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695a      	ldr	r2, [r3, #20]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 0201 	bic.w	r2, r2, #1
 800484e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e00f      	b.n	800488c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	4013      	ands	r3, r2
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	429a      	cmp	r2, r3
 800487a:	bf0c      	ite	eq
 800487c:	2301      	moveq	r3, #1
 800487e:	2300      	movne	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	461a      	mov	r2, r3
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	429a      	cmp	r2, r3
 8004888:	d0c3      	beq.n	8004812 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	4613      	mov	r3, r2
 80048a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	88fa      	ldrh	r2, [r7, #6]
 80048ac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	88fa      	ldrh	r2, [r7, #6]
 80048b2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2222      	movs	r2, #34	; 0x22
 80048be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68da      	ldr	r2, [r3, #12]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048d8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	695a      	ldr	r2, [r3, #20]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f042 0201 	orr.w	r2, r2, #1
 80048e8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f042 0220 	orr.w	r2, r2, #32
 80048f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800491e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	695a      	ldr	r2, [r3, #20]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0201 	bic.w	r2, r2, #1
 800492e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004934:	2b01      	cmp	r3, #1
 8004936:	d107      	bne.n	8004948 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0210 	bic.w	r2, r2, #16
 8004946:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b084      	sub	sp, #16
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f7ff ff29 	bl	80047d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004982:	bf00      	nop
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800498a:	b480      	push	{r7}
 800498c:	b085      	sub	sp, #20
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b21      	cmp	r3, #33	; 0x21
 800499c:	d13e      	bne.n	8004a1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a6:	d114      	bne.n	80049d2 <UART_Transmit_IT+0x48>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d110      	bne.n	80049d2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	461a      	mov	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	1c9a      	adds	r2, r3, #2
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	621a      	str	r2, [r3, #32]
 80049d0:	e008      	b.n	80049e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	1c59      	adds	r1, r3, #1
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6211      	str	r1, [r2, #32]
 80049dc:	781a      	ldrb	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	4619      	mov	r1, r3
 80049f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10f      	bne.n	8004a18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	e000      	b.n	8004a1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a1c:	2302      	movs	r3, #2
  }
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b082      	sub	sp, #8
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68da      	ldr	r2, [r3, #12]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7ff feb8 	bl	80047c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b084      	sub	sp, #16
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b22      	cmp	r3, #34	; 0x22
 8004a6c:	f040 8087 	bne.w	8004b7e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a78:	d117      	bne.n	8004aaa <UART_Receive_IT+0x50>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d113      	bne.n	8004aaa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa2:	1c9a      	adds	r2, r3, #2
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	629a      	str	r2, [r3, #40]	; 0x28
 8004aa8:	e026      	b.n	8004af8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aae:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004abc:	d007      	beq.n	8004ace <UART_Receive_IT+0x74>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10a      	bne.n	8004adc <UART_Receive_IT+0x82>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d106      	bne.n	8004adc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	701a      	strb	r2, [r3, #0]
 8004ada:	e008      	b.n	8004aee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	4619      	mov	r1, r3
 8004b06:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d136      	bne.n	8004b7a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0220 	bic.w	r2, r2, #32
 8004b1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695a      	ldr	r2, [r3, #20]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0201 	bic.w	r2, r2, #1
 8004b3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d10e      	bne.n	8004b6a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68da      	ldr	r2, [r3, #12]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0210 	bic.w	r2, r2, #16
 8004b5a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b60:	4619      	mov	r1, r3
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7ff fe40 	bl	80047e8 <HAL_UARTEx_RxEventCallback>
 8004b68:	e002      	b.n	8004b70 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fb ff5e 	bl	8000a2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	e002      	b.n	8004b80 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	e000      	b.n	8004b80 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004b7e:	2302      	movs	r3, #2
  }
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b8c:	b09f      	sub	sp, #124	; 0x7c
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b9e:	68d9      	ldr	r1, [r3, #12]
 8004ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	ea40 0301 	orr.w	r3, r0, r1
 8004ba8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004bcc:	f021 010c 	bic.w	r1, r1, #12
 8004bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bd6:	430b      	orrs	r3, r1
 8004bd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be6:	6999      	ldr	r1, [r3, #24]
 8004be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	ea40 0301 	orr.w	r3, r0, r1
 8004bf0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	4bc5      	ldr	r3, [pc, #788]	; (8004f0c <UART_SetConfig+0x384>)
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d004      	beq.n	8004c06 <UART_SetConfig+0x7e>
 8004bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	4bc3      	ldr	r3, [pc, #780]	; (8004f10 <UART_SetConfig+0x388>)
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d103      	bne.n	8004c0e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c06:	f7fe facf 	bl	80031a8 <HAL_RCC_GetPCLK2Freq>
 8004c0a:	6778      	str	r0, [r7, #116]	; 0x74
 8004c0c:	e002      	b.n	8004c14 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c0e:	f7fe fab7 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
 8004c12:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c1c:	f040 80b6 	bne.w	8004d8c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c22:	461c      	mov	r4, r3
 8004c24:	f04f 0500 	mov.w	r5, #0
 8004c28:	4622      	mov	r2, r4
 8004c2a:	462b      	mov	r3, r5
 8004c2c:	1891      	adds	r1, r2, r2
 8004c2e:	6439      	str	r1, [r7, #64]	; 0x40
 8004c30:	415b      	adcs	r3, r3
 8004c32:	647b      	str	r3, [r7, #68]	; 0x44
 8004c34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c38:	1912      	adds	r2, r2, r4
 8004c3a:	eb45 0303 	adc.w	r3, r5, r3
 8004c3e:	f04f 0000 	mov.w	r0, #0
 8004c42:	f04f 0100 	mov.w	r1, #0
 8004c46:	00d9      	lsls	r1, r3, #3
 8004c48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c4c:	00d0      	lsls	r0, r2, #3
 8004c4e:	4602      	mov	r2, r0
 8004c50:	460b      	mov	r3, r1
 8004c52:	1911      	adds	r1, r2, r4
 8004c54:	6639      	str	r1, [r7, #96]	; 0x60
 8004c56:	416b      	adcs	r3, r5
 8004c58:	667b      	str	r3, [r7, #100]	; 0x64
 8004c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	1891      	adds	r1, r2, r2
 8004c66:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c68:	415b      	adcs	r3, r3
 8004c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c70:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004c74:	f7fb faac 	bl	80001d0 <__aeabi_uldivmod>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4ba5      	ldr	r3, [pc, #660]	; (8004f14 <UART_SetConfig+0x38c>)
 8004c7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c82:	095b      	lsrs	r3, r3, #5
 8004c84:	011e      	lsls	r6, r3, #4
 8004c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c88:	461c      	mov	r4, r3
 8004c8a:	f04f 0500 	mov.w	r5, #0
 8004c8e:	4622      	mov	r2, r4
 8004c90:	462b      	mov	r3, r5
 8004c92:	1891      	adds	r1, r2, r2
 8004c94:	6339      	str	r1, [r7, #48]	; 0x30
 8004c96:	415b      	adcs	r3, r3
 8004c98:	637b      	str	r3, [r7, #52]	; 0x34
 8004c9a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004c9e:	1912      	adds	r2, r2, r4
 8004ca0:	eb45 0303 	adc.w	r3, r5, r3
 8004ca4:	f04f 0000 	mov.w	r0, #0
 8004ca8:	f04f 0100 	mov.w	r1, #0
 8004cac:	00d9      	lsls	r1, r3, #3
 8004cae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cb2:	00d0      	lsls	r0, r2, #3
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	1911      	adds	r1, r2, r4
 8004cba:	65b9      	str	r1, [r7, #88]	; 0x58
 8004cbc:	416b      	adcs	r3, r5
 8004cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	f04f 0300 	mov.w	r3, #0
 8004cca:	1891      	adds	r1, r2, r2
 8004ccc:	62b9      	str	r1, [r7, #40]	; 0x28
 8004cce:	415b      	adcs	r3, r3
 8004cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cd6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004cda:	f7fb fa79 	bl	80001d0 <__aeabi_uldivmod>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	4b8c      	ldr	r3, [pc, #560]	; (8004f14 <UART_SetConfig+0x38c>)
 8004ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ce8:	095b      	lsrs	r3, r3, #5
 8004cea:	2164      	movs	r1, #100	; 0x64
 8004cec:	fb01 f303 	mul.w	r3, r1, r3
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	3332      	adds	r3, #50	; 0x32
 8004cf6:	4a87      	ldr	r2, [pc, #540]	; (8004f14 <UART_SetConfig+0x38c>)
 8004cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfc:	095b      	lsrs	r3, r3, #5
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d04:	441e      	add	r6, r3
 8004d06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f04f 0100 	mov.w	r1, #0
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	1894      	adds	r4, r2, r2
 8004d14:	623c      	str	r4, [r7, #32]
 8004d16:	415b      	adcs	r3, r3
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
 8004d1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d1e:	1812      	adds	r2, r2, r0
 8004d20:	eb41 0303 	adc.w	r3, r1, r3
 8004d24:	f04f 0400 	mov.w	r4, #0
 8004d28:	f04f 0500 	mov.w	r5, #0
 8004d2c:	00dd      	lsls	r5, r3, #3
 8004d2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d32:	00d4      	lsls	r4, r2, #3
 8004d34:	4622      	mov	r2, r4
 8004d36:	462b      	mov	r3, r5
 8004d38:	1814      	adds	r4, r2, r0
 8004d3a:	653c      	str	r4, [r7, #80]	; 0x50
 8004d3c:	414b      	adcs	r3, r1
 8004d3e:	657b      	str	r3, [r7, #84]	; 0x54
 8004d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	461a      	mov	r2, r3
 8004d46:	f04f 0300 	mov.w	r3, #0
 8004d4a:	1891      	adds	r1, r2, r2
 8004d4c:	61b9      	str	r1, [r7, #24]
 8004d4e:	415b      	adcs	r3, r3
 8004d50:	61fb      	str	r3, [r7, #28]
 8004d52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d56:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004d5a:	f7fb fa39 	bl	80001d0 <__aeabi_uldivmod>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	4b6c      	ldr	r3, [pc, #432]	; (8004f14 <UART_SetConfig+0x38c>)
 8004d64:	fba3 1302 	umull	r1, r3, r3, r2
 8004d68:	095b      	lsrs	r3, r3, #5
 8004d6a:	2164      	movs	r1, #100	; 0x64
 8004d6c:	fb01 f303 	mul.w	r3, r1, r3
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	3332      	adds	r3, #50	; 0x32
 8004d76:	4a67      	ldr	r2, [pc, #412]	; (8004f14 <UART_SetConfig+0x38c>)
 8004d78:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7c:	095b      	lsrs	r3, r3, #5
 8004d7e:	f003 0207 	and.w	r2, r3, #7
 8004d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4432      	add	r2, r6
 8004d88:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d8a:	e0b9      	b.n	8004f00 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d8e:	461c      	mov	r4, r3
 8004d90:	f04f 0500 	mov.w	r5, #0
 8004d94:	4622      	mov	r2, r4
 8004d96:	462b      	mov	r3, r5
 8004d98:	1891      	adds	r1, r2, r2
 8004d9a:	6139      	str	r1, [r7, #16]
 8004d9c:	415b      	adcs	r3, r3
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004da4:	1912      	adds	r2, r2, r4
 8004da6:	eb45 0303 	adc.w	r3, r5, r3
 8004daa:	f04f 0000 	mov.w	r0, #0
 8004dae:	f04f 0100 	mov.w	r1, #0
 8004db2:	00d9      	lsls	r1, r3, #3
 8004db4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004db8:	00d0      	lsls	r0, r2, #3
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	eb12 0804 	adds.w	r8, r2, r4
 8004dc2:	eb43 0905 	adc.w	r9, r3, r5
 8004dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f04f 0100 	mov.w	r1, #0
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	f04f 0300 	mov.w	r3, #0
 8004dd8:	008b      	lsls	r3, r1, #2
 8004dda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004dde:	0082      	lsls	r2, r0, #2
 8004de0:	4640      	mov	r0, r8
 8004de2:	4649      	mov	r1, r9
 8004de4:	f7fb f9f4 	bl	80001d0 <__aeabi_uldivmod>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4b49      	ldr	r3, [pc, #292]	; (8004f14 <UART_SetConfig+0x38c>)
 8004dee:	fba3 2302 	umull	r2, r3, r3, r2
 8004df2:	095b      	lsrs	r3, r3, #5
 8004df4:	011e      	lsls	r6, r3, #4
 8004df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f04f 0100 	mov.w	r1, #0
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	1894      	adds	r4, r2, r2
 8004e04:	60bc      	str	r4, [r7, #8]
 8004e06:	415b      	adcs	r3, r3
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e0e:	1812      	adds	r2, r2, r0
 8004e10:	eb41 0303 	adc.w	r3, r1, r3
 8004e14:	f04f 0400 	mov.w	r4, #0
 8004e18:	f04f 0500 	mov.w	r5, #0
 8004e1c:	00dd      	lsls	r5, r3, #3
 8004e1e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e22:	00d4      	lsls	r4, r2, #3
 8004e24:	4622      	mov	r2, r4
 8004e26:	462b      	mov	r3, r5
 8004e28:	1814      	adds	r4, r2, r0
 8004e2a:	64bc      	str	r4, [r7, #72]	; 0x48
 8004e2c:	414b      	adcs	r3, r1
 8004e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f04f 0100 	mov.w	r1, #0
 8004e3a:	f04f 0200 	mov.w	r2, #0
 8004e3e:	f04f 0300 	mov.w	r3, #0
 8004e42:	008b      	lsls	r3, r1, #2
 8004e44:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e48:	0082      	lsls	r2, r0, #2
 8004e4a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004e4e:	f7fb f9bf 	bl	80001d0 <__aeabi_uldivmod>
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	4b2f      	ldr	r3, [pc, #188]	; (8004f14 <UART_SetConfig+0x38c>)
 8004e58:	fba3 1302 	umull	r1, r3, r3, r2
 8004e5c:	095b      	lsrs	r3, r3, #5
 8004e5e:	2164      	movs	r1, #100	; 0x64
 8004e60:	fb01 f303 	mul.w	r3, r1, r3
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	3332      	adds	r3, #50	; 0x32
 8004e6a:	4a2a      	ldr	r2, [pc, #168]	; (8004f14 <UART_SetConfig+0x38c>)
 8004e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e70:	095b      	lsrs	r3, r3, #5
 8004e72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e76:	441e      	add	r6, r3
 8004e78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f04f 0100 	mov.w	r1, #0
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	1894      	adds	r4, r2, r2
 8004e86:	603c      	str	r4, [r7, #0]
 8004e88:	415b      	adcs	r3, r3
 8004e8a:	607b      	str	r3, [r7, #4]
 8004e8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e90:	1812      	adds	r2, r2, r0
 8004e92:	eb41 0303 	adc.w	r3, r1, r3
 8004e96:	f04f 0400 	mov.w	r4, #0
 8004e9a:	f04f 0500 	mov.w	r5, #0
 8004e9e:	00dd      	lsls	r5, r3, #3
 8004ea0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ea4:	00d4      	lsls	r4, r2, #3
 8004ea6:	4622      	mov	r2, r4
 8004ea8:	462b      	mov	r3, r5
 8004eaa:	eb12 0a00 	adds.w	sl, r2, r0
 8004eae:	eb43 0b01 	adc.w	fp, r3, r1
 8004eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f04f 0100 	mov.w	r1, #0
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	008b      	lsls	r3, r1, #2
 8004ec6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004eca:	0082      	lsls	r2, r0, #2
 8004ecc:	4650      	mov	r0, sl
 8004ece:	4659      	mov	r1, fp
 8004ed0:	f7fb f97e 	bl	80001d0 <__aeabi_uldivmod>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4b0e      	ldr	r3, [pc, #56]	; (8004f14 <UART_SetConfig+0x38c>)
 8004eda:	fba3 1302 	umull	r1, r3, r3, r2
 8004ede:	095b      	lsrs	r3, r3, #5
 8004ee0:	2164      	movs	r1, #100	; 0x64
 8004ee2:	fb01 f303 	mul.w	r3, r1, r3
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	3332      	adds	r3, #50	; 0x32
 8004eec:	4a09      	ldr	r2, [pc, #36]	; (8004f14 <UART_SetConfig+0x38c>)
 8004eee:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	f003 020f 	and.w	r2, r3, #15
 8004ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4432      	add	r2, r6
 8004efe:	609a      	str	r2, [r3, #8]
}
 8004f00:	bf00      	nop
 8004f02:	377c      	adds	r7, #124	; 0x7c
 8004f04:	46bd      	mov	sp, r7
 8004f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40011000 	.word	0x40011000
 8004f10:	40011400 	.word	0x40011400
 8004f14:	51eb851f 	.word	0x51eb851f

08004f18 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	4603      	mov	r3, r0
 8004f20:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f22:	2300      	movs	r3, #0
 8004f24:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f2a:	2b84      	cmp	r3, #132	; 0x84
 8004f2c:	d005      	beq.n	8004f3a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4413      	add	r3, r2
 8004f36:	3303      	adds	r3, #3
 8004f38:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f4e:	f3ef 8305 	mrs	r3, IPSR
 8004f52:	607b      	str	r3, [r7, #4]
  return(result);
 8004f54:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	bf14      	ite	ne
 8004f5a:	2301      	movne	r3, #1
 8004f5c:	2300      	moveq	r3, #0
 8004f5e:	b2db      	uxtb	r3, r3
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004f70:	f001 f942 	bl	80061f8 <vTaskStartScheduler>
  
  return osOK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004f7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f7c:	b089      	sub	sp, #36	; 0x24
 8004f7e:	af04      	add	r7, sp, #16
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d020      	beq.n	8004fce <osThreadCreate+0x54>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d01c      	beq.n	8004fce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685c      	ldr	r4, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681d      	ldr	r5, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	691e      	ldr	r6, [r3, #16]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7ff ffb6 	bl	8004f18 <makeFreeRtosPriority>
 8004fac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fb6:	9202      	str	r2, [sp, #8]
 8004fb8:	9301      	str	r3, [sp, #4]
 8004fba:	9100      	str	r1, [sp, #0]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	4632      	mov	r2, r6
 8004fc0:	4629      	mov	r1, r5
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	f000 ff50 	bl	8005e68 <xTaskCreateStatic>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	e01c      	b.n	8005008 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685c      	ldr	r4, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fda:	b29e      	uxth	r6, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff ff98 	bl	8004f18 <makeFreeRtosPriority>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	f107 030c 	add.w	r3, r7, #12
 8004fee:	9301      	str	r3, [sp, #4]
 8004ff0:	9200      	str	r2, [sp, #0]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	4632      	mov	r2, r6
 8004ff6:	4629      	mov	r1, r5
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	f000 ff92 	bl	8005f22 <xTaskCreate>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b01      	cmp	r3, #1
 8005002:	d001      	beq.n	8005008 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005004:	2300      	movs	r3, #0
 8005006:	e000      	b.n	800500a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005008:	68fb      	ldr	r3, [r7, #12]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005012 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b084      	sub	sp, #16
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d001      	beq.n	8005028 <osDelay+0x16>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	e000      	b.n	800502a <osDelay+0x18>
 8005028:	2301      	movs	r3, #1
 800502a:	4618      	mov	r0, r3
 800502c:	f001 f8b0 	bl	8006190 <vTaskDelay>
  
  return osOK;
 8005030:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b082      	sub	sp, #8
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d007      	beq.n	800505a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	4619      	mov	r1, r3
 8005050:	2001      	movs	r0, #1
 8005052:	f000 faae 	bl	80055b2 <xQueueCreateMutexStatic>
 8005056:	4603      	mov	r3, r0
 8005058:	e003      	b.n	8005062 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800505a:	2001      	movs	r0, #1
 800505c:	f000 fa91 	bl	8005582 <xQueueCreateMutex>
 8005060:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005062:	4618      	mov	r0, r3
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
	...

0800506c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005076:	2300      	movs	r3, #0
 8005078:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <osMutexWait+0x18>
    return osErrorParameter;
 8005080:	2380      	movs	r3, #128	; 0x80
 8005082:	e03a      	b.n	80050fa <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005084:	2300      	movs	r3, #0
 8005086:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508e:	d103      	bne.n	8005098 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005090:	f04f 33ff 	mov.w	r3, #4294967295
 8005094:	60fb      	str	r3, [r7, #12]
 8005096:	e009      	b.n	80050ac <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d006      	beq.n	80050ac <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <osMutexWait+0x40>
      ticks = 1;
 80050a8:	2301      	movs	r3, #1
 80050aa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80050ac:	f7ff ff4c 	bl	8004f48 <inHandlerMode>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d017      	beq.n	80050e6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80050b6:	f107 0308 	add.w	r3, r7, #8
 80050ba:	461a      	mov	r2, r3
 80050bc:	2100      	movs	r1, #0
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fd2a 	bl	8005b18 <xQueueReceiveFromISR>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d001      	beq.n	80050ce <osMutexWait+0x62>
      return osErrorOS;
 80050ca:	23ff      	movs	r3, #255	; 0xff
 80050cc:	e015      	b.n	80050fa <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d011      	beq.n	80050f8 <osMutexWait+0x8c>
 80050d4:	4b0b      	ldr	r3, [pc, #44]	; (8005104 <osMutexWait+0x98>)
 80050d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	e008      	b.n	80050f8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80050e6:	68f9      	ldr	r1, [r7, #12]
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 fc09 	bl	8005900 <xQueueSemaphoreTake>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d001      	beq.n	80050f8 <osMutexWait+0x8c>
    return osErrorOS;
 80050f4:	23ff      	movs	r3, #255	; 0xff
 80050f6:	e000      	b.n	80050fa <osMutexWait+0x8e>
  }
  
  return osOK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	e000ed04 	.word	0xe000ed04

08005108 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005110:	2300      	movs	r3, #0
 8005112:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005114:	2300      	movs	r3, #0
 8005116:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005118:	f7ff ff16 	bl	8004f48 <inHandlerMode>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d016      	beq.n	8005150 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005122:	f107 0308 	add.w	r3, r7, #8
 8005126:	4619      	mov	r1, r3
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 fb5b 	bl	80057e4 <xQueueGiveFromISR>
 800512e:	4603      	mov	r3, r0
 8005130:	2b01      	cmp	r3, #1
 8005132:	d001      	beq.n	8005138 <osMutexRelease+0x30>
      return osErrorOS;
 8005134:	23ff      	movs	r3, #255	; 0xff
 8005136:	e017      	b.n	8005168 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d013      	beq.n	8005166 <osMutexRelease+0x5e>
 800513e:	4b0c      	ldr	r3, [pc, #48]	; (8005170 <osMutexRelease+0x68>)
 8005140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	e00a      	b.n	8005166 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005150:	2300      	movs	r3, #0
 8005152:	2200      	movs	r2, #0
 8005154:	2100      	movs	r1, #0
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 fa46 	bl	80055e8 <xQueueGenericSend>
 800515c:	4603      	mov	r3, r0
 800515e:	2b01      	cmp	r3, #1
 8005160:	d001      	beq.n	8005166 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005162:	23ff      	movs	r3, #255	; 0xff
 8005164:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005166:	68fb      	ldr	r3, [r7, #12]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	e000ed04 	.word	0xe000ed04

08005174 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f103 0208 	add.w	r2, r3, #8
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f04f 32ff 	mov.w	r2, #4294967295
 800518c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f103 0208 	add.w	r2, r3, #8
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f103 0208 	add.w	r2, r3, #8
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051ce:	b480      	push	{r7}
 80051d0:	b085      	sub	sp, #20
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
 80051d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	601a      	str	r2, [r3, #0]
}
 800520a:	bf00      	nop
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005216:	b480      	push	{r7}
 8005218:	b085      	sub	sp, #20
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522c:	d103      	bne.n	8005236 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	e00c      	b.n	8005250 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	3308      	adds	r3, #8
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	e002      	b.n	8005244 <vListInsert+0x2e>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	429a      	cmp	r2, r3
 800524e:	d2f6      	bcs.n	800523e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	1c5a      	adds	r2, r3, #1
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	601a      	str	r2, [r3, #0]
}
 800527c:	bf00      	nop
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	6892      	ldr	r2, [r2, #8]
 800529e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	6852      	ldr	r2, [r2, #4]
 80052a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d103      	bne.n	80052bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	1e5a      	subs	r2, r3, #1
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10a      	bne.n	8005306 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005302:	bf00      	nop
 8005304:	e7fe      	b.n	8005304 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005306:	f001 fec5 	bl	8007094 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005312:	68f9      	ldr	r1, [r7, #12]
 8005314:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005316:	fb01 f303 	mul.w	r3, r1, r3
 800531a:	441a      	add	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005336:	3b01      	subs	r3, #1
 8005338:	68f9      	ldr	r1, [r7, #12]
 800533a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800533c:	fb01 f303 	mul.w	r3, r1, r3
 8005340:	441a      	add	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	22ff      	movs	r2, #255	; 0xff
 800534a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	22ff      	movs	r2, #255	; 0xff
 8005352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d114      	bne.n	8005386 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d01a      	beq.n	800539a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3310      	adds	r3, #16
 8005368:	4618      	mov	r0, r3
 800536a:	f001 f987 	bl	800667c <xTaskRemoveFromEventList>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d012      	beq.n	800539a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005374:	4b0c      	ldr	r3, [pc, #48]	; (80053a8 <xQueueGenericReset+0xcc>)
 8005376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	e009      	b.n	800539a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	3310      	adds	r3, #16
 800538a:	4618      	mov	r0, r3
 800538c:	f7ff fef2 	bl	8005174 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	3324      	adds	r3, #36	; 0x24
 8005394:	4618      	mov	r0, r3
 8005396:	f7ff feed 	bl	8005174 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800539a:	f001 feab 	bl	80070f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800539e:	2301      	movs	r3, #1
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	e000ed04 	.word	0xe000ed04

080053ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b08e      	sub	sp, #56	; 0x38
 80053b0:	af02      	add	r7, sp, #8
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10a      	bne.n	80053d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80053c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80053d2:	bf00      	nop
 80053d4:	e7fe      	b.n	80053d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10a      	bne.n	80053f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80053dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e0:	f383 8811 	msr	BASEPRI, r3
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053ee:	bf00      	nop
 80053f0:	e7fe      	b.n	80053f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <xQueueGenericCreateStatic+0x52>
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <xQueueGenericCreateStatic+0x56>
 80053fe:	2301      	movs	r3, #1
 8005400:	e000      	b.n	8005404 <xQueueGenericCreateStatic+0x58>
 8005402:	2300      	movs	r3, #0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10a      	bne.n	800541e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	623b      	str	r3, [r7, #32]
}
 800541a:	bf00      	nop
 800541c:	e7fe      	b.n	800541c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d102      	bne.n	800542a <xQueueGenericCreateStatic+0x7e>
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <xQueueGenericCreateStatic+0x82>
 800542a:	2301      	movs	r3, #1
 800542c:	e000      	b.n	8005430 <xQueueGenericCreateStatic+0x84>
 800542e:	2300      	movs	r3, #0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10a      	bne.n	800544a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	61fb      	str	r3, [r7, #28]
}
 8005446:	bf00      	nop
 8005448:	e7fe      	b.n	8005448 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800544a:	2348      	movs	r3, #72	; 0x48
 800544c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2b48      	cmp	r3, #72	; 0x48
 8005452:	d00a      	beq.n	800546a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	61bb      	str	r3, [r7, #24]
}
 8005466:	bf00      	nop
 8005468:	e7fe      	b.n	8005468 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800546a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00d      	beq.n	8005492 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800547e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	4613      	mov	r3, r2
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	68b9      	ldr	r1, [r7, #8]
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 f83f 	bl	8005510 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005494:	4618      	mov	r0, r3
 8005496:	3730      	adds	r7, #48	; 0x30
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800549c:	b580      	push	{r7, lr}
 800549e:	b08a      	sub	sp, #40	; 0x28
 80054a0:	af02      	add	r7, sp, #8
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	4613      	mov	r3, r2
 80054a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10a      	bne.n	80054c6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	613b      	str	r3, [r7, #16]
}
 80054c2:	bf00      	nop
 80054c4:	e7fe      	b.n	80054c4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	fb02 f303 	mul.w	r3, r2, r3
 80054ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	3348      	adds	r3, #72	; 0x48
 80054d4:	4618      	mov	r0, r3
 80054d6:	f001 feff 	bl	80072d8 <pvPortMalloc>
 80054da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d011      	beq.n	8005506 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	3348      	adds	r3, #72	; 0x48
 80054ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054f4:	79fa      	ldrb	r2, [r7, #7]
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	4613      	mov	r3, r2
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	68b9      	ldr	r1, [r7, #8]
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 f805 	bl	8005510 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005506:	69bb      	ldr	r3, [r7, #24]
	}
 8005508:	4618      	mov	r0, r3
 800550a:	3720      	adds	r7, #32
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
 800551c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d103      	bne.n	800552c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	601a      	str	r2, [r3, #0]
 800552a:	e002      	b.n	8005532 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800553e:	2101      	movs	r1, #1
 8005540:	69b8      	ldr	r0, [r7, #24]
 8005542:	f7ff fecb 	bl	80052dc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005546:	bf00      	nop
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800554e:	b580      	push	{r7, lr}
 8005550:	b082      	sub	sp, #8
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00e      	beq.n	800557a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800556e:	2300      	movs	r3, #0
 8005570:	2200      	movs	r2, #0
 8005572:	2100      	movs	r1, #0
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f837 	bl	80055e8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800557a:	bf00      	nop
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005582:	b580      	push	{r7, lr}
 8005584:	b086      	sub	sp, #24
 8005586:	af00      	add	r7, sp, #0
 8005588:	4603      	mov	r3, r0
 800558a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800558c:	2301      	movs	r3, #1
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	2300      	movs	r3, #0
 8005592:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005594:	79fb      	ldrb	r3, [r7, #7]
 8005596:	461a      	mov	r2, r3
 8005598:	6939      	ldr	r1, [r7, #16]
 800559a:	6978      	ldr	r0, [r7, #20]
 800559c:	f7ff ff7e 	bl	800549c <xQueueGenericCreate>
 80055a0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f7ff ffd3 	bl	800554e <prvInitialiseMutex>

		return xNewQueue;
 80055a8:	68fb      	ldr	r3, [r7, #12]
	}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3718      	adds	r7, #24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b088      	sub	sp, #32
 80055b6:	af02      	add	r7, sp, #8
 80055b8:	4603      	mov	r3, r0
 80055ba:	6039      	str	r1, [r7, #0]
 80055bc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80055be:	2301      	movs	r3, #1
 80055c0:	617b      	str	r3, [r7, #20]
 80055c2:	2300      	movs	r3, #0
 80055c4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80055c6:	79fb      	ldrb	r3, [r7, #7]
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2200      	movs	r2, #0
 80055ce:	6939      	ldr	r1, [r7, #16]
 80055d0:	6978      	ldr	r0, [r7, #20]
 80055d2:	f7ff feeb 	bl	80053ac <xQueueGenericCreateStatic>
 80055d6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f7ff ffb8 	bl	800554e <prvInitialiseMutex>

		return xNewQueue;
 80055de:	68fb      	ldr	r3, [r7, #12]
	}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3718      	adds	r7, #24
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08e      	sub	sp, #56	; 0x38
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80055f6:	2300      	movs	r3, #0
 80055f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80055fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10a      	bne.n	800561a <xQueueGenericSend+0x32>
	__asm volatile
 8005604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005616:	bf00      	nop
 8005618:	e7fe      	b.n	8005618 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d103      	bne.n	8005628 <xQueueGenericSend+0x40>
 8005620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <xQueueGenericSend+0x44>
 8005628:	2301      	movs	r3, #1
 800562a:	e000      	b.n	800562e <xQueueGenericSend+0x46>
 800562c:	2300      	movs	r3, #0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10a      	bne.n	8005648 <xQueueGenericSend+0x60>
	__asm volatile
 8005632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005644:	bf00      	nop
 8005646:	e7fe      	b.n	8005646 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2b02      	cmp	r3, #2
 800564c:	d103      	bne.n	8005656 <xQueueGenericSend+0x6e>
 800564e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005652:	2b01      	cmp	r3, #1
 8005654:	d101      	bne.n	800565a <xQueueGenericSend+0x72>
 8005656:	2301      	movs	r3, #1
 8005658:	e000      	b.n	800565c <xQueueGenericSend+0x74>
 800565a:	2300      	movs	r3, #0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10a      	bne.n	8005676 <xQueueGenericSend+0x8e>
	__asm volatile
 8005660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	623b      	str	r3, [r7, #32]
}
 8005672:	bf00      	nop
 8005674:	e7fe      	b.n	8005674 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005676:	f001 f9bd 	bl	80069f4 <xTaskGetSchedulerState>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d102      	bne.n	8005686 <xQueueGenericSend+0x9e>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <xQueueGenericSend+0xa2>
 8005686:	2301      	movs	r3, #1
 8005688:	e000      	b.n	800568c <xQueueGenericSend+0xa4>
 800568a:	2300      	movs	r3, #0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10a      	bne.n	80056a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	61fb      	str	r3, [r7, #28]
}
 80056a2:	bf00      	nop
 80056a4:	e7fe      	b.n	80056a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056a6:	f001 fcf5 	bl	8007094 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d302      	bcc.n	80056bc <xQueueGenericSend+0xd4>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d129      	bne.n	8005710 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	68b9      	ldr	r1, [r7, #8]
 80056c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056c2:	f000 fac1 	bl	8005c48 <prvCopyDataToQueue>
 80056c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d010      	beq.n	80056f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d2:	3324      	adds	r3, #36	; 0x24
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 ffd1 	bl	800667c <xTaskRemoveFromEventList>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d013      	beq.n	8005708 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80056e0:	4b3f      	ldr	r3, [pc, #252]	; (80057e0 <xQueueGenericSend+0x1f8>)
 80056e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	e00a      	b.n	8005708 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80056f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d007      	beq.n	8005708 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80056f8:	4b39      	ldr	r3, [pc, #228]	; (80057e0 <xQueueGenericSend+0x1f8>)
 80056fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005708:	f001 fcf4 	bl	80070f4 <vPortExitCritical>
				return pdPASS;
 800570c:	2301      	movs	r3, #1
 800570e:	e063      	b.n	80057d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d103      	bne.n	800571e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005716:	f001 fced 	bl	80070f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800571a:	2300      	movs	r3, #0
 800571c:	e05c      	b.n	80057d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800571e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005720:	2b00      	cmp	r3, #0
 8005722:	d106      	bne.n	8005732 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005724:	f107 0314 	add.w	r3, r7, #20
 8005728:	4618      	mov	r0, r3
 800572a:	f001 f809 	bl	8006740 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800572e:	2301      	movs	r3, #1
 8005730:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005732:	f001 fcdf 	bl	80070f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005736:	f000 fdbf 	bl	80062b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800573a:	f001 fcab 	bl	8007094 <vPortEnterCritical>
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005744:	b25b      	sxtb	r3, r3
 8005746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574a:	d103      	bne.n	8005754 <xQueueGenericSend+0x16c>
 800574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005756:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800575a:	b25b      	sxtb	r3, r3
 800575c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005760:	d103      	bne.n	800576a <xQueueGenericSend+0x182>
 8005762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800576a:	f001 fcc3 	bl	80070f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800576e:	1d3a      	adds	r2, r7, #4
 8005770:	f107 0314 	add.w	r3, r7, #20
 8005774:	4611      	mov	r1, r2
 8005776:	4618      	mov	r0, r3
 8005778:	f000 fff8 	bl	800676c <xTaskCheckForTimeOut>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d124      	bne.n	80057cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005782:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005784:	f000 fb58 	bl	8005e38 <prvIsQueueFull>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d018      	beq.n	80057c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800578e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005790:	3310      	adds	r3, #16
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	4611      	mov	r1, r2
 8005796:	4618      	mov	r0, r3
 8005798:	f000 ff4c 	bl	8006634 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800579c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800579e:	f000 fae3 	bl	8005d68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057a2:	f000 fd97 	bl	80062d4 <xTaskResumeAll>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f47f af7c 	bne.w	80056a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80057ae:	4b0c      	ldr	r3, [pc, #48]	; (80057e0 <xQueueGenericSend+0x1f8>)
 80057b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	f3bf 8f6f 	isb	sy
 80057be:	e772      	b.n	80056a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057c2:	f000 fad1 	bl	8005d68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057c6:	f000 fd85 	bl	80062d4 <xTaskResumeAll>
 80057ca:	e76c      	b.n	80056a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80057cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057ce:	f000 facb 	bl	8005d68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057d2:	f000 fd7f 	bl	80062d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80057d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3738      	adds	r7, #56	; 0x38
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	e000ed04 	.word	0xe000ed04

080057e4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b08e      	sub	sp, #56	; 0x38
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80057f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10a      	bne.n	800580e <xQueueGiveFromISR+0x2a>
	__asm volatile
 80057f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	623b      	str	r3, [r7, #32]
}
 800580a:	bf00      	nop
 800580c:	e7fe      	b.n	800580c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <xQueueGiveFromISR+0x48>
	__asm volatile
 8005816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	61fb      	str	r3, [r7, #28]
}
 8005828:	bf00      	nop
 800582a:	e7fe      	b.n	800582a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800582c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d103      	bne.n	800583c <xQueueGiveFromISR+0x58>
 8005834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <xQueueGiveFromISR+0x5c>
 800583c:	2301      	movs	r3, #1
 800583e:	e000      	b.n	8005842 <xQueueGiveFromISR+0x5e>
 8005840:	2300      	movs	r3, #0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10a      	bne.n	800585c <xQueueGiveFromISR+0x78>
	__asm volatile
 8005846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	61bb      	str	r3, [r7, #24]
}
 8005858:	bf00      	nop
 800585a:	e7fe      	b.n	800585a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800585c:	f001 fcfc 	bl	8007258 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005860:	f3ef 8211 	mrs	r2, BASEPRI
 8005864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	617a      	str	r2, [r7, #20]
 8005876:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005878:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800587a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800587c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005880:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005888:	429a      	cmp	r2, r3
 800588a:	d22b      	bcs.n	80058e4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800588c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800589e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80058a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a6:	d112      	bne.n	80058ce <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d016      	beq.n	80058de <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b2:	3324      	adds	r3, #36	; 0x24
 80058b4:	4618      	mov	r0, r3
 80058b6:	f000 fee1 	bl	800667c <xTaskRemoveFromEventList>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00e      	beq.n	80058de <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00b      	beq.n	80058de <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2201      	movs	r2, #1
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	e007      	b.n	80058de <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80058ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058d2:	3301      	adds	r3, #1
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	b25a      	sxtb	r2, r3
 80058d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80058de:	2301      	movs	r3, #1
 80058e0:	637b      	str	r3, [r7, #52]	; 0x34
 80058e2:	e001      	b.n	80058e8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80058e4:	2300      	movs	r3, #0
 80058e6:	637b      	str	r3, [r7, #52]	; 0x34
 80058e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ea:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80058f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80058f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3738      	adds	r7, #56	; 0x38
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b08e      	sub	sp, #56	; 0x38
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800590a:	2300      	movs	r3, #0
 800590c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005912:	2300      	movs	r3, #0
 8005914:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10a      	bne.n	8005932 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800591c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	623b      	str	r3, [r7, #32]
}
 800592e:	bf00      	nop
 8005930:	e7fe      	b.n	8005930 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800593a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593e:	f383 8811 	msr	BASEPRI, r3
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	61fb      	str	r3, [r7, #28]
}
 800594c:	bf00      	nop
 800594e:	e7fe      	b.n	800594e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005950:	f001 f850 	bl	80069f4 <xTaskGetSchedulerState>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d102      	bne.n	8005960 <xQueueSemaphoreTake+0x60>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <xQueueSemaphoreTake+0x64>
 8005960:	2301      	movs	r3, #1
 8005962:	e000      	b.n	8005966 <xQueueSemaphoreTake+0x66>
 8005964:	2300      	movs	r3, #0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10a      	bne.n	8005980 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800596a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	61bb      	str	r3, [r7, #24]
}
 800597c:	bf00      	nop
 800597e:	e7fe      	b.n	800597e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005980:	f001 fb88 	bl	8007094 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005988:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800598a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598c:	2b00      	cmp	r3, #0
 800598e:	d024      	beq.n	80059da <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005992:	1e5a      	subs	r2, r3, #1
 8005994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005996:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d104      	bne.n	80059aa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80059a0:	f001 f9d0 	bl	8006d44 <pvTaskIncrementMutexHeldCount>
 80059a4:	4602      	mov	r2, r0
 80059a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00f      	beq.n	80059d2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b4:	3310      	adds	r3, #16
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 fe60 	bl	800667c <xTaskRemoveFromEventList>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d007      	beq.n	80059d2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80059c2:	4b54      	ldr	r3, [pc, #336]	; (8005b14 <xQueueSemaphoreTake+0x214>)
 80059c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059d2:	f001 fb8f 	bl	80070f4 <vPortExitCritical>
				return pdPASS;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e097      	b.n	8005b0a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d111      	bne.n	8005a04 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00a      	beq.n	80059fc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80059e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ea:	f383 8811 	msr	BASEPRI, r3
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f3bf 8f4f 	dsb	sy
 80059f6:	617b      	str	r3, [r7, #20]
}
 80059f8:	bf00      	nop
 80059fa:	e7fe      	b.n	80059fa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80059fc:	f001 fb7a 	bl	80070f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a00:	2300      	movs	r3, #0
 8005a02:	e082      	b.n	8005b0a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d106      	bne.n	8005a18 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a0a:	f107 030c 	add.w	r3, r7, #12
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 fe96 	bl	8006740 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a14:	2301      	movs	r3, #1
 8005a16:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a18:	f001 fb6c 	bl	80070f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a1c:	f000 fc4c 	bl	80062b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a20:	f001 fb38 	bl	8007094 <vPortEnterCritical>
 8005a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a2a:	b25b      	sxtb	r3, r3
 8005a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a30:	d103      	bne.n	8005a3a <xQueueSemaphoreTake+0x13a>
 8005a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a40:	b25b      	sxtb	r3, r3
 8005a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a46:	d103      	bne.n	8005a50 <xQueueSemaphoreTake+0x150>
 8005a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a50:	f001 fb50 	bl	80070f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a54:	463a      	mov	r2, r7
 8005a56:	f107 030c 	add.w	r3, r7, #12
 8005a5a:	4611      	mov	r1, r2
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f000 fe85 	bl	800676c <xTaskCheckForTimeOut>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d132      	bne.n	8005ace <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a6a:	f000 f9cf 	bl	8005e0c <prvIsQueueEmpty>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d026      	beq.n	8005ac2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d109      	bne.n	8005a90 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005a7c:	f001 fb0a 	bl	8007094 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	4618      	mov	r0, r3
 8005a86:	f000 ffd3 	bl	8006a30 <xTaskPriorityInherit>
 8005a8a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005a8c:	f001 fb32 	bl	80070f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a92:	3324      	adds	r3, #36	; 0x24
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	4611      	mov	r1, r2
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f000 fdcb 	bl	8006634 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005aa0:	f000 f962 	bl	8005d68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005aa4:	f000 fc16 	bl	80062d4 <xTaskResumeAll>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f47f af68 	bne.w	8005980 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005ab0:	4b18      	ldr	r3, [pc, #96]	; (8005b14 <xQueueSemaphoreTake+0x214>)
 8005ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	e75e      	b.n	8005980 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005ac2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ac4:	f000 f950 	bl	8005d68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ac8:	f000 fc04 	bl	80062d4 <xTaskResumeAll>
 8005acc:	e758      	b.n	8005980 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005ace:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ad0:	f000 f94a 	bl	8005d68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ad4:	f000 fbfe 	bl	80062d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ad8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ada:	f000 f997 	bl	8005e0c <prvIsQueueEmpty>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f43f af4d 	beq.w	8005980 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00d      	beq.n	8005b08 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005aec:	f001 fad2 	bl	8007094 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005af0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005af2:	f000 f891 	bl	8005c18 <prvGetDisinheritPriorityAfterTimeout>
 8005af6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005afe:	4618      	mov	r0, r3
 8005b00:	f001 f892 	bl	8006c28 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005b04:	f001 faf6 	bl	80070f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3738      	adds	r7, #56	; 0x38
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	e000ed04 	.word	0xe000ed04

08005b18 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b08e      	sub	sp, #56	; 0x38
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10a      	bne.n	8005b44 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	623b      	str	r3, [r7, #32]
}
 8005b40:	bf00      	nop
 8005b42:	e7fe      	b.n	8005b42 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d103      	bne.n	8005b52 <xQueueReceiveFromISR+0x3a>
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <xQueueReceiveFromISR+0x3e>
 8005b52:	2301      	movs	r3, #1
 8005b54:	e000      	b.n	8005b58 <xQueueReceiveFromISR+0x40>
 8005b56:	2300      	movs	r3, #0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10a      	bne.n	8005b72 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	61fb      	str	r3, [r7, #28]
}
 8005b6e:	bf00      	nop
 8005b70:	e7fe      	b.n	8005b70 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b72:	f001 fb71 	bl	8007258 <vPortValidateInterruptPriority>
	__asm volatile
 8005b76:	f3ef 8211 	mrs	r2, BASEPRI
 8005b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	61ba      	str	r2, [r7, #24]
 8005b8c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005b8e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d02f      	beq.n	8005bfe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ba8:	68b9      	ldr	r1, [r7, #8]
 8005baa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bac:	f000 f8b6 	bl	8005d1c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb2:	1e5a      	subs	r2, r3, #1
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005bb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc0:	d112      	bne.n	8005be8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d016      	beq.n	8005bf8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bcc:	3310      	adds	r3, #16
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fd54 	bl	800667c <xTaskRemoveFromEventList>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00e      	beq.n	8005bf8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00b      	beq.n	8005bf8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	e007      	b.n	8005bf8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bec:	3301      	adds	r3, #1
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	b25a      	sxtb	r2, r3
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8005bfc:	e001      	b.n	8005c02 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	637b      	str	r3, [r7, #52]	; 0x34
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c04:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f383 8811 	msr	BASEPRI, r3
}
 8005c0c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3738      	adds	r7, #56	; 0x38
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d006      	beq.n	8005c36 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f1c3 0307 	rsb	r3, r3, #7
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	e001      	b.n	8005c3a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005c36:	2300      	movs	r3, #0
 8005c38:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
	}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c54:	2300      	movs	r3, #0
 8005c56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10d      	bne.n	8005c82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d14d      	bne.n	8005d0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 ff52 	bl	8006b1c <xTaskPriorityDisinherit>
 8005c78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	609a      	str	r2, [r3, #8]
 8005c80:	e043      	b.n	8005d0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d119      	bne.n	8005cbc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6858      	ldr	r0, [r3, #4]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c90:	461a      	mov	r2, r3
 8005c92:	68b9      	ldr	r1, [r7, #8]
 8005c94:	f001 fd2e 	bl	80076f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	441a      	add	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d32b      	bcc.n	8005d0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	605a      	str	r2, [r3, #4]
 8005cba:	e026      	b.n	8005d0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	68d8      	ldr	r0, [r3, #12]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	68b9      	ldr	r1, [r7, #8]
 8005cc8:	f001 fd14 	bl	80076f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	425b      	negs	r3, r3
 8005cd6:	441a      	add	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	68da      	ldr	r2, [r3, #12]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d207      	bcs.n	8005cf8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf0:	425b      	negs	r3, r3
 8005cf2:	441a      	add	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d105      	bne.n	8005d0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	3b01      	subs	r3, #1
 8005d08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1c5a      	adds	r2, r3, #1
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005d12:	697b      	ldr	r3, [r7, #20]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d018      	beq.n	8005d60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68da      	ldr	r2, [r3, #12]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d36:	441a      	add	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68da      	ldr	r2, [r3, #12]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d303      	bcc.n	8005d50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68d9      	ldr	r1, [r3, #12]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d58:	461a      	mov	r2, r3
 8005d5a:	6838      	ldr	r0, [r7, #0]
 8005d5c:	f001 fcca 	bl	80076f4 <memcpy>
	}
}
 8005d60:	bf00      	nop
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d70:	f001 f990 	bl	8007094 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d7c:	e011      	b.n	8005da2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d012      	beq.n	8005dac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	3324      	adds	r3, #36	; 0x24
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 fc76 	bl	800667c <xTaskRemoveFromEventList>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d96:	f000 fd4b 	bl	8006830 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	dce9      	bgt.n	8005d7e <prvUnlockQueue+0x16>
 8005daa:	e000      	b.n	8005dae <prvUnlockQueue+0x46>
					break;
 8005dac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	22ff      	movs	r2, #255	; 0xff
 8005db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005db6:	f001 f99d 	bl	80070f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005dba:	f001 f96b 	bl	8007094 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dc4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005dc6:	e011      	b.n	8005dec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d012      	beq.n	8005df6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3310      	adds	r3, #16
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f000 fc51 	bl	800667c <xTaskRemoveFromEventList>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005de0:	f000 fd26 	bl	8006830 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005de4:	7bbb      	ldrb	r3, [r7, #14]
 8005de6:	3b01      	subs	r3, #1
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005dec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	dce9      	bgt.n	8005dc8 <prvUnlockQueue+0x60>
 8005df4:	e000      	b.n	8005df8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005df6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	22ff      	movs	r2, #255	; 0xff
 8005dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005e00:	f001 f978 	bl	80070f4 <vPortExitCritical>
}
 8005e04:	bf00      	nop
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e14:	f001 f93e 	bl	8007094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d102      	bne.n	8005e26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e20:	2301      	movs	r3, #1
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	e001      	b.n	8005e2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e26:	2300      	movs	r3, #0
 8005e28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e2a:	f001 f963 	bl	80070f4 <vPortExitCritical>

	return xReturn;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e40:	f001 f928 	bl	8007094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d102      	bne.n	8005e56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e50:	2301      	movs	r3, #1
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	e001      	b.n	8005e5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e56:	2300      	movs	r3, #0
 8005e58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e5a:	f001 f94b 	bl	80070f4 <vPortExitCritical>

	return xReturn;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08e      	sub	sp, #56	; 0x38
 8005e6c:	af04      	add	r7, sp, #16
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
 8005e74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10a      	bne.n	8005e92 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	623b      	str	r3, [r7, #32]
}
 8005e8e:	bf00      	nop
 8005e90:	e7fe      	b.n	8005e90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10a      	bne.n	8005eae <xTaskCreateStatic+0x46>
	__asm volatile
 8005e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	61fb      	str	r3, [r7, #28]
}
 8005eaa:	bf00      	nop
 8005eac:	e7fe      	b.n	8005eac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005eae:	2354      	movs	r3, #84	; 0x54
 8005eb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	2b54      	cmp	r3, #84	; 0x54
 8005eb6:	d00a      	beq.n	8005ece <xTaskCreateStatic+0x66>
	__asm volatile
 8005eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebc:	f383 8811 	msr	BASEPRI, r3
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	61bb      	str	r3, [r7, #24]
}
 8005eca:	bf00      	nop
 8005ecc:	e7fe      	b.n	8005ecc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ece:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d01e      	beq.n	8005f14 <xTaskCreateStatic+0xac>
 8005ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d01b      	beq.n	8005f14 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ede:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ee4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	2202      	movs	r2, #2
 8005eea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005eee:	2300      	movs	r3, #0
 8005ef0:	9303      	str	r3, [sp, #12]
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	9302      	str	r3, [sp, #8]
 8005ef6:	f107 0314 	add.w	r3, r7, #20
 8005efa:	9301      	str	r3, [sp, #4]
 8005efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	68b9      	ldr	r1, [r7, #8]
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 f850 	bl	8005fac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f0e:	f000 f8d5 	bl	80060bc <prvAddNewTaskToReadyList>
 8005f12:	e001      	b.n	8005f18 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005f14:	2300      	movs	r3, #0
 8005f16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f18:	697b      	ldr	r3, [r7, #20]
	}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3728      	adds	r7, #40	; 0x28
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b08c      	sub	sp, #48	; 0x30
 8005f26:	af04      	add	r7, sp, #16
 8005f28:	60f8      	str	r0, [r7, #12]
 8005f2a:	60b9      	str	r1, [r7, #8]
 8005f2c:	603b      	str	r3, [r7, #0]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f32:	88fb      	ldrh	r3, [r7, #6]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4618      	mov	r0, r3
 8005f38:	f001 f9ce 	bl	80072d8 <pvPortMalloc>
 8005f3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00e      	beq.n	8005f62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f44:	2054      	movs	r0, #84	; 0x54
 8005f46:	f001 f9c7 	bl	80072d8 <pvPortMalloc>
 8005f4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	631a      	str	r2, [r3, #48]	; 0x30
 8005f58:	e005      	b.n	8005f66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f5a:	6978      	ldr	r0, [r7, #20]
 8005f5c:	f001 fa88 	bl	8007470 <vPortFree>
 8005f60:	e001      	b.n	8005f66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f62:	2300      	movs	r3, #0
 8005f64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d017      	beq.n	8005f9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f74:	88fa      	ldrh	r2, [r7, #6]
 8005f76:	2300      	movs	r3, #0
 8005f78:	9303      	str	r3, [sp, #12]
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	9302      	str	r3, [sp, #8]
 8005f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f80:	9301      	str	r3, [sp, #4]
 8005f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	68b9      	ldr	r1, [r7, #8]
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f000 f80e 	bl	8005fac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f90:	69f8      	ldr	r0, [r7, #28]
 8005f92:	f000 f893 	bl	80060bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f96:	2301      	movs	r3, #1
 8005f98:	61bb      	str	r3, [r7, #24]
 8005f9a:	e002      	b.n	8005fa2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005fa0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005fa2:	69bb      	ldr	r3, [r7, #24]
	}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3720      	adds	r7, #32
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b088      	sub	sp, #32
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	f023 0307 	bic.w	r3, r3, #7
 8005fd2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	f003 0307 	and.w	r3, r3, #7
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00a      	beq.n	8005ff4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	617b      	str	r3, [r7, #20]
}
 8005ff0:	bf00      	nop
 8005ff2:	e7fe      	b.n	8005ff2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d01f      	beq.n	800603a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61fb      	str	r3, [r7, #28]
 8005ffe:	e012      	b.n	8006026 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	4413      	add	r3, r2
 8006006:	7819      	ldrb	r1, [r3, #0]
 8006008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	4413      	add	r3, r2
 800600e:	3334      	adds	r3, #52	; 0x34
 8006010:	460a      	mov	r2, r1
 8006012:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	4413      	add	r3, r2
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d006      	beq.n	800602e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	3301      	adds	r3, #1
 8006024:	61fb      	str	r3, [r7, #28]
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	2b0f      	cmp	r3, #15
 800602a:	d9e9      	bls.n	8006000 <prvInitialiseNewTask+0x54>
 800602c:	e000      	b.n	8006030 <prvInitialiseNewTask+0x84>
			{
				break;
 800602e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006038:	e003      	b.n	8006042 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006044:	2b06      	cmp	r3, #6
 8006046:	d901      	bls.n	800604c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006048:	2306      	movs	r3, #6
 800604a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006050:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006056:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605a:	2200      	movs	r2, #0
 800605c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006060:	3304      	adds	r3, #4
 8006062:	4618      	mov	r0, r3
 8006064:	f7ff f8a6 	bl	80051b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606a:	3318      	adds	r3, #24
 800606c:	4618      	mov	r0, r3
 800606e:	f7ff f8a1 	bl	80051b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006076:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607a:	f1c3 0207 	rsb	r2, r3, #7
 800607e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006080:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006086:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608a:	2200      	movs	r2, #0
 800608c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800608e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	68f9      	ldr	r1, [r7, #12]
 800609a:	69b8      	ldr	r0, [r7, #24]
 800609c:	f000 fecc 	bl	8006e38 <pxPortInitialiseStack>
 80060a0:	4602      	mov	r2, r0
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80060a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d002      	beq.n	80060b2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060b2:	bf00      	nop
 80060b4:	3720      	adds	r7, #32
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
	...

080060bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060c4:	f000 ffe6 	bl	8007094 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060c8:	4b2a      	ldr	r3, [pc, #168]	; (8006174 <prvAddNewTaskToReadyList+0xb8>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3301      	adds	r3, #1
 80060ce:	4a29      	ldr	r2, [pc, #164]	; (8006174 <prvAddNewTaskToReadyList+0xb8>)
 80060d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060d2:	4b29      	ldr	r3, [pc, #164]	; (8006178 <prvAddNewTaskToReadyList+0xbc>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d109      	bne.n	80060ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060da:	4a27      	ldr	r2, [pc, #156]	; (8006178 <prvAddNewTaskToReadyList+0xbc>)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060e0:	4b24      	ldr	r3, [pc, #144]	; (8006174 <prvAddNewTaskToReadyList+0xb8>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d110      	bne.n	800610a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060e8:	f000 fbc6 	bl	8006878 <prvInitialiseTaskLists>
 80060ec:	e00d      	b.n	800610a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060ee:	4b23      	ldr	r3, [pc, #140]	; (800617c <prvAddNewTaskToReadyList+0xc0>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d109      	bne.n	800610a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060f6:	4b20      	ldr	r3, [pc, #128]	; (8006178 <prvAddNewTaskToReadyList+0xbc>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006100:	429a      	cmp	r2, r3
 8006102:	d802      	bhi.n	800610a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006104:	4a1c      	ldr	r2, [pc, #112]	; (8006178 <prvAddNewTaskToReadyList+0xbc>)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800610a:	4b1d      	ldr	r3, [pc, #116]	; (8006180 <prvAddNewTaskToReadyList+0xc4>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	3301      	adds	r3, #1
 8006110:	4a1b      	ldr	r2, [pc, #108]	; (8006180 <prvAddNewTaskToReadyList+0xc4>)
 8006112:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006118:	2201      	movs	r2, #1
 800611a:	409a      	lsls	r2, r3
 800611c:	4b19      	ldr	r3, [pc, #100]	; (8006184 <prvAddNewTaskToReadyList+0xc8>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4313      	orrs	r3, r2
 8006122:	4a18      	ldr	r2, [pc, #96]	; (8006184 <prvAddNewTaskToReadyList+0xc8>)
 8006124:	6013      	str	r3, [r2, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800612a:	4613      	mov	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4a15      	ldr	r2, [pc, #84]	; (8006188 <prvAddNewTaskToReadyList+0xcc>)
 8006134:	441a      	add	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	3304      	adds	r3, #4
 800613a:	4619      	mov	r1, r3
 800613c:	4610      	mov	r0, r2
 800613e:	f7ff f846 	bl	80051ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006142:	f000 ffd7 	bl	80070f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006146:	4b0d      	ldr	r3, [pc, #52]	; (800617c <prvAddNewTaskToReadyList+0xc0>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00e      	beq.n	800616c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800614e:	4b0a      	ldr	r3, [pc, #40]	; (8006178 <prvAddNewTaskToReadyList+0xbc>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006158:	429a      	cmp	r2, r3
 800615a:	d207      	bcs.n	800616c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800615c:	4b0b      	ldr	r3, [pc, #44]	; (800618c <prvAddNewTaskToReadyList+0xd0>)
 800615e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800616c:	bf00      	nop
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	200003ac 	.word	0x200003ac
 8006178:	200002ac 	.word	0x200002ac
 800617c:	200003b8 	.word	0x200003b8
 8006180:	200003c8 	.word	0x200003c8
 8006184:	200003b4 	.word	0x200003b4
 8006188:	200002b0 	.word	0x200002b0
 800618c:	e000ed04 	.word	0xe000ed04

08006190 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006198:	2300      	movs	r3, #0
 800619a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d017      	beq.n	80061d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061a2:	4b13      	ldr	r3, [pc, #76]	; (80061f0 <vTaskDelay+0x60>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00a      	beq.n	80061c0 <vTaskDelay+0x30>
	__asm volatile
 80061aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	60bb      	str	r3, [r7, #8]
}
 80061bc:	bf00      	nop
 80061be:	e7fe      	b.n	80061be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80061c0:	f000 f87a 	bl	80062b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061c4:	2100      	movs	r1, #0
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fdd0 	bl	8006d6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061cc:	f000 f882 	bl	80062d4 <xTaskResumeAll>
 80061d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d107      	bne.n	80061e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80061d8:	4b06      	ldr	r3, [pc, #24]	; (80061f4 <vTaskDelay+0x64>)
 80061da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061e8:	bf00      	nop
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	200003d4 	.word	0x200003d4
 80061f4:	e000ed04 	.word	0xe000ed04

080061f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b08a      	sub	sp, #40	; 0x28
 80061fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80061fe:	2300      	movs	r3, #0
 8006200:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006202:	2300      	movs	r3, #0
 8006204:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006206:	463a      	mov	r2, r7
 8006208:	1d39      	adds	r1, r7, #4
 800620a:	f107 0308 	add.w	r3, r7, #8
 800620e:	4618      	mov	r0, r3
 8006210:	f7fa fed6 	bl	8000fc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	9202      	str	r2, [sp, #8]
 800621c:	9301      	str	r3, [sp, #4]
 800621e:	2300      	movs	r3, #0
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	2300      	movs	r3, #0
 8006224:	460a      	mov	r2, r1
 8006226:	491e      	ldr	r1, [pc, #120]	; (80062a0 <vTaskStartScheduler+0xa8>)
 8006228:	481e      	ldr	r0, [pc, #120]	; (80062a4 <vTaskStartScheduler+0xac>)
 800622a:	f7ff fe1d 	bl	8005e68 <xTaskCreateStatic>
 800622e:	4603      	mov	r3, r0
 8006230:	4a1d      	ldr	r2, [pc, #116]	; (80062a8 <vTaskStartScheduler+0xb0>)
 8006232:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006234:	4b1c      	ldr	r3, [pc, #112]	; (80062a8 <vTaskStartScheduler+0xb0>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800623c:	2301      	movs	r3, #1
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	e001      	b.n	8006246 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006242:	2300      	movs	r3, #0
 8006244:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d116      	bne.n	800627a <vTaskStartScheduler+0x82>
	__asm volatile
 800624c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	613b      	str	r3, [r7, #16]
}
 800625e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006260:	4b12      	ldr	r3, [pc, #72]	; (80062ac <vTaskStartScheduler+0xb4>)
 8006262:	f04f 32ff 	mov.w	r2, #4294967295
 8006266:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006268:	4b11      	ldr	r3, [pc, #68]	; (80062b0 <vTaskStartScheduler+0xb8>)
 800626a:	2201      	movs	r2, #1
 800626c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800626e:	4b11      	ldr	r3, [pc, #68]	; (80062b4 <vTaskStartScheduler+0xbc>)
 8006270:	2200      	movs	r2, #0
 8006272:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006274:	f000 fe6c 	bl	8006f50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006278:	e00e      	b.n	8006298 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006280:	d10a      	bne.n	8006298 <vTaskStartScheduler+0xa0>
	__asm volatile
 8006282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	60fb      	str	r3, [r7, #12]
}
 8006294:	bf00      	nop
 8006296:	e7fe      	b.n	8006296 <vTaskStartScheduler+0x9e>
}
 8006298:	bf00      	nop
 800629a:	3718      	adds	r7, #24
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	08007840 	.word	0x08007840
 80062a4:	08006849 	.word	0x08006849
 80062a8:	200003d0 	.word	0x200003d0
 80062ac:	200003cc 	.word	0x200003cc
 80062b0:	200003b8 	.word	0x200003b8
 80062b4:	200003b0 	.word	0x200003b0

080062b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062b8:	b480      	push	{r7}
 80062ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80062bc:	4b04      	ldr	r3, [pc, #16]	; (80062d0 <vTaskSuspendAll+0x18>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3301      	adds	r3, #1
 80062c2:	4a03      	ldr	r2, [pc, #12]	; (80062d0 <vTaskSuspendAll+0x18>)
 80062c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80062c6:	bf00      	nop
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	200003d4 	.word	0x200003d4

080062d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062da:	2300      	movs	r3, #0
 80062dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062de:	2300      	movs	r3, #0
 80062e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062e2:	4b41      	ldr	r3, [pc, #260]	; (80063e8 <xTaskResumeAll+0x114>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10a      	bne.n	8006300 <xTaskResumeAll+0x2c>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	603b      	str	r3, [r7, #0]
}
 80062fc:	bf00      	nop
 80062fe:	e7fe      	b.n	80062fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006300:	f000 fec8 	bl	8007094 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006304:	4b38      	ldr	r3, [pc, #224]	; (80063e8 <xTaskResumeAll+0x114>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3b01      	subs	r3, #1
 800630a:	4a37      	ldr	r2, [pc, #220]	; (80063e8 <xTaskResumeAll+0x114>)
 800630c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800630e:	4b36      	ldr	r3, [pc, #216]	; (80063e8 <xTaskResumeAll+0x114>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d161      	bne.n	80063da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006316:	4b35      	ldr	r3, [pc, #212]	; (80063ec <xTaskResumeAll+0x118>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d05d      	beq.n	80063da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800631e:	e02e      	b.n	800637e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006320:	4b33      	ldr	r3, [pc, #204]	; (80063f0 <xTaskResumeAll+0x11c>)
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	3318      	adds	r3, #24
 800632c:	4618      	mov	r0, r3
 800632e:	f7fe ffab 	bl	8005288 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	3304      	adds	r3, #4
 8006336:	4618      	mov	r0, r3
 8006338:	f7fe ffa6 	bl	8005288 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006340:	2201      	movs	r2, #1
 8006342:	409a      	lsls	r2, r3
 8006344:	4b2b      	ldr	r3, [pc, #172]	; (80063f4 <xTaskResumeAll+0x120>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4313      	orrs	r3, r2
 800634a:	4a2a      	ldr	r2, [pc, #168]	; (80063f4 <xTaskResumeAll+0x120>)
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006352:	4613      	mov	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4a27      	ldr	r2, [pc, #156]	; (80063f8 <xTaskResumeAll+0x124>)
 800635c:	441a      	add	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	3304      	adds	r3, #4
 8006362:	4619      	mov	r1, r3
 8006364:	4610      	mov	r0, r2
 8006366:	f7fe ff32 	bl	80051ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800636e:	4b23      	ldr	r3, [pc, #140]	; (80063fc <xTaskResumeAll+0x128>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006374:	429a      	cmp	r2, r3
 8006376:	d302      	bcc.n	800637e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006378:	4b21      	ldr	r3, [pc, #132]	; (8006400 <xTaskResumeAll+0x12c>)
 800637a:	2201      	movs	r2, #1
 800637c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800637e:	4b1c      	ldr	r3, [pc, #112]	; (80063f0 <xTaskResumeAll+0x11c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1cc      	bne.n	8006320 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800638c:	f000 fb12 	bl	80069b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006390:	4b1c      	ldr	r3, [pc, #112]	; (8006404 <xTaskResumeAll+0x130>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d010      	beq.n	80063be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800639c:	f000 f836 	bl	800640c <xTaskIncrementTick>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d002      	beq.n	80063ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80063a6:	4b16      	ldr	r3, [pc, #88]	; (8006400 <xTaskResumeAll+0x12c>)
 80063a8:	2201      	movs	r2, #1
 80063aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	3b01      	subs	r3, #1
 80063b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1f1      	bne.n	800639c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80063b8:	4b12      	ldr	r3, [pc, #72]	; (8006404 <xTaskResumeAll+0x130>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063be:	4b10      	ldr	r3, [pc, #64]	; (8006400 <xTaskResumeAll+0x12c>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d009      	beq.n	80063da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063c6:	2301      	movs	r3, #1
 80063c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063ca:	4b0f      	ldr	r3, [pc, #60]	; (8006408 <xTaskResumeAll+0x134>)
 80063cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063da:	f000 fe8b 	bl	80070f4 <vPortExitCritical>

	return xAlreadyYielded;
 80063de:	68bb      	ldr	r3, [r7, #8]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	200003d4 	.word	0x200003d4
 80063ec:	200003ac 	.word	0x200003ac
 80063f0:	2000036c 	.word	0x2000036c
 80063f4:	200003b4 	.word	0x200003b4
 80063f8:	200002b0 	.word	0x200002b0
 80063fc:	200002ac 	.word	0x200002ac
 8006400:	200003c0 	.word	0x200003c0
 8006404:	200003bc 	.word	0x200003bc
 8006408:	e000ed04 	.word	0xe000ed04

0800640c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006412:	2300      	movs	r3, #0
 8006414:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006416:	4b4e      	ldr	r3, [pc, #312]	; (8006550 <xTaskIncrementTick+0x144>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	f040 808e 	bne.w	800653c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006420:	4b4c      	ldr	r3, [pc, #304]	; (8006554 <xTaskIncrementTick+0x148>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3301      	adds	r3, #1
 8006426:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006428:	4a4a      	ldr	r2, [pc, #296]	; (8006554 <xTaskIncrementTick+0x148>)
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d120      	bne.n	8006476 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006434:	4b48      	ldr	r3, [pc, #288]	; (8006558 <xTaskIncrementTick+0x14c>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00a      	beq.n	8006454 <xTaskIncrementTick+0x48>
	__asm volatile
 800643e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006442:	f383 8811 	msr	BASEPRI, r3
 8006446:	f3bf 8f6f 	isb	sy
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	603b      	str	r3, [r7, #0]
}
 8006450:	bf00      	nop
 8006452:	e7fe      	b.n	8006452 <xTaskIncrementTick+0x46>
 8006454:	4b40      	ldr	r3, [pc, #256]	; (8006558 <xTaskIncrementTick+0x14c>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	60fb      	str	r3, [r7, #12]
 800645a:	4b40      	ldr	r3, [pc, #256]	; (800655c <xTaskIncrementTick+0x150>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a3e      	ldr	r2, [pc, #248]	; (8006558 <xTaskIncrementTick+0x14c>)
 8006460:	6013      	str	r3, [r2, #0]
 8006462:	4a3e      	ldr	r2, [pc, #248]	; (800655c <xTaskIncrementTick+0x150>)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6013      	str	r3, [r2, #0]
 8006468:	4b3d      	ldr	r3, [pc, #244]	; (8006560 <xTaskIncrementTick+0x154>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3301      	adds	r3, #1
 800646e:	4a3c      	ldr	r2, [pc, #240]	; (8006560 <xTaskIncrementTick+0x154>)
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	f000 fa9f 	bl	80069b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006476:	4b3b      	ldr	r3, [pc, #236]	; (8006564 <xTaskIncrementTick+0x158>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	429a      	cmp	r2, r3
 800647e:	d348      	bcc.n	8006512 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006480:	4b35      	ldr	r3, [pc, #212]	; (8006558 <xTaskIncrementTick+0x14c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d104      	bne.n	8006494 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800648a:	4b36      	ldr	r3, [pc, #216]	; (8006564 <xTaskIncrementTick+0x158>)
 800648c:	f04f 32ff 	mov.w	r2, #4294967295
 8006490:	601a      	str	r2, [r3, #0]
					break;
 8006492:	e03e      	b.n	8006512 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006494:	4b30      	ldr	r3, [pc, #192]	; (8006558 <xTaskIncrementTick+0x14c>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d203      	bcs.n	80064b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80064ac:	4a2d      	ldr	r2, [pc, #180]	; (8006564 <xTaskIncrementTick+0x158>)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80064b2:	e02e      	b.n	8006512 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	3304      	adds	r3, #4
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7fe fee5 	bl	8005288 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d004      	beq.n	80064d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	3318      	adds	r3, #24
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fe fedc 	bl	8005288 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d4:	2201      	movs	r2, #1
 80064d6:	409a      	lsls	r2, r3
 80064d8:	4b23      	ldr	r3, [pc, #140]	; (8006568 <xTaskIncrementTick+0x15c>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4313      	orrs	r3, r2
 80064de:	4a22      	ldr	r2, [pc, #136]	; (8006568 <xTaskIncrementTick+0x15c>)
 80064e0:	6013      	str	r3, [r2, #0]
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e6:	4613      	mov	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4a1f      	ldr	r2, [pc, #124]	; (800656c <xTaskIncrementTick+0x160>)
 80064f0:	441a      	add	r2, r3
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	3304      	adds	r3, #4
 80064f6:	4619      	mov	r1, r3
 80064f8:	4610      	mov	r0, r2
 80064fa:	f7fe fe68 	bl	80051ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006502:	4b1b      	ldr	r3, [pc, #108]	; (8006570 <xTaskIncrementTick+0x164>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	429a      	cmp	r2, r3
 800650a:	d3b9      	bcc.n	8006480 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800650c:	2301      	movs	r3, #1
 800650e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006510:	e7b6      	b.n	8006480 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006512:	4b17      	ldr	r3, [pc, #92]	; (8006570 <xTaskIncrementTick+0x164>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006518:	4914      	ldr	r1, [pc, #80]	; (800656c <xTaskIncrementTick+0x160>)
 800651a:	4613      	mov	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	440b      	add	r3, r1
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d901      	bls.n	800652e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800652a:	2301      	movs	r3, #1
 800652c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800652e:	4b11      	ldr	r3, [pc, #68]	; (8006574 <xTaskIncrementTick+0x168>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d007      	beq.n	8006546 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006536:	2301      	movs	r3, #1
 8006538:	617b      	str	r3, [r7, #20]
 800653a:	e004      	b.n	8006546 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800653c:	4b0e      	ldr	r3, [pc, #56]	; (8006578 <xTaskIncrementTick+0x16c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	3301      	adds	r3, #1
 8006542:	4a0d      	ldr	r2, [pc, #52]	; (8006578 <xTaskIncrementTick+0x16c>)
 8006544:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006546:	697b      	ldr	r3, [r7, #20]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3718      	adds	r7, #24
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	200003d4 	.word	0x200003d4
 8006554:	200003b0 	.word	0x200003b0
 8006558:	20000364 	.word	0x20000364
 800655c:	20000368 	.word	0x20000368
 8006560:	200003c4 	.word	0x200003c4
 8006564:	200003cc 	.word	0x200003cc
 8006568:	200003b4 	.word	0x200003b4
 800656c:	200002b0 	.word	0x200002b0
 8006570:	200002ac 	.word	0x200002ac
 8006574:	200003c0 	.word	0x200003c0
 8006578:	200003bc 	.word	0x200003bc

0800657c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006582:	4b27      	ldr	r3, [pc, #156]	; (8006620 <vTaskSwitchContext+0xa4>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800658a:	4b26      	ldr	r3, [pc, #152]	; (8006624 <vTaskSwitchContext+0xa8>)
 800658c:	2201      	movs	r2, #1
 800658e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006590:	e03f      	b.n	8006612 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006592:	4b24      	ldr	r3, [pc, #144]	; (8006624 <vTaskSwitchContext+0xa8>)
 8006594:	2200      	movs	r2, #0
 8006596:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006598:	4b23      	ldr	r3, [pc, #140]	; (8006628 <vTaskSwitchContext+0xac>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	fab3 f383 	clz	r3, r3
 80065a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80065a6:	7afb      	ldrb	r3, [r7, #11]
 80065a8:	f1c3 031f 	rsb	r3, r3, #31
 80065ac:	617b      	str	r3, [r7, #20]
 80065ae:	491f      	ldr	r1, [pc, #124]	; (800662c <vTaskSwitchContext+0xb0>)
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	4613      	mov	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	440b      	add	r3, r1
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10a      	bne.n	80065d8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	607b      	str	r3, [r7, #4]
}
 80065d4:	bf00      	nop
 80065d6:	e7fe      	b.n	80065d6 <vTaskSwitchContext+0x5a>
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	4613      	mov	r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4413      	add	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4a12      	ldr	r2, [pc, #72]	; (800662c <vTaskSwitchContext+0xb0>)
 80065e4:	4413      	add	r3, r2
 80065e6:	613b      	str	r3, [r7, #16]
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	605a      	str	r2, [r3, #4]
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	3308      	adds	r3, #8
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d104      	bne.n	8006608 <vTaskSwitchContext+0x8c>
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	605a      	str	r2, [r3, #4]
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	4a08      	ldr	r2, [pc, #32]	; (8006630 <vTaskSwitchContext+0xb4>)
 8006610:	6013      	str	r3, [r2, #0]
}
 8006612:	bf00      	nop
 8006614:	371c      	adds	r7, #28
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	200003d4 	.word	0x200003d4
 8006624:	200003c0 	.word	0x200003c0
 8006628:	200003b4 	.word	0x200003b4
 800662c:	200002b0 	.word	0x200002b0
 8006630:	200002ac 	.word	0x200002ac

08006634 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10a      	bne.n	800665a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	60fb      	str	r3, [r7, #12]
}
 8006656:	bf00      	nop
 8006658:	e7fe      	b.n	8006658 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800665a:	4b07      	ldr	r3, [pc, #28]	; (8006678 <vTaskPlaceOnEventList+0x44>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3318      	adds	r3, #24
 8006660:	4619      	mov	r1, r3
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f7fe fdd7 	bl	8005216 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006668:	2101      	movs	r1, #1
 800666a:	6838      	ldr	r0, [r7, #0]
 800666c:	f000 fb7e 	bl	8006d6c <prvAddCurrentTaskToDelayedList>
}
 8006670:	bf00      	nop
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	200002ac 	.word	0x200002ac

0800667c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10a      	bne.n	80066a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006696:	f383 8811 	msr	BASEPRI, r3
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	60fb      	str	r3, [r7, #12]
}
 80066a4:	bf00      	nop
 80066a6:	e7fe      	b.n	80066a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	3318      	adds	r3, #24
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fe fdeb 	bl	8005288 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066b2:	4b1d      	ldr	r3, [pc, #116]	; (8006728 <xTaskRemoveFromEventList+0xac>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d11c      	bne.n	80066f4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	3304      	adds	r3, #4
 80066be:	4618      	mov	r0, r3
 80066c0:	f7fe fde2 	bl	8005288 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c8:	2201      	movs	r2, #1
 80066ca:	409a      	lsls	r2, r3
 80066cc:	4b17      	ldr	r3, [pc, #92]	; (800672c <xTaskRemoveFromEventList+0xb0>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	4a16      	ldr	r2, [pc, #88]	; (800672c <xTaskRemoveFromEventList+0xb0>)
 80066d4:	6013      	str	r3, [r2, #0]
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066da:	4613      	mov	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4a13      	ldr	r2, [pc, #76]	; (8006730 <xTaskRemoveFromEventList+0xb4>)
 80066e4:	441a      	add	r2, r3
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	3304      	adds	r3, #4
 80066ea:	4619      	mov	r1, r3
 80066ec:	4610      	mov	r0, r2
 80066ee:	f7fe fd6e 	bl	80051ce <vListInsertEnd>
 80066f2:	e005      	b.n	8006700 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	3318      	adds	r3, #24
 80066f8:	4619      	mov	r1, r3
 80066fa:	480e      	ldr	r0, [pc, #56]	; (8006734 <xTaskRemoveFromEventList+0xb8>)
 80066fc:	f7fe fd67 	bl	80051ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006704:	4b0c      	ldr	r3, [pc, #48]	; (8006738 <xTaskRemoveFromEventList+0xbc>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670a:	429a      	cmp	r2, r3
 800670c:	d905      	bls.n	800671a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800670e:	2301      	movs	r3, #1
 8006710:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006712:	4b0a      	ldr	r3, [pc, #40]	; (800673c <xTaskRemoveFromEventList+0xc0>)
 8006714:	2201      	movs	r2, #1
 8006716:	601a      	str	r2, [r3, #0]
 8006718:	e001      	b.n	800671e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800671a:	2300      	movs	r3, #0
 800671c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800671e:	697b      	ldr	r3, [r7, #20]
}
 8006720:	4618      	mov	r0, r3
 8006722:	3718      	adds	r7, #24
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	200003d4 	.word	0x200003d4
 800672c:	200003b4 	.word	0x200003b4
 8006730:	200002b0 	.word	0x200002b0
 8006734:	2000036c 	.word	0x2000036c
 8006738:	200002ac 	.word	0x200002ac
 800673c:	200003c0 	.word	0x200003c0

08006740 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006748:	4b06      	ldr	r3, [pc, #24]	; (8006764 <vTaskInternalSetTimeOutState+0x24>)
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006750:	4b05      	ldr	r3, [pc, #20]	; (8006768 <vTaskInternalSetTimeOutState+0x28>)
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	605a      	str	r2, [r3, #4]
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr
 8006764:	200003c4 	.word	0x200003c4
 8006768:	200003b0 	.word	0x200003b0

0800676c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b088      	sub	sp, #32
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10a      	bne.n	8006792 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800677c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006780:	f383 8811 	msr	BASEPRI, r3
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	613b      	str	r3, [r7, #16]
}
 800678e:	bf00      	nop
 8006790:	e7fe      	b.n	8006790 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10a      	bne.n	80067ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	60fb      	str	r3, [r7, #12]
}
 80067aa:	bf00      	nop
 80067ac:	e7fe      	b.n	80067ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80067ae:	f000 fc71 	bl	8007094 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80067b2:	4b1d      	ldr	r3, [pc, #116]	; (8006828 <xTaskCheckForTimeOut+0xbc>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ca:	d102      	bne.n	80067d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80067cc:	2300      	movs	r3, #0
 80067ce:	61fb      	str	r3, [r7, #28]
 80067d0:	e023      	b.n	800681a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	4b15      	ldr	r3, [pc, #84]	; (800682c <xTaskCheckForTimeOut+0xc0>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d007      	beq.n	80067ee <xTaskCheckForTimeOut+0x82>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d302      	bcc.n	80067ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80067e8:	2301      	movs	r3, #1
 80067ea:	61fb      	str	r3, [r7, #28]
 80067ec:	e015      	b.n	800681a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d20b      	bcs.n	8006810 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	1ad2      	subs	r2, r2, r3
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff ff9b 	bl	8006740 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800680a:	2300      	movs	r3, #0
 800680c:	61fb      	str	r3, [r7, #28]
 800680e:	e004      	b.n	800681a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	2200      	movs	r2, #0
 8006814:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006816:	2301      	movs	r3, #1
 8006818:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800681a:	f000 fc6b 	bl	80070f4 <vPortExitCritical>

	return xReturn;
 800681e:	69fb      	ldr	r3, [r7, #28]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3720      	adds	r7, #32
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	200003b0 	.word	0x200003b0
 800682c:	200003c4 	.word	0x200003c4

08006830 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006830:	b480      	push	{r7}
 8006832:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006834:	4b03      	ldr	r3, [pc, #12]	; (8006844 <vTaskMissedYield+0x14>)
 8006836:	2201      	movs	r2, #1
 8006838:	601a      	str	r2, [r3, #0]
}
 800683a:	bf00      	nop
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	200003c0 	.word	0x200003c0

08006848 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006850:	f000 f852 	bl	80068f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006854:	4b06      	ldr	r3, [pc, #24]	; (8006870 <prvIdleTask+0x28>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d9f9      	bls.n	8006850 <prvIdleTask+0x8>
			{
				taskYIELD();
 800685c:	4b05      	ldr	r3, [pc, #20]	; (8006874 <prvIdleTask+0x2c>)
 800685e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800686c:	e7f0      	b.n	8006850 <prvIdleTask+0x8>
 800686e:	bf00      	nop
 8006870:	200002b0 	.word	0x200002b0
 8006874:	e000ed04 	.word	0xe000ed04

08006878 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800687e:	2300      	movs	r3, #0
 8006880:	607b      	str	r3, [r7, #4]
 8006882:	e00c      	b.n	800689e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	4613      	mov	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4413      	add	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	4a12      	ldr	r2, [pc, #72]	; (80068d8 <prvInitialiseTaskLists+0x60>)
 8006890:	4413      	add	r3, r2
 8006892:	4618      	mov	r0, r3
 8006894:	f7fe fc6e 	bl	8005174 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3301      	adds	r3, #1
 800689c:	607b      	str	r3, [r7, #4]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b06      	cmp	r3, #6
 80068a2:	d9ef      	bls.n	8006884 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80068a4:	480d      	ldr	r0, [pc, #52]	; (80068dc <prvInitialiseTaskLists+0x64>)
 80068a6:	f7fe fc65 	bl	8005174 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80068aa:	480d      	ldr	r0, [pc, #52]	; (80068e0 <prvInitialiseTaskLists+0x68>)
 80068ac:	f7fe fc62 	bl	8005174 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068b0:	480c      	ldr	r0, [pc, #48]	; (80068e4 <prvInitialiseTaskLists+0x6c>)
 80068b2:	f7fe fc5f 	bl	8005174 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80068b6:	480c      	ldr	r0, [pc, #48]	; (80068e8 <prvInitialiseTaskLists+0x70>)
 80068b8:	f7fe fc5c 	bl	8005174 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80068bc:	480b      	ldr	r0, [pc, #44]	; (80068ec <prvInitialiseTaskLists+0x74>)
 80068be:	f7fe fc59 	bl	8005174 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80068c2:	4b0b      	ldr	r3, [pc, #44]	; (80068f0 <prvInitialiseTaskLists+0x78>)
 80068c4:	4a05      	ldr	r2, [pc, #20]	; (80068dc <prvInitialiseTaskLists+0x64>)
 80068c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068c8:	4b0a      	ldr	r3, [pc, #40]	; (80068f4 <prvInitialiseTaskLists+0x7c>)
 80068ca:	4a05      	ldr	r2, [pc, #20]	; (80068e0 <prvInitialiseTaskLists+0x68>)
 80068cc:	601a      	str	r2, [r3, #0]
}
 80068ce:	bf00      	nop
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	200002b0 	.word	0x200002b0
 80068dc:	2000033c 	.word	0x2000033c
 80068e0:	20000350 	.word	0x20000350
 80068e4:	2000036c 	.word	0x2000036c
 80068e8:	20000380 	.word	0x20000380
 80068ec:	20000398 	.word	0x20000398
 80068f0:	20000364 	.word	0x20000364
 80068f4:	20000368 	.word	0x20000368

080068f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068fe:	e019      	b.n	8006934 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006900:	f000 fbc8 	bl	8007094 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006904:	4b10      	ldr	r3, [pc, #64]	; (8006948 <prvCheckTasksWaitingTermination+0x50>)
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3304      	adds	r3, #4
 8006910:	4618      	mov	r0, r3
 8006912:	f7fe fcb9 	bl	8005288 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006916:	4b0d      	ldr	r3, [pc, #52]	; (800694c <prvCheckTasksWaitingTermination+0x54>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	3b01      	subs	r3, #1
 800691c:	4a0b      	ldr	r2, [pc, #44]	; (800694c <prvCheckTasksWaitingTermination+0x54>)
 800691e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006920:	4b0b      	ldr	r3, [pc, #44]	; (8006950 <prvCheckTasksWaitingTermination+0x58>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3b01      	subs	r3, #1
 8006926:	4a0a      	ldr	r2, [pc, #40]	; (8006950 <prvCheckTasksWaitingTermination+0x58>)
 8006928:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800692a:	f000 fbe3 	bl	80070f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f810 	bl	8006954 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006934:	4b06      	ldr	r3, [pc, #24]	; (8006950 <prvCheckTasksWaitingTermination+0x58>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1e1      	bne.n	8006900 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800693c:	bf00      	nop
 800693e:	bf00      	nop
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	20000380 	.word	0x20000380
 800694c:	200003ac 	.word	0x200003ac
 8006950:	20000394 	.word	0x20000394

08006954 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006962:	2b00      	cmp	r3, #0
 8006964:	d108      	bne.n	8006978 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696a:	4618      	mov	r0, r3
 800696c:	f000 fd80 	bl	8007470 <vPortFree>
				vPortFree( pxTCB );
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fd7d 	bl	8007470 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006976:	e018      	b.n	80069aa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800697e:	2b01      	cmp	r3, #1
 8006980:	d103      	bne.n	800698a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fd74 	bl	8007470 <vPortFree>
	}
 8006988:	e00f      	b.n	80069aa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006990:	2b02      	cmp	r3, #2
 8006992:	d00a      	beq.n	80069aa <prvDeleteTCB+0x56>
	__asm volatile
 8006994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	60fb      	str	r3, [r7, #12]
}
 80069a6:	bf00      	nop
 80069a8:	e7fe      	b.n	80069a8 <prvDeleteTCB+0x54>
	}
 80069aa:	bf00      	nop
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
	...

080069b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069ba:	4b0c      	ldr	r3, [pc, #48]	; (80069ec <prvResetNextTaskUnblockTime+0x38>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d104      	bne.n	80069ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069c4:	4b0a      	ldr	r3, [pc, #40]	; (80069f0 <prvResetNextTaskUnblockTime+0x3c>)
 80069c6:	f04f 32ff 	mov.w	r2, #4294967295
 80069ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80069cc:	e008      	b.n	80069e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069ce:	4b07      	ldr	r3, [pc, #28]	; (80069ec <prvResetNextTaskUnblockTime+0x38>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	4a04      	ldr	r2, [pc, #16]	; (80069f0 <prvResetNextTaskUnblockTime+0x3c>)
 80069de:	6013      	str	r3, [r2, #0]
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	20000364 	.word	0x20000364
 80069f0:	200003cc 	.word	0x200003cc

080069f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069fa:	4b0b      	ldr	r3, [pc, #44]	; (8006a28 <xTaskGetSchedulerState+0x34>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d102      	bne.n	8006a08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a02:	2301      	movs	r3, #1
 8006a04:	607b      	str	r3, [r7, #4]
 8006a06:	e008      	b.n	8006a1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a08:	4b08      	ldr	r3, [pc, #32]	; (8006a2c <xTaskGetSchedulerState+0x38>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d102      	bne.n	8006a16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a10:	2302      	movs	r3, #2
 8006a12:	607b      	str	r3, [r7, #4]
 8006a14:	e001      	b.n	8006a1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a16:	2300      	movs	r3, #0
 8006a18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a1a:	687b      	ldr	r3, [r7, #4]
	}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	200003b8 	.word	0x200003b8
 8006a2c:	200003d4 	.word	0x200003d4

08006a30 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d05e      	beq.n	8006b04 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a4a:	4b31      	ldr	r3, [pc, #196]	; (8006b10 <xTaskPriorityInherit+0xe0>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d24e      	bcs.n	8006af2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	db06      	blt.n	8006a6a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a5c:	4b2c      	ldr	r3, [pc, #176]	; (8006b10 <xTaskPriorityInherit+0xe0>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a62:	f1c3 0207 	rsb	r2, r3, #7
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	6959      	ldr	r1, [r3, #20]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a72:	4613      	mov	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4a26      	ldr	r2, [pc, #152]	; (8006b14 <xTaskPriorityInherit+0xe4>)
 8006a7c:	4413      	add	r3, r2
 8006a7e:	4299      	cmp	r1, r3
 8006a80:	d12f      	bne.n	8006ae2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	3304      	adds	r3, #4
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fe fbfe 	bl	8005288 <uxListRemove>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10a      	bne.n	8006aa8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a96:	2201      	movs	r2, #1
 8006a98:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9c:	43da      	mvns	r2, r3
 8006a9e:	4b1e      	ldr	r3, [pc, #120]	; (8006b18 <xTaskPriorityInherit+0xe8>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	4a1c      	ldr	r2, [pc, #112]	; (8006b18 <xTaskPriorityInherit+0xe8>)
 8006aa6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006aa8:	4b19      	ldr	r3, [pc, #100]	; (8006b10 <xTaskPriorityInherit+0xe0>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	409a      	lsls	r2, r3
 8006aba:	4b17      	ldr	r3, [pc, #92]	; (8006b18 <xTaskPriorityInherit+0xe8>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	4a15      	ldr	r2, [pc, #84]	; (8006b18 <xTaskPriorityInherit+0xe8>)
 8006ac2:	6013      	str	r3, [r2, #0]
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac8:	4613      	mov	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4a10      	ldr	r2, [pc, #64]	; (8006b14 <xTaskPriorityInherit+0xe4>)
 8006ad2:	441a      	add	r2, r3
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	4619      	mov	r1, r3
 8006ada:	4610      	mov	r0, r2
 8006adc:	f7fe fb77 	bl	80051ce <vListInsertEnd>
 8006ae0:	e004      	b.n	8006aec <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ae2:	4b0b      	ldr	r3, [pc, #44]	; (8006b10 <xTaskPriorityInherit+0xe0>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006aec:	2301      	movs	r3, #1
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	e008      	b.n	8006b04 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006af6:	4b06      	ldr	r3, [pc, #24]	; (8006b10 <xTaskPriorityInherit+0xe0>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d201      	bcs.n	8006b04 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006b00:	2301      	movs	r3, #1
 8006b02:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b04:	68fb      	ldr	r3, [r7, #12]
	}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	200002ac 	.word	0x200002ac
 8006b14:	200002b0 	.word	0x200002b0
 8006b18:	200003b4 	.word	0x200003b4

08006b1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d06e      	beq.n	8006c10 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b32:	4b3a      	ldr	r3, [pc, #232]	; (8006c1c <xTaskPriorityDisinherit+0x100>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d00a      	beq.n	8006b52 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	60fb      	str	r3, [r7, #12]
}
 8006b4e:	bf00      	nop
 8006b50:	e7fe      	b.n	8006b50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10a      	bne.n	8006b70 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5e:	f383 8811 	msr	BASEPRI, r3
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	60bb      	str	r3, [r7, #8]
}
 8006b6c:	bf00      	nop
 8006b6e:	e7fe      	b.n	8006b6e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b74:	1e5a      	subs	r2, r3, #1
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d044      	beq.n	8006c10 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d140      	bne.n	8006c10 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	3304      	adds	r3, #4
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fe fb78 	bl	8005288 <uxListRemove>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d115      	bne.n	8006bca <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba2:	491f      	ldr	r1, [pc, #124]	; (8006c20 <xTaskPriorityDisinherit+0x104>)
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	440b      	add	r3, r1
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10a      	bne.n	8006bca <xTaskPriorityDisinherit+0xae>
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb8:	2201      	movs	r2, #1
 8006bba:	fa02 f303 	lsl.w	r3, r2, r3
 8006bbe:	43da      	mvns	r2, r3
 8006bc0:	4b18      	ldr	r3, [pc, #96]	; (8006c24 <xTaskPriorityDisinherit+0x108>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	4a17      	ldr	r2, [pc, #92]	; (8006c24 <xTaskPriorityDisinherit+0x108>)
 8006bc8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd6:	f1c3 0207 	rsb	r2, r3, #7
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be2:	2201      	movs	r2, #1
 8006be4:	409a      	lsls	r2, r3
 8006be6:	4b0f      	ldr	r3, [pc, #60]	; (8006c24 <xTaskPriorityDisinherit+0x108>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	4a0d      	ldr	r2, [pc, #52]	; (8006c24 <xTaskPriorityDisinherit+0x108>)
 8006bee:	6013      	str	r3, [r2, #0]
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4a08      	ldr	r2, [pc, #32]	; (8006c20 <xTaskPriorityDisinherit+0x104>)
 8006bfe:	441a      	add	r2, r3
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	3304      	adds	r3, #4
 8006c04:	4619      	mov	r1, r3
 8006c06:	4610      	mov	r0, r2
 8006c08:	f7fe fae1 	bl	80051ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c10:	697b      	ldr	r3, [r7, #20]
	}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3718      	adds	r7, #24
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	200002ac 	.word	0x200002ac
 8006c20:	200002b0 	.word	0x200002b0
 8006c24:	200003b4 	.word	0x200003b4

08006c28 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b088      	sub	sp, #32
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006c36:	2301      	movs	r3, #1
 8006c38:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d077      	beq.n	8006d30 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10a      	bne.n	8006c5e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4c:	f383 8811 	msr	BASEPRI, r3
 8006c50:	f3bf 8f6f 	isb	sy
 8006c54:	f3bf 8f4f 	dsb	sy
 8006c58:	60fb      	str	r3, [r7, #12]
}
 8006c5a:	bf00      	nop
 8006c5c:	e7fe      	b.n	8006c5c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d902      	bls.n	8006c6e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	61fb      	str	r3, [r7, #28]
 8006c6c:	e002      	b.n	8006c74 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c72:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c78:	69fa      	ldr	r2, [r7, #28]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d058      	beq.n	8006d30 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d153      	bne.n	8006d30 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006c88:	4b2b      	ldr	r3, [pc, #172]	; (8006d38 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d10a      	bne.n	8006ca8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c96:	f383 8811 	msr	BASEPRI, r3
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	60bb      	str	r3, [r7, #8]
}
 8006ca4:	bf00      	nop
 8006ca6:	e7fe      	b.n	8006ca6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	69fa      	ldr	r2, [r7, #28]
 8006cb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	db04      	blt.n	8006cc6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	f1c3 0207 	rsb	r2, r3, #7
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	6959      	ldr	r1, [r3, #20]
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4a19      	ldr	r2, [pc, #100]	; (8006d3c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006cd6:	4413      	add	r3, r2
 8006cd8:	4299      	cmp	r1, r3
 8006cda:	d129      	bne.n	8006d30 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	3304      	adds	r3, #4
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7fe fad1 	bl	8005288 <uxListRemove>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10a      	bne.n	8006d02 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf6:	43da      	mvns	r2, r3
 8006cf8:	4b11      	ldr	r3, [pc, #68]	; (8006d40 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	4a10      	ldr	r2, [pc, #64]	; (8006d40 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006d00:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d06:	2201      	movs	r2, #1
 8006d08:	409a      	lsls	r2, r3
 8006d0a:	4b0d      	ldr	r3, [pc, #52]	; (8006d40 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	4a0b      	ldr	r2, [pc, #44]	; (8006d40 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006d12:	6013      	str	r3, [r2, #0]
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d18:	4613      	mov	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4a06      	ldr	r2, [pc, #24]	; (8006d3c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006d22:	441a      	add	r2, r3
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	3304      	adds	r3, #4
 8006d28:	4619      	mov	r1, r3
 8006d2a:	4610      	mov	r0, r2
 8006d2c:	f7fe fa4f 	bl	80051ce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d30:	bf00      	nop
 8006d32:	3720      	adds	r7, #32
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	200002ac 	.word	0x200002ac
 8006d3c:	200002b0 	.word	0x200002b0
 8006d40:	200003b4 	.word	0x200003b4

08006d44 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006d44:	b480      	push	{r7}
 8006d46:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006d48:	4b07      	ldr	r3, [pc, #28]	; (8006d68 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d004      	beq.n	8006d5a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006d50:	4b05      	ldr	r3, [pc, #20]	; (8006d68 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d56:	3201      	adds	r2, #1
 8006d58:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006d5a:	4b03      	ldr	r3, [pc, #12]	; (8006d68 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
	}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	200002ac 	.word	0x200002ac

08006d6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d76:	4b29      	ldr	r3, [pc, #164]	; (8006e1c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d7c:	4b28      	ldr	r3, [pc, #160]	; (8006e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3304      	adds	r3, #4
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7fe fa80 	bl	8005288 <uxListRemove>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10b      	bne.n	8006da6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006d8e:	4b24      	ldr	r3, [pc, #144]	; (8006e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d94:	2201      	movs	r2, #1
 8006d96:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9a:	43da      	mvns	r2, r3
 8006d9c:	4b21      	ldr	r3, [pc, #132]	; (8006e24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4013      	ands	r3, r2
 8006da2:	4a20      	ldr	r2, [pc, #128]	; (8006e24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006da4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dac:	d10a      	bne.n	8006dc4 <prvAddCurrentTaskToDelayedList+0x58>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d007      	beq.n	8006dc4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006db4:	4b1a      	ldr	r3, [pc, #104]	; (8006e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	3304      	adds	r3, #4
 8006dba:	4619      	mov	r1, r3
 8006dbc:	481a      	ldr	r0, [pc, #104]	; (8006e28 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006dbe:	f7fe fa06 	bl	80051ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006dc2:	e026      	b.n	8006e12 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4413      	add	r3, r2
 8006dca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006dcc:	4b14      	ldr	r3, [pc, #80]	; (8006e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006dd4:	68ba      	ldr	r2, [r7, #8]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d209      	bcs.n	8006df0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ddc:	4b13      	ldr	r3, [pc, #76]	; (8006e2c <prvAddCurrentTaskToDelayedList+0xc0>)
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	4b0f      	ldr	r3, [pc, #60]	; (8006e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	3304      	adds	r3, #4
 8006de6:	4619      	mov	r1, r3
 8006de8:	4610      	mov	r0, r2
 8006dea:	f7fe fa14 	bl	8005216 <vListInsert>
}
 8006dee:	e010      	b.n	8006e12 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006df0:	4b0f      	ldr	r3, [pc, #60]	; (8006e30 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	4b0a      	ldr	r3, [pc, #40]	; (8006e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	3304      	adds	r3, #4
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	4610      	mov	r0, r2
 8006dfe:	f7fe fa0a 	bl	8005216 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006e02:	4b0c      	ldr	r3, [pc, #48]	; (8006e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d202      	bcs.n	8006e12 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006e0c:	4a09      	ldr	r2, [pc, #36]	; (8006e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	6013      	str	r3, [r2, #0]
}
 8006e12:	bf00      	nop
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	200003b0 	.word	0x200003b0
 8006e20:	200002ac 	.word	0x200002ac
 8006e24:	200003b4 	.word	0x200003b4
 8006e28:	20000398 	.word	0x20000398
 8006e2c:	20000368 	.word	0x20000368
 8006e30:	20000364 	.word	0x20000364
 8006e34:	200003cc 	.word	0x200003cc

08006e38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	3b04      	subs	r3, #4
 8006e48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	3b04      	subs	r3, #4
 8006e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	f023 0201 	bic.w	r2, r3, #1
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	3b04      	subs	r3, #4
 8006e66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006e68:	4a0c      	ldr	r2, [pc, #48]	; (8006e9c <pxPortInitialiseStack+0x64>)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	3b14      	subs	r3, #20
 8006e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	3b04      	subs	r3, #4
 8006e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f06f 0202 	mvn.w	r2, #2
 8006e86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	3b20      	subs	r3, #32
 8006e8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr
 8006e9c:	08006ea1 	.word	0x08006ea1

08006ea0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006eaa:	4b12      	ldr	r3, [pc, #72]	; (8006ef4 <prvTaskExitError+0x54>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb2:	d00a      	beq.n	8006eca <prvTaskExitError+0x2a>
	__asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	60fb      	str	r3, [r7, #12]
}
 8006ec6:	bf00      	nop
 8006ec8:	e7fe      	b.n	8006ec8 <prvTaskExitError+0x28>
	__asm volatile
 8006eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ece:	f383 8811 	msr	BASEPRI, r3
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	f3bf 8f4f 	dsb	sy
 8006eda:	60bb      	str	r3, [r7, #8]
}
 8006edc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ede:	bf00      	nop
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d0fc      	beq.n	8006ee0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ee6:	bf00      	nop
 8006ee8:	bf00      	nop
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	2000000c 	.word	0x2000000c
	...

08006f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f00:	4b07      	ldr	r3, [pc, #28]	; (8006f20 <pxCurrentTCBConst2>)
 8006f02:	6819      	ldr	r1, [r3, #0]
 8006f04:	6808      	ldr	r0, [r1, #0]
 8006f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f0a:	f380 8809 	msr	PSP, r0
 8006f0e:	f3bf 8f6f 	isb	sy
 8006f12:	f04f 0000 	mov.w	r0, #0
 8006f16:	f380 8811 	msr	BASEPRI, r0
 8006f1a:	4770      	bx	lr
 8006f1c:	f3af 8000 	nop.w

08006f20 <pxCurrentTCBConst2>:
 8006f20:	200002ac 	.word	0x200002ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f24:	bf00      	nop
 8006f26:	bf00      	nop

08006f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f28:	4808      	ldr	r0, [pc, #32]	; (8006f4c <prvPortStartFirstTask+0x24>)
 8006f2a:	6800      	ldr	r0, [r0, #0]
 8006f2c:	6800      	ldr	r0, [r0, #0]
 8006f2e:	f380 8808 	msr	MSP, r0
 8006f32:	f04f 0000 	mov.w	r0, #0
 8006f36:	f380 8814 	msr	CONTROL, r0
 8006f3a:	b662      	cpsie	i
 8006f3c:	b661      	cpsie	f
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	df00      	svc	0
 8006f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f4a:	bf00      	nop
 8006f4c:	e000ed08 	.word	0xe000ed08

08006f50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006f56:	4b46      	ldr	r3, [pc, #280]	; (8007070 <xPortStartScheduler+0x120>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a46      	ldr	r2, [pc, #280]	; (8007074 <xPortStartScheduler+0x124>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d10a      	bne.n	8006f76 <xPortStartScheduler+0x26>
	__asm volatile
 8006f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f64:	f383 8811 	msr	BASEPRI, r3
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	613b      	str	r3, [r7, #16]
}
 8006f72:	bf00      	nop
 8006f74:	e7fe      	b.n	8006f74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006f76:	4b3e      	ldr	r3, [pc, #248]	; (8007070 <xPortStartScheduler+0x120>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a3f      	ldr	r2, [pc, #252]	; (8007078 <xPortStartScheduler+0x128>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d10a      	bne.n	8006f96 <xPortStartScheduler+0x46>
	__asm volatile
 8006f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f84:	f383 8811 	msr	BASEPRI, r3
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	60fb      	str	r3, [r7, #12]
}
 8006f92:	bf00      	nop
 8006f94:	e7fe      	b.n	8006f94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f96:	4b39      	ldr	r3, [pc, #228]	; (800707c <xPortStartScheduler+0x12c>)
 8006f98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	22ff      	movs	r2, #255	; 0xff
 8006fa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006fb0:	78fb      	ldrb	r3, [r7, #3]
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	4b31      	ldr	r3, [pc, #196]	; (8007080 <xPortStartScheduler+0x130>)
 8006fbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006fbe:	4b31      	ldr	r3, [pc, #196]	; (8007084 <xPortStartScheduler+0x134>)
 8006fc0:	2207      	movs	r2, #7
 8006fc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fc4:	e009      	b.n	8006fda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006fc6:	4b2f      	ldr	r3, [pc, #188]	; (8007084 <xPortStartScheduler+0x134>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	4a2d      	ldr	r2, [pc, #180]	; (8007084 <xPortStartScheduler+0x134>)
 8006fce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006fd0:	78fb      	ldrb	r3, [r7, #3]
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	005b      	lsls	r3, r3, #1
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fda:	78fb      	ldrb	r3, [r7, #3]
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe2:	2b80      	cmp	r3, #128	; 0x80
 8006fe4:	d0ef      	beq.n	8006fc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006fe6:	4b27      	ldr	r3, [pc, #156]	; (8007084 <xPortStartScheduler+0x134>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f1c3 0307 	rsb	r3, r3, #7
 8006fee:	2b04      	cmp	r3, #4
 8006ff0:	d00a      	beq.n	8007008 <xPortStartScheduler+0xb8>
	__asm volatile
 8006ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff6:	f383 8811 	msr	BASEPRI, r3
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	60bb      	str	r3, [r7, #8]
}
 8007004:	bf00      	nop
 8007006:	e7fe      	b.n	8007006 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007008:	4b1e      	ldr	r3, [pc, #120]	; (8007084 <xPortStartScheduler+0x134>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	021b      	lsls	r3, r3, #8
 800700e:	4a1d      	ldr	r2, [pc, #116]	; (8007084 <xPortStartScheduler+0x134>)
 8007010:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007012:	4b1c      	ldr	r3, [pc, #112]	; (8007084 <xPortStartScheduler+0x134>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800701a:	4a1a      	ldr	r2, [pc, #104]	; (8007084 <xPortStartScheduler+0x134>)
 800701c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	b2da      	uxtb	r2, r3
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007026:	4b18      	ldr	r3, [pc, #96]	; (8007088 <xPortStartScheduler+0x138>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a17      	ldr	r2, [pc, #92]	; (8007088 <xPortStartScheduler+0x138>)
 800702c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007030:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007032:	4b15      	ldr	r3, [pc, #84]	; (8007088 <xPortStartScheduler+0x138>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a14      	ldr	r2, [pc, #80]	; (8007088 <xPortStartScheduler+0x138>)
 8007038:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800703c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800703e:	f000 f8dd 	bl	80071fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007042:	4b12      	ldr	r3, [pc, #72]	; (800708c <xPortStartScheduler+0x13c>)
 8007044:	2200      	movs	r2, #0
 8007046:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007048:	f000 f8fc 	bl	8007244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800704c:	4b10      	ldr	r3, [pc, #64]	; (8007090 <xPortStartScheduler+0x140>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a0f      	ldr	r2, [pc, #60]	; (8007090 <xPortStartScheduler+0x140>)
 8007052:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007056:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007058:	f7ff ff66 	bl	8006f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800705c:	f7ff fa8e 	bl	800657c <vTaskSwitchContext>
	prvTaskExitError();
 8007060:	f7ff ff1e 	bl	8006ea0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3718      	adds	r7, #24
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	e000ed00 	.word	0xe000ed00
 8007074:	410fc271 	.word	0x410fc271
 8007078:	410fc270 	.word	0x410fc270
 800707c:	e000e400 	.word	0xe000e400
 8007080:	200003d8 	.word	0x200003d8
 8007084:	200003dc 	.word	0x200003dc
 8007088:	e000ed20 	.word	0xe000ed20
 800708c:	2000000c 	.word	0x2000000c
 8007090:	e000ef34 	.word	0xe000ef34

08007094 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
	__asm volatile
 800709a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709e:	f383 8811 	msr	BASEPRI, r3
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	f3bf 8f4f 	dsb	sy
 80070aa:	607b      	str	r3, [r7, #4]
}
 80070ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80070ae:	4b0f      	ldr	r3, [pc, #60]	; (80070ec <vPortEnterCritical+0x58>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3301      	adds	r3, #1
 80070b4:	4a0d      	ldr	r2, [pc, #52]	; (80070ec <vPortEnterCritical+0x58>)
 80070b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80070b8:	4b0c      	ldr	r3, [pc, #48]	; (80070ec <vPortEnterCritical+0x58>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d10f      	bne.n	80070e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80070c0:	4b0b      	ldr	r3, [pc, #44]	; (80070f0 <vPortEnterCritical+0x5c>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00a      	beq.n	80070e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80070ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	603b      	str	r3, [r7, #0]
}
 80070dc:	bf00      	nop
 80070de:	e7fe      	b.n	80070de <vPortEnterCritical+0x4a>
	}
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	2000000c 	.word	0x2000000c
 80070f0:	e000ed04 	.word	0xe000ed04

080070f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80070fa:	4b12      	ldr	r3, [pc, #72]	; (8007144 <vPortExitCritical+0x50>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10a      	bne.n	8007118 <vPortExitCritical+0x24>
	__asm volatile
 8007102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	607b      	str	r3, [r7, #4]
}
 8007114:	bf00      	nop
 8007116:	e7fe      	b.n	8007116 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007118:	4b0a      	ldr	r3, [pc, #40]	; (8007144 <vPortExitCritical+0x50>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3b01      	subs	r3, #1
 800711e:	4a09      	ldr	r2, [pc, #36]	; (8007144 <vPortExitCritical+0x50>)
 8007120:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007122:	4b08      	ldr	r3, [pc, #32]	; (8007144 <vPortExitCritical+0x50>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d105      	bne.n	8007136 <vPortExitCritical+0x42>
 800712a:	2300      	movs	r3, #0
 800712c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	f383 8811 	msr	BASEPRI, r3
}
 8007134:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007136:	bf00      	nop
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	2000000c 	.word	0x2000000c
	...

08007150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007150:	f3ef 8009 	mrs	r0, PSP
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	4b15      	ldr	r3, [pc, #84]	; (80071b0 <pxCurrentTCBConst>)
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	f01e 0f10 	tst.w	lr, #16
 8007160:	bf08      	it	eq
 8007162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716a:	6010      	str	r0, [r2, #0]
 800716c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007170:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007174:	f380 8811 	msr	BASEPRI, r0
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f7ff f9fc 	bl	800657c <vTaskSwitchContext>
 8007184:	f04f 0000 	mov.w	r0, #0
 8007188:	f380 8811 	msr	BASEPRI, r0
 800718c:	bc09      	pop	{r0, r3}
 800718e:	6819      	ldr	r1, [r3, #0]
 8007190:	6808      	ldr	r0, [r1, #0]
 8007192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007196:	f01e 0f10 	tst.w	lr, #16
 800719a:	bf08      	it	eq
 800719c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80071a0:	f380 8809 	msr	PSP, r0
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	f3af 8000 	nop.w

080071b0 <pxCurrentTCBConst>:
 80071b0:	200002ac 	.word	0x200002ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80071b4:	bf00      	nop
 80071b6:	bf00      	nop

080071b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
	__asm volatile
 80071be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	607b      	str	r3, [r7, #4]
}
 80071d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80071d2:	f7ff f91b 	bl	800640c <xTaskIncrementTick>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d003      	beq.n	80071e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80071dc:	4b06      	ldr	r3, [pc, #24]	; (80071f8 <SysTick_Handler+0x40>)
 80071de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	2300      	movs	r3, #0
 80071e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	f383 8811 	msr	BASEPRI, r3
}
 80071ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80071f0:	bf00      	nop
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	e000ed04 	.word	0xe000ed04

080071fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80071fc:	b480      	push	{r7}
 80071fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007200:	4b0b      	ldr	r3, [pc, #44]	; (8007230 <vPortSetupTimerInterrupt+0x34>)
 8007202:	2200      	movs	r2, #0
 8007204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007206:	4b0b      	ldr	r3, [pc, #44]	; (8007234 <vPortSetupTimerInterrupt+0x38>)
 8007208:	2200      	movs	r2, #0
 800720a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800720c:	4b0a      	ldr	r3, [pc, #40]	; (8007238 <vPortSetupTimerInterrupt+0x3c>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a0a      	ldr	r2, [pc, #40]	; (800723c <vPortSetupTimerInterrupt+0x40>)
 8007212:	fba2 2303 	umull	r2, r3, r2, r3
 8007216:	099b      	lsrs	r3, r3, #6
 8007218:	4a09      	ldr	r2, [pc, #36]	; (8007240 <vPortSetupTimerInterrupt+0x44>)
 800721a:	3b01      	subs	r3, #1
 800721c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800721e:	4b04      	ldr	r3, [pc, #16]	; (8007230 <vPortSetupTimerInterrupt+0x34>)
 8007220:	2207      	movs	r2, #7
 8007222:	601a      	str	r2, [r3, #0]
}
 8007224:	bf00      	nop
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	e000e010 	.word	0xe000e010
 8007234:	e000e018 	.word	0xe000e018
 8007238:	20000000 	.word	0x20000000
 800723c:	10624dd3 	.word	0x10624dd3
 8007240:	e000e014 	.word	0xe000e014

08007244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007244:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007254 <vPortEnableVFP+0x10>
 8007248:	6801      	ldr	r1, [r0, #0]
 800724a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800724e:	6001      	str	r1, [r0, #0]
 8007250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007252:	bf00      	nop
 8007254:	e000ed88 	.word	0xe000ed88

08007258 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800725e:	f3ef 8305 	mrs	r3, IPSR
 8007262:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b0f      	cmp	r3, #15
 8007268:	d914      	bls.n	8007294 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800726a:	4a17      	ldr	r2, [pc, #92]	; (80072c8 <vPortValidateInterruptPriority+0x70>)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4413      	add	r3, r2
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007274:	4b15      	ldr	r3, [pc, #84]	; (80072cc <vPortValidateInterruptPriority+0x74>)
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	7afa      	ldrb	r2, [r7, #11]
 800727a:	429a      	cmp	r2, r3
 800727c:	d20a      	bcs.n	8007294 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	607b      	str	r3, [r7, #4]
}
 8007290:	bf00      	nop
 8007292:	e7fe      	b.n	8007292 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007294:	4b0e      	ldr	r3, [pc, #56]	; (80072d0 <vPortValidateInterruptPriority+0x78>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800729c:	4b0d      	ldr	r3, [pc, #52]	; (80072d4 <vPortValidateInterruptPriority+0x7c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d90a      	bls.n	80072ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80072a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	603b      	str	r3, [r7, #0]
}
 80072b6:	bf00      	nop
 80072b8:	e7fe      	b.n	80072b8 <vPortValidateInterruptPriority+0x60>
	}
 80072ba:	bf00      	nop
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	e000e3f0 	.word	0xe000e3f0
 80072cc:	200003d8 	.word	0x200003d8
 80072d0:	e000ed0c 	.word	0xe000ed0c
 80072d4:	200003dc 	.word	0x200003dc

080072d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b08a      	sub	sp, #40	; 0x28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80072e0:	2300      	movs	r3, #0
 80072e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80072e4:	f7fe ffe8 	bl	80062b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80072e8:	4b5b      	ldr	r3, [pc, #364]	; (8007458 <pvPortMalloc+0x180>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d101      	bne.n	80072f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80072f0:	f000 f920 	bl	8007534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80072f4:	4b59      	ldr	r3, [pc, #356]	; (800745c <pvPortMalloc+0x184>)
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4013      	ands	r3, r2
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f040 8093 	bne.w	8007428 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d01d      	beq.n	8007344 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007308:	2208      	movs	r2, #8
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4413      	add	r3, r2
 800730e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f003 0307 	and.w	r3, r3, #7
 8007316:	2b00      	cmp	r3, #0
 8007318:	d014      	beq.n	8007344 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f023 0307 	bic.w	r3, r3, #7
 8007320:	3308      	adds	r3, #8
 8007322:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f003 0307 	and.w	r3, r3, #7
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00a      	beq.n	8007344 <pvPortMalloc+0x6c>
	__asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	617b      	str	r3, [r7, #20]
}
 8007340:	bf00      	nop
 8007342:	e7fe      	b.n	8007342 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d06e      	beq.n	8007428 <pvPortMalloc+0x150>
 800734a:	4b45      	ldr	r3, [pc, #276]	; (8007460 <pvPortMalloc+0x188>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	429a      	cmp	r2, r3
 8007352:	d869      	bhi.n	8007428 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007354:	4b43      	ldr	r3, [pc, #268]	; (8007464 <pvPortMalloc+0x18c>)
 8007356:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007358:	4b42      	ldr	r3, [pc, #264]	; (8007464 <pvPortMalloc+0x18c>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800735e:	e004      	b.n	800736a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	429a      	cmp	r2, r3
 8007372:	d903      	bls.n	800737c <pvPortMalloc+0xa4>
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1f1      	bne.n	8007360 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800737c:	4b36      	ldr	r3, [pc, #216]	; (8007458 <pvPortMalloc+0x180>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007382:	429a      	cmp	r2, r3
 8007384:	d050      	beq.n	8007428 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007386:	6a3b      	ldr	r3, [r7, #32]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2208      	movs	r2, #8
 800738c:	4413      	add	r3, r2
 800738e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	1ad2      	subs	r2, r2, r3
 80073a0:	2308      	movs	r3, #8
 80073a2:	005b      	lsls	r3, r3, #1
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d91f      	bls.n	80073e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4413      	add	r3, r2
 80073ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	f003 0307 	and.w	r3, r3, #7
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00a      	beq.n	80073d0 <pvPortMalloc+0xf8>
	__asm volatile
 80073ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	613b      	str	r3, [r7, #16]
}
 80073cc:	bf00      	nop
 80073ce:	e7fe      	b.n	80073ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	685a      	ldr	r2, [r3, #4]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	1ad2      	subs	r2, r2, r3
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073e2:	69b8      	ldr	r0, [r7, #24]
 80073e4:	f000 f908 	bl	80075f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073e8:	4b1d      	ldr	r3, [pc, #116]	; (8007460 <pvPortMalloc+0x188>)
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	4a1b      	ldr	r2, [pc, #108]	; (8007460 <pvPortMalloc+0x188>)
 80073f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073f6:	4b1a      	ldr	r3, [pc, #104]	; (8007460 <pvPortMalloc+0x188>)
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	4b1b      	ldr	r3, [pc, #108]	; (8007468 <pvPortMalloc+0x190>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d203      	bcs.n	800740a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007402:	4b17      	ldr	r3, [pc, #92]	; (8007460 <pvPortMalloc+0x188>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a18      	ldr	r2, [pc, #96]	; (8007468 <pvPortMalloc+0x190>)
 8007408:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	4b13      	ldr	r3, [pc, #76]	; (800745c <pvPortMalloc+0x184>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	431a      	orrs	r2, r3
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741a:	2200      	movs	r2, #0
 800741c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800741e:	4b13      	ldr	r3, [pc, #76]	; (800746c <pvPortMalloc+0x194>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	3301      	adds	r3, #1
 8007424:	4a11      	ldr	r2, [pc, #68]	; (800746c <pvPortMalloc+0x194>)
 8007426:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007428:	f7fe ff54 	bl	80062d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	f003 0307 	and.w	r3, r3, #7
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00a      	beq.n	800744c <pvPortMalloc+0x174>
	__asm volatile
 8007436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743a:	f383 8811 	msr	BASEPRI, r3
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f3bf 8f4f 	dsb	sy
 8007446:	60fb      	str	r3, [r7, #12]
}
 8007448:	bf00      	nop
 800744a:	e7fe      	b.n	800744a <pvPortMalloc+0x172>
	return pvReturn;
 800744c:	69fb      	ldr	r3, [r7, #28]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3728      	adds	r7, #40	; 0x28
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	20003fe8 	.word	0x20003fe8
 800745c:	20003ffc 	.word	0x20003ffc
 8007460:	20003fec 	.word	0x20003fec
 8007464:	20003fe0 	.word	0x20003fe0
 8007468:	20003ff0 	.word	0x20003ff0
 800746c:	20003ff4 	.word	0x20003ff4

08007470 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d04d      	beq.n	800751e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007482:	2308      	movs	r3, #8
 8007484:	425b      	negs	r3, r3
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	4413      	add	r3, r2
 800748a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	685a      	ldr	r2, [r3, #4]
 8007494:	4b24      	ldr	r3, [pc, #144]	; (8007528 <vPortFree+0xb8>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4013      	ands	r3, r2
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10a      	bne.n	80074b4 <vPortFree+0x44>
	__asm volatile
 800749e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	60fb      	str	r3, [r7, #12]
}
 80074b0:	bf00      	nop
 80074b2:	e7fe      	b.n	80074b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00a      	beq.n	80074d2 <vPortFree+0x62>
	__asm volatile
 80074bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c0:	f383 8811 	msr	BASEPRI, r3
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	60bb      	str	r3, [r7, #8]
}
 80074ce:	bf00      	nop
 80074d0:	e7fe      	b.n	80074d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	685a      	ldr	r2, [r3, #4]
 80074d6:	4b14      	ldr	r3, [pc, #80]	; (8007528 <vPortFree+0xb8>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4013      	ands	r3, r2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d01e      	beq.n	800751e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d11a      	bne.n	800751e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	4b0e      	ldr	r3, [pc, #56]	; (8007528 <vPortFree+0xb8>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	43db      	mvns	r3, r3
 80074f2:	401a      	ands	r2, r3
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80074f8:	f7fe fede 	bl	80062b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	4b0a      	ldr	r3, [pc, #40]	; (800752c <vPortFree+0xbc>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4413      	add	r3, r2
 8007506:	4a09      	ldr	r2, [pc, #36]	; (800752c <vPortFree+0xbc>)
 8007508:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800750a:	6938      	ldr	r0, [r7, #16]
 800750c:	f000 f874 	bl	80075f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007510:	4b07      	ldr	r3, [pc, #28]	; (8007530 <vPortFree+0xc0>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	3301      	adds	r3, #1
 8007516:	4a06      	ldr	r2, [pc, #24]	; (8007530 <vPortFree+0xc0>)
 8007518:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800751a:	f7fe fedb 	bl	80062d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800751e:	bf00      	nop
 8007520:	3718      	adds	r7, #24
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	20003ffc 	.word	0x20003ffc
 800752c:	20003fec 	.word	0x20003fec
 8007530:	20003ff8 	.word	0x20003ff8

08007534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800753a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800753e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007540:	4b27      	ldr	r3, [pc, #156]	; (80075e0 <prvHeapInit+0xac>)
 8007542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f003 0307 	and.w	r3, r3, #7
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00c      	beq.n	8007568 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	3307      	adds	r3, #7
 8007552:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f023 0307 	bic.w	r3, r3, #7
 800755a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	4a1f      	ldr	r2, [pc, #124]	; (80075e0 <prvHeapInit+0xac>)
 8007564:	4413      	add	r3, r2
 8007566:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800756c:	4a1d      	ldr	r2, [pc, #116]	; (80075e4 <prvHeapInit+0xb0>)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007572:	4b1c      	ldr	r3, [pc, #112]	; (80075e4 <prvHeapInit+0xb0>)
 8007574:	2200      	movs	r2, #0
 8007576:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	4413      	add	r3, r2
 800757e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007580:	2208      	movs	r2, #8
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	1a9b      	subs	r3, r3, r2
 8007586:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f023 0307 	bic.w	r3, r3, #7
 800758e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	4a15      	ldr	r2, [pc, #84]	; (80075e8 <prvHeapInit+0xb4>)
 8007594:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007596:	4b14      	ldr	r3, [pc, #80]	; (80075e8 <prvHeapInit+0xb4>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2200      	movs	r2, #0
 800759c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800759e:	4b12      	ldr	r3, [pc, #72]	; (80075e8 <prvHeapInit+0xb4>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	1ad2      	subs	r2, r2, r3
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80075b4:	4b0c      	ldr	r3, [pc, #48]	; (80075e8 <prvHeapInit+0xb4>)
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	4a0a      	ldr	r2, [pc, #40]	; (80075ec <prvHeapInit+0xb8>)
 80075c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	4a09      	ldr	r2, [pc, #36]	; (80075f0 <prvHeapInit+0xbc>)
 80075ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80075cc:	4b09      	ldr	r3, [pc, #36]	; (80075f4 <prvHeapInit+0xc0>)
 80075ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80075d2:	601a      	str	r2, [r3, #0]
}
 80075d4:	bf00      	nop
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr
 80075e0:	200003e0 	.word	0x200003e0
 80075e4:	20003fe0 	.word	0x20003fe0
 80075e8:	20003fe8 	.word	0x20003fe8
 80075ec:	20003ff0 	.word	0x20003ff0
 80075f0:	20003fec 	.word	0x20003fec
 80075f4:	20003ffc 	.word	0x20003ffc

080075f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007600:	4b28      	ldr	r3, [pc, #160]	; (80076a4 <prvInsertBlockIntoFreeList+0xac>)
 8007602:	60fb      	str	r3, [r7, #12]
 8007604:	e002      	b.n	800760c <prvInsertBlockIntoFreeList+0x14>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	60fb      	str	r3, [r7, #12]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	429a      	cmp	r2, r3
 8007614:	d8f7      	bhi.n	8007606 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	4413      	add	r3, r2
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	429a      	cmp	r2, r3
 8007626:	d108      	bne.n	800763a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	441a      	add	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	441a      	add	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	429a      	cmp	r2, r3
 800764c:	d118      	bne.n	8007680 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	4b15      	ldr	r3, [pc, #84]	; (80076a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	429a      	cmp	r2, r3
 8007658:	d00d      	beq.n	8007676 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685a      	ldr	r2, [r3, #4]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	441a      	add	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	e008      	b.n	8007688 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007676:	4b0c      	ldr	r3, [pc, #48]	; (80076a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	e003      	b.n	8007688 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	429a      	cmp	r2, r3
 800768e:	d002      	beq.n	8007696 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007696:	bf00      	nop
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	20003fe0 	.word	0x20003fe0
 80076a8:	20003fe8 	.word	0x20003fe8

080076ac <__libc_init_array>:
 80076ac:	b570      	push	{r4, r5, r6, lr}
 80076ae:	4d0d      	ldr	r5, [pc, #52]	; (80076e4 <__libc_init_array+0x38>)
 80076b0:	4c0d      	ldr	r4, [pc, #52]	; (80076e8 <__libc_init_array+0x3c>)
 80076b2:	1b64      	subs	r4, r4, r5
 80076b4:	10a4      	asrs	r4, r4, #2
 80076b6:	2600      	movs	r6, #0
 80076b8:	42a6      	cmp	r6, r4
 80076ba:	d109      	bne.n	80076d0 <__libc_init_array+0x24>
 80076bc:	4d0b      	ldr	r5, [pc, #44]	; (80076ec <__libc_init_array+0x40>)
 80076be:	4c0c      	ldr	r4, [pc, #48]	; (80076f0 <__libc_init_array+0x44>)
 80076c0:	f000 f82e 	bl	8007720 <_init>
 80076c4:	1b64      	subs	r4, r4, r5
 80076c6:	10a4      	asrs	r4, r4, #2
 80076c8:	2600      	movs	r6, #0
 80076ca:	42a6      	cmp	r6, r4
 80076cc:	d105      	bne.n	80076da <__libc_init_array+0x2e>
 80076ce:	bd70      	pop	{r4, r5, r6, pc}
 80076d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80076d4:	4798      	blx	r3
 80076d6:	3601      	adds	r6, #1
 80076d8:	e7ee      	b.n	80076b8 <__libc_init_array+0xc>
 80076da:	f855 3b04 	ldr.w	r3, [r5], #4
 80076de:	4798      	blx	r3
 80076e0:	3601      	adds	r6, #1
 80076e2:	e7f2      	b.n	80076ca <__libc_init_array+0x1e>
 80076e4:	08007868 	.word	0x08007868
 80076e8:	08007868 	.word	0x08007868
 80076ec:	08007868 	.word	0x08007868
 80076f0:	0800786c 	.word	0x0800786c

080076f4 <memcpy>:
 80076f4:	440a      	add	r2, r1
 80076f6:	4291      	cmp	r1, r2
 80076f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80076fc:	d100      	bne.n	8007700 <memcpy+0xc>
 80076fe:	4770      	bx	lr
 8007700:	b510      	push	{r4, lr}
 8007702:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007706:	f803 4f01 	strb.w	r4, [r3, #1]!
 800770a:	4291      	cmp	r1, r2
 800770c:	d1f9      	bne.n	8007702 <memcpy+0xe>
 800770e:	bd10      	pop	{r4, pc}

08007710 <memset>:
 8007710:	4402      	add	r2, r0
 8007712:	4603      	mov	r3, r0
 8007714:	4293      	cmp	r3, r2
 8007716:	d100      	bne.n	800771a <memset+0xa>
 8007718:	4770      	bx	lr
 800771a:	f803 1b01 	strb.w	r1, [r3], #1
 800771e:	e7f9      	b.n	8007714 <memset+0x4>

08007720 <_init>:
 8007720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007722:	bf00      	nop
 8007724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007726:	bc08      	pop	{r3}
 8007728:	469e      	mov	lr, r3
 800772a:	4770      	bx	lr

0800772c <_fini>:
 800772c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772e:	bf00      	nop
 8007730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007732:	bc08      	pop	{r3}
 8007734:	469e      	mov	lr, r3
 8007736:	4770      	bx	lr
