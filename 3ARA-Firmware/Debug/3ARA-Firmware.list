
3ARA-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08007584  08007584  00017584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078ac  080078ac  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080078ac  080078ac  000178ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078b4  080078b4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078b4  080078b4  000178b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078b8  080078b8  000178b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080078bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041a8  20000078  08007934  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004220  08007934  00024220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ddd  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bb6  00000000  00000000  00039e85  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001410  00000000  00000000  0003da40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001270  00000000  00000000  0003ee50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006b4b  00000000  00000000  000400c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010e28  00000000  00000000  00046c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7ff9  00000000  00000000  00057a33  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012fa2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005604  00000000  00000000  0012faa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800756c 	.word	0x0800756c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800756c 	.word	0x0800756c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	0a5a      	lsrs	r2, r3, #9
 80004f0:	490f      	ldr	r1, [pc, #60]	; (8000530 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80004f2:	fba1 1202 	umull	r1, r2, r1, r2
 80004f6:	09d2      	lsrs	r2, r2, #7
 80004f8:	490e      	ldr	r1, [pc, #56]	; (8000534 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80004fa:	fb01 f202 	mul.w	r2, r1, r2
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	0a5b      	lsrs	r3, r3, #9
 8000508:	4a09      	ldr	r2, [pc, #36]	; (8000530 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800050a:	fba2 2303 	umull	r2, r3, r2, r3
 800050e:	09db      	lsrs	r3, r3, #7
 8000510:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	441a      	add	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	68fa      	ldr	r2, [r7, #12]
 8000522:	601a      	str	r2, [r3, #0]
}
 8000524:	bf00      	nop
 8000526:	3714      	adds	r7, #20
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	00044b83 	.word	0x00044b83
 8000534:	3b9aca00 	.word	0x3b9aca00

08000538 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2200      	movs	r2, #0
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4618      	mov	r0, r3
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
	...

0800055c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <_ZN3ros3MsgC1Ev+0x1c>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4618      	mov	r0, r3
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	0800787c 	.word	0x0800787c

0800057c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
      data()
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4618      	mov	r0, r3
 8000588:	f7ff ffe8 	bl	800055c <_ZN3ros3MsgC1Ev>
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	3304      	adds	r3, #4
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff ffce 	bl	8000538 <_ZN3ros4TimeC1Ev>
    {
    }
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4618      	mov	r0, r3
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	08007864 	.word	0x08007864

080005ac <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	6859      	ldr	r1, [r3, #4]
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	683a      	ldr	r2, [r7, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	b2ca      	uxtb	r2, r1
 80005c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	0a19      	lsrs	r1, r3, #8
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	3301      	adds	r3, #1
 80005d2:	683a      	ldr	r2, [r7, #0]
 80005d4:	4413      	add	r3, r2
 80005d6:	b2ca      	uxtb	r2, r1
 80005d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	0c19      	lsrs	r1, r3, #16
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	3302      	adds	r3, #2
 80005e4:	683a      	ldr	r2, [r7, #0]
 80005e6:	4413      	add	r3, r2
 80005e8:	b2ca      	uxtb	r2, r1
 80005ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	0e19      	lsrs	r1, r3, #24
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	3303      	adds	r3, #3
 80005f6:	683a      	ldr	r2, [r7, #0]
 80005f8:	4413      	add	r3, r2
 80005fa:	b2ca      	uxtb	r2, r1
 80005fc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	3304      	adds	r3, #4
 8000602:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6899      	ldr	r1, [r3, #8]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	4413      	add	r3, r2
 800060e:	b2ca      	uxtb	r2, r1
 8000610:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	0a19      	lsrs	r1, r3, #8
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	3301      	adds	r3, #1
 800061c:	683a      	ldr	r2, [r7, #0]
 800061e:	4413      	add	r3, r2
 8000620:	b2ca      	uxtb	r2, r1
 8000622:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	689b      	ldr	r3, [r3, #8]
 8000628:	0c19      	lsrs	r1, r3, #16
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	3302      	adds	r3, #2
 800062e:	683a      	ldr	r2, [r7, #0]
 8000630:	4413      	add	r3, r2
 8000632:	b2ca      	uxtb	r2, r1
 8000634:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	0e19      	lsrs	r1, r3, #24
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	3303      	adds	r3, #3
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	4413      	add	r3, r2
 8000644:	b2ca      	uxtb	r2, r1
 8000646:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	3304      	adds	r3, #4
 800064c:	60fb      	str	r3, [r7, #12]
      return offset;
 800064e:	68fb      	ldr	r3, [r7, #12]
    }
 8000650:	4618      	mov	r0, r3
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	683a      	ldr	r2, [r7, #0]
 800066e:	4413      	add	r3, r2
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	685a      	ldr	r2, [r3, #4]
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3301      	adds	r3, #1
 8000680:	6839      	ldr	r1, [r7, #0]
 8000682:	440b      	add	r3, r1
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	021b      	lsls	r3, r3, #8
 8000688:	431a      	orrs	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	685a      	ldr	r2, [r3, #4]
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	3302      	adds	r3, #2
 8000696:	6839      	ldr	r1, [r7, #0]
 8000698:	440b      	add	r3, r1
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	041b      	lsls	r3, r3, #16
 800069e:	431a      	orrs	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	685a      	ldr	r2, [r3, #4]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	3303      	adds	r3, #3
 80006ac:	6839      	ldr	r1, [r7, #0]
 80006ae:	440b      	add	r3, r1
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	061b      	lsls	r3, r3, #24
 80006b4:	431a      	orrs	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	3304      	adds	r3, #4
 80006be:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	683a      	ldr	r2, [r7, #0]
 80006c4:	4413      	add	r3, r2
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	461a      	mov	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	689a      	ldr	r2, [r3, #8]
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	3301      	adds	r3, #1
 80006d6:	6839      	ldr	r1, [r7, #0]
 80006d8:	440b      	add	r3, r1
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	021b      	lsls	r3, r3, #8
 80006de:	431a      	orrs	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	689a      	ldr	r2, [r3, #8]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	3302      	adds	r3, #2
 80006ec:	6839      	ldr	r1, [r7, #0]
 80006ee:	440b      	add	r3, r1
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	041b      	lsls	r3, r3, #16
 80006f4:	431a      	orrs	r2, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	689a      	ldr	r2, [r3, #8]
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	3303      	adds	r3, #3
 8000702:	6839      	ldr	r1, [r7, #0]
 8000704:	440b      	add	r3, r1
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	061b      	lsls	r3, r3, #24
 800070a:	431a      	orrs	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	3304      	adds	r3, #4
 8000714:	60fb      	str	r3, [r7, #12]
     return offset;
 8000716:	68fb      	ldr	r3, [r7, #12]
    }
 8000718:	4618      	mov	r0, r3
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	4b03      	ldr	r3, [pc, #12]	; (800073c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800072e:	4618      	mov	r0, r3
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	08007584 	.word	0x08007584

08000740 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	4b03      	ldr	r3, [pc, #12]	; (8000758 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800074a:	4618      	mov	r0, r3
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	08007594 	.word	0x08007594

0800075c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff fef8 	bl	800055c <_ZN3ros3MsgC1Ev>
 800076c:	4a0b      	ldr	r2, [pc, #44]	; (800079c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2200      	movs	r2, #0
 8000776:	809a      	strh	r2, [r3, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a09      	ldr	r2, [pc, #36]	; (80007a0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000788:	611a      	str	r2, [r3, #16]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2200      	movs	r2, #0
 800078e:	615a      	str	r2, [r3, #20]
    {
    }
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	0800784c 	.word	0x0800784c
 80007a0:	080075b8 	.word	0x080075b8

080007a4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	8899      	ldrh	r1, [r3, #4]
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	683a      	ldr	r2, [r7, #0]
 80007ba:	4413      	add	r3, r2
 80007bc:	b2ca      	uxtb	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	889b      	ldrh	r3, [r3, #4]
 80007c4:	0a1b      	lsrs	r3, r3, #8
 80007c6:	b299      	uxth	r1, r3
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	3301      	adds	r3, #1
 80007cc:	683a      	ldr	r2, [r7, #0]
 80007ce:	4413      	add	r3, r2
 80007d0:	b2ca      	uxtb	r2, r1
 80007d2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	3302      	adds	r3, #2
 80007d8:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff fcf6 	bl	80001d0 <strlen>
 80007e4:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	683a      	ldr	r2, [r7, #0]
 80007ea:	4413      	add	r3, r2
 80007ec:	69b9      	ldr	r1, [r7, #24]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 ffc6 	bl	8001780 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80007f4:	69fb      	ldr	r3, [r7, #28]
 80007f6:	3304      	adds	r3, #4
 80007f8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	18d0      	adds	r0, r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	69ba      	ldr	r2, [r7, #24]
 8000806:	4619      	mov	r1, r3
 8000808:	f006 fd68 	bl	80072dc <memcpy>
      offset += length_topic_name;
 800080c:	69fa      	ldr	r2, [r7, #28]
 800080e:	69bb      	ldr	r3, [r7, #24]
 8000810:	4413      	add	r3, r2
 8000812:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fcd9 	bl	80001d0 <strlen>
 800081e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	683a      	ldr	r2, [r7, #0]
 8000824:	4413      	add	r3, r2
 8000826:	6979      	ldr	r1, [r7, #20]
 8000828:	4618      	mov	r0, r3
 800082a:	f000 ffa9 	bl	8001780 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	3304      	adds	r3, #4
 8000832:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	683a      	ldr	r2, [r7, #0]
 8000838:	18d0      	adds	r0, r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	68db      	ldr	r3, [r3, #12]
 800083e:	697a      	ldr	r2, [r7, #20]
 8000840:	4619      	mov	r1, r3
 8000842:	f006 fd4b 	bl	80072dc <memcpy>
      offset += length_message_type;
 8000846:	69fa      	ldr	r2, [r7, #28]
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	4413      	add	r3, r2
 800084c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	691b      	ldr	r3, [r3, #16]
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff fcbc 	bl	80001d0 <strlen>
 8000858:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	683a      	ldr	r2, [r7, #0]
 800085e:	4413      	add	r3, r2
 8000860:	6939      	ldr	r1, [r7, #16]
 8000862:	4618      	mov	r0, r3
 8000864:	f000 ff8c 	bl	8001780 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	3304      	adds	r3, #4
 800086c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	683a      	ldr	r2, [r7, #0]
 8000872:	18d0      	adds	r0, r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	691b      	ldr	r3, [r3, #16]
 8000878:	693a      	ldr	r2, [r7, #16]
 800087a:	4619      	mov	r1, r3
 800087c:	f006 fd2e 	bl	80072dc <memcpy>
      offset += length_md5sum;
 8000880:	69fa      	ldr	r2, [r7, #28]
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	4413      	add	r3, r2
 8000886:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	695b      	ldr	r3, [r3, #20]
 800088c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800088e:	68f9      	ldr	r1, [r7, #12]
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	683a      	ldr	r2, [r7, #0]
 8000894:	4413      	add	r3, r2
 8000896:	b2ca      	uxtb	r2, r1
 8000898:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	0a19      	lsrs	r1, r3, #8
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	3301      	adds	r3, #1
 80008a2:	683a      	ldr	r2, [r7, #0]
 80008a4:	4413      	add	r3, r2
 80008a6:	b2ca      	uxtb	r2, r1
 80008a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	0c19      	lsrs	r1, r3, #16
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	3302      	adds	r3, #2
 80008b2:	683a      	ldr	r2, [r7, #0]
 80008b4:	4413      	add	r3, r2
 80008b6:	b2ca      	uxtb	r2, r1
 80008b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	0e19      	lsrs	r1, r3, #24
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3303      	adds	r3, #3
 80008c2:	683a      	ldr	r2, [r7, #0]
 80008c4:	4413      	add	r3, r2
 80008c6:	b2ca      	uxtb	r2, r1
 80008c8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	3304      	adds	r3, #4
 80008ce:	61fb      	str	r3, [r7, #28]
      return offset;
 80008d0:	69fb      	ldr	r3, [r7, #28]
    }
 80008d2:	4618      	mov	r0, r3
 80008d4:	3720      	adds	r7, #32
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80008da:	b580      	push	{r7, lr}
 80008dc:	b08a      	sub	sp, #40	; 0x28
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
 80008e2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	683a      	ldr	r2, [r7, #0]
 80008ec:	4413      	add	r3, r2
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	889b      	ldrh	r3, [r3, #4]
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	69bb      	ldr	r3, [r7, #24]
 80008fe:	3301      	adds	r3, #1
 8000900:	6839      	ldr	r1, [r7, #0]
 8000902:	440b      	add	r3, r1
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	021b      	lsls	r3, r3, #8
 8000908:	b21b      	sxth	r3, r3
 800090a:	4313      	orrs	r3, r2
 800090c:	b21b      	sxth	r3, r3
 800090e:	b29a      	uxth	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000914:	69bb      	ldr	r3, [r7, #24]
 8000916:	3302      	adds	r3, #2
 8000918:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800091a:	69bb      	ldr	r3, [r7, #24]
 800091c:	683a      	ldr	r2, [r7, #0]
 800091e:	441a      	add	r2, r3
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4611      	mov	r1, r2
 8000926:	4618      	mov	r0, r3
 8000928:	f000 ff48 	bl	80017bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	3304      	adds	r3, #4
 8000930:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	4413      	add	r3, r2
 800093c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800093e:	429a      	cmp	r2, r3
 8000940:	d20c      	bcs.n	800095c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000942:	683a      	ldr	r2, [r7, #0]
 8000944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000946:	441a      	add	r2, r3
 8000948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094a:	3b01      	subs	r3, #1
 800094c:	6839      	ldr	r1, [r7, #0]
 800094e:	440b      	add	r3, r1
 8000950:	7812      	ldrb	r2, [r2, #0]
 8000952:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000956:	3301      	adds	r3, #1
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
 800095a:	e7ec      	b.n	8000936 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	4413      	add	r3, r2
 8000962:	3b01      	subs	r3, #1
 8000964:	683a      	ldr	r2, [r7, #0]
 8000966:	4413      	add	r3, r2
 8000968:	2200      	movs	r2, #0
 800096a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	3b01      	subs	r3, #1
 8000970:	683a      	ldr	r2, [r7, #0]
 8000972:	441a      	add	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	4413      	add	r3, r2
 800097e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	683a      	ldr	r2, [r7, #0]
 8000984:	441a      	add	r2, r3
 8000986:	f107 0310 	add.w	r3, r7, #16
 800098a:	4611      	mov	r1, r2
 800098c:	4618      	mov	r0, r3
 800098e:	f000 ff15 	bl	80017bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	3304      	adds	r3, #4
 8000996:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	623b      	str	r3, [r7, #32]
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	4413      	add	r3, r2
 80009a2:	6a3a      	ldr	r2, [r7, #32]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d20c      	bcs.n	80009c2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80009a8:	683a      	ldr	r2, [r7, #0]
 80009aa:	6a3b      	ldr	r3, [r7, #32]
 80009ac:	441a      	add	r2, r3
 80009ae:	6a3b      	ldr	r3, [r7, #32]
 80009b0:	3b01      	subs	r3, #1
 80009b2:	6839      	ldr	r1, [r7, #0]
 80009b4:	440b      	add	r3, r1
 80009b6:	7812      	ldrb	r2, [r2, #0]
 80009b8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80009ba:	6a3b      	ldr	r3, [r7, #32]
 80009bc:	3301      	adds	r3, #1
 80009be:	623b      	str	r3, [r7, #32]
 80009c0:	e7ec      	b.n	800099c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80009c2:	69ba      	ldr	r2, [r7, #24]
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	4413      	add	r3, r2
 80009c8:	3b01      	subs	r3, #1
 80009ca:	683a      	ldr	r2, [r7, #0]
 80009cc:	4413      	add	r3, r2
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80009d2:	69bb      	ldr	r3, [r7, #24]
 80009d4:	3b01      	subs	r3, #1
 80009d6:	683a      	ldr	r2, [r7, #0]
 80009d8:	441a      	add	r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80009de:	69ba      	ldr	r2, [r7, #24]
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	4413      	add	r3, r2
 80009e4:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	683a      	ldr	r2, [r7, #0]
 80009ea:	441a      	add	r2, r3
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	4611      	mov	r1, r2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 fee2 	bl	80017bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	3304      	adds	r3, #4
 80009fc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	61fb      	str	r3, [r7, #28]
 8000a02:	69ba      	ldr	r2, [r7, #24]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	4413      	add	r3, r2
 8000a08:	69fa      	ldr	r2, [r7, #28]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d20c      	bcs.n	8000a28 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000a0e:	683a      	ldr	r2, [r7, #0]
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	441a      	add	r2, r3
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	6839      	ldr	r1, [r7, #0]
 8000a1a:	440b      	add	r3, r1
 8000a1c:	7812      	ldrb	r2, [r2, #0]
 8000a1e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	3301      	adds	r3, #1
 8000a24:	61fb      	str	r3, [r7, #28]
 8000a26:	e7ec      	b.n	8000a02 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	683a      	ldr	r2, [r7, #0]
 8000a3e:	441a      	add	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	4413      	add	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	69ba      	ldr	r2, [r7, #24]
 8000a54:	6839      	ldr	r1, [r7, #0]
 8000a56:	440a      	add	r2, r1
 8000a58:	7812      	ldrb	r2, [r2, #0]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	3301      	adds	r3, #1
 8000a64:	6839      	ldr	r1, [r7, #0]
 8000a66:	440b      	add	r3, r1
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	021b      	lsls	r3, r3, #8
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000a70:	68ba      	ldr	r2, [r7, #8]
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	3302      	adds	r3, #2
 8000a76:	6839      	ldr	r1, [r7, #0]
 8000a78:	440b      	add	r3, r1
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	041b      	lsls	r3, r3, #16
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000a82:	68ba      	ldr	r2, [r7, #8]
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	3303      	adds	r3, #3
 8000a88:	6839      	ldr	r1, [r7, #0]
 8000a8a:	440b      	add	r3, r1
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	061b      	lsls	r3, r3, #24
 8000a90:	4313      	orrs	r3, r2
 8000a92:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000a94:	68ba      	ldr	r2, [r7, #8]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	61bb      	str	r3, [r7, #24]
     return offset;
 8000aa0:	69bb      	ldr	r3, [r7, #24]
    }
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3728      	adds	r7, #40	; 0x28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	080075bc 	.word	0x080075bc

08000ac8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	080075d8 	.word	0x080075d8

08000ae4 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fd34 	bl	800055c <_ZN3ros3MsgC1Ev>
 8000af4:	4a06      	ldr	r2, [pc, #24]	; (8000b10 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2200      	movs	r2, #0
 8000afe:	711a      	strb	r2, [r3, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000b04:	609a      	str	r2, [r3, #8]
    {
    }
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	08007834 	.word	0x08007834
 8000b14:	080075b8 	.word	0x080075b8

08000b18 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	683a      	ldr	r2, [r7, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	7912      	ldrb	r2, [r2, #4]
 8000b30:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	3301      	adds	r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fb47 	bl	80001d0 <strlen>
 8000b42:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	683a      	ldr	r2, [r7, #0]
 8000b48:	4413      	add	r3, r2
 8000b4a:	68b9      	ldr	r1, [r7, #8]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 fe17 	bl	8001780 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	3304      	adds	r3, #4
 8000b56:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	683a      	ldr	r2, [r7, #0]
 8000b5c:	18d0      	adds	r0, r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	4619      	mov	r1, r3
 8000b66:	f006 fbb9 	bl	80072dc <memcpy>
      offset += length_msg;
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	4413      	add	r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]
      return offset;
 8000b72:	68fb      	ldr	r3, [r7, #12]
    }
 8000b74:	4618      	mov	r0, r3
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	683a      	ldr	r2, [r7, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	781a      	ldrb	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	683a      	ldr	r2, [r7, #0]
 8000ba0:	441a      	add	r2, r3
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 fe07 	bl	80017bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	697a      	ldr	r2, [r7, #20]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d20c      	bcs.n	8000bde <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000bc4:	683a      	ldr	r2, [r7, #0]
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	441a      	add	r2, r3
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	6839      	ldr	r1, [r7, #0]
 8000bd0:	440b      	add	r3, r1
 8000bd2:	7812      	ldrb	r2, [r2, #0]
 8000bd4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	e7ec      	b.n	8000bb8 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	4413      	add	r3, r2
 8000be4:	3b01      	subs	r3, #1
 8000be6:	683a      	ldr	r2, [r7, #0]
 8000be8:	4413      	add	r3, r2
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	683a      	ldr	r2, [r7, #0]
 8000bf4:	441a      	add	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4413      	add	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
     return offset;
 8000c02:	693b      	ldr	r3, [r7, #16]
    }
 8000c04:	4618      	mov	r0, r3
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000c16:	4618      	mov	r0, r3
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	080075fc 	.word	0x080075fc

08000c28 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	08007610 	.word	0x08007610

08000c44 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fc84 	bl	800055c <_ZN3ros3MsgC1Ev>
 8000c54:	4a11      	ldr	r2, [pc, #68]	; (8000c9c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f04f 0200 	mov.w	r2, #0
 8000c78:	615a      	str	r2, [r3, #20]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	0800781c 	.word	0x0800781c

08000ca0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6859      	ldr	r1, [r3, #4]
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	b2ca      	uxtb	r2, r1
 8000cba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	0a19      	lsrs	r1, r3, #8
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	683a      	ldr	r2, [r7, #0]
 8000cc8:	4413      	add	r3, r2
 8000cca:	b2ca      	uxtb	r2, r1
 8000ccc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	0c19      	lsrs	r1, r3, #16
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd6:	3302      	adds	r3, #2
 8000cd8:	683a      	ldr	r2, [r7, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	b2ca      	uxtb	r2, r1
 8000cde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	0e19      	lsrs	r1, r3, #24
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	3303      	adds	r3, #3
 8000cea:	683a      	ldr	r2, [r7, #0]
 8000cec:	4413      	add	r3, r2
 8000cee:	b2ca      	uxtb	r2, r1
 8000cf0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	6a3a      	ldr	r2, [r7, #32]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d22b      	bcs.n	8000d5e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	68da      	ldr	r2, [r3, #12]
 8000d0a:	6a3b      	ldr	r3, [r7, #32]
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4413      	add	r3, r2
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000d14:	6939      	ldr	r1, [r7, #16]
 8000d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d18:	683a      	ldr	r2, [r7, #0]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	b2ca      	uxtb	r2, r1
 8000d1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	0a19      	lsrs	r1, r3, #8
 8000d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d26:	3301      	adds	r3, #1
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	b2ca      	uxtb	r2, r1
 8000d2e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	0c19      	lsrs	r1, r3, #16
 8000d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d36:	3302      	adds	r3, #2
 8000d38:	683a      	ldr	r2, [r7, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	b2ca      	uxtb	r2, r1
 8000d3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	0e19      	lsrs	r1, r3, #24
 8000d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d46:	3303      	adds	r3, #3
 8000d48:	683a      	ldr	r2, [r7, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b2ca      	uxtb	r2, r1
 8000d4e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d52:	3304      	adds	r3, #4
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000d56:	6a3b      	ldr	r3, [r7, #32]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	623b      	str	r3, [r7, #32]
 8000d5c:	e7ce      	b.n	8000cfc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6919      	ldr	r1, [r3, #16]
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	683a      	ldr	r2, [r7, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	b2ca      	uxtb	r2, r1
 8000d6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	691b      	ldr	r3, [r3, #16]
 8000d70:	0a19      	lsrs	r1, r3, #8
 8000d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d74:	3301      	adds	r3, #1
 8000d76:	683a      	ldr	r2, [r7, #0]
 8000d78:	4413      	add	r3, r2
 8000d7a:	b2ca      	uxtb	r2, r1
 8000d7c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	691b      	ldr	r3, [r3, #16]
 8000d82:	0c19      	lsrs	r1, r3, #16
 8000d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d86:	3302      	adds	r3, #2
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	b2ca      	uxtb	r2, r1
 8000d8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	691b      	ldr	r3, [r3, #16]
 8000d94:	0e19      	lsrs	r1, r3, #24
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	3303      	adds	r3, #3
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	b2ca      	uxtb	r2, r1
 8000da0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	3304      	adds	r3, #4
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	691b      	ldr	r3, [r3, #16]
 8000db0:	69fa      	ldr	r2, [r7, #28]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d22b      	bcs.n	8000e0e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	699a      	ldr	r2, [r3, #24]
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	4413      	add	r3, r2
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000dc4:	68f9      	ldr	r1, [r7, #12]
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc8:	683a      	ldr	r2, [r7, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	b2ca      	uxtb	r2, r1
 8000dce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	0a19      	lsrs	r1, r3, #8
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	b2ca      	uxtb	r2, r1
 8000dde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	0c19      	lsrs	r1, r3, #16
 8000de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de6:	3302      	adds	r3, #2
 8000de8:	683a      	ldr	r2, [r7, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	b2ca      	uxtb	r2, r1
 8000dee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	0e19      	lsrs	r1, r3, #24
 8000df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df6:	3303      	adds	r3, #3
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	b2ca      	uxtb	r2, r1
 8000dfe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e02:	3304      	adds	r3, #4
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	61fb      	str	r3, [r7, #28]
 8000e0c:	e7ce      	b.n	8000dac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69d9      	ldr	r1, [r3, #28]
 8000e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e14:	683a      	ldr	r2, [r7, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	b2ca      	uxtb	r2, r1
 8000e1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69db      	ldr	r3, [r3, #28]
 8000e20:	0a19      	lsrs	r1, r3, #8
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	3301      	adds	r3, #1
 8000e26:	683a      	ldr	r2, [r7, #0]
 8000e28:	4413      	add	r3, r2
 8000e2a:	b2ca      	uxtb	r2, r1
 8000e2c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	0c19      	lsrs	r1, r3, #16
 8000e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e36:	3302      	adds	r3, #2
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	b2ca      	uxtb	r2, r1
 8000e3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	69db      	ldr	r3, [r3, #28]
 8000e44:	0e19      	lsrs	r1, r3, #24
 8000e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e48:	3303      	adds	r3, #3
 8000e4a:	683a      	ldr	r2, [r7, #0]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	b2ca      	uxtb	r2, r1
 8000e50:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e54:	3304      	adds	r3, #4
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	69db      	ldr	r3, [r3, #28]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d228      	bcs.n	8000eb8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff f9ac 	bl	80001d0 <strlen>
 8000e78:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	683a      	ldr	r2, [r7, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	6979      	ldr	r1, [r7, #20]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 fc7c 	bl	8001780 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8a:	3304      	adds	r3, #4
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e90:	683a      	ldr	r2, [r7, #0]
 8000e92:	18d0      	adds	r0, r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4413      	add	r3, r2
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f006 fa1a 	bl	80072dc <memcpy>
      offset += length_stringsi;
 8000ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	4413      	add	r3, r2
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	61bb      	str	r3, [r7, #24]
 8000eb6:	e7d1      	b.n	8000e5c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3728      	adds	r7, #40	; 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b08e      	sub	sp, #56	; 0x38
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ed2:	683a      	ldr	r2, [r7, #0]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000edc:	3301      	adds	r3, #1
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	021b      	lsls	r3, r3, #8
 8000ee6:	6a3a      	ldr	r2, [r7, #32]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eee:	3302      	adds	r3, #2
 8000ef0:	683a      	ldr	r2, [r7, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	041b      	lsls	r3, r3, #16
 8000ef8:	6a3a      	ldr	r2, [r7, #32]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f00:	3303      	adds	r3, #3
 8000f02:	683a      	ldr	r2, [r7, #0]
 8000f04:	4413      	add	r3, r2
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	061b      	lsls	r3, r3, #24
 8000f0a:	6a3a      	ldr	r2, [r7, #32]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f12:	3304      	adds	r3, #4
 8000f14:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	6a3a      	ldr	r2, [r7, #32]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d90a      	bls.n	8000f36 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68da      	ldr	r2, [r3, #12]
 8000f24:	6a3b      	ldr	r3, [r7, #32]
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4610      	mov	r0, r2
 8000f2c:	f006 f9ea 	bl	8007304 <realloc>
 8000f30:	4602      	mov	r2, r0
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a3a      	ldr	r2, [r7, #32]
 8000f3a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	633b      	str	r3, [r7, #48]	; 0x30
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d236      	bcs.n	8000fb8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f52:	6839      	ldr	r1, [r7, #0]
 8000f54:	440a      	add	r2, r1
 8000f56:	7812      	ldrb	r2, [r2, #0]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f60:	3301      	adds	r3, #1
 8000f62:	6839      	ldr	r1, [r7, #0]
 8000f64:	440b      	add	r3, r1
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	021b      	lsls	r3, r3, #8
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f72:	3302      	adds	r3, #2
 8000f74:	6839      	ldr	r1, [r7, #0]
 8000f76:	440b      	add	r3, r1
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	041b      	lsls	r3, r3, #16
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f84:	3303      	adds	r3, #3
 8000f86:	6839      	ldr	r1, [r7, #0]
 8000f88:	440b      	add	r3, r1
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	061b      	lsls	r3, r3, #24
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	68da      	ldr	r2, [r3, #12]
 8000fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	3208      	adds	r2, #8
 8000fac:	6812      	ldr	r2, [r2, #0]
 8000fae:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8000fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8000fb6:	e7c3      	b.n	8000f40 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	4413      	add	r3, r2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	69fa      	ldr	r2, [r7, #28]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	041b      	lsls	r3, r3, #16
 8000fe0:	69fa      	ldr	r2, [r7, #28]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe8:	3303      	adds	r3, #3
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	4413      	add	r3, r2
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	061b      	lsls	r3, r3, #24
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ffa:	3304      	adds	r3, #4
 8000ffc:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	429a      	cmp	r2, r3
 8001006:	d90a      	bls.n	800101e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	699a      	ldr	r2, [r3, #24]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4619      	mov	r1, r3
 8001012:	4610      	mov	r0, r2
 8001014:	f006 f976 	bl	8007304 <realloc>
 8001018:	4602      	mov	r2, r0
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69fa      	ldr	r2, [r7, #28]
 8001022:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001024:	2300      	movs	r3, #0
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800102e:	429a      	cmp	r2, r3
 8001030:	d236      	bcs.n	80010a0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800103a:	6839      	ldr	r1, [r7, #0]
 800103c:	440a      	add	r2, r1
 800103e:	7812      	ldrb	r2, [r2, #0]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001048:	3301      	adds	r3, #1
 800104a:	6839      	ldr	r1, [r7, #0]
 800104c:	440b      	add	r3, r1
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	4313      	orrs	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800105a:	3302      	adds	r3, #2
 800105c:	6839      	ldr	r1, [r7, #0]
 800105e:	440b      	add	r3, r1
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	041b      	lsls	r3, r3, #16
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800106c:	3303      	adds	r3, #3
 800106e:	6839      	ldr	r1, [r7, #0]
 8001070:	440b      	add	r3, r1
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	061b      	lsls	r3, r3, #24
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001082:	3304      	adds	r3, #4
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	699a      	ldr	r2, [r3, #24]
 800108a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	3214      	adds	r2, #20
 8001094:	6812      	ldr	r2, [r2, #0]
 8001096:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800109a:	3301      	adds	r3, #1
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800109e:	e7c3      	b.n	8001028 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80010a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	4413      	add	r3, r2
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80010aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ac:	3301      	adds	r3, #1
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	4413      	add	r3, r2
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80010bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010be:	3302      	adds	r3, #2
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	041b      	lsls	r3, r3, #16
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80010ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010d0:	3303      	adds	r3, #3
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	4413      	add	r3, r2
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	061b      	lsls	r3, r3, #24
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80010e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010e2:	3304      	adds	r3, #4
 80010e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d90a      	bls.n	8001106 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4619      	mov	r1, r3
 80010fa:	4610      	mov	r0, r2
 80010fc:	f006 f902 	bl	8007304 <realloc>
 8001100:	4602      	mov	r2, r0
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800110c:	2300      	movs	r3, #0
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69db      	ldr	r3, [r3, #28]
 8001114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001116:	429a      	cmp	r2, r3
 8001118:	d23f      	bcs.n	800119a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800111a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	441a      	add	r2, r3
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	4611      	mov	r1, r2
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fb48 	bl	80017bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800112c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800112e:	3304      	adds	r3, #4
 8001130:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
 8001136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4413      	add	r3, r2
 800113c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800113e:	429a      	cmp	r2, r3
 8001140:	d20c      	bcs.n	800115c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001146:	441a      	add	r2, r3
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	3b01      	subs	r3, #1
 800114c:	6839      	ldr	r1, [r7, #0]
 800114e:	440b      	add	r3, r1
 8001150:	7812      	ldrb	r2, [r2, #0]
 8001152:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	3301      	adds	r3, #1
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
 800115a:	e7ec      	b.n	8001136 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800115c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	4413      	add	r3, r2
 8001162:	3b01      	subs	r3, #1
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	4413      	add	r3, r2
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800116c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800116e:	3b01      	subs	r3, #1
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	441a      	add	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001178:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4413      	add	r3, r2
 800117e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	3220      	adds	r2, #32
 800118e:	6812      	ldr	r2, [r2, #0]
 8001190:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001194:	3301      	adds	r3, #1
 8001196:	62bb      	str	r3, [r7, #40]	; 0x28
 8001198:	e7ba      	b.n	8001110 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800119a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800119c:	4618      	mov	r0, r3
 800119e:	3738      	adds	r7, #56	; 0x38
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80011ae:	4618      	mov	r0, r3
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	080077b8 	.word	0x080077b8

080011c0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	08007634 	.word	0x08007634

080011dc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	611a      	str	r2, [r3, #16]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4618      	mov	r0, r3
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68d8      	ldr	r0, [r3, #12]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	6891      	ldr	r1, [r2, #8]
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	4798      	blx	r3
 8001228:	4603      	mov	r3, r0
  };
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
  }
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	425b      	negs	r3, r3
 800125e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <_ZN13STM32HardwareC1Ev+0x34>)
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	200041d8 	.word	0x200041d8

080012a8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f000 f804 	bl	80012be <_ZN13STM32Hardware10reset_rbufEv>
    }
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6818      	ldr	r0, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3304      	adds	r3, #4
 80012ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012d2:	4619      	mov	r1, r3
 80012d4:	f003 fe74 	bl	8004fc0 <HAL_UART_Receive_DMA>
    }
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_ZN13STM32Hardware4readEv>:

    int read(){
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
      int c = -1;
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ec:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ffa8 	bl	800124a <_ZN13STM32Hardware10getRdmaIndEv>
 80012fa:	4603      	mov	r3, r0
 80012fc:	429c      	cmp	r4, r3
 80012fe:	bf14      	ite	ne
 8001300:	2301      	movne	r3, #1
 8001302:	2300      	moveq	r3, #0
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d012      	beq.n	8001330 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001310:	1c59      	adds	r1, r3, #1
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	4413      	add	r3, r2
 800131c:	791b      	ldrb	r3, [r3, #4]
 800131e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001326:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001330:	68fb      	ldr	r3, [r7, #12]
    }
 8001332:	4618      	mov	r0, r3
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	bd90      	pop	{r4, r7, pc}
	...

0800133c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b20      	cmp	r3, #32
 8001350:	d108      	bne.n	8001364 <_ZN13STM32Hardware5flushEv+0x28>
 8001352:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	f083 0301 	eor.w	r3, r3, #1
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <_ZN13STM32Hardware5flushEv+0x28>
 8001360:	2301      	movs	r3, #1
 8001362:	e000      	b.n	8001366 <_ZN13STM32Hardware5flushEv+0x2a>
 8001364:	2300      	movs	r3, #0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d03f      	beq.n	80013ea <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 800136a:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <_ZN13STM32Hardware5flushEv+0xb8>)
 800136c:	2201      	movs	r2, #1
 800136e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800137c:	429a      	cmp	r2, r3
 800137e:	d031      	beq.n	80013e4 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800138c:	429a      	cmp	r2, r3
 800138e:	d20a      	bcs.n	80013a6 <_ZN13STM32Hardware5flushEv+0x6a>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001396:	b29a      	uxth	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800139e:	b29b      	uxth	r3, r3
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	e006      	b.n	80013b4 <_ZN13STM32Hardware5flushEv+0x78>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6818      	ldr	r0, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80013c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	89fa      	ldrh	r2, [r7, #14]
 80013ca:	4619      	mov	r1, r3
 80013cc:	f003 fd8c 	bl	8004ee8 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80013d6:	89fb      	ldrh	r3, [r7, #14]
 80013d8:	4413      	add	r3, r2
 80013da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80013e4:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <_ZN13STM32Hardware5flushEv+0xb8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
      }
    }
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000094 	.word	0x20000094

080013f8 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
      int n = length;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800140e:	bfa8      	it	ge
 8001410:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001414:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800141c:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	4293      	cmp	r3, r2
 8001424:	bf28      	it	cs
 8001426:	4613      	movcs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001430:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001434:	68fa      	ldr	r2, [r7, #12]
 8001436:	4413      	add	r3, r2
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	68b9      	ldr	r1, [r7, #8]
 800143c:	4618      	mov	r0, r3
 800143e:	f005 ff4d 	bl	80072dc <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	4413      	add	r3, r2
 800144c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	429a      	cmp	r2, r3
 800145c:	d00b      	beq.n	8001476 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	18d1      	adds	r1, r2, r3
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	461a      	mov	r2, r3
 8001472:	f005 ff33 	bl	80072dc <memcpy>
      }

      flush();
 8001476:	68f8      	ldr	r0, [r7, #12]
 8001478:	f7ff ff60 	bl	800133c <_ZN13STM32Hardware5flushEv>
    }
 800147c:	bf00      	nop
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	f001 fc12 	bl	8002cb4 <HAL_GetTick>
 8001490:	4603      	mov	r3, r0
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
      data("")
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff f858 	bl	800055c <_ZN3ros3MsgC1Ev>
 80014ac:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <_ZN8std_msgs6StringC1Ev+0x28>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <_ZN8std_msgs6StringC1Ev+0x2c>)
 80014b6:	605a      	str	r2, [r3, #4]
    {
    }
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	080077f0 	.word	0x080077f0
 80014c8:	080075b8 	.word	0x080075b8

080014cc <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7fe fe76 	bl	80001d0 <strlen>
 80014e4:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f946 	bl	8001780 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	3304      	adds	r3, #4
 80014f8:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	18d0      	adds	r0, r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	68ba      	ldr	r2, [r7, #8]
 8001506:	4619      	mov	r1, r3
 8001508:	f005 fee8 	bl	80072dc <memcpy>
      offset += length_data;
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	4413      	add	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]
      return offset;
 8001514:	68fb      	ldr	r3, [r7, #12]
    }
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	441a      	add	r2, r3
 8001532:	f107 030c 	add.w	r3, r7, #12
 8001536:	4611      	mov	r1, r2
 8001538:	4618      	mov	r0, r3
 800153a:	f000 f93f 	bl	80017bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	3304      	adds	r3, #4
 8001542:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4413      	add	r3, r2
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	429a      	cmp	r2, r3
 8001552:	d20c      	bcs.n	800156e <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	441a      	add	r2, r3
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	3b01      	subs	r3, #1
 800155e:	6839      	ldr	r1, [r7, #0]
 8001560:	440b      	add	r3, r1
 8001562:	7812      	ldrb	r2, [r2, #0]
 8001564:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	3301      	adds	r3, #1
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	e7ec      	b.n	8001548 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4413      	add	r3, r2
 8001574:	3b01      	subs	r3, #1
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	4413      	add	r3, r2
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	3b01      	subs	r3, #1
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	441a      	add	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	605a      	str	r2, [r3, #4]
      offset += length_data;
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4413      	add	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
     return offset;
 8001592:	693b      	ldr	r3, [r7, #16]
    }
 8001594:	4618      	mov	r0, r3
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <_ZN8std_msgs6String7getTypeEv+0x18>)
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	08007658 	.word	0x08007658

080015b8 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	08007668 	.word	0x08007668

080015d4 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ROSSerial/ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4618      	mov	r0, r3
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	08007808 	.word	0x08007808

080015f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ffe8 	bl	80015d4 <_ZN3ros15NodeHandleBase_C1Ev>
 8001604:	4a36      	ldr	r2, [pc, #216]	; (80016e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3304      	adds	r3, #4
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fe2e 	bl	8001270 <_ZN13STM32HardwareC1Ev>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800163a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f005 fe56 	bl	80072f2 <memset>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800164c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f005 fe4d 	bl	80072f2 <memset>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f603 0324 	addw	r3, r3, #2084	; 0x824
 800165e:	2264      	movs	r2, #100	; 0x64
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f005 fe45 	bl	80072f2 <memset>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800166e:	2264      	movs	r2, #100	; 0x64
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f005 fe3d 	bl	80072f2 <memset>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fab8 	bl	8000c44 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	080077dc 	.word	0x080077dc

080016e4 <startROSSerialComms>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart, ros::NodeHandle nodeHandler){
  nodeHandler.getHardware()->reset_rbuf();
}


void startROSSerialComms(){
 80016e4:	b5b0      	push	{r4, r5, r7, lr}
 80016e6:	f5ad 6d17 	sub.w	sp, sp, #2416	; 0x970
 80016ea:	af00      	add	r7, sp, #0

	ros::NodeHandle nh;
 80016ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff7f 	bl	80015f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
	std_msgs::String str_msg;
 80016f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fece 	bl	800149c <_ZN8std_msgs6StringC1Ev>

	ros::Publisher chatter("chatter", &str_msg);
 8001700:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001704:	f107 0018 	add.w	r0, r7, #24
 8001708:	2300      	movs	r3, #0
 800170a:	491a      	ldr	r1, [pc, #104]	; (8001774 <startROSSerialComms+0x90>)
 800170c:	f7ff fd66 	bl	80011dc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
	char hello[] = "Hello world from STM32!";
 8001710:	463b      	mov	r3, r7
 8001712:	4a19      	ldr	r2, [pc, #100]	; (8001778 <startROSSerialComms+0x94>)
 8001714:	461c      	mov	r4, r3
 8001716:	4615      	mov	r5, r2
 8001718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800171a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800171c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001720:	e884 0003 	stmia.w	r4, {r0, r1}

	nh.initNode();
 8001724:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001728:	4618      	mov	r0, r3
 800172a:	f000 f86c 	bl	8001806 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.advertise(chatter);
 800172e:	f107 0218 	add.w	r2, r7, #24
 8001732:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f000 f881 	bl	8001840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

    while(1){
    		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 800173e:	2101      	movs	r1, #1
 8001740:	480e      	ldr	r0, [pc, #56]	; (800177c <startROSSerialComms+0x98>)
 8001742:	f002 f8e8 	bl	8003916 <HAL_GPIO_TogglePin>

    		str_msg.data = hello;
 8001746:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800174a:	463a      	mov	r2, r7
 800174c:	605a      	str	r2, [r3, #4]
    		chatter.publish(&str_msg);
 800174e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001752:	f107 0318 	add.w	r3, r7, #24
 8001756:	4611      	mov	r1, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fd56 	bl	800120a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    		nh.spinOnce();
 800175e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001762:	4618      	mov	r0, r3
 8001764:	f000 f89c 	bl	80018a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
    		osDelay(2000);
 8001768:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800176c:	f004 fbbb 	bl	8005ee6 <osDelay>
    		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8001770:	e7e5      	b.n	800173e <startROSSerialComms+0x5a>
 8001772:	bf00      	nop
 8001774:	0800768c 	.word	0x0800768c
 8001778:	08007694 	.word	0x08007694
 800177c:	40021000 	.word	0x40021000

08001780 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2b03      	cmp	r3, #3
 8001792:	d80d      	bhi.n	80017b0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	fa22 f103 	lsr.w	r1, r2, r3
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	b2ca      	uxtb	r2, r1
 80017a6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3301      	adds	r3, #1
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	e7ee      	b.n	800178e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d811      	bhi.n	80017fa <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6839      	ldr	r1, [r7, #0]
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	440a      	add	r2, r1
 80017e0:	7812      	ldrb	r2, [r2, #0]
 80017e2:	4611      	mov	r1, r2
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	00d2      	lsls	r2, r2, #3
 80017e8:	fa01 f202 	lsl.w	r2, r1, r2
 80017ec:	431a      	orrs	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	3301      	adds	r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	e7ea      	b.n	80017d0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80017fa:	bf00      	nop
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3304      	adds	r3, #4
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fd48 	bl	80012a8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2b18      	cmp	r3, #24
 8001852:	dc1e      	bgt.n	8001892 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d111      	bne.n	800188a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	60da      	str	r2, [r3, #12]
        return true;
 8001886:	2301      	movs	r3, #1
 8001888:	e004      	b.n	8001894 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	3301      	adds	r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	e7dd      	b.n	800184e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8001892:	2300      	movs	r3, #0
  }
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3304      	adds	r3, #4
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fde9 	bl	8001484 <_ZN13STM32Hardware4timeEv>
 80018b2:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d903      	bls.n	80018ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d009      	beq.n	80018ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d903      	bls.n	80018ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d014      	beq.n	8001920 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3304      	adds	r3, #4
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fdc2 	bl	8001484 <_ZN13STM32Hardware4timeEv>
 8001900:	4602      	mov	r2, r0
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1ad2      	subs	r2, r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800190c:	429a      	cmp	r2, r3
 800190e:	bf8c      	ite	hi
 8001910:	2301      	movhi	r3, #1
 8001912:	2300      	movls	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800191a:	f06f 0301 	mvn.w	r3, #1
 800191e:	e197      	b.n	8001c50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      int data = hardware_.read();
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3304      	adds	r3, #4
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fcdb 	bl	80012e0 <_ZN13STM32Hardware4readEv>
 800192a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	2b00      	cmp	r3, #0
 8001930:	f2c0 8177 	blt.w	8001c22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
      checksum_ += data;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	441a      	add	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800194a:	2b07      	cmp	r3, #7
 800194c:	d11e      	bne.n	800198c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001954:	1c59      	adds	r1, r3, #1
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 800195c:	68ba      	ldr	r2, [r7, #8]
 800195e:	b2d1      	uxtb	r1, r2
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	4413      	add	r3, r2
 8001964:	460a      	mov	r2, r1
 8001966:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001970:	1e5a      	subs	r2, r3, #1
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1b4      	bne.n	80018ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2208      	movs	r2, #8
 8001986:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800198a:	e7af      	b.n	80018ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001992:	2b00      	cmp	r3, #0
 8001994:	d128      	bne.n	80019e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	2bff      	cmp	r3, #255	; 0xff
 800199a:	d10d      	bne.n	80019b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80019a2:	1c5a      	adds	r2, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f103 0214 	add.w	r2, r3, #20
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80019b6:	e799      	b.n	80018ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3304      	adds	r3, #4
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fd61 	bl	8001484 <_ZN13STM32Hardware4timeEv>
 80019c2:	4602      	mov	r2, r0
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019cc:	4293      	cmp	r3, r2
 80019ce:	bf8c      	ite	hi
 80019d0:	2301      	movhi	r3, #1
 80019d2:	2300      	movls	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d088      	beq.n	80018ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 80019e2:	f06f 0301 	mvn.w	r3, #1
 80019e6:	e133      	b.n	8001c50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      else if (mode_ == MODE_PROTOCOL_VER)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d11b      	bne.n	8001a2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
        if (data == PROTOCOL_VER)
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	2bfe      	cmp	r3, #254	; 0xfe
 80019f6:	d107      	bne.n	8001a08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001a06:	e771      	b.n	80018ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001a16:	f083 0301 	eor.w	r3, r3, #1
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f43f af65 	beq.w	80018ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f918 	bl	8001c58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001a28:	e760      	b.n	80018ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d113      	bne.n	8001a5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
        bytes_ = data;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a4a:	1c5a      	adds	r2, r3, #1
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001a5a:	e747      	b.n	80018ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d110      	bne.n	8001a88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        bytes_ += data << 8;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	021b      	lsls	r3, r3, #8
 8001a70:	441a      	add	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001a86:	e731      	b.n	80018ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d116      	bne.n	8001ac0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
        if ((checksum_ % 256) == 255)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001a98:	425a      	negs	r2, r3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	bf58      	it	pl
 8001aa0:	4253      	negpl	r3, r2
 8001aa2:	2bff      	cmp	r3, #255	; 0xff
 8001aa4:	d107      	bne.n	8001ab6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001aac:	1c5a      	adds	r2, r3, #1
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001ab4:	e71a      	b.n	80018ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001abe:	e715      	b.n	80018ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ac6:	2b05      	cmp	r3, #5
 8001ac8:	d10f      	bne.n	8001aea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
        topic_ = data;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001ae8:	e700      	b.n	80018ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001af0:	2b06      	cmp	r3, #6
 8001af2:	d117      	bne.n	8001b24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
        topic_ += data << 8;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	021b      	lsls	r3, r3, #8
 8001afe:	441a      	add	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2207      	movs	r2, #7
 8001b0a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f47f aee9 	bne.w	80018ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2208      	movs	r2, #8
 8001b1e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001b22:	e6e3      	b.n	80018ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b2a:	2b08      	cmp	r3, #8
 8001b2c:	f47f aede 	bne.w	80018ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001b3e:	425a      	negs	r2, r3
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	bf58      	it	pl
 8001b46:	4253      	negpl	r3, r2
 8001b48:	2bff      	cmp	r3, #255	; 0xff
 8001b4a:	f47f aecf 	bne.w	80018ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d110      	bne.n	8001b7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
            requestSyncTime();
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f87d 	bl	8001c58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f898 	bl	8001c94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8001b74:	f04f 33ff 	mov.w	r3, #4294967295
 8001b78:	e06a      	b.n	8001c50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          else if (topic_ == TopicInfo::ID_TIME)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001b80:	2b0a      	cmp	r3, #10
 8001b82:	d107      	bne.n	8001b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
            syncTime(message_in);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f961 	bl	8001e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001b92:	e6ab      	b.n	80018ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001b9a:	2b06      	cmp	r3, #6
 8001b9c:	d10e      	bne.n	8001bbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
            req_param_resp.deserialize(message_in);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001baa:	4619      	mov	r1, r3
 8001bac:	4610      	mov	r0, r2
 8001bae:	f7ff f988 	bl	8000ec2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001bba:	e697      	b.n	80018ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001bc2:	2b0b      	cmp	r3, #11
 8001bc4:	d104      	bne.n	8001bd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
            configured_ = false;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001bce:	e68d      	b.n	80018ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001bd6:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f43f ae81 	beq.w	80018ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001bf0:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001bfa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001c04:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	4798      	blx	r3
    while (true)
 8001c20:	e664      	b.n	80018ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8001c22:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00f      	beq.n	8001c4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d906      	bls.n	8001c4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
      requestSyncTime();
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f809 	bl	8001c58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8001c4e:	2300      	movs	r3, #0
  }
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001c60:	f107 030c 	add.w	r3, r7, #12
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fc89 	bl	800057c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f107 020c 	add.w	r2, r7, #12
 8001c74:	210a      	movs	r1, #10
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	4798      	blx	r3
    rt_time = hardware_.time();
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fc00 	bl	8001484 <_ZN13STM32Hardware4timeEv>
 8001c84:	4602      	mov	r2, r0
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8001c8c:	bf00      	nop
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8001c94:	b590      	push	{r4, r7, lr}
 8001c96:	b08b      	sub	sp, #44	; 0x2c
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001c9c:	f107 030c 	add.w	r3, r7, #12
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fd5b 	bl	800075c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	2b18      	cmp	r3, #24
 8001cae:	dc63      	bgt.n	8001d78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d056      	beq.n	8001d70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	6859      	ldr	r1, [r3, #4]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	3308      	adds	r3, #8
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4608      	mov	r0, r1
 8001d10:	4798      	blx	r3
 8001d12:	4603      	mov	r3, r0
 8001d14:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	6859      	ldr	r1, [r3, #4]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	330c      	adds	r3, #12
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4608      	mov	r0, r1
 8001d3e:	4798      	blx	r3
 8001d40:	4603      	mov	r3, r0
 8001d42:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8001d44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d48:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681c      	ldr	r4, [r3, #0]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff fa67 	bl	8001232 <_ZN3ros9Publisher15getEndpointTypeEv>
 8001d64:	4601      	mov	r1, r0
 8001d66:	f107 030c 	add.w	r3, r7, #12
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	3301      	adds	r3, #1
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
 8001d76:	e798      	b.n	8001caa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	2b18      	cmp	r3, #24
 8001d80:	dc5f      	bgt.n	8001e42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d86:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d053      	beq.n	8001e3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d96:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001dbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	3308      	adds	r3, #8
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4608      	mov	r0, r1
 8001dd4:	4798      	blx	r3
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dde:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001de2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dea:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	330c      	adds	r3, #12
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4608      	mov	r0, r1
 8001dfa:	4798      	blx	r3
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8001e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e04:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681c      	ldr	r4, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e10:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e1c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	3304      	adds	r3, #4
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4608      	mov	r0, r1
 8001e2c:	4798      	blx	r3
 8001e2e:	4601      	mov	r1, r0
 8001e30:	f107 030c 	add.w	r3, r7, #12
 8001e34:	461a      	mov	r2, r3
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e40:	e79c      	b.n	8001d7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8001e4a:	bf00      	nop
 8001e4c:	372c      	adds	r7, #44	; 0x2c
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd90      	pop	{r4, r7, pc}
	...

08001e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8001e5e:	f107 0308 	add.w	r3, r7, #8
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe fb8a 	bl	800057c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fb09 	bl	8001484 <_ZN13STM32Hardware4timeEv>
 8001e72:	4602      	mov	r2, r0
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8001e7e:	f107 0308 	add.w	r3, r7, #8
 8001e82:	6839      	ldr	r1, [r7, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fbe9 	bl	800065c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	4915      	ldr	r1, [pc, #84]	; (8001ee4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001e90:	fba1 1303 	umull	r1, r3, r1, r3
 8001e94:	099b      	lsrs	r3, r3, #6
 8001e96:	4413      	add	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8001e9a:	6939      	ldr	r1, [r7, #16]
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001ea0:	fba3 0302 	umull	r0, r3, r3, r2
 8001ea4:	099b      	lsrs	r3, r3, #6
 8001ea6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eaa:	fb00 f303 	mul.w	r3, r0, r3
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	4a0d      	ldr	r2, [pc, #52]	; (8001ee8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8001eb2:	fb02 f303 	mul.w	r3, r2, r3
 8001eb6:	440b      	add	r3, r1
 8001eb8:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8001eba:	f107 0308 	add.w	r3, r7, #8
 8001ebe:	3304      	adds	r3, #4
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f8a4 	bl	8002010 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3304      	adds	r3, #4
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fad9 	bl	8001484 <_ZN13STM32Hardware4timeEv>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8001eda:	bf00      	nop
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	10624dd3 	.word	0x10624dd3
 8001ee8:	000f4240 	.word	0x000f4240

08001eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b63      	cmp	r3, #99	; 0x63
 8001efc:	dd09      	ble.n	8001f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001f04:	f083 0301 	eor.w	r3, r3, #1
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e077      	b.n	8002002 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8001f1e:	3207      	adds	r2, #7
 8001f20:	4611      	mov	r1, r2
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	4798      	blx	r3
 8001f26:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	22ff      	movs	r2, #255	; 0xff
 8001f2c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	22fe      	movs	r2, #254	; 0xfe
 8001f34:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	121b      	asrs	r3, r3, #8
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8001f5c:	4413      	add	r3, r2
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	b21b      	sxth	r3, r3
 8001f78:	121b      	asrs	r3, r3, #8
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001f86:	2305      	movs	r3, #5
 8001f88:	61bb      	str	r3, [r7, #24]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	3307      	adds	r3, #7
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	da0d      	bge.n	8001fb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	3301      	adds	r3, #1
 8001fac:	61bb      	str	r3, [r7, #24]
 8001fae:	e7ec      	b.n	8001f8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	3307      	adds	r3, #7
 8001fb4:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	425a      	negs	r2, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	bf58      	it	pl
 8001fc0:	4253      	negpl	r3, r2
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	1c59      	adds	r1, r3, #1
 8001fc8:	6179      	str	r1, [r7, #20]
 8001fca:	43d2      	mvns	r2, r2
 8001fcc:	b2d1      	uxtb	r1, r2
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	460a      	mov	r2, r1
 8001fd4:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fde:	dc0a      	bgt.n	8001ff6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	1d18      	adds	r0, r3, #4
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	4619      	mov	r1, r3
 8001fee:	f7ff fa03 	bl	80013f8 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	e005      	b.n	8002002 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8001ff6:	4905      	ldr	r1, [pc, #20]	; (800200c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f000 f849 	bl	8002090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8001ffe:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8002002:	4618      	mov	r0, r3
 8002004:	3720      	adds	r7, #32
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	080076ac 	.word	0x080076ac

08002010 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3304      	adds	r3, #4
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fa30 	bl	8001484 <_ZN13STM32Hardware4timeEv>
 8002024:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4915      	ldr	r1, [pc, #84]	; (8002084 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 800202e:	fba1 1303 	umull	r1, r3, r1, r3
 8002032:	099b      	lsrs	r3, r3, #6
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	1e5a      	subs	r2, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	6859      	ldr	r1, [r3, #4]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8002046:	fba3 0302 	umull	r0, r3, r3, r2
 800204a:	099b      	lsrs	r3, r3, #6
 800204c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002050:	fb00 f303 	mul.w	r3, r0, r3
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	4a0c      	ldr	r2, [pc, #48]	; (8002088 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8002058:	fb02 f303 	mul.w	r3, r2, r3
 800205c:	1aca      	subs	r2, r1, r3
 800205e:	4b0b      	ldr	r3, [pc, #44]	; (800208c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8002060:	4413      	add	r3, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8002074:	4619      	mov	r1, r3
 8002076:	4610      	mov	r0, r2
 8002078:	f7fe fa32 	bl	80004e0 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800207c:	bf00      	nop
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	10624dd3 	.word	0x10624dd3
 8002088:	000f4240 	.word	0x000f4240
 800208c:	3b9aca00 	.word	0x3b9aca00

08002090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	2103      	movs	r1, #3
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f804 	bl	80020ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b088      	sub	sp, #32
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	460b      	mov	r3, r1
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe fd10 	bl	8000ae4 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80020c4:	7afb      	ldrb	r3, [r7, #11]
 80020c6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f107 0214 	add.w	r2, r7, #20
 80020d6:	2107      	movs	r1, #7
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	4798      	blx	r3
  }
 80020dc:	bf00      	nop
 80020de:	3720      	adds	r7, #32
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
    return configured_;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	607b      	str	r3, [r7, #4]
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <MX_DMA_Init+0x4c>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a0f      	ldr	r2, [pc, #60]	; (800214c <MX_DMA_Init+0x4c>)
 8002110:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b0d      	ldr	r3, [pc, #52]	; (800214c <MX_DMA_Init+0x4c>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800211e:	607b      	str	r3, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002122:	2200      	movs	r2, #0
 8002124:	2100      	movs	r1, #0
 8002126:	2010      	movs	r0, #16
 8002128:	f000 fe88 	bl	8002e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800212c:	2010      	movs	r0, #16
 800212e:	f000 fea1 	bl	8002e74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002132:	2200      	movs	r2, #0
 8002134:	2100      	movs	r1, #0
 8002136:	2011      	movs	r0, #17
 8002138:	f000 fe80 	bl	8002e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800213c:	2011      	movs	r0, #17
 800213e:	f000 fe99 	bl	8002e74 <HAL_NVIC_EnableIRQ>

}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40023800 	.word	0x40023800

08002150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4a07      	ldr	r2, [pc, #28]	; (800217c <vApplicationGetIdleTaskMemory+0x2c>)
 8002160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	4a06      	ldr	r2, [pc, #24]	; (8002180 <vApplicationGetIdleTaskMemory+0x30>)
 8002166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2280      	movs	r2, #128	; 0x80
 800216c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800216e:	bf00      	nop
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000098 	.word	0x20000098
 8002180:	200000ec 	.word	0x200000ec

08002184 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002184:	b5b0      	push	{r4, r5, r7, lr}
 8002186:	b0a4      	sub	sp, #144	; 0x90
 8002188:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800218a:	4b30      	ldr	r3, [pc, #192]	; (800224c <MX_FREERTOS_Init+0xc8>)
 800218c:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8002190:	461d      	mov	r5, r3
 8002192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002196:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800219a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800219e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f003 fe52 	bl	8005e4e <osThreadCreate>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b28      	ldr	r3, [pc, #160]	; (8002250 <MX_FREERTOS_Init+0xcc>)
 80021ae:	601a      	str	r2, [r3, #0]

  /* definition and creation of taskPID1 */
  osThreadDef(taskPID1, startPID1, osPriorityIdle, 0, 512);
 80021b0:	4b28      	ldr	r3, [pc, #160]	; (8002254 <MX_FREERTOS_Init+0xd0>)
 80021b2:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80021b6:	461d      	mov	r5, r3
 80021b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskPID1Handle = osThreadCreate(osThread(taskPID1), NULL);
 80021c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80021c8:	2100      	movs	r1, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f003 fe3f 	bl	8005e4e <osThreadCreate>
 80021d0:	4602      	mov	r2, r0
 80021d2:	4b21      	ldr	r3, [pc, #132]	; (8002258 <MX_FREERTOS_Init+0xd4>)
 80021d4:	601a      	str	r2, [r3, #0]

  /* definition and creation of taskPID2 */
  osThreadDef(taskPID2, startPID2, osPriorityIdle, 0, 512);
 80021d6:	4b21      	ldr	r3, [pc, #132]	; (800225c <MX_FREERTOS_Init+0xd8>)
 80021d8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80021dc:	461d      	mov	r5, r3
 80021de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskPID2Handle = osThreadCreate(osThread(taskPID2), NULL);
 80021ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021ee:	2100      	movs	r1, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f003 fe2c 	bl	8005e4e <osThreadCreate>
 80021f6:	4602      	mov	r2, r0
 80021f8:	4b19      	ldr	r3, [pc, #100]	; (8002260 <MX_FREERTOS_Init+0xdc>)
 80021fa:	601a      	str	r2, [r3, #0]

  /* definition and creation of taskPID3 */
  osThreadDef(taskPID3, startPID3, osPriorityIdle, 0, 512);
 80021fc:	4b19      	ldr	r3, [pc, #100]	; (8002264 <MX_FREERTOS_Init+0xe0>)
 80021fe:	f107 0420 	add.w	r4, r7, #32
 8002202:	461d      	mov	r5, r3
 8002204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002208:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800220c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskPID3Handle = osThreadCreate(osThread(taskPID3), NULL);
 8002210:	f107 0320 	add.w	r3, r7, #32
 8002214:	2100      	movs	r1, #0
 8002216:	4618      	mov	r0, r3
 8002218:	f003 fe19 	bl	8005e4e <osThreadCreate>
 800221c:	4602      	mov	r2, r0
 800221e:	4b12      	ldr	r3, [pc, #72]	; (8002268 <MX_FREERTOS_Init+0xe4>)
 8002220:	601a      	str	r2, [r3, #0]

  /* definition and creation of ROSComms */
  osThreadDef(ROSComms, startROSComms, osPriorityIdle, 0, 1024);
 8002222:	4b12      	ldr	r3, [pc, #72]	; (800226c <MX_FREERTOS_Init+0xe8>)
 8002224:	1d3c      	adds	r4, r7, #4
 8002226:	461d      	mov	r5, r3
 8002228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800222a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800222c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002230:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ROSCommsHandle = osThreadCreate(osThread(ROSComms), NULL);
 8002234:	1d3b      	adds	r3, r7, #4
 8002236:	2100      	movs	r1, #0
 8002238:	4618      	mov	r0, r3
 800223a:	f003 fe08 	bl	8005e4e <osThreadCreate>
 800223e:	4602      	mov	r2, r0
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <MX_FREERTOS_Init+0xec>)
 8002242:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002244:	bf00      	nop
 8002246:	3790      	adds	r7, #144	; 0x90
 8002248:	46bd      	mov	sp, r7
 800224a:	bdb0      	pop	{r4, r5, r7, pc}
 800224c:	080076f4 	.word	0x080076f4
 8002250:	20004044 	.word	0x20004044
 8002254:	0800771c 	.word	0x0800771c
 8002258:	2000404c 	.word	0x2000404c
 800225c:	08007744 	.word	0x08007744
 8002260:	20004054 	.word	0x20004054
 8002264:	0800776c 	.word	0x0800776c
 8002268:	20004048 	.word	0x20004048
 800226c:	08007794 	.word	0x08007794
 8002270:	20004050 	.word	0x20004050

08002274 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 800227c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002280:	4803      	ldr	r0, [pc, #12]	; (8002290 <StartDefaultTask+0x1c>)
 8002282:	f001 fb48 	bl	8003916 <HAL_GPIO_TogglePin>
    osDelay(2500);
 8002286:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800228a:	f003 fe2c 	bl	8005ee6 <osDelay>
	HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 800228e:	e7f5      	b.n	800227c <StartDefaultTask+0x8>
 8002290:	40021000 	.word	0x40021000

08002294 <startPID1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPID1 */
void startPID1(void const * argument)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPID1 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800229c:	2001      	movs	r0, #1
 800229e:	f003 fe22 	bl	8005ee6 <osDelay>
 80022a2:	e7fb      	b.n	800229c <startPID1+0x8>

080022a4 <startPID2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPID2 */
void startPID2(void const * argument)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPID2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80022ac:	2001      	movs	r0, #1
 80022ae:	f003 fe1a 	bl	8005ee6 <osDelay>
 80022b2:	e7fb      	b.n	80022ac <startPID2+0x8>

080022b4 <startPID3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPID3 */
void startPID3(void const * argument)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPID3 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80022bc:	2001      	movs	r0, #1
 80022be:	f003 fe12 	bl	8005ee6 <osDelay>
 80022c2:	e7fb      	b.n	80022bc <startPID3+0x8>

080022c4 <startROSComms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startROSComms */
void startROSComms(void const * argument)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startROSComms */

	startROSSerialComms();
 80022cc:	f7ff fa0a 	bl	80016e4 <startROSSerialComms>
  /* Infinite loop */
  for(;;)
  {
	osDelay(1);
 80022d0:	2001      	movs	r0, #1
 80022d2:	f003 fe08 	bl	8005ee6 <osDelay>
 80022d6:	e7fb      	b.n	80022d0 <startROSComms+0xc>

080022d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	; 0x28
 80022dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022de:	f107 0314 	add.w	r3, r7, #20
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	60da      	str	r2, [r3, #12]
 80022ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	4b41      	ldr	r3, [pc, #260]	; (80023f8 <MX_GPIO_Init+0x120>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	4a40      	ldr	r2, [pc, #256]	; (80023f8 <MX_GPIO_Init+0x120>)
 80022f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022fc:	6313      	str	r3, [r2, #48]	; 0x30
 80022fe:	4b3e      	ldr	r3, [pc, #248]	; (80023f8 <MX_GPIO_Init+0x120>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	4b3a      	ldr	r3, [pc, #232]	; (80023f8 <MX_GPIO_Init+0x120>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4a39      	ldr	r2, [pc, #228]	; (80023f8 <MX_GPIO_Init+0x120>)
 8002314:	f043 0304 	orr.w	r3, r3, #4
 8002318:	6313      	str	r3, [r2, #48]	; 0x30
 800231a:	4b37      	ldr	r3, [pc, #220]	; (80023f8 <MX_GPIO_Init+0x120>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f003 0304 	and.w	r3, r3, #4
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	4b33      	ldr	r3, [pc, #204]	; (80023f8 <MX_GPIO_Init+0x120>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	4a32      	ldr	r2, [pc, #200]	; (80023f8 <MX_GPIO_Init+0x120>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	6313      	str	r3, [r2, #48]	; 0x30
 8002336:	4b30      	ldr	r3, [pc, #192]	; (80023f8 <MX_GPIO_Init+0x120>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	60bb      	str	r3, [r7, #8]
 8002340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	607b      	str	r3, [r7, #4]
 8002346:	4b2c      	ldr	r3, [pc, #176]	; (80023f8 <MX_GPIO_Init+0x120>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	4a2b      	ldr	r2, [pc, #172]	; (80023f8 <MX_GPIO_Init+0x120>)
 800234c:	f043 0310 	orr.w	r3, r3, #16
 8002350:	6313      	str	r3, [r2, #48]	; 0x30
 8002352:	4b29      	ldr	r3, [pc, #164]	; (80023f8 <MX_GPIO_Init+0x120>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	f003 0310 	and.w	r3, r3, #16
 800235a:	607b      	str	r3, [r7, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	603b      	str	r3, [r7, #0]
 8002362:	4b25      	ldr	r3, [pc, #148]	; (80023f8 <MX_GPIO_Init+0x120>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a24      	ldr	r2, [pc, #144]	; (80023f8 <MX_GPIO_Init+0x120>)
 8002368:	f043 0308 	orr.w	r3, r3, #8
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b22      	ldr	r3, [pc, #136]	; (80023f8 <MX_GPIO_Init+0x120>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	603b      	str	r3, [r7, #0]
 8002378:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_1_L_GPIO_Port, MOTOR_1_L_Pin, GPIO_PIN_RESET);
 800237a:	2200      	movs	r2, #0
 800237c:	2108      	movs	r1, #8
 800237e:	481f      	ldr	r0, [pc, #124]	; (80023fc <MX_GPIO_Init+0x124>)
 8002380:	f001 fab0 	bl	80038e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_1_R_GPIO_Port, MOTOR_1_R_Pin, GPIO_PIN_RESET);
 8002384:	2200      	movs	r2, #0
 8002386:	2110      	movs	r1, #16
 8002388:	481d      	ldr	r0, [pc, #116]	; (8002400 <MX_GPIO_Init+0x128>)
 800238a:	f001 faab 	bl	80038e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 800238e:	2200      	movs	r2, #0
 8002390:	f248 0101 	movw	r1, #32769	; 0x8001
 8002394:	481b      	ldr	r0, [pc, #108]	; (8002404 <MX_GPIO_Init+0x12c>)
 8002396:	f001 faa5 	bl	80038e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_1_L_Pin;
 800239a:	2308      	movs	r3, #8
 800239c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800239e:	2301      	movs	r3, #1
 80023a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a6:	2300      	movs	r3, #0
 80023a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_1_L_GPIO_Port, &GPIO_InitStruct);
 80023aa:	f107 0314 	add.w	r3, r7, #20
 80023ae:	4619      	mov	r1, r3
 80023b0:	4812      	ldr	r0, [pc, #72]	; (80023fc <MX_GPIO_Init+0x124>)
 80023b2:	f001 f8fd 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_1_R_Pin;
 80023b6:	2310      	movs	r3, #16
 80023b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ba:	2301      	movs	r3, #1
 80023bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c2:	2300      	movs	r3, #0
 80023c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_1_R_GPIO_Port, &GPIO_InitStruct);
 80023c6:	f107 0314 	add.w	r3, r7, #20
 80023ca:	4619      	mov	r1, r3
 80023cc:	480c      	ldr	r0, [pc, #48]	; (8002400 <MX_GPIO_Init+0x128>)
 80023ce:	f001 f8ef 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_1_Pin;
 80023d2:	f248 0301 	movw	r3, #32769	; 0x8001
 80023d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d8:	2301      	movs	r3, #1
 80023da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e0:	2300      	movs	r3, #0
 80023e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	4619      	mov	r1, r3
 80023ea:	4806      	ldr	r0, [pc, #24]	; (8002404 <MX_GPIO_Init+0x12c>)
 80023ec:	f001 f8e0 	bl	80035b0 <HAL_GPIO_Init>

}
 80023f0:	bf00      	nop
 80023f2:	3728      	adds	r7, #40	; 0x28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40020800 	.word	0x40020800
 8002400:	40020000 	.word	0x40020000
 8002404:	40021000 	.word	0x40021000

08002408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800240c:	f000 fc1c 	bl	8002c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002410:	f000 f810 	bl	8002434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002414:	f7ff ff60 	bl	80022d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002418:	f7ff fe72 	bl	8002100 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800241c:	f000 fb0c 	bl	8002a38 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8002420:	f000 fa16 	bl	8002850 <MX_TIM4_Init>
  MX_TIM2_Init();
 8002424:	f000 f9bc 	bl	80027a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002428:	f7ff feac 	bl	8002184 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800242c:	f003 fd08 	bl	8005e40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002430:	e7fe      	b.n	8002430 <main+0x28>
	...

08002434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b094      	sub	sp, #80	; 0x50
 8002438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800243a:	f107 0320 	add.w	r3, r7, #32
 800243e:	2230      	movs	r2, #48	; 0x30
 8002440:	2100      	movs	r1, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f004 ff55 	bl	80072f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002448:	f107 030c 	add.w	r3, r7, #12
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002458:	2300      	movs	r3, #0
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	4b28      	ldr	r3, [pc, #160]	; (8002500 <SystemClock_Config+0xcc>)
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	4a27      	ldr	r2, [pc, #156]	; (8002500 <SystemClock_Config+0xcc>)
 8002462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002466:	6413      	str	r3, [r2, #64]	; 0x40
 8002468:	4b25      	ldr	r3, [pc, #148]	; (8002500 <SystemClock_Config+0xcc>)
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002474:	2300      	movs	r3, #0
 8002476:	607b      	str	r3, [r7, #4]
 8002478:	4b22      	ldr	r3, [pc, #136]	; (8002504 <SystemClock_Config+0xd0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a21      	ldr	r2, [pc, #132]	; (8002504 <SystemClock_Config+0xd0>)
 800247e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	4b1f      	ldr	r3, [pc, #124]	; (8002504 <SystemClock_Config+0xd0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800248c:	607b      	str	r3, [r7, #4]
 800248e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002490:	2301      	movs	r3, #1
 8002492:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002494:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800249a:	2302      	movs	r3, #2
 800249c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800249e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80024a4:	2304      	movs	r3, #4
 80024a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80024a8:	23a8      	movs	r3, #168	; 0xa8
 80024aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024ac:	2302      	movs	r3, #2
 80024ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024b0:	2304      	movs	r3, #4
 80024b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024b4:	f107 0320 	add.w	r3, r7, #32
 80024b8:	4618      	mov	r0, r3
 80024ba:	f001 fa47 	bl	800394c <HAL_RCC_OscConfig>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80024c4:	f000 f832 	bl	800252c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024c8:	230f      	movs	r3, #15
 80024ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024cc:	2302      	movs	r3, #2
 80024ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80024e0:	f107 030c 	add.w	r3, r7, #12
 80024e4:	2105      	movs	r1, #5
 80024e6:	4618      	mov	r0, r3
 80024e8:	f001 fca0 	bl	8003e2c <HAL_RCC_ClockConfig>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80024f2:	f000 f81b 	bl	800252c <Error_Handler>
  }
}
 80024f6:	bf00      	nop
 80024f8:	3750      	adds	r7, #80	; 0x50
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	40007000 	.word	0x40007000

08002508 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a04      	ldr	r2, [pc, #16]	; (8002528 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d101      	bne.n	800251e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800251a:	f000 fbb7 	bl	8002c8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40010000 	.word	0x40010000

0800252c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
	...

0800253c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	607b      	str	r3, [r7, #4]
 8002546:	4b10      	ldr	r3, [pc, #64]	; (8002588 <HAL_MspInit+0x4c>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	4a0f      	ldr	r2, [pc, #60]	; (8002588 <HAL_MspInit+0x4c>)
 800254c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002550:	6453      	str	r3, [r2, #68]	; 0x44
 8002552:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <HAL_MspInit+0x4c>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255a:	607b      	str	r3, [r7, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	603b      	str	r3, [r7, #0]
 8002562:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_MspInit+0x4c>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	4a08      	ldr	r2, [pc, #32]	; (8002588 <HAL_MspInit+0x4c>)
 8002568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800256c:	6413      	str	r3, [r2, #64]	; 0x40
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_MspInit+0x4c>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40023800 	.word	0x40023800

0800258c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08c      	sub	sp, #48	; 0x30
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800259c:	2200      	movs	r2, #0
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	2019      	movs	r0, #25
 80025a2:	f000 fc4b 	bl	8002e3c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80025a6:	2019      	movs	r0, #25
 80025a8:	f000 fc64 	bl	8002e74 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80025ac:	2300      	movs	r3, #0
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	4b1f      	ldr	r3, [pc, #124]	; (8002630 <HAL_InitTick+0xa4>)
 80025b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b4:	4a1e      	ldr	r2, [pc, #120]	; (8002630 <HAL_InitTick+0xa4>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	6453      	str	r3, [r2, #68]	; 0x44
 80025bc:	4b1c      	ldr	r3, [pc, #112]	; (8002630 <HAL_InitTick+0xa4>)
 80025be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025c8:	f107 0210 	add.w	r2, r7, #16
 80025cc:	f107 0314 	add.w	r3, r7, #20
 80025d0:	4611      	mov	r1, r2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f001 fe1c 	bl	8004210 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80025d8:	f001 fe06 	bl	80041e8 <HAL_RCC_GetPCLK2Freq>
 80025dc:	4603      	mov	r3, r0
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80025e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e4:	4a13      	ldr	r2, [pc, #76]	; (8002634 <HAL_InitTick+0xa8>)
 80025e6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ea:	0c9b      	lsrs	r3, r3, #18
 80025ec:	3b01      	subs	r3, #1
 80025ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <HAL_InitTick+0xac>)
 80025f2:	4a12      	ldr	r2, [pc, #72]	; (800263c <HAL_InitTick+0xb0>)
 80025f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <HAL_InitTick+0xac>)
 80025f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025fc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80025fe:	4a0e      	ldr	r2, [pc, #56]	; (8002638 <HAL_InitTick+0xac>)
 8002600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002602:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <HAL_InitTick+0xac>)
 8002606:	2200      	movs	r2, #0
 8002608:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800260a:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <HAL_InitTick+0xac>)
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002610:	4809      	ldr	r0, [pc, #36]	; (8002638 <HAL_InitTick+0xac>)
 8002612:	f001 fe2f 	bl	8004274 <HAL_TIM_Base_Init>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d104      	bne.n	8002626 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800261c:	4806      	ldr	r0, [pc, #24]	; (8002638 <HAL_InitTick+0xac>)
 800261e:	f001 fe5e 	bl	80042de <HAL_TIM_Base_Start_IT>
 8002622:	4603      	mov	r3, r0
 8002624:	e000      	b.n	8002628 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
}
 8002628:	4618      	mov	r0, r3
 800262a:	3730      	adds	r7, #48	; 0x30
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40023800 	.word	0x40023800
 8002634:	431bde83 	.word	0x431bde83
 8002638:	20004058 	.word	0x20004058
 800263c:	40010000 	.word	0x40010000

08002640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002652:	e7fe      	b.n	8002652 <HardFault_Handler+0x4>

08002654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002658:	e7fe      	b.n	8002658 <MemManage_Handler+0x4>

0800265a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800265e:	e7fe      	b.n	800265e <BusFault_Handler+0x4>

08002660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002664:	e7fe      	b.n	8002664 <UsageFault_Handler+0x4>

08002666 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002678:	4802      	ldr	r0, [pc, #8]	; (8002684 <DMA1_Stream5_IRQHandler+0x10>)
 800267a:	f000 fd31 	bl	80030e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20004118 	.word	0x20004118

08002688 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800268c:	4802      	ldr	r0, [pc, #8]	; (8002698 <DMA1_Stream6_IRQHandler+0x10>)
 800268e:	f000 fd27 	bl	80030e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20004178 	.word	0x20004178

0800269c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026a0:	4802      	ldr	r0, [pc, #8]	; (80026ac <TIM1_UP_TIM10_IRQHandler+0x10>)
 80026a2:	f001 fefd 	bl	80044a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20004058 	.word	0x20004058

080026b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026b4:	4802      	ldr	r0, [pc, #8]	; (80026c0 <USART2_IRQHandler+0x10>)
 80026b6:	f002 fd03 	bl	80050c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	200041d8 	.word	0x200041d8

080026c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
	return 1;
 80026c8:	2301      	movs	r3, #1
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <_kill>:

int _kill(int pid, int sig)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026de:	f004 fdd3 	bl	8007288 <__errno>
 80026e2:	4602      	mov	r2, r0
 80026e4:	2316      	movs	r3, #22
 80026e6:	6013      	str	r3, [r2, #0]
	return -1;
 80026e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <_exit>:

void _exit (int status)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ffe7 	bl	80026d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002706:	e7fe      	b.n	8002706 <_exit+0x12>

08002708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002710:	4a14      	ldr	r2, [pc, #80]	; (8002764 <_sbrk+0x5c>)
 8002712:	4b15      	ldr	r3, [pc, #84]	; (8002768 <_sbrk+0x60>)
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800271c:	4b13      	ldr	r3, [pc, #76]	; (800276c <_sbrk+0x64>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d102      	bne.n	800272a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002724:	4b11      	ldr	r3, [pc, #68]	; (800276c <_sbrk+0x64>)
 8002726:	4a12      	ldr	r2, [pc, #72]	; (8002770 <_sbrk+0x68>)
 8002728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <_sbrk+0x64>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4413      	add	r3, r2
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	429a      	cmp	r2, r3
 8002736:	d207      	bcs.n	8002748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002738:	f004 fda6 	bl	8007288 <__errno>
 800273c:	4602      	mov	r2, r0
 800273e:	230c      	movs	r3, #12
 8002740:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002742:	f04f 33ff 	mov.w	r3, #4294967295
 8002746:	e009      	b.n	800275c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002748:	4b08      	ldr	r3, [pc, #32]	; (800276c <_sbrk+0x64>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800274e:	4b07      	ldr	r3, [pc, #28]	; (800276c <_sbrk+0x64>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4413      	add	r3, r2
 8002756:	4a05      	ldr	r2, [pc, #20]	; (800276c <_sbrk+0x64>)
 8002758:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800275a:	68fb      	ldr	r3, [r7, #12]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20020000 	.word	0x20020000
 8002768:	00000400 	.word	0x00000400
 800276c:	200002ec 	.word	0x200002ec
 8002770:	20004220 	.word	0x20004220

08002774 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002778:	4b08      	ldr	r3, [pc, #32]	; (800279c <SystemInit+0x28>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277e:	4a07      	ldr	r2, [pc, #28]	; (800279c <SystemInit+0x28>)
 8002780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002788:	4b04      	ldr	r3, [pc, #16]	; (800279c <SystemInit+0x28>)
 800278a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800278e:	609a      	str	r2, [r3, #8]
#endif
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	; 0x28
 80027a4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027a6:	f107 0320 	add.w	r3, r7, #32
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027b0:	1d3b      	adds	r3, r7, #4
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	605a      	str	r2, [r3, #4]
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	60da      	str	r2, [r3, #12]
 80027bc:	611a      	str	r2, [r3, #16]
 80027be:	615a      	str	r2, [r3, #20]
 80027c0:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80027c2:	4b22      	ldr	r3, [pc, #136]	; (800284c <MX_TIM2_Init+0xac>)
 80027c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80027ca:	4b20      	ldr	r3, [pc, #128]	; (800284c <MX_TIM2_Init+0xac>)
 80027cc:	2253      	movs	r2, #83	; 0x53
 80027ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d0:	4b1e      	ldr	r3, [pc, #120]	; (800284c <MX_TIM2_Init+0xac>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80027d6:	4b1d      	ldr	r3, [pc, #116]	; (800284c <MX_TIM2_Init+0xac>)
 80027d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027de:	4b1b      	ldr	r3, [pc, #108]	; (800284c <MX_TIM2_Init+0xac>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <MX_TIM2_Init+0xac>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80027ea:	4818      	ldr	r0, [pc, #96]	; (800284c <MX_TIM2_Init+0xac>)
 80027ec:	f001 fd9b 	bl	8004326 <HAL_TIM_PWM_Init>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80027f6:	f7ff fe99 	bl	800252c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027fa:	2300      	movs	r3, #0
 80027fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027fe:	2300      	movs	r3, #0
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002802:	f107 0320 	add.w	r3, r7, #32
 8002806:	4619      	mov	r1, r3
 8002808:	4810      	ldr	r0, [pc, #64]	; (800284c <MX_TIM2_Init+0xac>)
 800280a:	f002 fa8f 	bl	8004d2c <HAL_TIMEx_MasterConfigSynchronization>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002814:	f7ff fe8a 	bl	800252c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002818:	2360      	movs	r3, #96	; 0x60
 800281a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002820:	2300      	movs	r3, #0
 8002822:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002828:	1d3b      	adds	r3, r7, #4
 800282a:	2204      	movs	r2, #4
 800282c:	4619      	mov	r1, r3
 800282e:	4807      	ldr	r0, [pc, #28]	; (800284c <MX_TIM2_Init+0xac>)
 8002830:	f001 ff3e 	bl	80046b0 <HAL_TIM_PWM_ConfigChannel>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800283a:	f7ff fe77 	bl	800252c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800283e:	4803      	ldr	r0, [pc, #12]	; (800284c <MX_TIM2_Init+0xac>)
 8002840:	f000 f8c2 	bl	80029c8 <HAL_TIM_MspPostInit>

}
 8002844:	bf00      	nop
 8002846:	3728      	adds	r7, #40	; 0x28
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	200040d8 	.word	0x200040d8

08002850 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08c      	sub	sp, #48	; 0x30
 8002854:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002856:	f107 030c 	add.w	r3, r7, #12
 800285a:	2224      	movs	r2, #36	; 0x24
 800285c:	2100      	movs	r1, #0
 800285e:	4618      	mov	r0, r3
 8002860:	f004 fd47 	bl	80072f2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002864:	1d3b      	adds	r3, r7, #4
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 800286c:	4b20      	ldr	r3, [pc, #128]	; (80028f0 <MX_TIM4_Init+0xa0>)
 800286e:	4a21      	ldr	r2, [pc, #132]	; (80028f4 <MX_TIM4_Init+0xa4>)
 8002870:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002872:	4b1f      	ldr	r3, [pc, #124]	; (80028f0 <MX_TIM4_Init+0xa0>)
 8002874:	2200      	movs	r2, #0
 8002876:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002878:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <MX_TIM4_Init+0xa0>)
 800287a:	2200      	movs	r2, #0
 800287c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800287e:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <MX_TIM4_Init+0xa0>)
 8002880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002884:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002886:	4b1a      	ldr	r3, [pc, #104]	; (80028f0 <MX_TIM4_Init+0xa0>)
 8002888:	2200      	movs	r2, #0
 800288a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800288c:	4b18      	ldr	r3, [pc, #96]	; (80028f0 <MX_TIM4_Init+0xa0>)
 800288e:	2200      	movs	r2, #0
 8002890:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002892:	2301      	movs	r3, #1
 8002894:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002896:	2300      	movs	r3, #0
 8002898:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800289a:	2301      	movs	r3, #1
 800289c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80028a6:	2300      	movs	r3, #0
 80028a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80028aa:	2301      	movs	r3, #1
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80028ae:	2300      	movs	r3, #0
 80028b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80028b2:	2300      	movs	r3, #0
 80028b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80028b6:	f107 030c 	add.w	r3, r7, #12
 80028ba:	4619      	mov	r1, r3
 80028bc:	480c      	ldr	r0, [pc, #48]	; (80028f0 <MX_TIM4_Init+0xa0>)
 80028be:	f001 fd5d 	bl	800437c <HAL_TIM_Encoder_Init>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80028c8:	f7ff fe30 	bl	800252c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028cc:	2300      	movs	r3, #0
 80028ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80028d4:	1d3b      	adds	r3, r7, #4
 80028d6:	4619      	mov	r1, r3
 80028d8:	4805      	ldr	r0, [pc, #20]	; (80028f0 <MX_TIM4_Init+0xa0>)
 80028da:	f002 fa27 	bl	8004d2c <HAL_TIMEx_MasterConfigSynchronization>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80028e4:	f7ff fe22 	bl	800252c <Error_Handler>
  }

}
 80028e8:	bf00      	nop
 80028ea:	3730      	adds	r7, #48	; 0x30
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20004098 	.word	0x20004098
 80028f4:	40000800 	.word	0x40000800

080028f8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002908:	d10d      	bne.n	8002926 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <HAL_TIM_PWM_MspInit+0x3c>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	4a08      	ldr	r2, [pc, #32]	; (8002934 <HAL_TIM_PWM_MspInit+0x3c>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6413      	str	r3, [r2, #64]	; 0x40
 800291a:	4b06      	ldr	r3, [pc, #24]	; (8002934 <HAL_TIM_PWM_MspInit+0x3c>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40023800 	.word	0x40023800

08002938 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08a      	sub	sp, #40	; 0x28
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002940:	f107 0314 	add.w	r3, r7, #20
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a19      	ldr	r2, [pc, #100]	; (80029bc <HAL_TIM_Encoder_MspInit+0x84>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d12c      	bne.n	80029b4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	4a17      	ldr	r2, [pc, #92]	; (80029c0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002964:	f043 0304 	orr.w	r3, r3, #4
 8002968:	6413      	str	r3, [r2, #64]	; 0x40
 800296a:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <HAL_TIM_Encoder_MspInit+0x88>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <HAL_TIM_Encoder_MspInit+0x88>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4a10      	ldr	r2, [pc, #64]	; (80029c0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002980:	f043 0308 	orr.w	r3, r3, #8
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
 8002986:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002992:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002998:	2302      	movs	r3, #2
 800299a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299c:	2300      	movs	r3, #0
 800299e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a0:	2300      	movs	r3, #0
 80029a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029a4:	2302      	movs	r3, #2
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	4619      	mov	r1, r3
 80029ae:	4805      	ldr	r0, [pc, #20]	; (80029c4 <HAL_TIM_Encoder_MspInit+0x8c>)
 80029b0:	f000 fdfe 	bl	80035b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80029b4:	bf00      	nop
 80029b6:	3728      	adds	r7, #40	; 0x28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40000800 	.word	0x40000800
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40020c00 	.word	0x40020c00

080029c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d0:	f107 030c 	add.w	r3, r7, #12
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
 80029de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e8:	d11d      	bne.n	8002a26 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <HAL_TIM_MspPostInit+0x68>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	4a0f      	ldr	r2, [pc, #60]	; (8002a30 <HAL_TIM_MspPostInit+0x68>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	6313      	str	r3, [r2, #48]	; 0x30
 80029fa:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <HAL_TIM_MspPostInit+0x68>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002a06:	2302      	movs	r3, #2
 8002a08:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a16:	2301      	movs	r3, #1
 8002a18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1a:	f107 030c 	add.w	r3, r7, #12
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4804      	ldr	r0, [pc, #16]	; (8002a34 <HAL_TIM_MspPostInit+0x6c>)
 8002a22:	f000 fdc5 	bl	80035b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002a26:	bf00      	nop
 8002a28:	3720      	adds	r7, #32
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800
 8002a34:	40020000 	.word	0x40020000

08002a38 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <MX_USART2_UART_Init+0x4c>)
 8002a3e:	4a12      	ldr	r2, [pc, #72]	; (8002a88 <MX_USART2_UART_Init+0x50>)
 8002a40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <MX_USART2_UART_Init+0x4c>)
 8002a44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a4a:	4b0e      	ldr	r3, [pc, #56]	; (8002a84 <MX_USART2_UART_Init+0x4c>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <MX_USART2_UART_Init+0x4c>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a56:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <MX_USART2_UART_Init+0x4c>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a5c:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <MX_USART2_UART_Init+0x4c>)
 8002a5e:	220c      	movs	r2, #12
 8002a60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a62:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <MX_USART2_UART_Init+0x4c>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a68:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <MX_USART2_UART_Init+0x4c>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a6e:	4805      	ldr	r0, [pc, #20]	; (8002a84 <MX_USART2_UART_Init+0x4c>)
 8002a70:	f002 f9ec 	bl	8004e4c <HAL_UART_Init>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a7a:	f7ff fd57 	bl	800252c <Error_Handler>
  }

}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	200041d8 	.word	0x200041d8
 8002a88:	40004400 	.word	0x40004400

08002a8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08a      	sub	sp, #40	; 0x28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	f107 0314 	add.w	r3, r7, #20
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a4b      	ldr	r2, [pc, #300]	; (8002bd8 <HAL_UART_MspInit+0x14c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	f040 8090 	bne.w	8002bd0 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	4b49      	ldr	r3, [pc, #292]	; (8002bdc <HAL_UART_MspInit+0x150>)
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	4a48      	ldr	r2, [pc, #288]	; (8002bdc <HAL_UART_MspInit+0x150>)
 8002aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002abe:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac0:	4b46      	ldr	r3, [pc, #280]	; (8002bdc <HAL_UART_MspInit+0x150>)
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	4b42      	ldr	r3, [pc, #264]	; (8002bdc <HAL_UART_MspInit+0x150>)
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	4a41      	ldr	r2, [pc, #260]	; (8002bdc <HAL_UART_MspInit+0x150>)
 8002ad6:	f043 0301 	orr.w	r3, r3, #1
 8002ada:	6313      	str	r3, [r2, #48]	; 0x30
 8002adc:	4b3f      	ldr	r3, [pc, #252]	; (8002bdc <HAL_UART_MspInit+0x150>)
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ae8:	230c      	movs	r3, #12
 8002aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aec:	2302      	movs	r3, #2
 8002aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af4:	2303      	movs	r3, #3
 8002af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002af8:	2307      	movs	r3, #7
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	4619      	mov	r1, r3
 8002b02:	4837      	ldr	r0, [pc, #220]	; (8002be0 <HAL_UART_MspInit+0x154>)
 8002b04:	f000 fd54 	bl	80035b0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002b08:	4b36      	ldr	r3, [pc, #216]	; (8002be4 <HAL_UART_MspInit+0x158>)
 8002b0a:	4a37      	ldr	r2, [pc, #220]	; (8002be8 <HAL_UART_MspInit+0x15c>)
 8002b0c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002b0e:	4b35      	ldr	r3, [pc, #212]	; (8002be4 <HAL_UART_MspInit+0x158>)
 8002b10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b14:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b16:	4b33      	ldr	r3, [pc, #204]	; (8002be4 <HAL_UART_MspInit+0x158>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b1c:	4b31      	ldr	r3, [pc, #196]	; (8002be4 <HAL_UART_MspInit+0x158>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b22:	4b30      	ldr	r3, [pc, #192]	; (8002be4 <HAL_UART_MspInit+0x158>)
 8002b24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b28:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b2a:	4b2e      	ldr	r3, [pc, #184]	; (8002be4 <HAL_UART_MspInit+0x158>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b30:	4b2c      	ldr	r3, [pc, #176]	; (8002be4 <HAL_UART_MspInit+0x158>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002b36:	4b2b      	ldr	r3, [pc, #172]	; (8002be4 <HAL_UART_MspInit+0x158>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b3c:	4b29      	ldr	r3, [pc, #164]	; (8002be4 <HAL_UART_MspInit+0x158>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b42:	4b28      	ldr	r3, [pc, #160]	; (8002be4 <HAL_UART_MspInit+0x158>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002b48:	4826      	ldr	r0, [pc, #152]	; (8002be4 <HAL_UART_MspInit+0x158>)
 8002b4a:	f000 f9a1 	bl	8002e90 <HAL_DMA_Init>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002b54:	f7ff fcea 	bl	800252c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a22      	ldr	r2, [pc, #136]	; (8002be4 <HAL_UART_MspInit+0x158>)
 8002b5c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b5e:	4a21      	ldr	r2, [pc, #132]	; (8002be4 <HAL_UART_MspInit+0x158>)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002b64:	4b21      	ldr	r3, [pc, #132]	; (8002bec <HAL_UART_MspInit+0x160>)
 8002b66:	4a22      	ldr	r2, [pc, #136]	; (8002bf0 <HAL_UART_MspInit+0x164>)
 8002b68:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002b6a:	4b20      	ldr	r3, [pc, #128]	; (8002bec <HAL_UART_MspInit+0x160>)
 8002b6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b70:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b72:	4b1e      	ldr	r3, [pc, #120]	; (8002bec <HAL_UART_MspInit+0x160>)
 8002b74:	2240      	movs	r2, #64	; 0x40
 8002b76:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b78:	4b1c      	ldr	r3, [pc, #112]	; (8002bec <HAL_UART_MspInit+0x160>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b7e:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <HAL_UART_MspInit+0x160>)
 8002b80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b84:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b86:	4b19      	ldr	r3, [pc, #100]	; (8002bec <HAL_UART_MspInit+0x160>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b8c:	4b17      	ldr	r3, [pc, #92]	; (8002bec <HAL_UART_MspInit+0x160>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002b92:	4b16      	ldr	r3, [pc, #88]	; (8002bec <HAL_UART_MspInit+0x160>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b98:	4b14      	ldr	r3, [pc, #80]	; (8002bec <HAL_UART_MspInit+0x160>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b9e:	4b13      	ldr	r3, [pc, #76]	; (8002bec <HAL_UART_MspInit+0x160>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002ba4:	4811      	ldr	r0, [pc, #68]	; (8002bec <HAL_UART_MspInit+0x160>)
 8002ba6:	f000 f973 	bl	8002e90 <HAL_DMA_Init>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002bb0:	f7ff fcbc 	bl	800252c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a0d      	ldr	r2, [pc, #52]	; (8002bec <HAL_UART_MspInit+0x160>)
 8002bb8:	631a      	str	r2, [r3, #48]	; 0x30
 8002bba:	4a0c      	ldr	r2, [pc, #48]	; (8002bec <HAL_UART_MspInit+0x160>)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	2026      	movs	r0, #38	; 0x26
 8002bc6:	f000 f939 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bca:	2026      	movs	r0, #38	; 0x26
 8002bcc:	f000 f952 	bl	8002e74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	3728      	adds	r7, #40	; 0x28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40004400 	.word	0x40004400
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	40020000 	.word	0x40020000
 8002be4:	20004118 	.word	0x20004118
 8002be8:	40026088 	.word	0x40026088
 8002bec:	20004178 	.word	0x20004178
 8002bf0:	400260a0 	.word	0x400260a0

08002bf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002bf8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002bfa:	e003      	b.n	8002c04 <LoopCopyDataInit>

08002bfc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002bfe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c02:	3104      	adds	r1, #4

08002c04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c04:	480b      	ldr	r0, [pc, #44]	; (8002c34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c06:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c0c:	d3f6      	bcc.n	8002bfc <CopyDataInit>
  ldr  r2, =_sbss
 8002c0e:	4a0b      	ldr	r2, [pc, #44]	; (8002c3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c10:	e002      	b.n	8002c18 <LoopFillZerobss>

08002c12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c14:	f842 3b04 	str.w	r3, [r2], #4

08002c18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c18:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c1c:	d3f9      	bcc.n	8002c12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c1e:	f7ff fda9 	bl	8002774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c22:	f004 fb37 	bl	8007294 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c26:	f7ff fbef 	bl	8002408 <main>
  bx  lr    
 8002c2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c2c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002c30:	080078bc 	.word	0x080078bc
  ldr  r0, =_sdata
 8002c34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c38:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8002c3c:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002c40:	20004220 	.word	0x20004220

08002c44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c44:	e7fe      	b.n	8002c44 <ADC_IRQHandler>
	...

08002c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c4c:	4b0e      	ldr	r3, [pc, #56]	; (8002c88 <HAL_Init+0x40>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a0d      	ldr	r2, [pc, #52]	; (8002c88 <HAL_Init+0x40>)
 8002c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_Init+0x40>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a0a      	ldr	r2, [pc, #40]	; (8002c88 <HAL_Init+0x40>)
 8002c5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c64:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <HAL_Init+0x40>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a07      	ldr	r2, [pc, #28]	; (8002c88 <HAL_Init+0x40>)
 8002c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c70:	2003      	movs	r0, #3
 8002c72:	f000 f8d8 	bl	8002e26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c76:	2000      	movs	r0, #0
 8002c78:	f7ff fc88 	bl	800258c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c7c:	f7ff fc5e 	bl	800253c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40023c00 	.word	0x40023c00

08002c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c90:	4b06      	ldr	r3, [pc, #24]	; (8002cac <HAL_IncTick+0x20>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	461a      	mov	r2, r3
 8002c96:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <HAL_IncTick+0x24>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	4a04      	ldr	r2, [pc, #16]	; (8002cb0 <HAL_IncTick+0x24>)
 8002c9e:	6013      	str	r3, [r2, #0]
}
 8002ca0:	bf00      	nop
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	20000008 	.word	0x20000008
 8002cb0:	20004218 	.word	0x20004218

08002cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8002cb8:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <HAL_GetTick+0x14>)
 8002cba:	681b      	ldr	r3, [r3, #0]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20004218 	.word	0x20004218

08002ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <__NVIC_SetPriorityGrouping+0x44>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cfe:	4a04      	ldr	r2, [pc, #16]	; (8002d10 <__NVIC_SetPriorityGrouping+0x44>)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	60d3      	str	r3, [r2, #12]
}
 8002d04:	bf00      	nop
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d18:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <__NVIC_GetPriorityGrouping+0x18>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	0a1b      	lsrs	r3, r3, #8
 8002d1e:	f003 0307 	and.w	r3, r3, #7
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	db0b      	blt.n	8002d5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	f003 021f 	and.w	r2, r3, #31
 8002d48:	4907      	ldr	r1, [pc, #28]	; (8002d68 <__NVIC_EnableIRQ+0x38>)
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	095b      	lsrs	r3, r3, #5
 8002d50:	2001      	movs	r0, #1
 8002d52:	fa00 f202 	lsl.w	r2, r0, r2
 8002d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	e000e100 	.word	0xe000e100

08002d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	6039      	str	r1, [r7, #0]
 8002d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	db0a      	blt.n	8002d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	490c      	ldr	r1, [pc, #48]	; (8002db8 <__NVIC_SetPriority+0x4c>)
 8002d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8a:	0112      	lsls	r2, r2, #4
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	440b      	add	r3, r1
 8002d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d94:	e00a      	b.n	8002dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	4908      	ldr	r1, [pc, #32]	; (8002dbc <__NVIC_SetPriority+0x50>)
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	3b04      	subs	r3, #4
 8002da4:	0112      	lsls	r2, r2, #4
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	440b      	add	r3, r1
 8002daa:	761a      	strb	r2, [r3, #24]
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	e000e100 	.word	0xe000e100
 8002dbc:	e000ed00 	.word	0xe000ed00

08002dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b089      	sub	sp, #36	; 0x24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f1c3 0307 	rsb	r3, r3, #7
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	bf28      	it	cs
 8002dde:	2304      	movcs	r3, #4
 8002de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3304      	adds	r3, #4
 8002de6:	2b06      	cmp	r3, #6
 8002de8:	d902      	bls.n	8002df0 <NVIC_EncodePriority+0x30>
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3b03      	subs	r3, #3
 8002dee:	e000      	b.n	8002df2 <NVIC_EncodePriority+0x32>
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df4:	f04f 32ff 	mov.w	r2, #4294967295
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43da      	mvns	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	401a      	ands	r2, r3
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e08:	f04f 31ff 	mov.w	r1, #4294967295
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e12:	43d9      	mvns	r1, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e18:	4313      	orrs	r3, r2
         );
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3724      	adds	r7, #36	; 0x24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff ff4c 	bl	8002ccc <__NVIC_SetPriorityGrouping>
}
 8002e34:	bf00      	nop
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e4e:	f7ff ff61 	bl	8002d14 <__NVIC_GetPriorityGrouping>
 8002e52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	68b9      	ldr	r1, [r7, #8]
 8002e58:	6978      	ldr	r0, [r7, #20]
 8002e5a:	f7ff ffb1 	bl	8002dc0 <NVIC_EncodePriority>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e64:	4611      	mov	r1, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff ff80 	bl	8002d6c <__NVIC_SetPriority>
}
 8002e6c:	bf00      	nop
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff ff54 	bl	8002d30 <__NVIC_EnableIRQ>
}
 8002e88:	bf00      	nop
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e9c:	f7ff ff0a 	bl	8002cb4 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e099      	b.n	8002fe0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0201 	bic.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ecc:	e00f      	b.n	8002eee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ece:	f7ff fef1 	bl	8002cb4 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b05      	cmp	r3, #5
 8002eda:	d908      	bls.n	8002eee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e078      	b.n	8002fe0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1e8      	bne.n	8002ece <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	4b38      	ldr	r3, [pc, #224]	; (8002fe8 <HAL_DMA_Init+0x158>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d107      	bne.n	8002f58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	4313      	orrs	r3, r2
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f023 0307 	bic.w	r3, r3, #7
 8002f6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d117      	bne.n	8002fb2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00e      	beq.n	8002fb2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 fa91 	bl	80034bc <DMA_CheckFifoParam>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2240      	movs	r2, #64	; 0x40
 8002fa4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e016      	b.n	8002fe0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 fa48 	bl	8003450 <DMA_CalcBaseAndBitshift>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc8:	223f      	movs	r2, #63	; 0x3f
 8002fca:	409a      	lsls	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	f010803f 	.word	0xf010803f

08002fec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
 8002ff8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003002:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <HAL_DMA_Start_IT+0x26>
 800300e:	2302      	movs	r3, #2
 8003010:	e040      	b.n	8003094 <HAL_DMA_Start_IT+0xa8>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b01      	cmp	r3, #1
 8003024:	d12f      	bne.n	8003086 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2202      	movs	r2, #2
 800302a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	68b9      	ldr	r1, [r7, #8]
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 f9da 	bl	80033f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003044:	223f      	movs	r2, #63	; 0x3f
 8003046:	409a      	lsls	r2, r3
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0216 	orr.w	r2, r2, #22
 800305a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	2b00      	cmp	r3, #0
 8003062:	d007      	beq.n	8003074 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0208 	orr.w	r2, r2, #8
 8003072:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0201 	orr.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	e005      	b.n	8003092 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800308e:	2302      	movs	r3, #2
 8003090:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003092:	7dfb      	ldrb	r3, [r7, #23]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d004      	beq.n	80030ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2280      	movs	r2, #128	; 0x80
 80030b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e00c      	b.n	80030d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2205      	movs	r2, #5
 80030be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0201 	bic.w	r2, r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030ec:	4b92      	ldr	r3, [pc, #584]	; (8003338 <HAL_DMA_IRQHandler+0x258>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a92      	ldr	r2, [pc, #584]	; (800333c <HAL_DMA_IRQHandler+0x25c>)
 80030f2:	fba2 2303 	umull	r2, r3, r2, r3
 80030f6:	0a9b      	lsrs	r3, r3, #10
 80030f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310a:	2208      	movs	r2, #8
 800310c:	409a      	lsls	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4013      	ands	r3, r2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d01a      	beq.n	800314c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d013      	beq.n	800314c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0204 	bic.w	r2, r2, #4
 8003132:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003138:	2208      	movs	r2, #8
 800313a:	409a      	lsls	r2, r3
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003144:	f043 0201 	orr.w	r2, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003150:	2201      	movs	r2, #1
 8003152:	409a      	lsls	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4013      	ands	r3, r2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d012      	beq.n	8003182 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00b      	beq.n	8003182 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316e:	2201      	movs	r2, #1
 8003170:	409a      	lsls	r2, r3
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317a:	f043 0202 	orr.w	r2, r3, #2
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003186:	2204      	movs	r2, #4
 8003188:	409a      	lsls	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4013      	ands	r3, r2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d012      	beq.n	80031b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00b      	beq.n	80031b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a4:	2204      	movs	r2, #4
 80031a6:	409a      	lsls	r2, r3
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b0:	f043 0204 	orr.w	r2, r3, #4
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031bc:	2210      	movs	r2, #16
 80031be:	409a      	lsls	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4013      	ands	r3, r2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d043      	beq.n	8003250 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d03c      	beq.n	8003250 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031da:	2210      	movs	r2, #16
 80031dc:	409a      	lsls	r2, r3
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d018      	beq.n	8003222 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d108      	bne.n	8003210 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	2b00      	cmp	r3, #0
 8003204:	d024      	beq.n	8003250 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	4798      	blx	r3
 800320e:	e01f      	b.n	8003250 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003214:	2b00      	cmp	r3, #0
 8003216:	d01b      	beq.n	8003250 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	4798      	blx	r3
 8003220:	e016      	b.n	8003250 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322c:	2b00      	cmp	r3, #0
 800322e:	d107      	bne.n	8003240 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0208 	bic.w	r2, r2, #8
 800323e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003254:	2220      	movs	r2, #32
 8003256:	409a      	lsls	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4013      	ands	r3, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 808e 	beq.w	800337e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 8086 	beq.w	800337e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003276:	2220      	movs	r2, #32
 8003278:	409a      	lsls	r2, r3
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b05      	cmp	r3, #5
 8003288:	d136      	bne.n	80032f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0216 	bic.w	r2, r2, #22
 8003298:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695a      	ldr	r2, [r3, #20]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d103      	bne.n	80032ba <HAL_DMA_IRQHandler+0x1da>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d007      	beq.n	80032ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0208 	bic.w	r2, r2, #8
 80032c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ce:	223f      	movs	r2, #63	; 0x3f
 80032d0:	409a      	lsls	r2, r3
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d07d      	beq.n	80033ea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	4798      	blx	r3
        }
        return;
 80032f6:	e078      	b.n	80033ea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d01c      	beq.n	8003340 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d108      	bne.n	8003326 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003318:	2b00      	cmp	r3, #0
 800331a:	d030      	beq.n	800337e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	4798      	blx	r3
 8003324:	e02b      	b.n	800337e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332a:	2b00      	cmp	r3, #0
 800332c:	d027      	beq.n	800337e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	4798      	blx	r3
 8003336:	e022      	b.n	800337e <HAL_DMA_IRQHandler+0x29e>
 8003338:	20000000 	.word	0x20000000
 800333c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10f      	bne.n	800336e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0210 	bic.w	r2, r2, #16
 800335c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003382:	2b00      	cmp	r3, #0
 8003384:	d032      	beq.n	80033ec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d022      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2205      	movs	r2, #5
 8003396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0201 	bic.w	r2, r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	3301      	adds	r3, #1
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d307      	bcc.n	80033c6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f2      	bne.n	80033aa <HAL_DMA_IRQHandler+0x2ca>
 80033c4:	e000      	b.n	80033c8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80033c6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	4798      	blx	r3
 80033e8:	e000      	b.n	80033ec <HAL_DMA_IRQHandler+0x30c>
        return;
 80033ea:	bf00      	nop
    }
  }
}
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop

080033f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003410:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	2b40      	cmp	r3, #64	; 0x40
 8003420:	d108      	bne.n	8003434 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003432:	e007      	b.n	8003444 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	60da      	str	r2, [r3, #12]
}
 8003444:	bf00      	nop
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	b2db      	uxtb	r3, r3
 800345e:	3b10      	subs	r3, #16
 8003460:	4a14      	ldr	r2, [pc, #80]	; (80034b4 <DMA_CalcBaseAndBitshift+0x64>)
 8003462:	fba2 2303 	umull	r2, r3, r2, r3
 8003466:	091b      	lsrs	r3, r3, #4
 8003468:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800346a:	4a13      	ldr	r2, [pc, #76]	; (80034b8 <DMA_CalcBaseAndBitshift+0x68>)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4413      	add	r3, r2
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2b03      	cmp	r3, #3
 800347c:	d909      	bls.n	8003492 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003486:	f023 0303 	bic.w	r3, r3, #3
 800348a:	1d1a      	adds	r2, r3, #4
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	659a      	str	r2, [r3, #88]	; 0x58
 8003490:	e007      	b.n	80034a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800349a:	f023 0303 	bic.w	r3, r3, #3
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	aaaaaaab 	.word	0xaaaaaaab
 80034b8:	080078a4 	.word	0x080078a4

080034bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034c4:	2300      	movs	r3, #0
 80034c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d11f      	bne.n	8003516 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b03      	cmp	r3, #3
 80034da:	d855      	bhi.n	8003588 <DMA_CheckFifoParam+0xcc>
 80034dc:	a201      	add	r2, pc, #4	; (adr r2, 80034e4 <DMA_CheckFifoParam+0x28>)
 80034de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e2:	bf00      	nop
 80034e4:	080034f5 	.word	0x080034f5
 80034e8:	08003507 	.word	0x08003507
 80034ec:	080034f5 	.word	0x080034f5
 80034f0:	08003589 	.word	0x08003589
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d045      	beq.n	800358c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003504:	e042      	b.n	800358c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800350e:	d13f      	bne.n	8003590 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003514:	e03c      	b.n	8003590 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800351e:	d121      	bne.n	8003564 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b03      	cmp	r3, #3
 8003524:	d836      	bhi.n	8003594 <DMA_CheckFifoParam+0xd8>
 8003526:	a201      	add	r2, pc, #4	; (adr r2, 800352c <DMA_CheckFifoParam+0x70>)
 8003528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352c:	0800353d 	.word	0x0800353d
 8003530:	08003543 	.word	0x08003543
 8003534:	0800353d 	.word	0x0800353d
 8003538:	08003555 	.word	0x08003555
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
      break;
 8003540:	e02f      	b.n	80035a2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003546:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d024      	beq.n	8003598 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003552:	e021      	b.n	8003598 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003558:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800355c:	d11e      	bne.n	800359c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003562:	e01b      	b.n	800359c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2b02      	cmp	r3, #2
 8003568:	d902      	bls.n	8003570 <DMA_CheckFifoParam+0xb4>
 800356a:	2b03      	cmp	r3, #3
 800356c:	d003      	beq.n	8003576 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800356e:	e018      	b.n	80035a2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	73fb      	strb	r3, [r7, #15]
      break;
 8003574:	e015      	b.n	80035a2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00e      	beq.n	80035a0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	73fb      	strb	r3, [r7, #15]
      break;
 8003586:	e00b      	b.n	80035a0 <DMA_CheckFifoParam+0xe4>
      break;
 8003588:	bf00      	nop
 800358a:	e00a      	b.n	80035a2 <DMA_CheckFifoParam+0xe6>
      break;
 800358c:	bf00      	nop
 800358e:	e008      	b.n	80035a2 <DMA_CheckFifoParam+0xe6>
      break;
 8003590:	bf00      	nop
 8003592:	e006      	b.n	80035a2 <DMA_CheckFifoParam+0xe6>
      break;
 8003594:	bf00      	nop
 8003596:	e004      	b.n	80035a2 <DMA_CheckFifoParam+0xe6>
      break;
 8003598:	bf00      	nop
 800359a:	e002      	b.n	80035a2 <DMA_CheckFifoParam+0xe6>
      break;   
 800359c:	bf00      	nop
 800359e:	e000      	b.n	80035a2 <DMA_CheckFifoParam+0xe6>
      break;
 80035a0:	bf00      	nop
    }
  } 
  
  return status; 
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b089      	sub	sp, #36	; 0x24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035be:	2300      	movs	r3, #0
 80035c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
 80035ca:	e16b      	b.n	80038a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035cc:	2201      	movs	r2, #1
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	4013      	ands	r3, r2
 80035de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	f040 815a 	bne.w	800389e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d00b      	beq.n	800360a <HAL_GPIO_Init+0x5a>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d007      	beq.n	800360a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035fe:	2b11      	cmp	r3, #17
 8003600:	d003      	beq.n	800360a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b12      	cmp	r3, #18
 8003608:	d130      	bne.n	800366c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	2203      	movs	r2, #3
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43db      	mvns	r3, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4013      	ands	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4313      	orrs	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003640:	2201      	movs	r2, #1
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	43db      	mvns	r3, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4013      	ands	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	091b      	lsrs	r3, r3, #4
 8003656:	f003 0201 	and.w	r2, r3, #1
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4313      	orrs	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	2203      	movs	r2, #3
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4313      	orrs	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d003      	beq.n	80036ac <HAL_GPIO_Init+0xfc>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b12      	cmp	r3, #18
 80036aa:	d123      	bne.n	80036f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	08da      	lsrs	r2, r3, #3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3208      	adds	r2, #8
 80036b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	220f      	movs	r2, #15
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	43db      	mvns	r3, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4013      	ands	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	08da      	lsrs	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3208      	adds	r2, #8
 80036ee:	69b9      	ldr	r1, [r7, #24]
 80036f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	2203      	movs	r2, #3
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	43db      	mvns	r3, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4013      	ands	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 0203 	and.w	r2, r3, #3
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 80b4 	beq.w	800389e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	4b5f      	ldr	r3, [pc, #380]	; (80038b8 <HAL_GPIO_Init+0x308>)
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	4a5e      	ldr	r2, [pc, #376]	; (80038b8 <HAL_GPIO_Init+0x308>)
 8003740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003744:	6453      	str	r3, [r2, #68]	; 0x44
 8003746:	4b5c      	ldr	r3, [pc, #368]	; (80038b8 <HAL_GPIO_Init+0x308>)
 8003748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003752:	4a5a      	ldr	r2, [pc, #360]	; (80038bc <HAL_GPIO_Init+0x30c>)
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	089b      	lsrs	r3, r3, #2
 8003758:	3302      	adds	r3, #2
 800375a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800375e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	220f      	movs	r2, #15
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43db      	mvns	r3, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4013      	ands	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a51      	ldr	r2, [pc, #324]	; (80038c0 <HAL_GPIO_Init+0x310>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d02b      	beq.n	80037d6 <HAL_GPIO_Init+0x226>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a50      	ldr	r2, [pc, #320]	; (80038c4 <HAL_GPIO_Init+0x314>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d025      	beq.n	80037d2 <HAL_GPIO_Init+0x222>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a4f      	ldr	r2, [pc, #316]	; (80038c8 <HAL_GPIO_Init+0x318>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d01f      	beq.n	80037ce <HAL_GPIO_Init+0x21e>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a4e      	ldr	r2, [pc, #312]	; (80038cc <HAL_GPIO_Init+0x31c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d019      	beq.n	80037ca <HAL_GPIO_Init+0x21a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a4d      	ldr	r2, [pc, #308]	; (80038d0 <HAL_GPIO_Init+0x320>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d013      	beq.n	80037c6 <HAL_GPIO_Init+0x216>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a4c      	ldr	r2, [pc, #304]	; (80038d4 <HAL_GPIO_Init+0x324>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00d      	beq.n	80037c2 <HAL_GPIO_Init+0x212>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a4b      	ldr	r2, [pc, #300]	; (80038d8 <HAL_GPIO_Init+0x328>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d007      	beq.n	80037be <HAL_GPIO_Init+0x20e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a4a      	ldr	r2, [pc, #296]	; (80038dc <HAL_GPIO_Init+0x32c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d101      	bne.n	80037ba <HAL_GPIO_Init+0x20a>
 80037b6:	2307      	movs	r3, #7
 80037b8:	e00e      	b.n	80037d8 <HAL_GPIO_Init+0x228>
 80037ba:	2308      	movs	r3, #8
 80037bc:	e00c      	b.n	80037d8 <HAL_GPIO_Init+0x228>
 80037be:	2306      	movs	r3, #6
 80037c0:	e00a      	b.n	80037d8 <HAL_GPIO_Init+0x228>
 80037c2:	2305      	movs	r3, #5
 80037c4:	e008      	b.n	80037d8 <HAL_GPIO_Init+0x228>
 80037c6:	2304      	movs	r3, #4
 80037c8:	e006      	b.n	80037d8 <HAL_GPIO_Init+0x228>
 80037ca:	2303      	movs	r3, #3
 80037cc:	e004      	b.n	80037d8 <HAL_GPIO_Init+0x228>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e002      	b.n	80037d8 <HAL_GPIO_Init+0x228>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <HAL_GPIO_Init+0x228>
 80037d6:	2300      	movs	r3, #0
 80037d8:	69fa      	ldr	r2, [r7, #28]
 80037da:	f002 0203 	and.w	r2, r2, #3
 80037de:	0092      	lsls	r2, r2, #2
 80037e0:	4093      	lsls	r3, r2
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037e8:	4934      	ldr	r1, [pc, #208]	; (80038bc <HAL_GPIO_Init+0x30c>)
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	089b      	lsrs	r3, r3, #2
 80037ee:	3302      	adds	r3, #2
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037f6:	4b3a      	ldr	r3, [pc, #232]	; (80038e0 <HAL_GPIO_Init+0x330>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	43db      	mvns	r3, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4013      	ands	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	4313      	orrs	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800381a:	4a31      	ldr	r2, [pc, #196]	; (80038e0 <HAL_GPIO_Init+0x330>)
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003820:	4b2f      	ldr	r3, [pc, #188]	; (80038e0 <HAL_GPIO_Init+0x330>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	43db      	mvns	r3, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4013      	ands	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003844:	4a26      	ldr	r2, [pc, #152]	; (80038e0 <HAL_GPIO_Init+0x330>)
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800384a:	4b25      	ldr	r3, [pc, #148]	; (80038e0 <HAL_GPIO_Init+0x330>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	43db      	mvns	r3, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4013      	ands	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	4313      	orrs	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800386e:	4a1c      	ldr	r2, [pc, #112]	; (80038e0 <HAL_GPIO_Init+0x330>)
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003874:	4b1a      	ldr	r3, [pc, #104]	; (80038e0 <HAL_GPIO_Init+0x330>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	43db      	mvns	r3, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4013      	ands	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003898:	4a11      	ldr	r2, [pc, #68]	; (80038e0 <HAL_GPIO_Init+0x330>)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	3301      	adds	r3, #1
 80038a2:	61fb      	str	r3, [r7, #28]
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	2b0f      	cmp	r3, #15
 80038a8:	f67f ae90 	bls.w	80035cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038ac:	bf00      	nop
 80038ae:	3724      	adds	r7, #36	; 0x24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	40023800 	.word	0x40023800
 80038bc:	40013800 	.word	0x40013800
 80038c0:	40020000 	.word	0x40020000
 80038c4:	40020400 	.word	0x40020400
 80038c8:	40020800 	.word	0x40020800
 80038cc:	40020c00 	.word	0x40020c00
 80038d0:	40021000 	.word	0x40021000
 80038d4:	40021400 	.word	0x40021400
 80038d8:	40021800 	.word	0x40021800
 80038dc:	40021c00 	.word	0x40021c00
 80038e0:	40013c00 	.word	0x40013c00

080038e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	460b      	mov	r3, r1
 80038ee:	807b      	strh	r3, [r7, #2]
 80038f0:	4613      	mov	r3, r2
 80038f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038f4:	787b      	ldrb	r3, [r7, #1]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038fa:	887a      	ldrh	r2, [r7, #2]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003900:	e003      	b.n	800390a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003902:	887b      	ldrh	r3, [r7, #2]
 8003904:	041a      	lsls	r2, r3, #16
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	619a      	str	r2, [r3, #24]
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	460b      	mov	r3, r1
 8003920:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695a      	ldr	r2, [r3, #20]
 8003926:	887b      	ldrh	r3, [r7, #2]
 8003928:	401a      	ands	r2, r3
 800392a:	887b      	ldrh	r3, [r7, #2]
 800392c:	429a      	cmp	r2, r3
 800392e:	d104      	bne.n	800393a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003930:	887b      	ldrh	r3, [r7, #2]
 8003932:	041a      	lsls	r2, r3, #16
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003938:	e002      	b.n	8003940 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800393a:	887a      	ldrh	r2, [r7, #2]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	619a      	str	r2, [r3, #24]
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e25b      	b.n	8003e16 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d075      	beq.n	8003a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800396a:	4ba3      	ldr	r3, [pc, #652]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 030c 	and.w	r3, r3, #12
 8003972:	2b04      	cmp	r3, #4
 8003974:	d00c      	beq.n	8003990 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003976:	4ba0      	ldr	r3, [pc, #640]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800397e:	2b08      	cmp	r3, #8
 8003980:	d112      	bne.n	80039a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003982:	4b9d      	ldr	r3, [pc, #628]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800398a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800398e:	d10b      	bne.n	80039a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003990:	4b99      	ldr	r3, [pc, #612]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d05b      	beq.n	8003a54 <HAL_RCC_OscConfig+0x108>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d157      	bne.n	8003a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e236      	b.n	8003e16 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b0:	d106      	bne.n	80039c0 <HAL_RCC_OscConfig+0x74>
 80039b2:	4b91      	ldr	r3, [pc, #580]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a90      	ldr	r2, [pc, #576]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 80039b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	e01d      	b.n	80039fc <HAL_RCC_OscConfig+0xb0>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039c8:	d10c      	bne.n	80039e4 <HAL_RCC_OscConfig+0x98>
 80039ca:	4b8b      	ldr	r3, [pc, #556]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a8a      	ldr	r2, [pc, #552]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 80039d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	4b88      	ldr	r3, [pc, #544]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a87      	ldr	r2, [pc, #540]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 80039dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	e00b      	b.n	80039fc <HAL_RCC_OscConfig+0xb0>
 80039e4:	4b84      	ldr	r3, [pc, #528]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a83      	ldr	r2, [pc, #524]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 80039ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	4b81      	ldr	r3, [pc, #516]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a80      	ldr	r2, [pc, #512]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 80039f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d013      	beq.n	8003a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a04:	f7ff f956 	bl	8002cb4 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a0c:	f7ff f952 	bl	8002cb4 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b64      	cmp	r3, #100	; 0x64
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e1fb      	b.n	8003e16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1e:	4b76      	ldr	r3, [pc, #472]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0f0      	beq.n	8003a0c <HAL_RCC_OscConfig+0xc0>
 8003a2a:	e014      	b.n	8003a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2c:	f7ff f942 	bl	8002cb4 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a34:	f7ff f93e 	bl	8002cb4 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b64      	cmp	r3, #100	; 0x64
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e1e7      	b.n	8003e16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a46:	4b6c      	ldr	r3, [pc, #432]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0xe8>
 8003a52:	e000      	b.n	8003a56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d063      	beq.n	8003b2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a62:	4b65      	ldr	r3, [pc, #404]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00b      	beq.n	8003a86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a6e:	4b62      	ldr	r3, [pc, #392]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d11c      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a7a:	4b5f      	ldr	r3, [pc, #380]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d116      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a86:	4b5c      	ldr	r3, [pc, #368]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d005      	beq.n	8003a9e <HAL_RCC_OscConfig+0x152>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d001      	beq.n	8003a9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e1bb      	b.n	8003e16 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a9e:	4b56      	ldr	r3, [pc, #344]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4952      	ldr	r1, [pc, #328]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ab2:	e03a      	b.n	8003b2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d020      	beq.n	8003afe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003abc:	4b4f      	ldr	r3, [pc, #316]	; (8003bfc <HAL_RCC_OscConfig+0x2b0>)
 8003abe:	2201      	movs	r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac2:	f7ff f8f7 	bl	8002cb4 <HAL_GetTick>
 8003ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac8:	e008      	b.n	8003adc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aca:	f7ff f8f3 	bl	8002cb4 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e19c      	b.n	8003e16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003adc:	4b46      	ldr	r3, [pc, #280]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0f0      	beq.n	8003aca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae8:	4b43      	ldr	r3, [pc, #268]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	4940      	ldr	r1, [pc, #256]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	600b      	str	r3, [r1, #0]
 8003afc:	e015      	b.n	8003b2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003afe:	4b3f      	ldr	r3, [pc, #252]	; (8003bfc <HAL_RCC_OscConfig+0x2b0>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b04:	f7ff f8d6 	bl	8002cb4 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b0c:	f7ff f8d2 	bl	8002cb4 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e17b      	b.n	8003e16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b1e:	4b36      	ldr	r3, [pc, #216]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d030      	beq.n	8003b98 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d016      	beq.n	8003b6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b3e:	4b30      	ldr	r3, [pc, #192]	; (8003c00 <HAL_RCC_OscConfig+0x2b4>)
 8003b40:	2201      	movs	r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b44:	f7ff f8b6 	bl	8002cb4 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b4c:	f7ff f8b2 	bl	8002cb4 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e15b      	b.n	8003e16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b5e:	4b26      	ldr	r3, [pc, #152]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0f0      	beq.n	8003b4c <HAL_RCC_OscConfig+0x200>
 8003b6a:	e015      	b.n	8003b98 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b6c:	4b24      	ldr	r3, [pc, #144]	; (8003c00 <HAL_RCC_OscConfig+0x2b4>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b72:	f7ff f89f 	bl	8002cb4 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b7a:	f7ff f89b 	bl	8002cb4 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e144      	b.n	8003e16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b8c:	4b1a      	ldr	r3, [pc, #104]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1f0      	bne.n	8003b7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 80a0 	beq.w	8003ce6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003baa:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10f      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60bb      	str	r3, [r7, #8]
 8003bba:	4b0f      	ldr	r3, [pc, #60]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	4a0e      	ldr	r2, [pc, #56]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bc6:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd6:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <HAL_RCC_OscConfig+0x2b8>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d121      	bne.n	8003c26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003be2:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <HAL_RCC_OscConfig+0x2b8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a07      	ldr	r2, [pc, #28]	; (8003c04 <HAL_RCC_OscConfig+0x2b8>)
 8003be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bee:	f7ff f861 	bl	8002cb4 <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf4:	e011      	b.n	8003c1a <HAL_RCC_OscConfig+0x2ce>
 8003bf6:	bf00      	nop
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	42470000 	.word	0x42470000
 8003c00:	42470e80 	.word	0x42470e80
 8003c04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c08:	f7ff f854 	bl	8002cb4 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e0fd      	b.n	8003e16 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1a:	4b81      	ldr	r3, [pc, #516]	; (8003e20 <HAL_RCC_OscConfig+0x4d4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d106      	bne.n	8003c3c <HAL_RCC_OscConfig+0x2f0>
 8003c2e:	4b7d      	ldr	r3, [pc, #500]	; (8003e24 <HAL_RCC_OscConfig+0x4d8>)
 8003c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c32:	4a7c      	ldr	r2, [pc, #496]	; (8003e24 <HAL_RCC_OscConfig+0x4d8>)
 8003c34:	f043 0301 	orr.w	r3, r3, #1
 8003c38:	6713      	str	r3, [r2, #112]	; 0x70
 8003c3a:	e01c      	b.n	8003c76 <HAL_RCC_OscConfig+0x32a>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b05      	cmp	r3, #5
 8003c42:	d10c      	bne.n	8003c5e <HAL_RCC_OscConfig+0x312>
 8003c44:	4b77      	ldr	r3, [pc, #476]	; (8003e24 <HAL_RCC_OscConfig+0x4d8>)
 8003c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c48:	4a76      	ldr	r2, [pc, #472]	; (8003e24 <HAL_RCC_OscConfig+0x4d8>)
 8003c4a:	f043 0304 	orr.w	r3, r3, #4
 8003c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c50:	4b74      	ldr	r3, [pc, #464]	; (8003e24 <HAL_RCC_OscConfig+0x4d8>)
 8003c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c54:	4a73      	ldr	r2, [pc, #460]	; (8003e24 <HAL_RCC_OscConfig+0x4d8>)
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c5c:	e00b      	b.n	8003c76 <HAL_RCC_OscConfig+0x32a>
 8003c5e:	4b71      	ldr	r3, [pc, #452]	; (8003e24 <HAL_RCC_OscConfig+0x4d8>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c62:	4a70      	ldr	r2, [pc, #448]	; (8003e24 <HAL_RCC_OscConfig+0x4d8>)
 8003c64:	f023 0301 	bic.w	r3, r3, #1
 8003c68:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6a:	4b6e      	ldr	r3, [pc, #440]	; (8003e24 <HAL_RCC_OscConfig+0x4d8>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6e:	4a6d      	ldr	r2, [pc, #436]	; (8003e24 <HAL_RCC_OscConfig+0x4d8>)
 8003c70:	f023 0304 	bic.w	r3, r3, #4
 8003c74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d015      	beq.n	8003caa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7e:	f7ff f819 	bl	8002cb4 <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c84:	e00a      	b.n	8003c9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c86:	f7ff f815 	bl	8002cb4 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e0bc      	b.n	8003e16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9c:	4b61      	ldr	r3, [pc, #388]	; (8003e24 <HAL_RCC_OscConfig+0x4d8>)
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0ee      	beq.n	8003c86 <HAL_RCC_OscConfig+0x33a>
 8003ca8:	e014      	b.n	8003cd4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003caa:	f7ff f803 	bl	8002cb4 <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cb0:	e00a      	b.n	8003cc8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb2:	f7fe ffff 	bl	8002cb4 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e0a6      	b.n	8003e16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc8:	4b56      	ldr	r3, [pc, #344]	; (8003e24 <HAL_RCC_OscConfig+0x4d8>)
 8003cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1ee      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cd4:	7dfb      	ldrb	r3, [r7, #23]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d105      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cda:	4b52      	ldr	r3, [pc, #328]	; (8003e24 <HAL_RCC_OscConfig+0x4d8>)
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	4a51      	ldr	r2, [pc, #324]	; (8003e24 <HAL_RCC_OscConfig+0x4d8>)
 8003ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 8092 	beq.w	8003e14 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cf0:	4b4c      	ldr	r3, [pc, #304]	; (8003e24 <HAL_RCC_OscConfig+0x4d8>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 030c 	and.w	r3, r3, #12
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d05c      	beq.n	8003db6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d141      	bne.n	8003d88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d04:	4b48      	ldr	r3, [pc, #288]	; (8003e28 <HAL_RCC_OscConfig+0x4dc>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0a:	f7fe ffd3 	bl	8002cb4 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d12:	f7fe ffcf 	bl	8002cb4 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e078      	b.n	8003e16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d24:	4b3f      	ldr	r3, [pc, #252]	; (8003e24 <HAL_RCC_OscConfig+0x4d8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1f0      	bne.n	8003d12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	69da      	ldr	r2, [r3, #28]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	019b      	lsls	r3, r3, #6
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d46:	085b      	lsrs	r3, r3, #1
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	041b      	lsls	r3, r3, #16
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d52:	061b      	lsls	r3, r3, #24
 8003d54:	4933      	ldr	r1, [pc, #204]	; (8003e24 <HAL_RCC_OscConfig+0x4d8>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d5a:	4b33      	ldr	r3, [pc, #204]	; (8003e28 <HAL_RCC_OscConfig+0x4dc>)
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d60:	f7fe ffa8 	bl	8002cb4 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d68:	f7fe ffa4 	bl	8002cb4 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e04d      	b.n	8003e16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d7a:	4b2a      	ldr	r3, [pc, #168]	; (8003e24 <HAL_RCC_OscConfig+0x4d8>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0f0      	beq.n	8003d68 <HAL_RCC_OscConfig+0x41c>
 8003d86:	e045      	b.n	8003e14 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d88:	4b27      	ldr	r3, [pc, #156]	; (8003e28 <HAL_RCC_OscConfig+0x4dc>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8e:	f7fe ff91 	bl	8002cb4 <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d96:	f7fe ff8d 	bl	8002cb4 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e036      	b.n	8003e16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da8:	4b1e      	ldr	r3, [pc, #120]	; (8003e24 <HAL_RCC_OscConfig+0x4d8>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1f0      	bne.n	8003d96 <HAL_RCC_OscConfig+0x44a>
 8003db4:	e02e      	b.n	8003e14 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d101      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e029      	b.n	8003e16 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dc2:	4b18      	ldr	r3, [pc, #96]	; (8003e24 <HAL_RCC_OscConfig+0x4d8>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d11c      	bne.n	8003e10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d115      	bne.n	8003e10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dea:	4013      	ands	r3, r2
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d10d      	bne.n	8003e10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d106      	bne.n	8003e10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d001      	beq.n	8003e14 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40007000 	.word	0x40007000
 8003e24:	40023800 	.word	0x40023800
 8003e28:	42470060 	.word	0x42470060

08003e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0cc      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e40:	4b68      	ldr	r3, [pc, #416]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d90c      	bls.n	8003e68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4e:	4b65      	ldr	r3, [pc, #404]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e56:	4b63      	ldr	r3, [pc, #396]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e0b8      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d020      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d005      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e80:	4b59      	ldr	r3, [pc, #356]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	4a58      	ldr	r2, [pc, #352]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d005      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e98:	4b53      	ldr	r3, [pc, #332]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	4a52      	ldr	r2, [pc, #328]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ea2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ea4:	4b50      	ldr	r3, [pc, #320]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	494d      	ldr	r1, [pc, #308]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d044      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d107      	bne.n	8003eda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eca:	4b47      	ldr	r3, [pc, #284]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d119      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e07f      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d003      	beq.n	8003eea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d107      	bne.n	8003efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eea:	4b3f      	ldr	r3, [pc, #252]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d109      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e06f      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003efa:	4b3b      	ldr	r3, [pc, #236]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e067      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f0a:	4b37      	ldr	r3, [pc, #220]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f023 0203 	bic.w	r2, r3, #3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	4934      	ldr	r1, [pc, #208]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f1c:	f7fe feca 	bl	8002cb4 <HAL_GetTick>
 8003f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f22:	e00a      	b.n	8003f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f24:	f7fe fec6 	bl	8002cb4 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e04f      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3a:	4b2b      	ldr	r3, [pc, #172]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 020c 	and.w	r2, r3, #12
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d1eb      	bne.n	8003f24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f4c:	4b25      	ldr	r3, [pc, #148]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 030f 	and.w	r3, r3, #15
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d20c      	bcs.n	8003f74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5a:	4b22      	ldr	r3, [pc, #136]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f62:	4b20      	ldr	r3, [pc, #128]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e032      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f80:	4b19      	ldr	r3, [pc, #100]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	4916      	ldr	r1, [pc, #88]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d009      	beq.n	8003fb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f9e:	4b12      	ldr	r3, [pc, #72]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	490e      	ldr	r1, [pc, #56]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fb2:	f000 f821 	bl	8003ff8 <HAL_RCC_GetSysClockFreq>
 8003fb6:	4601      	mov	r1, r0
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	091b      	lsrs	r3, r3, #4
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	4a0a      	ldr	r2, [pc, #40]	; (8003fec <HAL_RCC_ClockConfig+0x1c0>)
 8003fc4:	5cd3      	ldrb	r3, [r2, r3]
 8003fc6:	fa21 f303 	lsr.w	r3, r1, r3
 8003fca:	4a09      	ldr	r2, [pc, #36]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fce:	4b09      	ldr	r3, [pc, #36]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fe fada 	bl	800258c <HAL_InitTick>

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40023c00 	.word	0x40023c00
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	0800788c 	.word	0x0800788c
 8003ff0:	20000000 	.word	0x20000000
 8003ff4:	20000004 	.word	0x20000004

08003ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	607b      	str	r3, [r7, #4]
 8004002:	2300      	movs	r3, #0
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	2300      	movs	r3, #0
 8004008:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800400e:	4b63      	ldr	r3, [pc, #396]	; (800419c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 030c 	and.w	r3, r3, #12
 8004016:	2b04      	cmp	r3, #4
 8004018:	d007      	beq.n	800402a <HAL_RCC_GetSysClockFreq+0x32>
 800401a:	2b08      	cmp	r3, #8
 800401c:	d008      	beq.n	8004030 <HAL_RCC_GetSysClockFreq+0x38>
 800401e:	2b00      	cmp	r3, #0
 8004020:	f040 80b4 	bne.w	800418c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004024:	4b5e      	ldr	r3, [pc, #376]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004026:	60bb      	str	r3, [r7, #8]
       break;
 8004028:	e0b3      	b.n	8004192 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800402a:	4b5e      	ldr	r3, [pc, #376]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800402c:	60bb      	str	r3, [r7, #8]
      break;
 800402e:	e0b0      	b.n	8004192 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004030:	4b5a      	ldr	r3, [pc, #360]	; (800419c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004038:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800403a:	4b58      	ldr	r3, [pc, #352]	; (800419c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d04a      	beq.n	80040dc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004046:	4b55      	ldr	r3, [pc, #340]	; (800419c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	099b      	lsrs	r3, r3, #6
 800404c:	f04f 0400 	mov.w	r4, #0
 8004050:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	ea03 0501 	and.w	r5, r3, r1
 800405c:	ea04 0602 	and.w	r6, r4, r2
 8004060:	4629      	mov	r1, r5
 8004062:	4632      	mov	r2, r6
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	f04f 0400 	mov.w	r4, #0
 800406c:	0154      	lsls	r4, r2, #5
 800406e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004072:	014b      	lsls	r3, r1, #5
 8004074:	4619      	mov	r1, r3
 8004076:	4622      	mov	r2, r4
 8004078:	1b49      	subs	r1, r1, r5
 800407a:	eb62 0206 	sbc.w	r2, r2, r6
 800407e:	f04f 0300 	mov.w	r3, #0
 8004082:	f04f 0400 	mov.w	r4, #0
 8004086:	0194      	lsls	r4, r2, #6
 8004088:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800408c:	018b      	lsls	r3, r1, #6
 800408e:	1a5b      	subs	r3, r3, r1
 8004090:	eb64 0402 	sbc.w	r4, r4, r2
 8004094:	f04f 0100 	mov.w	r1, #0
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	00e2      	lsls	r2, r4, #3
 800409e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80040a2:	00d9      	lsls	r1, r3, #3
 80040a4:	460b      	mov	r3, r1
 80040a6:	4614      	mov	r4, r2
 80040a8:	195b      	adds	r3, r3, r5
 80040aa:	eb44 0406 	adc.w	r4, r4, r6
 80040ae:	f04f 0100 	mov.w	r1, #0
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	0262      	lsls	r2, r4, #9
 80040b8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80040bc:	0259      	lsls	r1, r3, #9
 80040be:	460b      	mov	r3, r1
 80040c0:	4614      	mov	r4, r2
 80040c2:	4618      	mov	r0, r3
 80040c4:	4621      	mov	r1, r4
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f04f 0400 	mov.w	r4, #0
 80040cc:	461a      	mov	r2, r3
 80040ce:	4623      	mov	r3, r4
 80040d0:	f7fc f886 	bl	80001e0 <__aeabi_uldivmod>
 80040d4:	4603      	mov	r3, r0
 80040d6:	460c      	mov	r4, r1
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	e049      	b.n	8004170 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040dc:	4b2f      	ldr	r3, [pc, #188]	; (800419c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	099b      	lsrs	r3, r3, #6
 80040e2:	f04f 0400 	mov.w	r4, #0
 80040e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040ea:	f04f 0200 	mov.w	r2, #0
 80040ee:	ea03 0501 	and.w	r5, r3, r1
 80040f2:	ea04 0602 	and.w	r6, r4, r2
 80040f6:	4629      	mov	r1, r5
 80040f8:	4632      	mov	r2, r6
 80040fa:	f04f 0300 	mov.w	r3, #0
 80040fe:	f04f 0400 	mov.w	r4, #0
 8004102:	0154      	lsls	r4, r2, #5
 8004104:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004108:	014b      	lsls	r3, r1, #5
 800410a:	4619      	mov	r1, r3
 800410c:	4622      	mov	r2, r4
 800410e:	1b49      	subs	r1, r1, r5
 8004110:	eb62 0206 	sbc.w	r2, r2, r6
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	f04f 0400 	mov.w	r4, #0
 800411c:	0194      	lsls	r4, r2, #6
 800411e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004122:	018b      	lsls	r3, r1, #6
 8004124:	1a5b      	subs	r3, r3, r1
 8004126:	eb64 0402 	sbc.w	r4, r4, r2
 800412a:	f04f 0100 	mov.w	r1, #0
 800412e:	f04f 0200 	mov.w	r2, #0
 8004132:	00e2      	lsls	r2, r4, #3
 8004134:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004138:	00d9      	lsls	r1, r3, #3
 800413a:	460b      	mov	r3, r1
 800413c:	4614      	mov	r4, r2
 800413e:	195b      	adds	r3, r3, r5
 8004140:	eb44 0406 	adc.w	r4, r4, r6
 8004144:	f04f 0100 	mov.w	r1, #0
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	02a2      	lsls	r2, r4, #10
 800414e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004152:	0299      	lsls	r1, r3, #10
 8004154:	460b      	mov	r3, r1
 8004156:	4614      	mov	r4, r2
 8004158:	4618      	mov	r0, r3
 800415a:	4621      	mov	r1, r4
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f04f 0400 	mov.w	r4, #0
 8004162:	461a      	mov	r2, r3
 8004164:	4623      	mov	r3, r4
 8004166:	f7fc f83b 	bl	80001e0 <__aeabi_uldivmod>
 800416a:	4603      	mov	r3, r0
 800416c:	460c      	mov	r4, r1
 800416e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004170:	4b0a      	ldr	r3, [pc, #40]	; (800419c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	0c1b      	lsrs	r3, r3, #16
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	3301      	adds	r3, #1
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	fbb2 f3f3 	udiv	r3, r2, r3
 8004188:	60bb      	str	r3, [r7, #8]
      break;
 800418a:	e002      	b.n	8004192 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800418c:	4b04      	ldr	r3, [pc, #16]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800418e:	60bb      	str	r3, [r7, #8]
      break;
 8004190:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004192:	68bb      	ldr	r3, [r7, #8]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800419c:	40023800 	.word	0x40023800
 80041a0:	00f42400 	.word	0x00f42400
 80041a4:	007a1200 	.word	0x007a1200

080041a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041ac:	4b03      	ldr	r3, [pc, #12]	; (80041bc <HAL_RCC_GetHCLKFreq+0x14>)
 80041ae:	681b      	ldr	r3, [r3, #0]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	20000000 	.word	0x20000000

080041c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041c4:	f7ff fff0 	bl	80041a8 <HAL_RCC_GetHCLKFreq>
 80041c8:	4601      	mov	r1, r0
 80041ca:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	0a9b      	lsrs	r3, r3, #10
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	4a03      	ldr	r2, [pc, #12]	; (80041e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041d6:	5cd3      	ldrb	r3, [r2, r3]
 80041d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80041dc:	4618      	mov	r0, r3
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40023800 	.word	0x40023800
 80041e4:	0800789c 	.word	0x0800789c

080041e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041ec:	f7ff ffdc 	bl	80041a8 <HAL_RCC_GetHCLKFreq>
 80041f0:	4601      	mov	r1, r0
 80041f2:	4b05      	ldr	r3, [pc, #20]	; (8004208 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	0b5b      	lsrs	r3, r3, #13
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	4a03      	ldr	r2, [pc, #12]	; (800420c <HAL_RCC_GetPCLK2Freq+0x24>)
 80041fe:	5cd3      	ldrb	r3, [r2, r3]
 8004200:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004204:	4618      	mov	r0, r3
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40023800 	.word	0x40023800
 800420c:	0800789c 	.word	0x0800789c

08004210 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	220f      	movs	r2, #15
 800421e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004220:	4b12      	ldr	r3, [pc, #72]	; (800426c <HAL_RCC_GetClockConfig+0x5c>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f003 0203 	and.w	r2, r3, #3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800422c:	4b0f      	ldr	r3, [pc, #60]	; (800426c <HAL_RCC_GetClockConfig+0x5c>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004238:	4b0c      	ldr	r3, [pc, #48]	; (800426c <HAL_RCC_GetClockConfig+0x5c>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004244:	4b09      	ldr	r3, [pc, #36]	; (800426c <HAL_RCC_GetClockConfig+0x5c>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	08db      	lsrs	r3, r3, #3
 800424a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004252:	4b07      	ldr	r3, [pc, #28]	; (8004270 <HAL_RCC_GetClockConfig+0x60>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 020f 	and.w	r2, r3, #15
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	601a      	str	r2, [r3, #0]
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40023800 	.word	0x40023800
 8004270:	40023c00 	.word	0x40023c00

08004274 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e01d      	b.n	80042c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d106      	bne.n	80042a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f815 	bl	80042ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3304      	adds	r3, #4
 80042b0:	4619      	mov	r1, r3
 80042b2:	4610      	mov	r0, r2
 80042b4:	f000 faea 	bl	800488c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b083      	sub	sp, #12
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042de:	b480      	push	{r7}
 80042e0:	b085      	sub	sp, #20
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f042 0201 	orr.w	r2, r2, #1
 80042f4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b06      	cmp	r3, #6
 8004306:	d007      	beq.n	8004318 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0201 	orr.w	r2, r2, #1
 8004316:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b082      	sub	sp, #8
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e01d      	b.n	8004374 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d106      	bne.n	8004352 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7fe fad3 	bl	80028f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2202      	movs	r2, #2
 8004356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	3304      	adds	r3, #4
 8004362:	4619      	mov	r1, r3
 8004364:	4610      	mov	r0, r2
 8004366:	f000 fa91 	bl	800488c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e083      	b.n	8004498 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b00      	cmp	r3, #0
 800439a:	d106      	bne.n	80043aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7fe fac7 	bl	8002938 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2202      	movs	r2, #2
 80043ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043c0:	f023 0307 	bic.w	r3, r3, #7
 80043c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	3304      	adds	r3, #4
 80043ce:	4619      	mov	r1, r3
 80043d0:	4610      	mov	r0, r2
 80043d2:	f000 fa5b 	bl	800488c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043fe:	f023 0303 	bic.w	r3, r3, #3
 8004402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	021b      	lsls	r3, r3, #8
 800440e:	4313      	orrs	r3, r2
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800441c:	f023 030c 	bic.w	r3, r3, #12
 8004420:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004428:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800442c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	021b      	lsls	r3, r3, #8
 8004438:	4313      	orrs	r3, r2
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	011a      	lsls	r2, r3, #4
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	031b      	lsls	r3, r3, #12
 800444c:	4313      	orrs	r3, r2
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800445a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004462:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	4313      	orrs	r3, r2
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d122      	bne.n	80044fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d11b      	bne.n	80044fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0202 	mvn.w	r2, #2
 80044cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f9b4 	bl	8004850 <HAL_TIM_IC_CaptureCallback>
 80044e8:	e005      	b.n	80044f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f9a6 	bl	800483c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f9b7 	bl	8004864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f003 0304 	and.w	r3, r3, #4
 8004506:	2b04      	cmp	r3, #4
 8004508:	d122      	bne.n	8004550 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b04      	cmp	r3, #4
 8004516:	d11b      	bne.n	8004550 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f06f 0204 	mvn.w	r2, #4
 8004520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2202      	movs	r2, #2
 8004526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f98a 	bl	8004850 <HAL_TIM_IC_CaptureCallback>
 800453c:	e005      	b.n	800454a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f97c 	bl	800483c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f98d 	bl	8004864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b08      	cmp	r3, #8
 800455c:	d122      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	2b08      	cmp	r3, #8
 800456a:	d11b      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0208 	mvn.w	r2, #8
 8004574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2204      	movs	r2, #4
 800457a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	f003 0303 	and.w	r3, r3, #3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f960 	bl	8004850 <HAL_TIM_IC_CaptureCallback>
 8004590:	e005      	b.n	800459e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f952 	bl	800483c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f963 	bl	8004864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f003 0310 	and.w	r3, r3, #16
 80045ae:	2b10      	cmp	r3, #16
 80045b0:	d122      	bne.n	80045f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f003 0310 	and.w	r3, r3, #16
 80045bc:	2b10      	cmp	r3, #16
 80045be:	d11b      	bne.n	80045f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f06f 0210 	mvn.w	r2, #16
 80045c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2208      	movs	r2, #8
 80045ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f936 	bl	8004850 <HAL_TIM_IC_CaptureCallback>
 80045e4:	e005      	b.n	80045f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f928 	bl	800483c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f939 	bl	8004864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b01      	cmp	r3, #1
 8004604:	d10e      	bne.n	8004624 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b01      	cmp	r3, #1
 8004612:	d107      	bne.n	8004624 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f06f 0201 	mvn.w	r2, #1
 800461c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7fd ff72 	bl	8002508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462e:	2b80      	cmp	r3, #128	; 0x80
 8004630:	d10e      	bne.n	8004650 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463c:	2b80      	cmp	r3, #128	; 0x80
 800463e:	d107      	bne.n	8004650 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 fbf4 	bl	8004e38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465a:	2b40      	cmp	r3, #64	; 0x40
 800465c:	d10e      	bne.n	800467c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004668:	2b40      	cmp	r3, #64	; 0x40
 800466a:	d107      	bne.n	800467c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f8fe 	bl	8004878 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f003 0320 	and.w	r3, r3, #32
 8004686:	2b20      	cmp	r3, #32
 8004688:	d10e      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 0320 	and.w	r3, r3, #32
 8004694:	2b20      	cmp	r3, #32
 8004696:	d107      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0220 	mvn.w	r2, #32
 80046a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fbbe 	bl	8004e24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046a8:	bf00      	nop
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e0b4      	b.n	8004834 <HAL_TIM_PWM_ConfigChannel+0x184>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2202      	movs	r2, #2
 80046d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b0c      	cmp	r3, #12
 80046de:	f200 809f 	bhi.w	8004820 <HAL_TIM_PWM_ConfigChannel+0x170>
 80046e2:	a201      	add	r2, pc, #4	; (adr r2, 80046e8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80046e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e8:	0800471d 	.word	0x0800471d
 80046ec:	08004821 	.word	0x08004821
 80046f0:	08004821 	.word	0x08004821
 80046f4:	08004821 	.word	0x08004821
 80046f8:	0800475d 	.word	0x0800475d
 80046fc:	08004821 	.word	0x08004821
 8004700:	08004821 	.word	0x08004821
 8004704:	08004821 	.word	0x08004821
 8004708:	0800479f 	.word	0x0800479f
 800470c:	08004821 	.word	0x08004821
 8004710:	08004821 	.word	0x08004821
 8004714:	08004821 	.word	0x08004821
 8004718:	080047df 	.word	0x080047df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68b9      	ldr	r1, [r7, #8]
 8004722:	4618      	mov	r0, r3
 8004724:	f000 f952 	bl	80049cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699a      	ldr	r2, [r3, #24]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0208 	orr.w	r2, r2, #8
 8004736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0204 	bic.w	r2, r2, #4
 8004746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6999      	ldr	r1, [r3, #24]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	691a      	ldr	r2, [r3, #16]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	619a      	str	r2, [r3, #24]
      break;
 800475a:	e062      	b.n	8004822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68b9      	ldr	r1, [r7, #8]
 8004762:	4618      	mov	r0, r3
 8004764:	f000 f9a2 	bl	8004aac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699a      	ldr	r2, [r3, #24]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699a      	ldr	r2, [r3, #24]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6999      	ldr	r1, [r3, #24]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	021a      	lsls	r2, r3, #8
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	619a      	str	r2, [r3, #24]
      break;
 800479c:	e041      	b.n	8004822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68b9      	ldr	r1, [r7, #8]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 f9f7 	bl	8004b98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69da      	ldr	r2, [r3, #28]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f042 0208 	orr.w	r2, r2, #8
 80047b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69da      	ldr	r2, [r3, #28]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0204 	bic.w	r2, r2, #4
 80047c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69d9      	ldr	r1, [r3, #28]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	691a      	ldr	r2, [r3, #16]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	61da      	str	r2, [r3, #28]
      break;
 80047dc:	e021      	b.n	8004822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68b9      	ldr	r1, [r7, #8]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 fa4b 	bl	8004c80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69da      	ldr	r2, [r3, #28]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69da      	ldr	r2, [r3, #28]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	69d9      	ldr	r1, [r3, #28]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	021a      	lsls	r2, r3, #8
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	61da      	str	r2, [r3, #28]
      break;
 800481e:	e000      	b.n	8004822 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004820:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a40      	ldr	r2, [pc, #256]	; (80049a0 <TIM_Base_SetConfig+0x114>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d013      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048aa:	d00f      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a3d      	ldr	r2, [pc, #244]	; (80049a4 <TIM_Base_SetConfig+0x118>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d00b      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a3c      	ldr	r2, [pc, #240]	; (80049a8 <TIM_Base_SetConfig+0x11c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d007      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a3b      	ldr	r2, [pc, #236]	; (80049ac <TIM_Base_SetConfig+0x120>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d003      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a3a      	ldr	r2, [pc, #232]	; (80049b0 <TIM_Base_SetConfig+0x124>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d108      	bne.n	80048de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a2f      	ldr	r2, [pc, #188]	; (80049a0 <TIM_Base_SetConfig+0x114>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d02b      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ec:	d027      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a2c      	ldr	r2, [pc, #176]	; (80049a4 <TIM_Base_SetConfig+0x118>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d023      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a2b      	ldr	r2, [pc, #172]	; (80049a8 <TIM_Base_SetConfig+0x11c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d01f      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a2a      	ldr	r2, [pc, #168]	; (80049ac <TIM_Base_SetConfig+0x120>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d01b      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a29      	ldr	r2, [pc, #164]	; (80049b0 <TIM_Base_SetConfig+0x124>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d017      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a28      	ldr	r2, [pc, #160]	; (80049b4 <TIM_Base_SetConfig+0x128>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d013      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a27      	ldr	r2, [pc, #156]	; (80049b8 <TIM_Base_SetConfig+0x12c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d00f      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a26      	ldr	r2, [pc, #152]	; (80049bc <TIM_Base_SetConfig+0x130>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00b      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a25      	ldr	r2, [pc, #148]	; (80049c0 <TIM_Base_SetConfig+0x134>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d007      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a24      	ldr	r2, [pc, #144]	; (80049c4 <TIM_Base_SetConfig+0x138>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d003      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a23      	ldr	r2, [pc, #140]	; (80049c8 <TIM_Base_SetConfig+0x13c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d108      	bne.n	8004950 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4313      	orrs	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a0a      	ldr	r2, [pc, #40]	; (80049a0 <TIM_Base_SetConfig+0x114>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d003      	beq.n	8004984 <TIM_Base_SetConfig+0xf8>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a0c      	ldr	r2, [pc, #48]	; (80049b0 <TIM_Base_SetConfig+0x124>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d103      	bne.n	800498c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	691a      	ldr	r2, [r3, #16]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	615a      	str	r2, [r3, #20]
}
 8004992:	bf00      	nop
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40010000 	.word	0x40010000
 80049a4:	40000400 	.word	0x40000400
 80049a8:	40000800 	.word	0x40000800
 80049ac:	40000c00 	.word	0x40000c00
 80049b0:	40010400 	.word	0x40010400
 80049b4:	40014000 	.word	0x40014000
 80049b8:	40014400 	.word	0x40014400
 80049bc:	40014800 	.word	0x40014800
 80049c0:	40001800 	.word	0x40001800
 80049c4:	40001c00 	.word	0x40001c00
 80049c8:	40002000 	.word	0x40002000

080049cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	f023 0201 	bic.w	r2, r3, #1
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0303 	bic.w	r3, r3, #3
 8004a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f023 0302 	bic.w	r3, r3, #2
 8004a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a20      	ldr	r2, [pc, #128]	; (8004aa4 <TIM_OC1_SetConfig+0xd8>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d003      	beq.n	8004a30 <TIM_OC1_SetConfig+0x64>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a1f      	ldr	r2, [pc, #124]	; (8004aa8 <TIM_OC1_SetConfig+0xdc>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d10c      	bne.n	8004a4a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f023 0308 	bic.w	r3, r3, #8
 8004a36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f023 0304 	bic.w	r3, r3, #4
 8004a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a15      	ldr	r2, [pc, #84]	; (8004aa4 <TIM_OC1_SetConfig+0xd8>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d003      	beq.n	8004a5a <TIM_OC1_SetConfig+0x8e>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a14      	ldr	r2, [pc, #80]	; (8004aa8 <TIM_OC1_SetConfig+0xdc>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d111      	bne.n	8004a7e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	621a      	str	r2, [r3, #32]
}
 8004a98:	bf00      	nop
 8004a9a:	371c      	adds	r7, #28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	40010000 	.word	0x40010000
 8004aa8:	40010400 	.word	0x40010400

08004aac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	f023 0210 	bic.w	r2, r3, #16
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	021b      	lsls	r3, r3, #8
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f023 0320 	bic.w	r3, r3, #32
 8004af6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a22      	ldr	r2, [pc, #136]	; (8004b90 <TIM_OC2_SetConfig+0xe4>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d003      	beq.n	8004b14 <TIM_OC2_SetConfig+0x68>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a21      	ldr	r2, [pc, #132]	; (8004b94 <TIM_OC2_SetConfig+0xe8>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d10d      	bne.n	8004b30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	011b      	lsls	r3, r3, #4
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a17      	ldr	r2, [pc, #92]	; (8004b90 <TIM_OC2_SetConfig+0xe4>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d003      	beq.n	8004b40 <TIM_OC2_SetConfig+0x94>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a16      	ldr	r2, [pc, #88]	; (8004b94 <TIM_OC2_SetConfig+0xe8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d113      	bne.n	8004b68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	621a      	str	r2, [r3, #32]
}
 8004b82:	bf00      	nop
 8004b84:	371c      	adds	r7, #28
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	40010000 	.word	0x40010000
 8004b94:	40010400 	.word	0x40010400

08004b98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0303 	bic.w	r3, r3, #3
 8004bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	021b      	lsls	r3, r3, #8
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a21      	ldr	r2, [pc, #132]	; (8004c78 <TIM_OC3_SetConfig+0xe0>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d003      	beq.n	8004bfe <TIM_OC3_SetConfig+0x66>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a20      	ldr	r2, [pc, #128]	; (8004c7c <TIM_OC3_SetConfig+0xe4>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d10d      	bne.n	8004c1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	021b      	lsls	r3, r3, #8
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a16      	ldr	r2, [pc, #88]	; (8004c78 <TIM_OC3_SetConfig+0xe0>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d003      	beq.n	8004c2a <TIM_OC3_SetConfig+0x92>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a15      	ldr	r2, [pc, #84]	; (8004c7c <TIM_OC3_SetConfig+0xe4>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d113      	bne.n	8004c52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	011b      	lsls	r3, r3, #4
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	621a      	str	r2, [r3, #32]
}
 8004c6c:	bf00      	nop
 8004c6e:	371c      	adds	r7, #28
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	40010000 	.word	0x40010000
 8004c7c:	40010400 	.word	0x40010400

08004c80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	021b      	lsls	r3, r3, #8
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	031b      	lsls	r3, r3, #12
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a12      	ldr	r2, [pc, #72]	; (8004d24 <TIM_OC4_SetConfig+0xa4>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d003      	beq.n	8004ce8 <TIM_OC4_SetConfig+0x68>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a11      	ldr	r2, [pc, #68]	; (8004d28 <TIM_OC4_SetConfig+0xa8>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d109      	bne.n	8004cfc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	019b      	lsls	r3, r3, #6
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	621a      	str	r2, [r3, #32]
}
 8004d16:	bf00      	nop
 8004d18:	371c      	adds	r7, #28
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	40010000 	.word	0x40010000
 8004d28:	40010400 	.word	0x40010400

08004d2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d40:	2302      	movs	r3, #2
 8004d42:	e05a      	b.n	8004dfa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a21      	ldr	r2, [pc, #132]	; (8004e08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d022      	beq.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d90:	d01d      	beq.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a1d      	ldr	r2, [pc, #116]	; (8004e0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d018      	beq.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a1b      	ldr	r2, [pc, #108]	; (8004e10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d013      	beq.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a1a      	ldr	r2, [pc, #104]	; (8004e14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d00e      	beq.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a18      	ldr	r2, [pc, #96]	; (8004e18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d009      	beq.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a17      	ldr	r2, [pc, #92]	; (8004e1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d004      	beq.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a15      	ldr	r2, [pc, #84]	; (8004e20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d10c      	bne.n	8004de8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	40010000 	.word	0x40010000
 8004e0c:	40000400 	.word	0x40000400
 8004e10:	40000800 	.word	0x40000800
 8004e14:	40000c00 	.word	0x40000c00
 8004e18:	40010400 	.word	0x40010400
 8004e1c:	40014000 	.word	0x40014000
 8004e20:	40001800 	.word	0x40001800

08004e24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e03f      	b.n	8004ede <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d106      	bne.n	8004e78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7fd fe0a 	bl	8002a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2224      	movs	r2, #36	; 0x24
 8004e7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 fc41 	bl	8005718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	691a      	ldr	r2, [r3, #16]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ea4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695a      	ldr	r2, [r3, #20]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004eb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ec4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
	...

08004ee8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b20      	cmp	r3, #32
 8004f00:	d153      	bne.n	8004faa <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <HAL_UART_Transmit_DMA+0x26>
 8004f08:	88fb      	ldrh	r3, [r7, #6]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e04c      	b.n	8004fac <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d101      	bne.n	8004f20 <HAL_UART_Transmit_DMA+0x38>
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	e045      	b.n	8004fac <HAL_UART_Transmit_DMA+0xc4>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	88fa      	ldrh	r2, [r7, #6]
 8004f32:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	88fa      	ldrh	r2, [r7, #6]
 8004f38:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2221      	movs	r2, #33	; 0x21
 8004f44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4c:	4a19      	ldr	r2, [pc, #100]	; (8004fb4 <HAL_UART_Transmit_DMA+0xcc>)
 8004f4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f54:	4a18      	ldr	r2, [pc, #96]	; (8004fb8 <HAL_UART_Transmit_DMA+0xd0>)
 8004f56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5c:	4a17      	ldr	r2, [pc, #92]	; (8004fbc <HAL_UART_Transmit_DMA+0xd4>)
 8004f5e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f64:	2200      	movs	r2, #0
 8004f66:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8004f68:	f107 0308 	add.w	r3, r7, #8
 8004f6c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	6819      	ldr	r1, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	88fb      	ldrh	r3, [r7, #6]
 8004f80:	f7fe f834 	bl	8002fec <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f8c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695a      	ldr	r2, [r3, #20]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fa4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	e000      	b.n	8004fac <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8004faa:	2302      	movs	r3, #2
  }
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	08005325 	.word	0x08005325
 8004fb8:	08005377 	.word	0x08005377
 8004fbc:	08005417 	.word	0x08005417

08004fc0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b20      	cmp	r3, #32
 8004fd8:	d166      	bne.n	80050a8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d002      	beq.n	8004fe6 <HAL_UART_Receive_DMA+0x26>
 8004fe0:	88fb      	ldrh	r3, [r7, #6]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e05f      	b.n	80050aa <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_UART_Receive_DMA+0x38>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e058      	b.n	80050aa <HAL_UART_Receive_DMA+0xea>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	88fa      	ldrh	r2, [r7, #6]
 800500a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2222      	movs	r2, #34	; 0x22
 8005016:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501e:	4a25      	ldr	r2, [pc, #148]	; (80050b4 <HAL_UART_Receive_DMA+0xf4>)
 8005020:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005026:	4a24      	ldr	r2, [pc, #144]	; (80050b8 <HAL_UART_Receive_DMA+0xf8>)
 8005028:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502e:	4a23      	ldr	r2, [pc, #140]	; (80050bc <HAL_UART_Receive_DMA+0xfc>)
 8005030:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005036:	2200      	movs	r2, #0
 8005038:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800503a:	f107 0308 	add.w	r3, r7, #8
 800503e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3304      	adds	r3, #4
 800504a:	4619      	mov	r1, r3
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	88fb      	ldrh	r3, [r7, #6]
 8005052:	f7fd ffcb 	bl	8002fec <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005056:	2300      	movs	r3, #0
 8005058:	613b      	str	r3, [r7, #16]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	613b      	str	r3, [r7, #16]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	613b      	str	r3, [r7, #16]
 800506a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005082:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	695a      	ldr	r2, [r3, #20]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0201 	orr.w	r2, r2, #1
 8005092:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	695a      	ldr	r2, [r3, #20]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050a2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80050a4:	2300      	movs	r3, #0
 80050a6:	e000      	b.n	80050aa <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80050a8:	2302      	movs	r3, #2
  }
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	08005393 	.word	0x08005393
 80050b8:	080053fb 	.word	0x080053fb
 80050bc:	08005417 	.word	0x08005417

080050c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b088      	sub	sp, #32
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	f003 030f 	and.w	r3, r3, #15
 80050ee:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10d      	bne.n	8005112 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	f003 0320 	and.w	r3, r3, #32
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d008      	beq.n	8005112 <HAL_UART_IRQHandler+0x52>
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	f003 0320 	and.w	r3, r3, #32
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fa83 	bl	8005616 <UART_Receive_IT>
      return;
 8005110:	e0d1      	b.n	80052b6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 80b0 	beq.w	800527a <HAL_UART_IRQHandler+0x1ba>
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b00      	cmp	r3, #0
 8005122:	d105      	bne.n	8005130 <HAL_UART_IRQHandler+0x70>
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 80a5 	beq.w	800527a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <HAL_UART_IRQHandler+0x90>
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005140:	2b00      	cmp	r3, #0
 8005142:	d005      	beq.n	8005150 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005148:	f043 0201 	orr.w	r2, r3, #1
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	f003 0304 	and.w	r3, r3, #4
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <HAL_UART_IRQHandler+0xb0>
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	d005      	beq.n	8005170 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005168:	f043 0202 	orr.w	r2, r3, #2
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <HAL_UART_IRQHandler+0xd0>
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	d005      	beq.n	8005190 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005188:	f043 0204 	orr.w	r2, r3, #4
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	f003 0308 	and.w	r3, r3, #8
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00f      	beq.n	80051ba <HAL_UART_IRQHandler+0xfa>
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	f003 0320 	and.w	r3, r3, #32
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d104      	bne.n	80051ae <HAL_UART_IRQHandler+0xee>
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d005      	beq.n	80051ba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b2:	f043 0208 	orr.w	r2, r3, #8
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d078      	beq.n	80052b4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	f003 0320 	and.w	r3, r3, #32
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d007      	beq.n	80051dc <HAL_UART_IRQHandler+0x11c>
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	f003 0320 	and.w	r3, r3, #32
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fa1d 	bl	8005616 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e6:	2b40      	cmp	r3, #64	; 0x40
 80051e8:	bf0c      	ite	eq
 80051ea:	2301      	moveq	r3, #1
 80051ec:	2300      	movne	r3, #0
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d102      	bne.n	8005204 <HAL_UART_IRQHandler+0x144>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d031      	beq.n	8005268 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f966 	bl	80054d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005214:	2b40      	cmp	r3, #64	; 0x40
 8005216:	d123      	bne.n	8005260 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695a      	ldr	r2, [r3, #20]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005226:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522c:	2b00      	cmp	r3, #0
 800522e:	d013      	beq.n	8005258 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005234:	4a21      	ldr	r2, [pc, #132]	; (80052bc <HAL_UART_IRQHandler+0x1fc>)
 8005236:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523c:	4618      	mov	r0, r3
 800523e:	f7fd ff2d 	bl	800309c <HAL_DMA_Abort_IT>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d016      	beq.n	8005276 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005252:	4610      	mov	r0, r2
 8005254:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005256:	e00e      	b.n	8005276 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f859 	bl	8005310 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800525e:	e00a      	b.n	8005276 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f855 	bl	8005310 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005266:	e006      	b.n	8005276 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f851 	bl	8005310 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005274:	e01e      	b.n	80052b4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005276:	bf00      	nop
    return;
 8005278:	e01c      	b.n	80052b4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005280:	2b00      	cmp	r3, #0
 8005282:	d008      	beq.n	8005296 <HAL_UART_IRQHandler+0x1d6>
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f953 	bl	800553a <UART_Transmit_IT>
    return;
 8005294:	e00f      	b.n	80052b6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00a      	beq.n	80052b6 <HAL_UART_IRQHandler+0x1f6>
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d005      	beq.n	80052b6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f99b 	bl	80055e6 <UART_EndTransmit_IT>
    return;
 80052b0:	bf00      	nop
 80052b2:	e000      	b.n	80052b6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80052b4:	bf00      	nop
  }
}
 80052b6:	3720      	adds	r7, #32
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	08005513 	.word	0x08005513

080052c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005330:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533c:	2b00      	cmp	r3, #0
 800533e:	d113      	bne.n	8005368 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695a      	ldr	r2, [r3, #20]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005354:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68da      	ldr	r2, [r3, #12]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005364:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005366:	e002      	b.n	800536e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f7ff ffa9 	bl	80052c0 <HAL_UART_TxCpltCallback>
}
 800536e:	bf00      	nop
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b084      	sub	sp, #16
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005382:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f7ff ffa5 	bl	80052d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800538a:	bf00      	nop
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b084      	sub	sp, #16
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d11e      	bne.n	80053ec <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053c2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	695a      	ldr	r2, [r3, #20]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0201 	bic.w	r2, r2, #1
 80053d2:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695a      	ldr	r2, [r3, #20]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053e2:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2220      	movs	r2, #32
 80053e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f7ff ff7b 	bl	80052e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053f2:	bf00      	nop
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b084      	sub	sp, #16
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005406:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f7ff ff77 	bl	80052fc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800540e:	bf00      	nop
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b084      	sub	sp, #16
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800541e:	2300      	movs	r3, #0
 8005420:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005426:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005432:	2b80      	cmp	r3, #128	; 0x80
 8005434:	bf0c      	ite	eq
 8005436:	2301      	moveq	r3, #1
 8005438:	2300      	movne	r3, #0
 800543a:	b2db      	uxtb	r3, r3
 800543c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b21      	cmp	r3, #33	; 0x21
 8005448:	d108      	bne.n	800545c <UART_DMAError+0x46>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d005      	beq.n	800545c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2200      	movs	r2, #0
 8005454:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005456:	68b8      	ldr	r0, [r7, #8]
 8005458:	f000 f827 	bl	80054aa <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005466:	2b40      	cmp	r3, #64	; 0x40
 8005468:	bf0c      	ite	eq
 800546a:	2301      	moveq	r3, #1
 800546c:	2300      	movne	r3, #0
 800546e:	b2db      	uxtb	r3, r3
 8005470:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b22      	cmp	r3, #34	; 0x22
 800547c:	d108      	bne.n	8005490 <UART_DMAError+0x7a>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d005      	beq.n	8005490 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2200      	movs	r2, #0
 8005488:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800548a:	68b8      	ldr	r0, [r7, #8]
 800548c:	f000 f823 	bl	80054d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005494:	f043 0210 	orr.w	r2, r3, #16
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800549c:	68b8      	ldr	r0, [r7, #8]
 800549e:	f7ff ff37 	bl	8005310 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054a2:	bf00      	nop
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80054c0:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80054ec:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695a      	ldr	r2, [r3, #20]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0201 	bic.w	r2, r2, #1
 80054fc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2220      	movs	r2, #32
 8005502:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005506:	bf00      	nop
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f7ff feef 	bl	8005310 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005532:	bf00      	nop
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800553a:	b480      	push	{r7}
 800553c:	b085      	sub	sp, #20
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b21      	cmp	r3, #33	; 0x21
 800554c:	d144      	bne.n	80055d8 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005556:	d11a      	bne.n	800558e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	461a      	mov	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800556c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d105      	bne.n	8005582 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	1c9a      	adds	r2, r3, #2
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	621a      	str	r2, [r3, #32]
 8005580:	e00e      	b.n	80055a0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	1c5a      	adds	r2, r3, #1
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	621a      	str	r2, [r3, #32]
 800558c:	e008      	b.n	80055a0 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	1c59      	adds	r1, r3, #1
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	6211      	str	r1, [r2, #32]
 8005598:	781a      	ldrb	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	3b01      	subs	r3, #1
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	4619      	mov	r1, r3
 80055ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10f      	bne.n	80055d4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68da      	ldr	r2, [r3, #12]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80055d4:	2300      	movs	r3, #0
 80055d6:	e000      	b.n	80055da <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80055d8:	2302      	movs	r3, #2
  }
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b082      	sub	sp, #8
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68da      	ldr	r2, [r3, #12]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2220      	movs	r2, #32
 8005602:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7ff fe5a 	bl	80052c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b084      	sub	sp, #16
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b22      	cmp	r3, #34	; 0x22
 8005628:	d171      	bne.n	800570e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005632:	d123      	bne.n	800567c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005638:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10e      	bne.n	8005660 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	b29b      	uxth	r3, r3
 800564a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800564e:	b29a      	uxth	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005658:	1c9a      	adds	r2, r3, #2
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	629a      	str	r2, [r3, #40]	; 0x28
 800565e:	e029      	b.n	80056b4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	b29b      	uxth	r3, r3
 8005668:	b2db      	uxtb	r3, r3
 800566a:	b29a      	uxth	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	629a      	str	r2, [r3, #40]	; 0x28
 800567a:	e01b      	b.n	80056b4 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10a      	bne.n	800569a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6858      	ldr	r0, [r3, #4]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568e:	1c59      	adds	r1, r3, #1
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6291      	str	r1, [r2, #40]	; 0x28
 8005694:	b2c2      	uxtb	r2, r0
 8005696:	701a      	strb	r2, [r3, #0]
 8005698:	e00c      	b.n	80056b4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a6:	1c58      	adds	r0, r3, #1
 80056a8:	6879      	ldr	r1, [r7, #4]
 80056aa:	6288      	str	r0, [r1, #40]	; 0x28
 80056ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056b0:	b2d2      	uxtb	r2, r2
 80056b2:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29b      	uxth	r3, r3
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	4619      	mov	r1, r3
 80056c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d120      	bne.n	800570a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0220 	bic.w	r2, r2, #32
 80056d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68da      	ldr	r2, [r3, #12]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	695a      	ldr	r2, [r3, #20]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0201 	bic.w	r2, r2, #1
 80056f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7ff fdf1 	bl	80052e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	e002      	b.n	8005710 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	e000      	b.n	8005710 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800570e:	2302      	movs	r3, #2
  }
}
 8005710:	4618      	mov	r0, r3
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800571c:	b085      	sub	sp, #20
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68da      	ldr	r2, [r3, #12]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	431a      	orrs	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	431a      	orrs	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	4313      	orrs	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800575a:	f023 030c 	bic.w	r3, r3, #12
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6812      	ldr	r2, [r2, #0]
 8005762:	68f9      	ldr	r1, [r7, #12]
 8005764:	430b      	orrs	r3, r1
 8005766:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	699a      	ldr	r2, [r3, #24]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	430a      	orrs	r2, r1
 800577c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005786:	f040 818b 	bne.w	8005aa0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4ac1      	ldr	r2, [pc, #772]	; (8005a94 <UART_SetConfig+0x37c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d005      	beq.n	80057a0 <UART_SetConfig+0x88>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4abf      	ldr	r2, [pc, #764]	; (8005a98 <UART_SetConfig+0x380>)
 800579a:	4293      	cmp	r3, r2
 800579c:	f040 80bd 	bne.w	800591a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057a0:	f7fe fd22 	bl	80041e8 <HAL_RCC_GetPCLK2Freq>
 80057a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	461d      	mov	r5, r3
 80057aa:	f04f 0600 	mov.w	r6, #0
 80057ae:	46a8      	mov	r8, r5
 80057b0:	46b1      	mov	r9, r6
 80057b2:	eb18 0308 	adds.w	r3, r8, r8
 80057b6:	eb49 0409 	adc.w	r4, r9, r9
 80057ba:	4698      	mov	r8, r3
 80057bc:	46a1      	mov	r9, r4
 80057be:	eb18 0805 	adds.w	r8, r8, r5
 80057c2:	eb49 0906 	adc.w	r9, r9, r6
 80057c6:	f04f 0100 	mov.w	r1, #0
 80057ca:	f04f 0200 	mov.w	r2, #0
 80057ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80057d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80057d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80057da:	4688      	mov	r8, r1
 80057dc:	4691      	mov	r9, r2
 80057de:	eb18 0005 	adds.w	r0, r8, r5
 80057e2:	eb49 0106 	adc.w	r1, r9, r6
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	461d      	mov	r5, r3
 80057ec:	f04f 0600 	mov.w	r6, #0
 80057f0:	196b      	adds	r3, r5, r5
 80057f2:	eb46 0406 	adc.w	r4, r6, r6
 80057f6:	461a      	mov	r2, r3
 80057f8:	4623      	mov	r3, r4
 80057fa:	f7fa fcf1 	bl	80001e0 <__aeabi_uldivmod>
 80057fe:	4603      	mov	r3, r0
 8005800:	460c      	mov	r4, r1
 8005802:	461a      	mov	r2, r3
 8005804:	4ba5      	ldr	r3, [pc, #660]	; (8005a9c <UART_SetConfig+0x384>)
 8005806:	fba3 2302 	umull	r2, r3, r3, r2
 800580a:	095b      	lsrs	r3, r3, #5
 800580c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	461d      	mov	r5, r3
 8005814:	f04f 0600 	mov.w	r6, #0
 8005818:	46a9      	mov	r9, r5
 800581a:	46b2      	mov	sl, r6
 800581c:	eb19 0309 	adds.w	r3, r9, r9
 8005820:	eb4a 040a 	adc.w	r4, sl, sl
 8005824:	4699      	mov	r9, r3
 8005826:	46a2      	mov	sl, r4
 8005828:	eb19 0905 	adds.w	r9, r9, r5
 800582c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005830:	f04f 0100 	mov.w	r1, #0
 8005834:	f04f 0200 	mov.w	r2, #0
 8005838:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800583c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005840:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005844:	4689      	mov	r9, r1
 8005846:	4692      	mov	sl, r2
 8005848:	eb19 0005 	adds.w	r0, r9, r5
 800584c:	eb4a 0106 	adc.w	r1, sl, r6
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	461d      	mov	r5, r3
 8005856:	f04f 0600 	mov.w	r6, #0
 800585a:	196b      	adds	r3, r5, r5
 800585c:	eb46 0406 	adc.w	r4, r6, r6
 8005860:	461a      	mov	r2, r3
 8005862:	4623      	mov	r3, r4
 8005864:	f7fa fcbc 	bl	80001e0 <__aeabi_uldivmod>
 8005868:	4603      	mov	r3, r0
 800586a:	460c      	mov	r4, r1
 800586c:	461a      	mov	r2, r3
 800586e:	4b8b      	ldr	r3, [pc, #556]	; (8005a9c <UART_SetConfig+0x384>)
 8005870:	fba3 1302 	umull	r1, r3, r3, r2
 8005874:	095b      	lsrs	r3, r3, #5
 8005876:	2164      	movs	r1, #100	; 0x64
 8005878:	fb01 f303 	mul.w	r3, r1, r3
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	00db      	lsls	r3, r3, #3
 8005880:	3332      	adds	r3, #50	; 0x32
 8005882:	4a86      	ldr	r2, [pc, #536]	; (8005a9c <UART_SetConfig+0x384>)
 8005884:	fba2 2303 	umull	r2, r3, r2, r3
 8005888:	095b      	lsrs	r3, r3, #5
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005890:	4498      	add	r8, r3
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	461d      	mov	r5, r3
 8005896:	f04f 0600 	mov.w	r6, #0
 800589a:	46a9      	mov	r9, r5
 800589c:	46b2      	mov	sl, r6
 800589e:	eb19 0309 	adds.w	r3, r9, r9
 80058a2:	eb4a 040a 	adc.w	r4, sl, sl
 80058a6:	4699      	mov	r9, r3
 80058a8:	46a2      	mov	sl, r4
 80058aa:	eb19 0905 	adds.w	r9, r9, r5
 80058ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80058b2:	f04f 0100 	mov.w	r1, #0
 80058b6:	f04f 0200 	mov.w	r2, #0
 80058ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058c6:	4689      	mov	r9, r1
 80058c8:	4692      	mov	sl, r2
 80058ca:	eb19 0005 	adds.w	r0, r9, r5
 80058ce:	eb4a 0106 	adc.w	r1, sl, r6
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	461d      	mov	r5, r3
 80058d8:	f04f 0600 	mov.w	r6, #0
 80058dc:	196b      	adds	r3, r5, r5
 80058de:	eb46 0406 	adc.w	r4, r6, r6
 80058e2:	461a      	mov	r2, r3
 80058e4:	4623      	mov	r3, r4
 80058e6:	f7fa fc7b 	bl	80001e0 <__aeabi_uldivmod>
 80058ea:	4603      	mov	r3, r0
 80058ec:	460c      	mov	r4, r1
 80058ee:	461a      	mov	r2, r3
 80058f0:	4b6a      	ldr	r3, [pc, #424]	; (8005a9c <UART_SetConfig+0x384>)
 80058f2:	fba3 1302 	umull	r1, r3, r3, r2
 80058f6:	095b      	lsrs	r3, r3, #5
 80058f8:	2164      	movs	r1, #100	; 0x64
 80058fa:	fb01 f303 	mul.w	r3, r1, r3
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	3332      	adds	r3, #50	; 0x32
 8005904:	4a65      	ldr	r2, [pc, #404]	; (8005a9c <UART_SetConfig+0x384>)
 8005906:	fba2 2303 	umull	r2, r3, r2, r3
 800590a:	095b      	lsrs	r3, r3, #5
 800590c:	f003 0207 	and.w	r2, r3, #7
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4442      	add	r2, r8
 8005916:	609a      	str	r2, [r3, #8]
 8005918:	e26f      	b.n	8005dfa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800591a:	f7fe fc51 	bl	80041c0 <HAL_RCC_GetPCLK1Freq>
 800591e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	461d      	mov	r5, r3
 8005924:	f04f 0600 	mov.w	r6, #0
 8005928:	46a8      	mov	r8, r5
 800592a:	46b1      	mov	r9, r6
 800592c:	eb18 0308 	adds.w	r3, r8, r8
 8005930:	eb49 0409 	adc.w	r4, r9, r9
 8005934:	4698      	mov	r8, r3
 8005936:	46a1      	mov	r9, r4
 8005938:	eb18 0805 	adds.w	r8, r8, r5
 800593c:	eb49 0906 	adc.w	r9, r9, r6
 8005940:	f04f 0100 	mov.w	r1, #0
 8005944:	f04f 0200 	mov.w	r2, #0
 8005948:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800594c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005950:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005954:	4688      	mov	r8, r1
 8005956:	4691      	mov	r9, r2
 8005958:	eb18 0005 	adds.w	r0, r8, r5
 800595c:	eb49 0106 	adc.w	r1, r9, r6
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	461d      	mov	r5, r3
 8005966:	f04f 0600 	mov.w	r6, #0
 800596a:	196b      	adds	r3, r5, r5
 800596c:	eb46 0406 	adc.w	r4, r6, r6
 8005970:	461a      	mov	r2, r3
 8005972:	4623      	mov	r3, r4
 8005974:	f7fa fc34 	bl	80001e0 <__aeabi_uldivmod>
 8005978:	4603      	mov	r3, r0
 800597a:	460c      	mov	r4, r1
 800597c:	461a      	mov	r2, r3
 800597e:	4b47      	ldr	r3, [pc, #284]	; (8005a9c <UART_SetConfig+0x384>)
 8005980:	fba3 2302 	umull	r2, r3, r3, r2
 8005984:	095b      	lsrs	r3, r3, #5
 8005986:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	461d      	mov	r5, r3
 800598e:	f04f 0600 	mov.w	r6, #0
 8005992:	46a9      	mov	r9, r5
 8005994:	46b2      	mov	sl, r6
 8005996:	eb19 0309 	adds.w	r3, r9, r9
 800599a:	eb4a 040a 	adc.w	r4, sl, sl
 800599e:	4699      	mov	r9, r3
 80059a0:	46a2      	mov	sl, r4
 80059a2:	eb19 0905 	adds.w	r9, r9, r5
 80059a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80059aa:	f04f 0100 	mov.w	r1, #0
 80059ae:	f04f 0200 	mov.w	r2, #0
 80059b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059be:	4689      	mov	r9, r1
 80059c0:	4692      	mov	sl, r2
 80059c2:	eb19 0005 	adds.w	r0, r9, r5
 80059c6:	eb4a 0106 	adc.w	r1, sl, r6
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	461d      	mov	r5, r3
 80059d0:	f04f 0600 	mov.w	r6, #0
 80059d4:	196b      	adds	r3, r5, r5
 80059d6:	eb46 0406 	adc.w	r4, r6, r6
 80059da:	461a      	mov	r2, r3
 80059dc:	4623      	mov	r3, r4
 80059de:	f7fa fbff 	bl	80001e0 <__aeabi_uldivmod>
 80059e2:	4603      	mov	r3, r0
 80059e4:	460c      	mov	r4, r1
 80059e6:	461a      	mov	r2, r3
 80059e8:	4b2c      	ldr	r3, [pc, #176]	; (8005a9c <UART_SetConfig+0x384>)
 80059ea:	fba3 1302 	umull	r1, r3, r3, r2
 80059ee:	095b      	lsrs	r3, r3, #5
 80059f0:	2164      	movs	r1, #100	; 0x64
 80059f2:	fb01 f303 	mul.w	r3, r1, r3
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	3332      	adds	r3, #50	; 0x32
 80059fc:	4a27      	ldr	r2, [pc, #156]	; (8005a9c <UART_SetConfig+0x384>)
 80059fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005a02:	095b      	lsrs	r3, r3, #5
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a0a:	4498      	add	r8, r3
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	461d      	mov	r5, r3
 8005a10:	f04f 0600 	mov.w	r6, #0
 8005a14:	46a9      	mov	r9, r5
 8005a16:	46b2      	mov	sl, r6
 8005a18:	eb19 0309 	adds.w	r3, r9, r9
 8005a1c:	eb4a 040a 	adc.w	r4, sl, sl
 8005a20:	4699      	mov	r9, r3
 8005a22:	46a2      	mov	sl, r4
 8005a24:	eb19 0905 	adds.w	r9, r9, r5
 8005a28:	eb4a 0a06 	adc.w	sl, sl, r6
 8005a2c:	f04f 0100 	mov.w	r1, #0
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a40:	4689      	mov	r9, r1
 8005a42:	4692      	mov	sl, r2
 8005a44:	eb19 0005 	adds.w	r0, r9, r5
 8005a48:	eb4a 0106 	adc.w	r1, sl, r6
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	461d      	mov	r5, r3
 8005a52:	f04f 0600 	mov.w	r6, #0
 8005a56:	196b      	adds	r3, r5, r5
 8005a58:	eb46 0406 	adc.w	r4, r6, r6
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	4623      	mov	r3, r4
 8005a60:	f7fa fbbe 	bl	80001e0 <__aeabi_uldivmod>
 8005a64:	4603      	mov	r3, r0
 8005a66:	460c      	mov	r4, r1
 8005a68:	461a      	mov	r2, r3
 8005a6a:	4b0c      	ldr	r3, [pc, #48]	; (8005a9c <UART_SetConfig+0x384>)
 8005a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a70:	095b      	lsrs	r3, r3, #5
 8005a72:	2164      	movs	r1, #100	; 0x64
 8005a74:	fb01 f303 	mul.w	r3, r1, r3
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	3332      	adds	r3, #50	; 0x32
 8005a7e:	4a07      	ldr	r2, [pc, #28]	; (8005a9c <UART_SetConfig+0x384>)
 8005a80:	fba2 2303 	umull	r2, r3, r2, r3
 8005a84:	095b      	lsrs	r3, r3, #5
 8005a86:	f003 0207 	and.w	r2, r3, #7
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4442      	add	r2, r8
 8005a90:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005a92:	e1b2      	b.n	8005dfa <UART_SetConfig+0x6e2>
 8005a94:	40011000 	.word	0x40011000
 8005a98:	40011400 	.word	0x40011400
 8005a9c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4ad7      	ldr	r2, [pc, #860]	; (8005e04 <UART_SetConfig+0x6ec>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d005      	beq.n	8005ab6 <UART_SetConfig+0x39e>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4ad6      	ldr	r2, [pc, #856]	; (8005e08 <UART_SetConfig+0x6f0>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	f040 80d1 	bne.w	8005c58 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ab6:	f7fe fb97 	bl	80041e8 <HAL_RCC_GetPCLK2Freq>
 8005aba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	469a      	mov	sl, r3
 8005ac0:	f04f 0b00 	mov.w	fp, #0
 8005ac4:	46d0      	mov	r8, sl
 8005ac6:	46d9      	mov	r9, fp
 8005ac8:	eb18 0308 	adds.w	r3, r8, r8
 8005acc:	eb49 0409 	adc.w	r4, r9, r9
 8005ad0:	4698      	mov	r8, r3
 8005ad2:	46a1      	mov	r9, r4
 8005ad4:	eb18 080a 	adds.w	r8, r8, sl
 8005ad8:	eb49 090b 	adc.w	r9, r9, fp
 8005adc:	f04f 0100 	mov.w	r1, #0
 8005ae0:	f04f 0200 	mov.w	r2, #0
 8005ae4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ae8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005aec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005af0:	4688      	mov	r8, r1
 8005af2:	4691      	mov	r9, r2
 8005af4:	eb1a 0508 	adds.w	r5, sl, r8
 8005af8:	eb4b 0609 	adc.w	r6, fp, r9
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	4619      	mov	r1, r3
 8005b02:	f04f 0200 	mov.w	r2, #0
 8005b06:	f04f 0300 	mov.w	r3, #0
 8005b0a:	f04f 0400 	mov.w	r4, #0
 8005b0e:	0094      	lsls	r4, r2, #2
 8005b10:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b14:	008b      	lsls	r3, r1, #2
 8005b16:	461a      	mov	r2, r3
 8005b18:	4623      	mov	r3, r4
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	4631      	mov	r1, r6
 8005b1e:	f7fa fb5f 	bl	80001e0 <__aeabi_uldivmod>
 8005b22:	4603      	mov	r3, r0
 8005b24:	460c      	mov	r4, r1
 8005b26:	461a      	mov	r2, r3
 8005b28:	4bb8      	ldr	r3, [pc, #736]	; (8005e0c <UART_SetConfig+0x6f4>)
 8005b2a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b2e:	095b      	lsrs	r3, r3, #5
 8005b30:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	469b      	mov	fp, r3
 8005b38:	f04f 0c00 	mov.w	ip, #0
 8005b3c:	46d9      	mov	r9, fp
 8005b3e:	46e2      	mov	sl, ip
 8005b40:	eb19 0309 	adds.w	r3, r9, r9
 8005b44:	eb4a 040a 	adc.w	r4, sl, sl
 8005b48:	4699      	mov	r9, r3
 8005b4a:	46a2      	mov	sl, r4
 8005b4c:	eb19 090b 	adds.w	r9, r9, fp
 8005b50:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b54:	f04f 0100 	mov.w	r1, #0
 8005b58:	f04f 0200 	mov.w	r2, #0
 8005b5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b68:	4689      	mov	r9, r1
 8005b6a:	4692      	mov	sl, r2
 8005b6c:	eb1b 0509 	adds.w	r5, fp, r9
 8005b70:	eb4c 060a 	adc.w	r6, ip, sl
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	4619      	mov	r1, r3
 8005b7a:	f04f 0200 	mov.w	r2, #0
 8005b7e:	f04f 0300 	mov.w	r3, #0
 8005b82:	f04f 0400 	mov.w	r4, #0
 8005b86:	0094      	lsls	r4, r2, #2
 8005b88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b8c:	008b      	lsls	r3, r1, #2
 8005b8e:	461a      	mov	r2, r3
 8005b90:	4623      	mov	r3, r4
 8005b92:	4628      	mov	r0, r5
 8005b94:	4631      	mov	r1, r6
 8005b96:	f7fa fb23 	bl	80001e0 <__aeabi_uldivmod>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	460c      	mov	r4, r1
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	4b9a      	ldr	r3, [pc, #616]	; (8005e0c <UART_SetConfig+0x6f4>)
 8005ba2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ba6:	095b      	lsrs	r3, r3, #5
 8005ba8:	2164      	movs	r1, #100	; 0x64
 8005baa:	fb01 f303 	mul.w	r3, r1, r3
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	011b      	lsls	r3, r3, #4
 8005bb2:	3332      	adds	r3, #50	; 0x32
 8005bb4:	4a95      	ldr	r2, [pc, #596]	; (8005e0c <UART_SetConfig+0x6f4>)
 8005bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bba:	095b      	lsrs	r3, r3, #5
 8005bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bc0:	4498      	add	r8, r3
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	469b      	mov	fp, r3
 8005bc6:	f04f 0c00 	mov.w	ip, #0
 8005bca:	46d9      	mov	r9, fp
 8005bcc:	46e2      	mov	sl, ip
 8005bce:	eb19 0309 	adds.w	r3, r9, r9
 8005bd2:	eb4a 040a 	adc.w	r4, sl, sl
 8005bd6:	4699      	mov	r9, r3
 8005bd8:	46a2      	mov	sl, r4
 8005bda:	eb19 090b 	adds.w	r9, r9, fp
 8005bde:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005be2:	f04f 0100 	mov.w	r1, #0
 8005be6:	f04f 0200 	mov.w	r2, #0
 8005bea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bf2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bf6:	4689      	mov	r9, r1
 8005bf8:	4692      	mov	sl, r2
 8005bfa:	eb1b 0509 	adds.w	r5, fp, r9
 8005bfe:	eb4c 060a 	adc.w	r6, ip, sl
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	4619      	mov	r1, r3
 8005c08:	f04f 0200 	mov.w	r2, #0
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	f04f 0400 	mov.w	r4, #0
 8005c14:	0094      	lsls	r4, r2, #2
 8005c16:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c1a:	008b      	lsls	r3, r1, #2
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	4623      	mov	r3, r4
 8005c20:	4628      	mov	r0, r5
 8005c22:	4631      	mov	r1, r6
 8005c24:	f7fa fadc 	bl	80001e0 <__aeabi_uldivmod>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	460c      	mov	r4, r1
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	4b77      	ldr	r3, [pc, #476]	; (8005e0c <UART_SetConfig+0x6f4>)
 8005c30:	fba3 1302 	umull	r1, r3, r3, r2
 8005c34:	095b      	lsrs	r3, r3, #5
 8005c36:	2164      	movs	r1, #100	; 0x64
 8005c38:	fb01 f303 	mul.w	r3, r1, r3
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	3332      	adds	r3, #50	; 0x32
 8005c42:	4a72      	ldr	r2, [pc, #456]	; (8005e0c <UART_SetConfig+0x6f4>)
 8005c44:	fba2 2303 	umull	r2, r3, r2, r3
 8005c48:	095b      	lsrs	r3, r3, #5
 8005c4a:	f003 020f 	and.w	r2, r3, #15
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4442      	add	r2, r8
 8005c54:	609a      	str	r2, [r3, #8]
 8005c56:	e0d0      	b.n	8005dfa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c58:	f7fe fab2 	bl	80041c0 <HAL_RCC_GetPCLK1Freq>
 8005c5c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	469a      	mov	sl, r3
 8005c62:	f04f 0b00 	mov.w	fp, #0
 8005c66:	46d0      	mov	r8, sl
 8005c68:	46d9      	mov	r9, fp
 8005c6a:	eb18 0308 	adds.w	r3, r8, r8
 8005c6e:	eb49 0409 	adc.w	r4, r9, r9
 8005c72:	4698      	mov	r8, r3
 8005c74:	46a1      	mov	r9, r4
 8005c76:	eb18 080a 	adds.w	r8, r8, sl
 8005c7a:	eb49 090b 	adc.w	r9, r9, fp
 8005c7e:	f04f 0100 	mov.w	r1, #0
 8005c82:	f04f 0200 	mov.w	r2, #0
 8005c86:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005c8a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c8e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c92:	4688      	mov	r8, r1
 8005c94:	4691      	mov	r9, r2
 8005c96:	eb1a 0508 	adds.w	r5, sl, r8
 8005c9a:	eb4b 0609 	adc.w	r6, fp, r9
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	f04f 0300 	mov.w	r3, #0
 8005cac:	f04f 0400 	mov.w	r4, #0
 8005cb0:	0094      	lsls	r4, r2, #2
 8005cb2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005cb6:	008b      	lsls	r3, r1, #2
 8005cb8:	461a      	mov	r2, r3
 8005cba:	4623      	mov	r3, r4
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	f7fa fa8e 	bl	80001e0 <__aeabi_uldivmod>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	461a      	mov	r2, r3
 8005cca:	4b50      	ldr	r3, [pc, #320]	; (8005e0c <UART_SetConfig+0x6f4>)
 8005ccc:	fba3 2302 	umull	r2, r3, r3, r2
 8005cd0:	095b      	lsrs	r3, r3, #5
 8005cd2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	469b      	mov	fp, r3
 8005cda:	f04f 0c00 	mov.w	ip, #0
 8005cde:	46d9      	mov	r9, fp
 8005ce0:	46e2      	mov	sl, ip
 8005ce2:	eb19 0309 	adds.w	r3, r9, r9
 8005ce6:	eb4a 040a 	adc.w	r4, sl, sl
 8005cea:	4699      	mov	r9, r3
 8005cec:	46a2      	mov	sl, r4
 8005cee:	eb19 090b 	adds.w	r9, r9, fp
 8005cf2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005cf6:	f04f 0100 	mov.w	r1, #0
 8005cfa:	f04f 0200 	mov.w	r2, #0
 8005cfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d0a:	4689      	mov	r9, r1
 8005d0c:	4692      	mov	sl, r2
 8005d0e:	eb1b 0509 	adds.w	r5, fp, r9
 8005d12:	eb4c 060a 	adc.w	r6, ip, sl
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	f04f 0200 	mov.w	r2, #0
 8005d20:	f04f 0300 	mov.w	r3, #0
 8005d24:	f04f 0400 	mov.w	r4, #0
 8005d28:	0094      	lsls	r4, r2, #2
 8005d2a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d2e:	008b      	lsls	r3, r1, #2
 8005d30:	461a      	mov	r2, r3
 8005d32:	4623      	mov	r3, r4
 8005d34:	4628      	mov	r0, r5
 8005d36:	4631      	mov	r1, r6
 8005d38:	f7fa fa52 	bl	80001e0 <__aeabi_uldivmod>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	460c      	mov	r4, r1
 8005d40:	461a      	mov	r2, r3
 8005d42:	4b32      	ldr	r3, [pc, #200]	; (8005e0c <UART_SetConfig+0x6f4>)
 8005d44:	fba3 1302 	umull	r1, r3, r3, r2
 8005d48:	095b      	lsrs	r3, r3, #5
 8005d4a:	2164      	movs	r1, #100	; 0x64
 8005d4c:	fb01 f303 	mul.w	r3, r1, r3
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	011b      	lsls	r3, r3, #4
 8005d54:	3332      	adds	r3, #50	; 0x32
 8005d56:	4a2d      	ldr	r2, [pc, #180]	; (8005e0c <UART_SetConfig+0x6f4>)
 8005d58:	fba2 2303 	umull	r2, r3, r2, r3
 8005d5c:	095b      	lsrs	r3, r3, #5
 8005d5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d62:	4498      	add	r8, r3
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	469b      	mov	fp, r3
 8005d68:	f04f 0c00 	mov.w	ip, #0
 8005d6c:	46d9      	mov	r9, fp
 8005d6e:	46e2      	mov	sl, ip
 8005d70:	eb19 0309 	adds.w	r3, r9, r9
 8005d74:	eb4a 040a 	adc.w	r4, sl, sl
 8005d78:	4699      	mov	r9, r3
 8005d7a:	46a2      	mov	sl, r4
 8005d7c:	eb19 090b 	adds.w	r9, r9, fp
 8005d80:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d84:	f04f 0100 	mov.w	r1, #0
 8005d88:	f04f 0200 	mov.w	r2, #0
 8005d8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d98:	4689      	mov	r9, r1
 8005d9a:	4692      	mov	sl, r2
 8005d9c:	eb1b 0509 	adds.w	r5, fp, r9
 8005da0:	eb4c 060a 	adc.w	r6, ip, sl
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	4619      	mov	r1, r3
 8005daa:	f04f 0200 	mov.w	r2, #0
 8005dae:	f04f 0300 	mov.w	r3, #0
 8005db2:	f04f 0400 	mov.w	r4, #0
 8005db6:	0094      	lsls	r4, r2, #2
 8005db8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005dbc:	008b      	lsls	r3, r1, #2
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	4623      	mov	r3, r4
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	4631      	mov	r1, r6
 8005dc6:	f7fa fa0b 	bl	80001e0 <__aeabi_uldivmod>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	460c      	mov	r4, r1
 8005dce:	461a      	mov	r2, r3
 8005dd0:	4b0e      	ldr	r3, [pc, #56]	; (8005e0c <UART_SetConfig+0x6f4>)
 8005dd2:	fba3 1302 	umull	r1, r3, r3, r2
 8005dd6:	095b      	lsrs	r3, r3, #5
 8005dd8:	2164      	movs	r1, #100	; 0x64
 8005dda:	fb01 f303 	mul.w	r3, r1, r3
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	011b      	lsls	r3, r3, #4
 8005de2:	3332      	adds	r3, #50	; 0x32
 8005de4:	4a09      	ldr	r2, [pc, #36]	; (8005e0c <UART_SetConfig+0x6f4>)
 8005de6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dea:	095b      	lsrs	r3, r3, #5
 8005dec:	f003 020f 	and.w	r2, r3, #15
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4442      	add	r2, r8
 8005df6:	609a      	str	r2, [r3, #8]
}
 8005df8:	e7ff      	b.n	8005dfa <UART_SetConfig+0x6e2>
 8005dfa:	bf00      	nop
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e04:	40011000 	.word	0x40011000
 8005e08:	40011400 	.word	0x40011400
 8005e0c:	51eb851f 	.word	0x51eb851f

08005e10 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	4603      	mov	r3, r0
 8005e18:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e22:	2b84      	cmp	r3, #132	; 0x84
 8005e24:	d005      	beq.n	8005e32 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005e26:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	3303      	adds	r3, #3
 8005e30:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005e32:	68fb      	ldr	r3, [r7, #12]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005e44:	f000 fada 	bl	80063fc <vTaskStartScheduler>
  
  return osOK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005e4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e50:	b089      	sub	sp, #36	; 0x24
 8005e52:	af04      	add	r7, sp, #16
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d020      	beq.n	8005ea2 <osThreadCreate+0x54>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d01c      	beq.n	8005ea2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685c      	ldr	r4, [r3, #4]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681d      	ldr	r5, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	691e      	ldr	r6, [r3, #16]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7ff ffc8 	bl	8005e10 <makeFreeRtosPriority>
 8005e80:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e8a:	9202      	str	r2, [sp, #8]
 8005e8c:	9301      	str	r3, [sp, #4]
 8005e8e:	9100      	str	r1, [sp, #0]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	4632      	mov	r2, r6
 8005e94:	4629      	mov	r1, r5
 8005e96:	4620      	mov	r0, r4
 8005e98:	f000 f8ed 	bl	8006076 <xTaskCreateStatic>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	e01c      	b.n	8005edc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685c      	ldr	r4, [r3, #4]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005eae:	b29e      	uxth	r6, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7ff ffaa 	bl	8005e10 <makeFreeRtosPriority>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	f107 030c 	add.w	r3, r7, #12
 8005ec2:	9301      	str	r3, [sp, #4]
 8005ec4:	9200      	str	r2, [sp, #0]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	4632      	mov	r2, r6
 8005eca:	4629      	mov	r1, r5
 8005ecc:	4620      	mov	r0, r4
 8005ece:	f000 f92c 	bl	800612a <xTaskCreate>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d001      	beq.n	8005edc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	e000      	b.n	8005ede <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005edc:	68fb      	ldr	r3, [r7, #12]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ee6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b084      	sub	sp, #16
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <osDelay+0x16>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	e000      	b.n	8005efe <osDelay+0x18>
 8005efc:	2301      	movs	r3, #1
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 fa48 	bl	8006394 <vTaskDelay>
  
  return osOK;
 8005f04:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b083      	sub	sp, #12
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f103 0208 	add.w	r2, r3, #8
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f04f 32ff 	mov.w	r2, #4294967295
 8005f26:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f103 0208 	add.w	r2, r3, #8
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f103 0208 	add.w	r2, r3, #8
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f42:	bf00      	nop
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b083      	sub	sp, #12
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	689a      	ldr	r2, [r3, #8]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	601a      	str	r2, [r3, #0]
}
 8005fa4:	bf00      	nop
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc6:	d103      	bne.n	8005fd0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	e00c      	b.n	8005fea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	3308      	adds	r3, #8
 8005fd4:	60fb      	str	r3, [r7, #12]
 8005fd6:	e002      	b.n	8005fde <vListInsert+0x2e>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	60fb      	str	r3, [r7, #12]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d2f6      	bcs.n	8005fd8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	601a      	str	r2, [r3, #0]
}
 8006016:	bf00      	nop
 8006018:	3714      	adds	r7, #20
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006022:	b480      	push	{r7}
 8006024:	b085      	sub	sp, #20
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	6892      	ldr	r2, [r2, #8]
 8006038:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6852      	ldr	r2, [r2, #4]
 8006042:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	429a      	cmp	r2, r3
 800604c:	d103      	bne.n	8006056 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	689a      	ldr	r2, [r3, #8]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	1e5a      	subs	r2, r3, #1
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006076:	b580      	push	{r7, lr}
 8006078:	b08e      	sub	sp, #56	; 0x38
 800607a:	af04      	add	r7, sp, #16
 800607c:	60f8      	str	r0, [r7, #12]
 800607e:	60b9      	str	r1, [r7, #8]
 8006080:	607a      	str	r2, [r7, #4]
 8006082:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006086:	2b00      	cmp	r3, #0
 8006088:	d109      	bne.n	800609e <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800608a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	623b      	str	r3, [r7, #32]
 800609c:	e7fe      	b.n	800609c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800609e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d109      	bne.n	80060b8 <xTaskCreateStatic+0x42>
 80060a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a8:	f383 8811 	msr	BASEPRI, r3
 80060ac:	f3bf 8f6f 	isb	sy
 80060b0:	f3bf 8f4f 	dsb	sy
 80060b4:	61fb      	str	r3, [r7, #28]
 80060b6:	e7fe      	b.n	80060b6 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060b8:	2354      	movs	r3, #84	; 0x54
 80060ba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	2b54      	cmp	r3, #84	; 0x54
 80060c0:	d009      	beq.n	80060d6 <xTaskCreateStatic+0x60>
 80060c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	61bb      	str	r3, [r7, #24]
 80060d4:	e7fe      	b.n	80060d4 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d01e      	beq.n	800611c <xTaskCreateStatic+0xa6>
 80060de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d01b      	beq.n	800611c <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	2202      	movs	r2, #2
 80060f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060f6:	2300      	movs	r3, #0
 80060f8:	9303      	str	r3, [sp, #12]
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	9302      	str	r3, [sp, #8]
 80060fe:	f107 0314 	add.w	r3, r7, #20
 8006102:	9301      	str	r3, [sp, #4]
 8006104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	68b9      	ldr	r1, [r7, #8]
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f000 f850 	bl	80061b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006114:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006116:	f000 f8d3 	bl	80062c0 <prvAddNewTaskToReadyList>
 800611a:	e001      	b.n	8006120 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800611c:	2300      	movs	r3, #0
 800611e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006120:	697b      	ldr	r3, [r7, #20]
	}
 8006122:	4618      	mov	r0, r3
 8006124:	3728      	adds	r7, #40	; 0x28
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800612a:	b580      	push	{r7, lr}
 800612c:	b08c      	sub	sp, #48	; 0x30
 800612e:	af04      	add	r7, sp, #16
 8006130:	60f8      	str	r0, [r7, #12]
 8006132:	60b9      	str	r1, [r7, #8]
 8006134:	603b      	str	r3, [r7, #0]
 8006136:	4613      	mov	r3, r2
 8006138:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800613a:	88fb      	ldrh	r3, [r7, #6]
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4618      	mov	r0, r3
 8006140:	f000 feb0 	bl	8006ea4 <pvPortMalloc>
 8006144:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00e      	beq.n	800616a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800614c:	2054      	movs	r0, #84	; 0x54
 800614e:	f000 fea9 	bl	8006ea4 <pvPortMalloc>
 8006152:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	631a      	str	r2, [r3, #48]	; 0x30
 8006160:	e005      	b.n	800616e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006162:	6978      	ldr	r0, [r7, #20]
 8006164:	f000 ff60 	bl	8007028 <vPortFree>
 8006168:	e001      	b.n	800616e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800616a:	2300      	movs	r3, #0
 800616c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d017      	beq.n	80061a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800617c:	88fa      	ldrh	r2, [r7, #6]
 800617e:	2300      	movs	r3, #0
 8006180:	9303      	str	r3, [sp, #12]
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	9302      	str	r3, [sp, #8]
 8006186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006188:	9301      	str	r3, [sp, #4]
 800618a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	68b9      	ldr	r1, [r7, #8]
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 f80e 	bl	80061b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006198:	69f8      	ldr	r0, [r7, #28]
 800619a:	f000 f891 	bl	80062c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800619e:	2301      	movs	r3, #1
 80061a0:	61bb      	str	r3, [r7, #24]
 80061a2:	e002      	b.n	80061aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061a4:	f04f 33ff 	mov.w	r3, #4294967295
 80061a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061aa:	69bb      	ldr	r3, [r7, #24]
	}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3720      	adds	r7, #32
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b088      	sub	sp, #32
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
 80061c0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80061cc:	3b01      	subs	r3, #1
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	f023 0307 	bic.w	r3, r3, #7
 80061da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	f003 0307 	and.w	r3, r3, #7
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d009      	beq.n	80061fa <prvInitialiseNewTask+0x46>
 80061e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	617b      	str	r3, [r7, #20]
 80061f8:	e7fe      	b.n	80061f8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d01f      	beq.n	8006240 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006200:	2300      	movs	r3, #0
 8006202:	61fb      	str	r3, [r7, #28]
 8006204:	e012      	b.n	800622c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	4413      	add	r3, r2
 800620c:	7819      	ldrb	r1, [r3, #0]
 800620e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	4413      	add	r3, r2
 8006214:	3334      	adds	r3, #52	; 0x34
 8006216:	460a      	mov	r2, r1
 8006218:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	4413      	add	r3, r2
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d006      	beq.n	8006234 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	3301      	adds	r3, #1
 800622a:	61fb      	str	r3, [r7, #28]
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	2b0f      	cmp	r3, #15
 8006230:	d9e9      	bls.n	8006206 <prvInitialiseNewTask+0x52>
 8006232:	e000      	b.n	8006236 <prvInitialiseNewTask+0x82>
			{
				break;
 8006234:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800623e:	e003      	b.n	8006248 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624a:	2b06      	cmp	r3, #6
 800624c:	d901      	bls.n	8006252 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800624e:	2306      	movs	r3, #6
 8006250:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006256:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800625c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800625e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006260:	2200      	movs	r2, #0
 8006262:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006266:	3304      	adds	r3, #4
 8006268:	4618      	mov	r0, r3
 800626a:	f7ff fe70 	bl	8005f4e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800626e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006270:	3318      	adds	r3, #24
 8006272:	4618      	mov	r0, r3
 8006274:	f7ff fe6b 	bl	8005f4e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800627c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800627e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006280:	f1c3 0207 	rsb	r2, r3, #7
 8006284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006286:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800628c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800628e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006290:	2200      	movs	r2, #0
 8006292:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006296:	2200      	movs	r2, #0
 8006298:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	68f9      	ldr	r1, [r7, #12]
 80062a0:	69b8      	ldr	r0, [r7, #24]
 80062a2:	f000 fbfd 	bl	8006aa0 <pxPortInitialiseStack>
 80062a6:	4602      	mov	r2, r0
 80062a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80062ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062b8:	bf00      	nop
 80062ba:	3720      	adds	r7, #32
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80062c8:	f000 fd10 	bl	8006cec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80062cc:	4b2a      	ldr	r3, [pc, #168]	; (8006378 <prvAddNewTaskToReadyList+0xb8>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3301      	adds	r3, #1
 80062d2:	4a29      	ldr	r2, [pc, #164]	; (8006378 <prvAddNewTaskToReadyList+0xb8>)
 80062d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80062d6:	4b29      	ldr	r3, [pc, #164]	; (800637c <prvAddNewTaskToReadyList+0xbc>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d109      	bne.n	80062f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80062de:	4a27      	ldr	r2, [pc, #156]	; (800637c <prvAddNewTaskToReadyList+0xbc>)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062e4:	4b24      	ldr	r3, [pc, #144]	; (8006378 <prvAddNewTaskToReadyList+0xb8>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d110      	bne.n	800630e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80062ec:	f000 fab8 	bl	8006860 <prvInitialiseTaskLists>
 80062f0:	e00d      	b.n	800630e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80062f2:	4b23      	ldr	r3, [pc, #140]	; (8006380 <prvAddNewTaskToReadyList+0xc0>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d109      	bne.n	800630e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80062fa:	4b20      	ldr	r3, [pc, #128]	; (800637c <prvAddNewTaskToReadyList+0xbc>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006304:	429a      	cmp	r2, r3
 8006306:	d802      	bhi.n	800630e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006308:	4a1c      	ldr	r2, [pc, #112]	; (800637c <prvAddNewTaskToReadyList+0xbc>)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800630e:	4b1d      	ldr	r3, [pc, #116]	; (8006384 <prvAddNewTaskToReadyList+0xc4>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	3301      	adds	r3, #1
 8006314:	4a1b      	ldr	r2, [pc, #108]	; (8006384 <prvAddNewTaskToReadyList+0xc4>)
 8006316:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631c:	2201      	movs	r2, #1
 800631e:	409a      	lsls	r2, r3
 8006320:	4b19      	ldr	r3, [pc, #100]	; (8006388 <prvAddNewTaskToReadyList+0xc8>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4313      	orrs	r3, r2
 8006326:	4a18      	ldr	r2, [pc, #96]	; (8006388 <prvAddNewTaskToReadyList+0xc8>)
 8006328:	6013      	str	r3, [r2, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632e:	4613      	mov	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4a15      	ldr	r2, [pc, #84]	; (800638c <prvAddNewTaskToReadyList+0xcc>)
 8006338:	441a      	add	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	3304      	adds	r3, #4
 800633e:	4619      	mov	r1, r3
 8006340:	4610      	mov	r0, r2
 8006342:	f7ff fe11 	bl	8005f68 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006346:	f000 fcff 	bl	8006d48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800634a:	4b0d      	ldr	r3, [pc, #52]	; (8006380 <prvAddNewTaskToReadyList+0xc0>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00e      	beq.n	8006370 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006352:	4b0a      	ldr	r3, [pc, #40]	; (800637c <prvAddNewTaskToReadyList+0xbc>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635c:	429a      	cmp	r2, r3
 800635e:	d207      	bcs.n	8006370 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006360:	4b0b      	ldr	r3, [pc, #44]	; (8006390 <prvAddNewTaskToReadyList+0xd0>)
 8006362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006366:	601a      	str	r2, [r3, #0]
 8006368:	f3bf 8f4f 	dsb	sy
 800636c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006370:	bf00      	nop
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	200003f0 	.word	0x200003f0
 800637c:	200002f0 	.word	0x200002f0
 8006380:	200003fc 	.word	0x200003fc
 8006384:	2000040c 	.word	0x2000040c
 8006388:	200003f8 	.word	0x200003f8
 800638c:	200002f4 	.word	0x200002f4
 8006390:	e000ed04 	.word	0xe000ed04

08006394 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800639c:	2300      	movs	r3, #0
 800639e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d016      	beq.n	80063d4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80063a6:	4b13      	ldr	r3, [pc, #76]	; (80063f4 <vTaskDelay+0x60>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d009      	beq.n	80063c2 <vTaskDelay+0x2e>
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	60bb      	str	r3, [r7, #8]
 80063c0:	e7fe      	b.n	80063c0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80063c2:	f000 f879 	bl	80064b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063c6:	2100      	movs	r1, #0
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fb03 	bl	80069d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80063ce:	f000 f881 	bl	80064d4 <xTaskResumeAll>
 80063d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d107      	bne.n	80063ea <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80063da:	4b07      	ldr	r3, [pc, #28]	; (80063f8 <vTaskDelay+0x64>)
 80063dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063e0:	601a      	str	r2, [r3, #0]
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80063ea:	bf00      	nop
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	20000418 	.word	0x20000418
 80063f8:	e000ed04 	.word	0xe000ed04

080063fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b08a      	sub	sp, #40	; 0x28
 8006400:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006402:	2300      	movs	r3, #0
 8006404:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006406:	2300      	movs	r3, #0
 8006408:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800640a:	463a      	mov	r2, r7
 800640c:	1d39      	adds	r1, r7, #4
 800640e:	f107 0308 	add.w	r3, r7, #8
 8006412:	4618      	mov	r0, r3
 8006414:	f7fb fe9c 	bl	8002150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006418:	6839      	ldr	r1, [r7, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	9202      	str	r2, [sp, #8]
 8006420:	9301      	str	r3, [sp, #4]
 8006422:	2300      	movs	r3, #0
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	2300      	movs	r3, #0
 8006428:	460a      	mov	r2, r1
 800642a:	491d      	ldr	r1, [pc, #116]	; (80064a0 <vTaskStartScheduler+0xa4>)
 800642c:	481d      	ldr	r0, [pc, #116]	; (80064a4 <vTaskStartScheduler+0xa8>)
 800642e:	f7ff fe22 	bl	8006076 <xTaskCreateStatic>
 8006432:	4602      	mov	r2, r0
 8006434:	4b1c      	ldr	r3, [pc, #112]	; (80064a8 <vTaskStartScheduler+0xac>)
 8006436:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006438:	4b1b      	ldr	r3, [pc, #108]	; (80064a8 <vTaskStartScheduler+0xac>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d002      	beq.n	8006446 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006440:	2301      	movs	r3, #1
 8006442:	617b      	str	r3, [r7, #20]
 8006444:	e001      	b.n	800644a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006446:	2300      	movs	r3, #0
 8006448:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d115      	bne.n	800647c <vTaskStartScheduler+0x80>
 8006450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006462:	4b12      	ldr	r3, [pc, #72]	; (80064ac <vTaskStartScheduler+0xb0>)
 8006464:	f04f 32ff 	mov.w	r2, #4294967295
 8006468:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800646a:	4b11      	ldr	r3, [pc, #68]	; (80064b0 <vTaskStartScheduler+0xb4>)
 800646c:	2201      	movs	r2, #1
 800646e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006470:	4b10      	ldr	r3, [pc, #64]	; (80064b4 <vTaskStartScheduler+0xb8>)
 8006472:	2200      	movs	r2, #0
 8006474:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006476:	f000 fb9b 	bl	8006bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800647a:	e00d      	b.n	8006498 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006482:	d109      	bne.n	8006498 <vTaskStartScheduler+0x9c>
 8006484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	60fb      	str	r3, [r7, #12]
 8006496:	e7fe      	b.n	8006496 <vTaskStartScheduler+0x9a>
}
 8006498:	bf00      	nop
 800649a:	3718      	adds	r7, #24
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	080077b0 	.word	0x080077b0
 80064a4:	08006831 	.word	0x08006831
 80064a8:	20000414 	.word	0x20000414
 80064ac:	20000410 	.word	0x20000410
 80064b0:	200003fc 	.word	0x200003fc
 80064b4:	200003f4 	.word	0x200003f4

080064b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80064b8:	b480      	push	{r7}
 80064ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80064bc:	4b04      	ldr	r3, [pc, #16]	; (80064d0 <vTaskSuspendAll+0x18>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3301      	adds	r3, #1
 80064c2:	4a03      	ldr	r2, [pc, #12]	; (80064d0 <vTaskSuspendAll+0x18>)
 80064c4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80064c6:	bf00      	nop
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	20000418 	.word	0x20000418

080064d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80064da:	2300      	movs	r3, #0
 80064dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80064de:	2300      	movs	r3, #0
 80064e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80064e2:	4b41      	ldr	r3, [pc, #260]	; (80065e8 <xTaskResumeAll+0x114>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d109      	bne.n	80064fe <xTaskResumeAll+0x2a>
 80064ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ee:	f383 8811 	msr	BASEPRI, r3
 80064f2:	f3bf 8f6f 	isb	sy
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	603b      	str	r3, [r7, #0]
 80064fc:	e7fe      	b.n	80064fc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80064fe:	f000 fbf5 	bl	8006cec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006502:	4b39      	ldr	r3, [pc, #228]	; (80065e8 <xTaskResumeAll+0x114>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	3b01      	subs	r3, #1
 8006508:	4a37      	ldr	r2, [pc, #220]	; (80065e8 <xTaskResumeAll+0x114>)
 800650a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800650c:	4b36      	ldr	r3, [pc, #216]	; (80065e8 <xTaskResumeAll+0x114>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d161      	bne.n	80065d8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006514:	4b35      	ldr	r3, [pc, #212]	; (80065ec <xTaskResumeAll+0x118>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d05d      	beq.n	80065d8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800651c:	e02e      	b.n	800657c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800651e:	4b34      	ldr	r3, [pc, #208]	; (80065f0 <xTaskResumeAll+0x11c>)
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	3318      	adds	r3, #24
 800652a:	4618      	mov	r0, r3
 800652c:	f7ff fd79 	bl	8006022 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	3304      	adds	r3, #4
 8006534:	4618      	mov	r0, r3
 8006536:	f7ff fd74 	bl	8006022 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653e:	2201      	movs	r2, #1
 8006540:	409a      	lsls	r2, r3
 8006542:	4b2c      	ldr	r3, [pc, #176]	; (80065f4 <xTaskResumeAll+0x120>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4313      	orrs	r3, r2
 8006548:	4a2a      	ldr	r2, [pc, #168]	; (80065f4 <xTaskResumeAll+0x120>)
 800654a:	6013      	str	r3, [r2, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006550:	4613      	mov	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	4413      	add	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4a27      	ldr	r2, [pc, #156]	; (80065f8 <xTaskResumeAll+0x124>)
 800655a:	441a      	add	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	3304      	adds	r3, #4
 8006560:	4619      	mov	r1, r3
 8006562:	4610      	mov	r0, r2
 8006564:	f7ff fd00 	bl	8005f68 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800656c:	4b23      	ldr	r3, [pc, #140]	; (80065fc <xTaskResumeAll+0x128>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006572:	429a      	cmp	r2, r3
 8006574:	d302      	bcc.n	800657c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006576:	4b22      	ldr	r3, [pc, #136]	; (8006600 <xTaskResumeAll+0x12c>)
 8006578:	2201      	movs	r2, #1
 800657a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800657c:	4b1c      	ldr	r3, [pc, #112]	; (80065f0 <xTaskResumeAll+0x11c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1cc      	bne.n	800651e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800658a:	f000 fa03 	bl	8006994 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800658e:	4b1d      	ldr	r3, [pc, #116]	; (8006604 <xTaskResumeAll+0x130>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d010      	beq.n	80065bc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800659a:	f000 f837 	bl	800660c <xTaskIncrementTick>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d002      	beq.n	80065aa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80065a4:	4b16      	ldr	r3, [pc, #88]	; (8006600 <xTaskResumeAll+0x12c>)
 80065a6:	2201      	movs	r2, #1
 80065a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	3b01      	subs	r3, #1
 80065ae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1f1      	bne.n	800659a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80065b6:	4b13      	ldr	r3, [pc, #76]	; (8006604 <xTaskResumeAll+0x130>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80065bc:	4b10      	ldr	r3, [pc, #64]	; (8006600 <xTaskResumeAll+0x12c>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d009      	beq.n	80065d8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80065c4:	2301      	movs	r3, #1
 80065c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80065c8:	4b0f      	ldr	r3, [pc, #60]	; (8006608 <xTaskResumeAll+0x134>)
 80065ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ce:	601a      	str	r2, [r3, #0]
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065d8:	f000 fbb6 	bl	8006d48 <vPortExitCritical>

	return xAlreadyYielded;
 80065dc:	68bb      	ldr	r3, [r7, #8]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	20000418 	.word	0x20000418
 80065ec:	200003f0 	.word	0x200003f0
 80065f0:	200003b0 	.word	0x200003b0
 80065f4:	200003f8 	.word	0x200003f8
 80065f8:	200002f4 	.word	0x200002f4
 80065fc:	200002f0 	.word	0x200002f0
 8006600:	20000404 	.word	0x20000404
 8006604:	20000400 	.word	0x20000400
 8006608:	e000ed04 	.word	0xe000ed04

0800660c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006612:	2300      	movs	r3, #0
 8006614:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006616:	4b4e      	ldr	r3, [pc, #312]	; (8006750 <xTaskIncrementTick+0x144>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	f040 8087 	bne.w	800672e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006620:	4b4c      	ldr	r3, [pc, #304]	; (8006754 <xTaskIncrementTick+0x148>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3301      	adds	r3, #1
 8006626:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006628:	4a4a      	ldr	r2, [pc, #296]	; (8006754 <xTaskIncrementTick+0x148>)
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d11f      	bne.n	8006674 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006634:	4b48      	ldr	r3, [pc, #288]	; (8006758 <xTaskIncrementTick+0x14c>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d009      	beq.n	8006652 <xTaskIncrementTick+0x46>
 800663e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006642:	f383 8811 	msr	BASEPRI, r3
 8006646:	f3bf 8f6f 	isb	sy
 800664a:	f3bf 8f4f 	dsb	sy
 800664e:	603b      	str	r3, [r7, #0]
 8006650:	e7fe      	b.n	8006650 <xTaskIncrementTick+0x44>
 8006652:	4b41      	ldr	r3, [pc, #260]	; (8006758 <xTaskIncrementTick+0x14c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	4b40      	ldr	r3, [pc, #256]	; (800675c <xTaskIncrementTick+0x150>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a3e      	ldr	r2, [pc, #248]	; (8006758 <xTaskIncrementTick+0x14c>)
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	4a3e      	ldr	r2, [pc, #248]	; (800675c <xTaskIncrementTick+0x150>)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6013      	str	r3, [r2, #0]
 8006666:	4b3e      	ldr	r3, [pc, #248]	; (8006760 <xTaskIncrementTick+0x154>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3301      	adds	r3, #1
 800666c:	4a3c      	ldr	r2, [pc, #240]	; (8006760 <xTaskIncrementTick+0x154>)
 800666e:	6013      	str	r3, [r2, #0]
 8006670:	f000 f990 	bl	8006994 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006674:	4b3b      	ldr	r3, [pc, #236]	; (8006764 <xTaskIncrementTick+0x158>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	429a      	cmp	r2, r3
 800667c:	d348      	bcc.n	8006710 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800667e:	4b36      	ldr	r3, [pc, #216]	; (8006758 <xTaskIncrementTick+0x14c>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d104      	bne.n	8006692 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006688:	4b36      	ldr	r3, [pc, #216]	; (8006764 <xTaskIncrementTick+0x158>)
 800668a:	f04f 32ff 	mov.w	r2, #4294967295
 800668e:	601a      	str	r2, [r3, #0]
					break;
 8006690:	e03e      	b.n	8006710 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006692:	4b31      	ldr	r3, [pc, #196]	; (8006758 <xTaskIncrementTick+0x14c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d203      	bcs.n	80066b2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80066aa:	4a2e      	ldr	r2, [pc, #184]	; (8006764 <xTaskIncrementTick+0x158>)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80066b0:	e02e      	b.n	8006710 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	3304      	adds	r3, #4
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7ff fcb3 	bl	8006022 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d004      	beq.n	80066ce <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	3318      	adds	r3, #24
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7ff fcaa 	bl	8006022 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d2:	2201      	movs	r2, #1
 80066d4:	409a      	lsls	r2, r3
 80066d6:	4b24      	ldr	r3, [pc, #144]	; (8006768 <xTaskIncrementTick+0x15c>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4313      	orrs	r3, r2
 80066dc:	4a22      	ldr	r2, [pc, #136]	; (8006768 <xTaskIncrementTick+0x15c>)
 80066de:	6013      	str	r3, [r2, #0]
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e4:	4613      	mov	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4a1f      	ldr	r2, [pc, #124]	; (800676c <xTaskIncrementTick+0x160>)
 80066ee:	441a      	add	r2, r3
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	3304      	adds	r3, #4
 80066f4:	4619      	mov	r1, r3
 80066f6:	4610      	mov	r0, r2
 80066f8:	f7ff fc36 	bl	8005f68 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006700:	4b1b      	ldr	r3, [pc, #108]	; (8006770 <xTaskIncrementTick+0x164>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006706:	429a      	cmp	r2, r3
 8006708:	d3b9      	bcc.n	800667e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800670a:	2301      	movs	r3, #1
 800670c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800670e:	e7b6      	b.n	800667e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006710:	4b17      	ldr	r3, [pc, #92]	; (8006770 <xTaskIncrementTick+0x164>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006716:	4915      	ldr	r1, [pc, #84]	; (800676c <xTaskIncrementTick+0x160>)
 8006718:	4613      	mov	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4413      	add	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	440b      	add	r3, r1
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d907      	bls.n	8006738 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8006728:	2301      	movs	r3, #1
 800672a:	617b      	str	r3, [r7, #20]
 800672c:	e004      	b.n	8006738 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800672e:	4b11      	ldr	r3, [pc, #68]	; (8006774 <xTaskIncrementTick+0x168>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	3301      	adds	r3, #1
 8006734:	4a0f      	ldr	r2, [pc, #60]	; (8006774 <xTaskIncrementTick+0x168>)
 8006736:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006738:	4b0f      	ldr	r3, [pc, #60]	; (8006778 <xTaskIncrementTick+0x16c>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8006740:	2301      	movs	r3, #1
 8006742:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006744:	697b      	ldr	r3, [r7, #20]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3718      	adds	r7, #24
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	20000418 	.word	0x20000418
 8006754:	200003f4 	.word	0x200003f4
 8006758:	200003a8 	.word	0x200003a8
 800675c:	200003ac 	.word	0x200003ac
 8006760:	20000408 	.word	0x20000408
 8006764:	20000410 	.word	0x20000410
 8006768:	200003f8 	.word	0x200003f8
 800676c:	200002f4 	.word	0x200002f4
 8006770:	200002f0 	.word	0x200002f0
 8006774:	20000400 	.word	0x20000400
 8006778:	20000404 	.word	0x20000404

0800677c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006782:	4b26      	ldr	r3, [pc, #152]	; (800681c <vTaskSwitchContext+0xa0>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800678a:	4b25      	ldr	r3, [pc, #148]	; (8006820 <vTaskSwitchContext+0xa4>)
 800678c:	2201      	movs	r2, #1
 800678e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006790:	e03e      	b.n	8006810 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006792:	4b23      	ldr	r3, [pc, #140]	; (8006820 <vTaskSwitchContext+0xa4>)
 8006794:	2200      	movs	r2, #0
 8006796:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006798:	4b22      	ldr	r3, [pc, #136]	; (8006824 <vTaskSwitchContext+0xa8>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	fab3 f383 	clz	r3, r3
 80067a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80067a6:	7afb      	ldrb	r3, [r7, #11]
 80067a8:	f1c3 031f 	rsb	r3, r3, #31
 80067ac:	617b      	str	r3, [r7, #20]
 80067ae:	491e      	ldr	r1, [pc, #120]	; (8006828 <vTaskSwitchContext+0xac>)
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	4613      	mov	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4413      	add	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	440b      	add	r3, r1
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d109      	bne.n	80067d6 <vTaskSwitchContext+0x5a>
	__asm volatile
 80067c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	607b      	str	r3, [r7, #4]
 80067d4:	e7fe      	b.n	80067d4 <vTaskSwitchContext+0x58>
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	4613      	mov	r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4a11      	ldr	r2, [pc, #68]	; (8006828 <vTaskSwitchContext+0xac>)
 80067e2:	4413      	add	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	605a      	str	r2, [r3, #4]
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	685a      	ldr	r2, [r3, #4]
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	3308      	adds	r3, #8
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d104      	bne.n	8006806 <vTaskSwitchContext+0x8a>
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	605a      	str	r2, [r3, #4]
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	4a07      	ldr	r2, [pc, #28]	; (800682c <vTaskSwitchContext+0xb0>)
 800680e:	6013      	str	r3, [r2, #0]
}
 8006810:	bf00      	nop
 8006812:	371c      	adds	r7, #28
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	20000418 	.word	0x20000418
 8006820:	20000404 	.word	0x20000404
 8006824:	200003f8 	.word	0x200003f8
 8006828:	200002f4 	.word	0x200002f4
 800682c:	200002f0 	.word	0x200002f0

08006830 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006838:	f000 f852 	bl	80068e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800683c:	4b06      	ldr	r3, [pc, #24]	; (8006858 <prvIdleTask+0x28>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d9f9      	bls.n	8006838 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006844:	4b05      	ldr	r3, [pc, #20]	; (800685c <prvIdleTask+0x2c>)
 8006846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006854:	e7f0      	b.n	8006838 <prvIdleTask+0x8>
 8006856:	bf00      	nop
 8006858:	200002f4 	.word	0x200002f4
 800685c:	e000ed04 	.word	0xe000ed04

08006860 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006866:	2300      	movs	r3, #0
 8006868:	607b      	str	r3, [r7, #4]
 800686a:	e00c      	b.n	8006886 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	4613      	mov	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4a12      	ldr	r2, [pc, #72]	; (80068c0 <prvInitialiseTaskLists+0x60>)
 8006878:	4413      	add	r3, r2
 800687a:	4618      	mov	r0, r3
 800687c:	f7ff fb47 	bl	8005f0e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	3301      	adds	r3, #1
 8006884:	607b      	str	r3, [r7, #4]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b06      	cmp	r3, #6
 800688a:	d9ef      	bls.n	800686c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800688c:	480d      	ldr	r0, [pc, #52]	; (80068c4 <prvInitialiseTaskLists+0x64>)
 800688e:	f7ff fb3e 	bl	8005f0e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006892:	480d      	ldr	r0, [pc, #52]	; (80068c8 <prvInitialiseTaskLists+0x68>)
 8006894:	f7ff fb3b 	bl	8005f0e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006898:	480c      	ldr	r0, [pc, #48]	; (80068cc <prvInitialiseTaskLists+0x6c>)
 800689a:	f7ff fb38 	bl	8005f0e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800689e:	480c      	ldr	r0, [pc, #48]	; (80068d0 <prvInitialiseTaskLists+0x70>)
 80068a0:	f7ff fb35 	bl	8005f0e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80068a4:	480b      	ldr	r0, [pc, #44]	; (80068d4 <prvInitialiseTaskLists+0x74>)
 80068a6:	f7ff fb32 	bl	8005f0e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80068aa:	4b0b      	ldr	r3, [pc, #44]	; (80068d8 <prvInitialiseTaskLists+0x78>)
 80068ac:	4a05      	ldr	r2, [pc, #20]	; (80068c4 <prvInitialiseTaskLists+0x64>)
 80068ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068b0:	4b0a      	ldr	r3, [pc, #40]	; (80068dc <prvInitialiseTaskLists+0x7c>)
 80068b2:	4a05      	ldr	r2, [pc, #20]	; (80068c8 <prvInitialiseTaskLists+0x68>)
 80068b4:	601a      	str	r2, [r3, #0]
}
 80068b6:	bf00      	nop
 80068b8:	3708      	adds	r7, #8
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	200002f4 	.word	0x200002f4
 80068c4:	20000380 	.word	0x20000380
 80068c8:	20000394 	.word	0x20000394
 80068cc:	200003b0 	.word	0x200003b0
 80068d0:	200003c4 	.word	0x200003c4
 80068d4:	200003dc 	.word	0x200003dc
 80068d8:	200003a8 	.word	0x200003a8
 80068dc:	200003ac 	.word	0x200003ac

080068e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068e6:	e019      	b.n	800691c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80068e8:	f000 fa00 	bl	8006cec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068ec:	4b0f      	ldr	r3, [pc, #60]	; (800692c <prvCheckTasksWaitingTermination+0x4c>)
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	3304      	adds	r3, #4
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7ff fb92 	bl	8006022 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80068fe:	4b0c      	ldr	r3, [pc, #48]	; (8006930 <prvCheckTasksWaitingTermination+0x50>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3b01      	subs	r3, #1
 8006904:	4a0a      	ldr	r2, [pc, #40]	; (8006930 <prvCheckTasksWaitingTermination+0x50>)
 8006906:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006908:	4b0a      	ldr	r3, [pc, #40]	; (8006934 <prvCheckTasksWaitingTermination+0x54>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	3b01      	subs	r3, #1
 800690e:	4a09      	ldr	r2, [pc, #36]	; (8006934 <prvCheckTasksWaitingTermination+0x54>)
 8006910:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006912:	f000 fa19 	bl	8006d48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f80e 	bl	8006938 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800691c:	4b05      	ldr	r3, [pc, #20]	; (8006934 <prvCheckTasksWaitingTermination+0x54>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1e1      	bne.n	80068e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006924:	bf00      	nop
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	200003c4 	.word	0x200003c4
 8006930:	200003f0 	.word	0x200003f0
 8006934:	200003d8 	.word	0x200003d8

08006938 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006946:	2b00      	cmp	r3, #0
 8006948:	d108      	bne.n	800695c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694e:	4618      	mov	r0, r3
 8006950:	f000 fb6a 	bl	8007028 <vPortFree>
				vPortFree( pxTCB );
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fb67 	bl	8007028 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800695a:	e017      	b.n	800698c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006962:	2b01      	cmp	r3, #1
 8006964:	d103      	bne.n	800696e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fb5e 	bl	8007028 <vPortFree>
	}
 800696c:	e00e      	b.n	800698c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006974:	2b02      	cmp	r3, #2
 8006976:	d009      	beq.n	800698c <prvDeleteTCB+0x54>
 8006978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697c:	f383 8811 	msr	BASEPRI, r3
 8006980:	f3bf 8f6f 	isb	sy
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	60fb      	str	r3, [r7, #12]
 800698a:	e7fe      	b.n	800698a <prvDeleteTCB+0x52>
	}
 800698c:	bf00      	nop
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800699a:	4b0c      	ldr	r3, [pc, #48]	; (80069cc <prvResetNextTaskUnblockTime+0x38>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d104      	bne.n	80069ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069a4:	4b0a      	ldr	r3, [pc, #40]	; (80069d0 <prvResetNextTaskUnblockTime+0x3c>)
 80069a6:	f04f 32ff 	mov.w	r2, #4294967295
 80069aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80069ac:	e008      	b.n	80069c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069ae:	4b07      	ldr	r3, [pc, #28]	; (80069cc <prvResetNextTaskUnblockTime+0x38>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	4a04      	ldr	r2, [pc, #16]	; (80069d0 <prvResetNextTaskUnblockTime+0x3c>)
 80069be:	6013      	str	r3, [r2, #0]
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	200003a8 	.word	0x200003a8
 80069d0:	20000410 	.word	0x20000410

080069d4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80069de:	4b29      	ldr	r3, [pc, #164]	; (8006a84 <prvAddCurrentTaskToDelayedList+0xb0>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069e4:	4b28      	ldr	r3, [pc, #160]	; (8006a88 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	3304      	adds	r3, #4
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7ff fb19 	bl	8006022 <uxListRemove>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10b      	bne.n	8006a0e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80069f6:	4b24      	ldr	r3, [pc, #144]	; (8006a88 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fc:	2201      	movs	r2, #1
 80069fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006a02:	43da      	mvns	r2, r3
 8006a04:	4b21      	ldr	r3, [pc, #132]	; (8006a8c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4013      	ands	r3, r2
 8006a0a:	4a20      	ldr	r2, [pc, #128]	; (8006a8c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a0c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a14:	d10a      	bne.n	8006a2c <prvAddCurrentTaskToDelayedList+0x58>
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d007      	beq.n	8006a2c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a1c:	4b1a      	ldr	r3, [pc, #104]	; (8006a88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	3304      	adds	r3, #4
 8006a22:	4619      	mov	r1, r3
 8006a24:	481a      	ldr	r0, [pc, #104]	; (8006a90 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006a26:	f7ff fa9f 	bl	8005f68 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a2a:	e026      	b.n	8006a7a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4413      	add	r3, r2
 8006a32:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a34:	4b14      	ldr	r3, [pc, #80]	; (8006a88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d209      	bcs.n	8006a58 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a44:	4b13      	ldr	r3, [pc, #76]	; (8006a94 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	4b0f      	ldr	r3, [pc, #60]	; (8006a88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3304      	adds	r3, #4
 8006a4e:	4619      	mov	r1, r3
 8006a50:	4610      	mov	r0, r2
 8006a52:	f7ff faad 	bl	8005fb0 <vListInsert>
}
 8006a56:	e010      	b.n	8006a7a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a58:	4b0f      	ldr	r3, [pc, #60]	; (8006a98 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	4b0a      	ldr	r3, [pc, #40]	; (8006a88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3304      	adds	r3, #4
 8006a62:	4619      	mov	r1, r3
 8006a64:	4610      	mov	r0, r2
 8006a66:	f7ff faa3 	bl	8005fb0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a6a:	4b0c      	ldr	r3, [pc, #48]	; (8006a9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d202      	bcs.n	8006a7a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006a74:	4a09      	ldr	r2, [pc, #36]	; (8006a9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	6013      	str	r3, [r2, #0]
}
 8006a7a:	bf00      	nop
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	200003f4 	.word	0x200003f4
 8006a88:	200002f0 	.word	0x200002f0
 8006a8c:	200003f8 	.word	0x200003f8
 8006a90:	200003dc 	.word	0x200003dc
 8006a94:	200003ac 	.word	0x200003ac
 8006a98:	200003a8 	.word	0x200003a8
 8006a9c:	20000410 	.word	0x20000410

08006aa0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	3b04      	subs	r3, #4
 8006ab0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ab8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	3b04      	subs	r3, #4
 8006abe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f023 0201 	bic.w	r2, r3, #1
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	3b04      	subs	r3, #4
 8006ace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ad0:	4a0c      	ldr	r2, [pc, #48]	; (8006b04 <pxPortInitialiseStack+0x64>)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	3b14      	subs	r3, #20
 8006ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3b04      	subs	r3, #4
 8006ae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f06f 0202 	mvn.w	r2, #2
 8006aee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	3b20      	subs	r3, #32
 8006af4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006af6:	68fb      	ldr	r3, [r7, #12]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr
 8006b04:	08006b09 	.word	0x08006b09

08006b08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b12:	4b11      	ldr	r3, [pc, #68]	; (8006b58 <prvTaskExitError+0x50>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1a:	d009      	beq.n	8006b30 <prvTaskExitError+0x28>
 8006b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	60fb      	str	r3, [r7, #12]
 8006b2e:	e7fe      	b.n	8006b2e <prvTaskExitError+0x26>
 8006b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006b42:	bf00      	nop
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d0fc      	beq.n	8006b44 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006b4a:	bf00      	nop
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	2000000c 	.word	0x2000000c
 8006b5c:	00000000 	.word	0x00000000

08006b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006b60:	4b07      	ldr	r3, [pc, #28]	; (8006b80 <pxCurrentTCBConst2>)
 8006b62:	6819      	ldr	r1, [r3, #0]
 8006b64:	6808      	ldr	r0, [r1, #0]
 8006b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6a:	f380 8809 	msr	PSP, r0
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f04f 0000 	mov.w	r0, #0
 8006b76:	f380 8811 	msr	BASEPRI, r0
 8006b7a:	4770      	bx	lr
 8006b7c:	f3af 8000 	nop.w

08006b80 <pxCurrentTCBConst2>:
 8006b80:	200002f0 	.word	0x200002f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b84:	bf00      	nop
 8006b86:	bf00      	nop

08006b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006b88:	4808      	ldr	r0, [pc, #32]	; (8006bac <prvPortStartFirstTask+0x24>)
 8006b8a:	6800      	ldr	r0, [r0, #0]
 8006b8c:	6800      	ldr	r0, [r0, #0]
 8006b8e:	f380 8808 	msr	MSP, r0
 8006b92:	f04f 0000 	mov.w	r0, #0
 8006b96:	f380 8814 	msr	CONTROL, r0
 8006b9a:	b662      	cpsie	i
 8006b9c:	b661      	cpsie	f
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	df00      	svc	0
 8006ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006baa:	bf00      	nop
 8006bac:	e000ed08 	.word	0xe000ed08

08006bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006bb6:	4b44      	ldr	r3, [pc, #272]	; (8006cc8 <xPortStartScheduler+0x118>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a44      	ldr	r2, [pc, #272]	; (8006ccc <xPortStartScheduler+0x11c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d109      	bne.n	8006bd4 <xPortStartScheduler+0x24>
 8006bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	613b      	str	r3, [r7, #16]
 8006bd2:	e7fe      	b.n	8006bd2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006bd4:	4b3c      	ldr	r3, [pc, #240]	; (8006cc8 <xPortStartScheduler+0x118>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a3d      	ldr	r2, [pc, #244]	; (8006cd0 <xPortStartScheduler+0x120>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d109      	bne.n	8006bf2 <xPortStartScheduler+0x42>
 8006bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	e7fe      	b.n	8006bf0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006bf2:	4b38      	ldr	r3, [pc, #224]	; (8006cd4 <xPortStartScheduler+0x124>)
 8006bf4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	22ff      	movs	r2, #255	; 0xff
 8006c02:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c0c:	78fb      	ldrb	r3, [r7, #3]
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	4b30      	ldr	r3, [pc, #192]	; (8006cd8 <xPortStartScheduler+0x128>)
 8006c18:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c1a:	4b30      	ldr	r3, [pc, #192]	; (8006cdc <xPortStartScheduler+0x12c>)
 8006c1c:	2207      	movs	r2, #7
 8006c1e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c20:	e009      	b.n	8006c36 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006c22:	4b2e      	ldr	r3, [pc, #184]	; (8006cdc <xPortStartScheduler+0x12c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	4a2c      	ldr	r2, [pc, #176]	; (8006cdc <xPortStartScheduler+0x12c>)
 8006c2a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c2c:	78fb      	ldrb	r3, [r7, #3]
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	005b      	lsls	r3, r3, #1
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c36:	78fb      	ldrb	r3, [r7, #3]
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c3e:	2b80      	cmp	r3, #128	; 0x80
 8006c40:	d0ef      	beq.n	8006c22 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c42:	4b26      	ldr	r3, [pc, #152]	; (8006cdc <xPortStartScheduler+0x12c>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f1c3 0307 	rsb	r3, r3, #7
 8006c4a:	2b04      	cmp	r3, #4
 8006c4c:	d009      	beq.n	8006c62 <xPortStartScheduler+0xb2>
 8006c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c52:	f383 8811 	msr	BASEPRI, r3
 8006c56:	f3bf 8f6f 	isb	sy
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	60bb      	str	r3, [r7, #8]
 8006c60:	e7fe      	b.n	8006c60 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c62:	4b1e      	ldr	r3, [pc, #120]	; (8006cdc <xPortStartScheduler+0x12c>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	021b      	lsls	r3, r3, #8
 8006c68:	4a1c      	ldr	r2, [pc, #112]	; (8006cdc <xPortStartScheduler+0x12c>)
 8006c6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c6c:	4b1b      	ldr	r3, [pc, #108]	; (8006cdc <xPortStartScheduler+0x12c>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c74:	4a19      	ldr	r2, [pc, #100]	; (8006cdc <xPortStartScheduler+0x12c>)
 8006c76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c80:	4b17      	ldr	r3, [pc, #92]	; (8006ce0 <xPortStartScheduler+0x130>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a16      	ldr	r2, [pc, #88]	; (8006ce0 <xPortStartScheduler+0x130>)
 8006c86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c8c:	4b14      	ldr	r3, [pc, #80]	; (8006ce0 <xPortStartScheduler+0x130>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a13      	ldr	r2, [pc, #76]	; (8006ce0 <xPortStartScheduler+0x130>)
 8006c92:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006c96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c98:	f000 f8d6 	bl	8006e48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c9c:	4b11      	ldr	r3, [pc, #68]	; (8006ce4 <xPortStartScheduler+0x134>)
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006ca2:	f000 f8f5 	bl	8006e90 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ca6:	4b10      	ldr	r3, [pc, #64]	; (8006ce8 <xPortStartScheduler+0x138>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a0f      	ldr	r2, [pc, #60]	; (8006ce8 <xPortStartScheduler+0x138>)
 8006cac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006cb0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006cb2:	f7ff ff69 	bl	8006b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006cb6:	f7ff fd61 	bl	800677c <vTaskSwitchContext>
	prvTaskExitError();
 8006cba:	f7ff ff25 	bl	8006b08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3718      	adds	r7, #24
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	e000ed00 	.word	0xe000ed00
 8006ccc:	410fc271 	.word	0x410fc271
 8006cd0:	410fc270 	.word	0x410fc270
 8006cd4:	e000e400 	.word	0xe000e400
 8006cd8:	2000041c 	.word	0x2000041c
 8006cdc:	20000420 	.word	0x20000420
 8006ce0:	e000ed20 	.word	0xe000ed20
 8006ce4:	2000000c 	.word	0x2000000c
 8006ce8:	e000ef34 	.word	0xe000ef34

08006cec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d04:	4b0e      	ldr	r3, [pc, #56]	; (8006d40 <vPortEnterCritical+0x54>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	4a0d      	ldr	r2, [pc, #52]	; (8006d40 <vPortEnterCritical+0x54>)
 8006d0c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d0e:	4b0c      	ldr	r3, [pc, #48]	; (8006d40 <vPortEnterCritical+0x54>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d10e      	bne.n	8006d34 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d16:	4b0b      	ldr	r3, [pc, #44]	; (8006d44 <vPortEnterCritical+0x58>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d009      	beq.n	8006d34 <vPortEnterCritical+0x48>
 8006d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d24:	f383 8811 	msr	BASEPRI, r3
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	603b      	str	r3, [r7, #0]
 8006d32:	e7fe      	b.n	8006d32 <vPortEnterCritical+0x46>
	}
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr
 8006d40:	2000000c 	.word	0x2000000c
 8006d44:	e000ed04 	.word	0xe000ed04

08006d48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006d4e:	4b11      	ldr	r3, [pc, #68]	; (8006d94 <vPortExitCritical+0x4c>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d109      	bne.n	8006d6a <vPortExitCritical+0x22>
 8006d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	607b      	str	r3, [r7, #4]
 8006d68:	e7fe      	b.n	8006d68 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006d6a:	4b0a      	ldr	r3, [pc, #40]	; (8006d94 <vPortExitCritical+0x4c>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	4a08      	ldr	r2, [pc, #32]	; (8006d94 <vPortExitCritical+0x4c>)
 8006d72:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d74:	4b07      	ldr	r3, [pc, #28]	; (8006d94 <vPortExitCritical+0x4c>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d104      	bne.n	8006d86 <vPortExitCritical+0x3e>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d86:	bf00      	nop
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	2000000c 	.word	0x2000000c
	...

08006da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006da0:	f3ef 8009 	mrs	r0, PSP
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	4b15      	ldr	r3, [pc, #84]	; (8006e00 <pxCurrentTCBConst>)
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	f01e 0f10 	tst.w	lr, #16
 8006db0:	bf08      	it	eq
 8006db2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006db6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dba:	6010      	str	r0, [r2, #0]
 8006dbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006dc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006dc4:	f380 8811 	msr	BASEPRI, r0
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f7ff fcd4 	bl	800677c <vTaskSwitchContext>
 8006dd4:	f04f 0000 	mov.w	r0, #0
 8006dd8:	f380 8811 	msr	BASEPRI, r0
 8006ddc:	bc09      	pop	{r0, r3}
 8006dde:	6819      	ldr	r1, [r3, #0]
 8006de0:	6808      	ldr	r0, [r1, #0]
 8006de2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de6:	f01e 0f10 	tst.w	lr, #16
 8006dea:	bf08      	it	eq
 8006dec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006df0:	f380 8809 	msr	PSP, r0
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	f3af 8000 	nop.w

08006e00 <pxCurrentTCBConst>:
 8006e00:	200002f0 	.word	0x200002f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e04:	bf00      	nop
 8006e06:	bf00      	nop

08006e08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e20:	f7ff fbf4 	bl	800660c <xTaskIncrementTick>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e2a:	4b06      	ldr	r3, [pc, #24]	; (8006e44 <SysTick_Handler+0x3c>)
 8006e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	2300      	movs	r3, #0
 8006e34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e3c:	bf00      	nop
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	e000ed04 	.word	0xe000ed04

08006e48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006e48:	b480      	push	{r7}
 8006e4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e4c:	4b0b      	ldr	r3, [pc, #44]	; (8006e7c <vPortSetupTimerInterrupt+0x34>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e52:	4b0b      	ldr	r3, [pc, #44]	; (8006e80 <vPortSetupTimerInterrupt+0x38>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e58:	4b0a      	ldr	r3, [pc, #40]	; (8006e84 <vPortSetupTimerInterrupt+0x3c>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a0a      	ldr	r2, [pc, #40]	; (8006e88 <vPortSetupTimerInterrupt+0x40>)
 8006e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e62:	099b      	lsrs	r3, r3, #6
 8006e64:	4a09      	ldr	r2, [pc, #36]	; (8006e8c <vPortSetupTimerInterrupt+0x44>)
 8006e66:	3b01      	subs	r3, #1
 8006e68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e6a:	4b04      	ldr	r3, [pc, #16]	; (8006e7c <vPortSetupTimerInterrupt+0x34>)
 8006e6c:	2207      	movs	r2, #7
 8006e6e:	601a      	str	r2, [r3, #0]
}
 8006e70:	bf00      	nop
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	e000e010 	.word	0xe000e010
 8006e80:	e000e018 	.word	0xe000e018
 8006e84:	20000000 	.word	0x20000000
 8006e88:	10624dd3 	.word	0x10624dd3
 8006e8c:	e000e014 	.word	0xe000e014

08006e90 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006e90:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006ea0 <vPortEnableVFP+0x10>
 8006e94:	6801      	ldr	r1, [r0, #0]
 8006e96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006e9a:	6001      	str	r1, [r0, #0]
 8006e9c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006e9e:	bf00      	nop
 8006ea0:	e000ed88 	.word	0xe000ed88

08006ea4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b08a      	sub	sp, #40	; 0x28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006eac:	2300      	movs	r3, #0
 8006eae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006eb0:	f7ff fb02 	bl	80064b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006eb4:	4b57      	ldr	r3, [pc, #348]	; (8007014 <pvPortMalloc+0x170>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d101      	bne.n	8006ec0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ebc:	f000 f90c 	bl	80070d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ec0:	4b55      	ldr	r3, [pc, #340]	; (8007018 <pvPortMalloc+0x174>)
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f040 808c 	bne.w	8006fe6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d01c      	beq.n	8006f0e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006ed4:	2208      	movs	r2, #8
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4413      	add	r3, r2
 8006eda:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f003 0307 	and.w	r3, r3, #7
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d013      	beq.n	8006f0e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f023 0307 	bic.w	r3, r3, #7
 8006eec:	3308      	adds	r3, #8
 8006eee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f003 0307 	and.w	r3, r3, #7
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d009      	beq.n	8006f0e <pvPortMalloc+0x6a>
	__asm volatile
 8006efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	617b      	str	r3, [r7, #20]
 8006f0c:	e7fe      	b.n	8006f0c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d068      	beq.n	8006fe6 <pvPortMalloc+0x142>
 8006f14:	4b41      	ldr	r3, [pc, #260]	; (800701c <pvPortMalloc+0x178>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d863      	bhi.n	8006fe6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f1e:	4b40      	ldr	r3, [pc, #256]	; (8007020 <pvPortMalloc+0x17c>)
 8006f20:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f22:	4b3f      	ldr	r3, [pc, #252]	; (8007020 <pvPortMalloc+0x17c>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f28:	e004      	b.n	8006f34 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d903      	bls.n	8006f46 <pvPortMalloc+0xa2>
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1f1      	bne.n	8006f2a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f46:	4b33      	ldr	r3, [pc, #204]	; (8007014 <pvPortMalloc+0x170>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d04a      	beq.n	8006fe6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f50:	6a3b      	ldr	r3, [r7, #32]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2208      	movs	r2, #8
 8006f56:	4413      	add	r3, r2
 8006f58:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	1ad2      	subs	r2, r2, r3
 8006f6a:	2308      	movs	r3, #8
 8006f6c:	005b      	lsls	r3, r3, #1
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d91e      	bls.n	8006fb0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4413      	add	r3, r2
 8006f78:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	f003 0307 	and.w	r3, r3, #7
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d009      	beq.n	8006f98 <pvPortMalloc+0xf4>
 8006f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f88:	f383 8811 	msr	BASEPRI, r3
 8006f8c:	f3bf 8f6f 	isb	sy
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	613b      	str	r3, [r7, #16]
 8006f96:	e7fe      	b.n	8006f96 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9a:	685a      	ldr	r2, [r3, #4]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	1ad2      	subs	r2, r2, r3
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006faa:	69b8      	ldr	r0, [r7, #24]
 8006fac:	f000 f8f6 	bl	800719c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006fb0:	4b1a      	ldr	r3, [pc, #104]	; (800701c <pvPortMalloc+0x178>)
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	4a18      	ldr	r2, [pc, #96]	; (800701c <pvPortMalloc+0x178>)
 8006fbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006fbe:	4b17      	ldr	r3, [pc, #92]	; (800701c <pvPortMalloc+0x178>)
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	4b18      	ldr	r3, [pc, #96]	; (8007024 <pvPortMalloc+0x180>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d203      	bcs.n	8006fd2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006fca:	4b14      	ldr	r3, [pc, #80]	; (800701c <pvPortMalloc+0x178>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a15      	ldr	r2, [pc, #84]	; (8007024 <pvPortMalloc+0x180>)
 8006fd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	4b10      	ldr	r3, [pc, #64]	; (8007018 <pvPortMalloc+0x174>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006fe6:	f7ff fa75 	bl	80064d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	f003 0307 	and.w	r3, r3, #7
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d009      	beq.n	8007008 <pvPortMalloc+0x164>
 8006ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	60fb      	str	r3, [r7, #12]
 8007006:	e7fe      	b.n	8007006 <pvPortMalloc+0x162>
	return pvReturn;
 8007008:	69fb      	ldr	r3, [r7, #28]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3728      	adds	r7, #40	; 0x28
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	2000402c 	.word	0x2000402c
 8007018:	20004038 	.word	0x20004038
 800701c:	20004030 	.word	0x20004030
 8007020:	20004024 	.word	0x20004024
 8007024:	20004034 	.word	0x20004034

08007028 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d046      	beq.n	80070c8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800703a:	2308      	movs	r3, #8
 800703c:	425b      	negs	r3, r3
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	4413      	add	r3, r2
 8007042:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	4b20      	ldr	r3, [pc, #128]	; (80070d0 <vPortFree+0xa8>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4013      	ands	r3, r2
 8007052:	2b00      	cmp	r3, #0
 8007054:	d109      	bne.n	800706a <vPortFree+0x42>
 8007056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	60fb      	str	r3, [r7, #12]
 8007068:	e7fe      	b.n	8007068 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d009      	beq.n	8007086 <vPortFree+0x5e>
 8007072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007076:	f383 8811 	msr	BASEPRI, r3
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	60bb      	str	r3, [r7, #8]
 8007084:	e7fe      	b.n	8007084 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	4b11      	ldr	r3, [pc, #68]	; (80070d0 <vPortFree+0xa8>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4013      	ands	r3, r2
 8007090:	2b00      	cmp	r3, #0
 8007092:	d019      	beq.n	80070c8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d115      	bne.n	80070c8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	4b0b      	ldr	r3, [pc, #44]	; (80070d0 <vPortFree+0xa8>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	43db      	mvns	r3, r3
 80070a6:	401a      	ands	r2, r3
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80070ac:	f7ff fa04 	bl	80064b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	4b07      	ldr	r3, [pc, #28]	; (80070d4 <vPortFree+0xac>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4413      	add	r3, r2
 80070ba:	4a06      	ldr	r2, [pc, #24]	; (80070d4 <vPortFree+0xac>)
 80070bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070be:	6938      	ldr	r0, [r7, #16]
 80070c0:	f000 f86c 	bl	800719c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80070c4:	f7ff fa06 	bl	80064d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80070c8:	bf00      	nop
 80070ca:	3718      	adds	r7, #24
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	20004038 	.word	0x20004038
 80070d4:	20004030 	.word	0x20004030

080070d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80070de:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80070e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80070e4:	4b27      	ldr	r3, [pc, #156]	; (8007184 <prvHeapInit+0xac>)
 80070e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f003 0307 	and.w	r3, r3, #7
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00c      	beq.n	800710c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	3307      	adds	r3, #7
 80070f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f023 0307 	bic.w	r3, r3, #7
 80070fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	4a1f      	ldr	r2, [pc, #124]	; (8007184 <prvHeapInit+0xac>)
 8007108:	4413      	add	r3, r2
 800710a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007110:	4a1d      	ldr	r2, [pc, #116]	; (8007188 <prvHeapInit+0xb0>)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007116:	4b1c      	ldr	r3, [pc, #112]	; (8007188 <prvHeapInit+0xb0>)
 8007118:	2200      	movs	r2, #0
 800711a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	4413      	add	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007124:	2208      	movs	r2, #8
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	1a9b      	subs	r3, r3, r2
 800712a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f023 0307 	bic.w	r3, r3, #7
 8007132:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	4a15      	ldr	r2, [pc, #84]	; (800718c <prvHeapInit+0xb4>)
 8007138:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800713a:	4b14      	ldr	r3, [pc, #80]	; (800718c <prvHeapInit+0xb4>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2200      	movs	r2, #0
 8007140:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007142:	4b12      	ldr	r3, [pc, #72]	; (800718c <prvHeapInit+0xb4>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2200      	movs	r2, #0
 8007148:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	1ad2      	subs	r2, r2, r3
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007158:	4b0c      	ldr	r3, [pc, #48]	; (800718c <prvHeapInit+0xb4>)
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	4a0a      	ldr	r2, [pc, #40]	; (8007190 <prvHeapInit+0xb8>)
 8007166:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	4a09      	ldr	r2, [pc, #36]	; (8007194 <prvHeapInit+0xbc>)
 800716e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007170:	4b09      	ldr	r3, [pc, #36]	; (8007198 <prvHeapInit+0xc0>)
 8007172:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007176:	601a      	str	r2, [r3, #0]
}
 8007178:	bf00      	nop
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr
 8007184:	20000424 	.word	0x20000424
 8007188:	20004024 	.word	0x20004024
 800718c:	2000402c 	.word	0x2000402c
 8007190:	20004034 	.word	0x20004034
 8007194:	20004030 	.word	0x20004030
 8007198:	20004038 	.word	0x20004038

0800719c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071a4:	4b28      	ldr	r3, [pc, #160]	; (8007248 <prvInsertBlockIntoFreeList+0xac>)
 80071a6:	60fb      	str	r3, [r7, #12]
 80071a8:	e002      	b.n	80071b0 <prvInsertBlockIntoFreeList+0x14>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d8f7      	bhi.n	80071aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	4413      	add	r3, r2
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d108      	bne.n	80071de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	441a      	add	r2, r3
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	441a      	add	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d118      	bne.n	8007224 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	4b15      	ldr	r3, [pc, #84]	; (800724c <prvInsertBlockIntoFreeList+0xb0>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d00d      	beq.n	800721a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	441a      	add	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	e008      	b.n	800722c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800721a:	4b0c      	ldr	r3, [pc, #48]	; (800724c <prvInsertBlockIntoFreeList+0xb0>)
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	601a      	str	r2, [r3, #0]
 8007222:	e003      	b.n	800722c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	429a      	cmp	r2, r3
 8007232:	d002      	beq.n	800723a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800723a:	bf00      	nop
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	20004024 	.word	0x20004024
 800724c:	2000402c 	.word	0x2000402c

08007250 <__cxa_pure_virtual>:
 8007250:	b508      	push	{r3, lr}
 8007252:	f000 f80d 	bl	8007270 <_ZSt9terminatev>

08007256 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8007256:	b508      	push	{r3, lr}
 8007258:	4780      	blx	r0
 800725a:	f000 f80e 	bl	800727a <abort>
	...

08007260 <_ZSt13get_terminatev>:
 8007260:	4b02      	ldr	r3, [pc, #8]	; (800726c <_ZSt13get_terminatev+0xc>)
 8007262:	6818      	ldr	r0, [r3, #0]
 8007264:	f3bf 8f5b 	dmb	ish
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	20000010 	.word	0x20000010

08007270 <_ZSt9terminatev>:
 8007270:	b508      	push	{r3, lr}
 8007272:	f7ff fff5 	bl	8007260 <_ZSt13get_terminatev>
 8007276:	f7ff ffee 	bl	8007256 <_ZN10__cxxabiv111__terminateEPFvvE>

0800727a <abort>:
 800727a:	b508      	push	{r3, lr}
 800727c:	2006      	movs	r0, #6
 800727e:	f000 f871 	bl	8007364 <raise>
 8007282:	2001      	movs	r0, #1
 8007284:	f7fb fa36 	bl	80026f4 <_exit>

08007288 <__errno>:
 8007288:	4b01      	ldr	r3, [pc, #4]	; (8007290 <__errno+0x8>)
 800728a:	6818      	ldr	r0, [r3, #0]
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	20000014 	.word	0x20000014

08007294 <__libc_init_array>:
 8007294:	b570      	push	{r4, r5, r6, lr}
 8007296:	4e0d      	ldr	r6, [pc, #52]	; (80072cc <__libc_init_array+0x38>)
 8007298:	4c0d      	ldr	r4, [pc, #52]	; (80072d0 <__libc_init_array+0x3c>)
 800729a:	1ba4      	subs	r4, r4, r6
 800729c:	10a4      	asrs	r4, r4, #2
 800729e:	2500      	movs	r5, #0
 80072a0:	42a5      	cmp	r5, r4
 80072a2:	d109      	bne.n	80072b8 <__libc_init_array+0x24>
 80072a4:	4e0b      	ldr	r6, [pc, #44]	; (80072d4 <__libc_init_array+0x40>)
 80072a6:	4c0c      	ldr	r4, [pc, #48]	; (80072d8 <__libc_init_array+0x44>)
 80072a8:	f000 f960 	bl	800756c <_init>
 80072ac:	1ba4      	subs	r4, r4, r6
 80072ae:	10a4      	asrs	r4, r4, #2
 80072b0:	2500      	movs	r5, #0
 80072b2:	42a5      	cmp	r5, r4
 80072b4:	d105      	bne.n	80072c2 <__libc_init_array+0x2e>
 80072b6:	bd70      	pop	{r4, r5, r6, pc}
 80072b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072bc:	4798      	blx	r3
 80072be:	3501      	adds	r5, #1
 80072c0:	e7ee      	b.n	80072a0 <__libc_init_array+0xc>
 80072c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072c6:	4798      	blx	r3
 80072c8:	3501      	adds	r5, #1
 80072ca:	e7f2      	b.n	80072b2 <__libc_init_array+0x1e>
 80072cc:	080078b4 	.word	0x080078b4
 80072d0:	080078b4 	.word	0x080078b4
 80072d4:	080078b4 	.word	0x080078b4
 80072d8:	080078b8 	.word	0x080078b8

080072dc <memcpy>:
 80072dc:	b510      	push	{r4, lr}
 80072de:	1e43      	subs	r3, r0, #1
 80072e0:	440a      	add	r2, r1
 80072e2:	4291      	cmp	r1, r2
 80072e4:	d100      	bne.n	80072e8 <memcpy+0xc>
 80072e6:	bd10      	pop	{r4, pc}
 80072e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072f0:	e7f7      	b.n	80072e2 <memcpy+0x6>

080072f2 <memset>:
 80072f2:	4402      	add	r2, r0
 80072f4:	4603      	mov	r3, r0
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d100      	bne.n	80072fc <memset+0xa>
 80072fa:	4770      	bx	lr
 80072fc:	f803 1b01 	strb.w	r1, [r3], #1
 8007300:	e7f9      	b.n	80072f6 <memset+0x4>
	...

08007304 <realloc>:
 8007304:	4b02      	ldr	r3, [pc, #8]	; (8007310 <realloc+0xc>)
 8007306:	460a      	mov	r2, r1
 8007308:	4601      	mov	r1, r0
 800730a:	6818      	ldr	r0, [r3, #0]
 800730c:	f000 b8a0 	b.w	8007450 <_realloc_r>
 8007310:	20000014 	.word	0x20000014

08007314 <_raise_r>:
 8007314:	291f      	cmp	r1, #31
 8007316:	b538      	push	{r3, r4, r5, lr}
 8007318:	4604      	mov	r4, r0
 800731a:	460d      	mov	r5, r1
 800731c:	d904      	bls.n	8007328 <_raise_r+0x14>
 800731e:	2316      	movs	r3, #22
 8007320:	6003      	str	r3, [r0, #0]
 8007322:	f04f 30ff 	mov.w	r0, #4294967295
 8007326:	bd38      	pop	{r3, r4, r5, pc}
 8007328:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800732a:	b112      	cbz	r2, 8007332 <_raise_r+0x1e>
 800732c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007330:	b94b      	cbnz	r3, 8007346 <_raise_r+0x32>
 8007332:	4620      	mov	r0, r4
 8007334:	f000 f830 	bl	8007398 <_getpid_r>
 8007338:	462a      	mov	r2, r5
 800733a:	4601      	mov	r1, r0
 800733c:	4620      	mov	r0, r4
 800733e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007342:	f000 b817 	b.w	8007374 <_kill_r>
 8007346:	2b01      	cmp	r3, #1
 8007348:	d00a      	beq.n	8007360 <_raise_r+0x4c>
 800734a:	1c59      	adds	r1, r3, #1
 800734c:	d103      	bne.n	8007356 <_raise_r+0x42>
 800734e:	2316      	movs	r3, #22
 8007350:	6003      	str	r3, [r0, #0]
 8007352:	2001      	movs	r0, #1
 8007354:	e7e7      	b.n	8007326 <_raise_r+0x12>
 8007356:	2400      	movs	r4, #0
 8007358:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800735c:	4628      	mov	r0, r5
 800735e:	4798      	blx	r3
 8007360:	2000      	movs	r0, #0
 8007362:	e7e0      	b.n	8007326 <_raise_r+0x12>

08007364 <raise>:
 8007364:	4b02      	ldr	r3, [pc, #8]	; (8007370 <raise+0xc>)
 8007366:	4601      	mov	r1, r0
 8007368:	6818      	ldr	r0, [r3, #0]
 800736a:	f7ff bfd3 	b.w	8007314 <_raise_r>
 800736e:	bf00      	nop
 8007370:	20000014 	.word	0x20000014

08007374 <_kill_r>:
 8007374:	b538      	push	{r3, r4, r5, lr}
 8007376:	4c07      	ldr	r4, [pc, #28]	; (8007394 <_kill_r+0x20>)
 8007378:	2300      	movs	r3, #0
 800737a:	4605      	mov	r5, r0
 800737c:	4608      	mov	r0, r1
 800737e:	4611      	mov	r1, r2
 8007380:	6023      	str	r3, [r4, #0]
 8007382:	f7fb f9a7 	bl	80026d4 <_kill>
 8007386:	1c43      	adds	r3, r0, #1
 8007388:	d102      	bne.n	8007390 <_kill_r+0x1c>
 800738a:	6823      	ldr	r3, [r4, #0]
 800738c:	b103      	cbz	r3, 8007390 <_kill_r+0x1c>
 800738e:	602b      	str	r3, [r5, #0]
 8007390:	bd38      	pop	{r3, r4, r5, pc}
 8007392:	bf00      	nop
 8007394:	2000421c 	.word	0x2000421c

08007398 <_getpid_r>:
 8007398:	f7fb b994 	b.w	80026c4 <_getpid>

0800739c <_malloc_r>:
 800739c:	b570      	push	{r4, r5, r6, lr}
 800739e:	1ccd      	adds	r5, r1, #3
 80073a0:	f025 0503 	bic.w	r5, r5, #3
 80073a4:	3508      	adds	r5, #8
 80073a6:	2d0c      	cmp	r5, #12
 80073a8:	bf38      	it	cc
 80073aa:	250c      	movcc	r5, #12
 80073ac:	2d00      	cmp	r5, #0
 80073ae:	4606      	mov	r6, r0
 80073b0:	db01      	blt.n	80073b6 <_malloc_r+0x1a>
 80073b2:	42a9      	cmp	r1, r5
 80073b4:	d903      	bls.n	80073be <_malloc_r+0x22>
 80073b6:	230c      	movs	r3, #12
 80073b8:	6033      	str	r3, [r6, #0]
 80073ba:	2000      	movs	r0, #0
 80073bc:	bd70      	pop	{r4, r5, r6, pc}
 80073be:	f000 f87d 	bl	80074bc <__malloc_lock>
 80073c2:	4a21      	ldr	r2, [pc, #132]	; (8007448 <_malloc_r+0xac>)
 80073c4:	6814      	ldr	r4, [r2, #0]
 80073c6:	4621      	mov	r1, r4
 80073c8:	b991      	cbnz	r1, 80073f0 <_malloc_r+0x54>
 80073ca:	4c20      	ldr	r4, [pc, #128]	; (800744c <_malloc_r+0xb0>)
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	b91b      	cbnz	r3, 80073d8 <_malloc_r+0x3c>
 80073d0:	4630      	mov	r0, r6
 80073d2:	f000 f863 	bl	800749c <_sbrk_r>
 80073d6:	6020      	str	r0, [r4, #0]
 80073d8:	4629      	mov	r1, r5
 80073da:	4630      	mov	r0, r6
 80073dc:	f000 f85e 	bl	800749c <_sbrk_r>
 80073e0:	1c43      	adds	r3, r0, #1
 80073e2:	d124      	bne.n	800742e <_malloc_r+0x92>
 80073e4:	230c      	movs	r3, #12
 80073e6:	6033      	str	r3, [r6, #0]
 80073e8:	4630      	mov	r0, r6
 80073ea:	f000 f868 	bl	80074be <__malloc_unlock>
 80073ee:	e7e4      	b.n	80073ba <_malloc_r+0x1e>
 80073f0:	680b      	ldr	r3, [r1, #0]
 80073f2:	1b5b      	subs	r3, r3, r5
 80073f4:	d418      	bmi.n	8007428 <_malloc_r+0x8c>
 80073f6:	2b0b      	cmp	r3, #11
 80073f8:	d90f      	bls.n	800741a <_malloc_r+0x7e>
 80073fa:	600b      	str	r3, [r1, #0]
 80073fc:	50cd      	str	r5, [r1, r3]
 80073fe:	18cc      	adds	r4, r1, r3
 8007400:	4630      	mov	r0, r6
 8007402:	f000 f85c 	bl	80074be <__malloc_unlock>
 8007406:	f104 000b 	add.w	r0, r4, #11
 800740a:	1d23      	adds	r3, r4, #4
 800740c:	f020 0007 	bic.w	r0, r0, #7
 8007410:	1ac3      	subs	r3, r0, r3
 8007412:	d0d3      	beq.n	80073bc <_malloc_r+0x20>
 8007414:	425a      	negs	r2, r3
 8007416:	50e2      	str	r2, [r4, r3]
 8007418:	e7d0      	b.n	80073bc <_malloc_r+0x20>
 800741a:	428c      	cmp	r4, r1
 800741c:	684b      	ldr	r3, [r1, #4]
 800741e:	bf16      	itet	ne
 8007420:	6063      	strne	r3, [r4, #4]
 8007422:	6013      	streq	r3, [r2, #0]
 8007424:	460c      	movne	r4, r1
 8007426:	e7eb      	b.n	8007400 <_malloc_r+0x64>
 8007428:	460c      	mov	r4, r1
 800742a:	6849      	ldr	r1, [r1, #4]
 800742c:	e7cc      	b.n	80073c8 <_malloc_r+0x2c>
 800742e:	1cc4      	adds	r4, r0, #3
 8007430:	f024 0403 	bic.w	r4, r4, #3
 8007434:	42a0      	cmp	r0, r4
 8007436:	d005      	beq.n	8007444 <_malloc_r+0xa8>
 8007438:	1a21      	subs	r1, r4, r0
 800743a:	4630      	mov	r0, r6
 800743c:	f000 f82e 	bl	800749c <_sbrk_r>
 8007440:	3001      	adds	r0, #1
 8007442:	d0cf      	beq.n	80073e4 <_malloc_r+0x48>
 8007444:	6025      	str	r5, [r4, #0]
 8007446:	e7db      	b.n	8007400 <_malloc_r+0x64>
 8007448:	2000403c 	.word	0x2000403c
 800744c:	20004040 	.word	0x20004040

08007450 <_realloc_r>:
 8007450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007452:	4607      	mov	r7, r0
 8007454:	4614      	mov	r4, r2
 8007456:	460e      	mov	r6, r1
 8007458:	b921      	cbnz	r1, 8007464 <_realloc_r+0x14>
 800745a:	4611      	mov	r1, r2
 800745c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007460:	f7ff bf9c 	b.w	800739c <_malloc_r>
 8007464:	b922      	cbnz	r2, 8007470 <_realloc_r+0x20>
 8007466:	f000 f82b 	bl	80074c0 <_free_r>
 800746a:	4625      	mov	r5, r4
 800746c:	4628      	mov	r0, r5
 800746e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007470:	f000 f874 	bl	800755c <_malloc_usable_size_r>
 8007474:	42a0      	cmp	r0, r4
 8007476:	d20f      	bcs.n	8007498 <_realloc_r+0x48>
 8007478:	4621      	mov	r1, r4
 800747a:	4638      	mov	r0, r7
 800747c:	f7ff ff8e 	bl	800739c <_malloc_r>
 8007480:	4605      	mov	r5, r0
 8007482:	2800      	cmp	r0, #0
 8007484:	d0f2      	beq.n	800746c <_realloc_r+0x1c>
 8007486:	4631      	mov	r1, r6
 8007488:	4622      	mov	r2, r4
 800748a:	f7ff ff27 	bl	80072dc <memcpy>
 800748e:	4631      	mov	r1, r6
 8007490:	4638      	mov	r0, r7
 8007492:	f000 f815 	bl	80074c0 <_free_r>
 8007496:	e7e9      	b.n	800746c <_realloc_r+0x1c>
 8007498:	4635      	mov	r5, r6
 800749a:	e7e7      	b.n	800746c <_realloc_r+0x1c>

0800749c <_sbrk_r>:
 800749c:	b538      	push	{r3, r4, r5, lr}
 800749e:	4c06      	ldr	r4, [pc, #24]	; (80074b8 <_sbrk_r+0x1c>)
 80074a0:	2300      	movs	r3, #0
 80074a2:	4605      	mov	r5, r0
 80074a4:	4608      	mov	r0, r1
 80074a6:	6023      	str	r3, [r4, #0]
 80074a8:	f7fb f92e 	bl	8002708 <_sbrk>
 80074ac:	1c43      	adds	r3, r0, #1
 80074ae:	d102      	bne.n	80074b6 <_sbrk_r+0x1a>
 80074b0:	6823      	ldr	r3, [r4, #0]
 80074b2:	b103      	cbz	r3, 80074b6 <_sbrk_r+0x1a>
 80074b4:	602b      	str	r3, [r5, #0]
 80074b6:	bd38      	pop	{r3, r4, r5, pc}
 80074b8:	2000421c 	.word	0x2000421c

080074bc <__malloc_lock>:
 80074bc:	4770      	bx	lr

080074be <__malloc_unlock>:
 80074be:	4770      	bx	lr

080074c0 <_free_r>:
 80074c0:	b538      	push	{r3, r4, r5, lr}
 80074c2:	4605      	mov	r5, r0
 80074c4:	2900      	cmp	r1, #0
 80074c6:	d045      	beq.n	8007554 <_free_r+0x94>
 80074c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074cc:	1f0c      	subs	r4, r1, #4
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	bfb8      	it	lt
 80074d2:	18e4      	addlt	r4, r4, r3
 80074d4:	f7ff fff2 	bl	80074bc <__malloc_lock>
 80074d8:	4a1f      	ldr	r2, [pc, #124]	; (8007558 <_free_r+0x98>)
 80074da:	6813      	ldr	r3, [r2, #0]
 80074dc:	4610      	mov	r0, r2
 80074de:	b933      	cbnz	r3, 80074ee <_free_r+0x2e>
 80074e0:	6063      	str	r3, [r4, #4]
 80074e2:	6014      	str	r4, [r2, #0]
 80074e4:	4628      	mov	r0, r5
 80074e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074ea:	f7ff bfe8 	b.w	80074be <__malloc_unlock>
 80074ee:	42a3      	cmp	r3, r4
 80074f0:	d90c      	bls.n	800750c <_free_r+0x4c>
 80074f2:	6821      	ldr	r1, [r4, #0]
 80074f4:	1862      	adds	r2, r4, r1
 80074f6:	4293      	cmp	r3, r2
 80074f8:	bf04      	itt	eq
 80074fa:	681a      	ldreq	r2, [r3, #0]
 80074fc:	685b      	ldreq	r3, [r3, #4]
 80074fe:	6063      	str	r3, [r4, #4]
 8007500:	bf04      	itt	eq
 8007502:	1852      	addeq	r2, r2, r1
 8007504:	6022      	streq	r2, [r4, #0]
 8007506:	6004      	str	r4, [r0, #0]
 8007508:	e7ec      	b.n	80074e4 <_free_r+0x24>
 800750a:	4613      	mov	r3, r2
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	b10a      	cbz	r2, 8007514 <_free_r+0x54>
 8007510:	42a2      	cmp	r2, r4
 8007512:	d9fa      	bls.n	800750a <_free_r+0x4a>
 8007514:	6819      	ldr	r1, [r3, #0]
 8007516:	1858      	adds	r0, r3, r1
 8007518:	42a0      	cmp	r0, r4
 800751a:	d10b      	bne.n	8007534 <_free_r+0x74>
 800751c:	6820      	ldr	r0, [r4, #0]
 800751e:	4401      	add	r1, r0
 8007520:	1858      	adds	r0, r3, r1
 8007522:	4282      	cmp	r2, r0
 8007524:	6019      	str	r1, [r3, #0]
 8007526:	d1dd      	bne.n	80074e4 <_free_r+0x24>
 8007528:	6810      	ldr	r0, [r2, #0]
 800752a:	6852      	ldr	r2, [r2, #4]
 800752c:	605a      	str	r2, [r3, #4]
 800752e:	4401      	add	r1, r0
 8007530:	6019      	str	r1, [r3, #0]
 8007532:	e7d7      	b.n	80074e4 <_free_r+0x24>
 8007534:	d902      	bls.n	800753c <_free_r+0x7c>
 8007536:	230c      	movs	r3, #12
 8007538:	602b      	str	r3, [r5, #0]
 800753a:	e7d3      	b.n	80074e4 <_free_r+0x24>
 800753c:	6820      	ldr	r0, [r4, #0]
 800753e:	1821      	adds	r1, r4, r0
 8007540:	428a      	cmp	r2, r1
 8007542:	bf04      	itt	eq
 8007544:	6811      	ldreq	r1, [r2, #0]
 8007546:	6852      	ldreq	r2, [r2, #4]
 8007548:	6062      	str	r2, [r4, #4]
 800754a:	bf04      	itt	eq
 800754c:	1809      	addeq	r1, r1, r0
 800754e:	6021      	streq	r1, [r4, #0]
 8007550:	605c      	str	r4, [r3, #4]
 8007552:	e7c7      	b.n	80074e4 <_free_r+0x24>
 8007554:	bd38      	pop	{r3, r4, r5, pc}
 8007556:	bf00      	nop
 8007558:	2000403c 	.word	0x2000403c

0800755c <_malloc_usable_size_r>:
 800755c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007560:	1f18      	subs	r0, r3, #4
 8007562:	2b00      	cmp	r3, #0
 8007564:	bfbc      	itt	lt
 8007566:	580b      	ldrlt	r3, [r1, r0]
 8007568:	18c0      	addlt	r0, r0, r3
 800756a:	4770      	bx	lr

0800756c <_init>:
 800756c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756e:	bf00      	nop
 8007570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007572:	bc08      	pop	{r3}
 8007574:	469e      	mov	lr, r3
 8007576:	4770      	bx	lr

08007578 <_fini>:
 8007578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757a:	bf00      	nop
 800757c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800757e:	bc08      	pop	{r3}
 8007580:	469e      	mov	lr, r3
 8007582:	4770      	bx	lr
