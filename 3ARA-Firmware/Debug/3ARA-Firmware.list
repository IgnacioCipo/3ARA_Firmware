
3ARA-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08008118  08008118  00018118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008240  08008240  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008240  08008240  00018240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008248  08008248  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008248  08008248  00018248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800824c  0800824c  0001824c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004274  20000010  08008260  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004284  08008260  00024284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000299b5  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000515d  00000000  00000000  000499f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  0004eb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001540  00000000  00000000  00050268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d71  00000000  00000000  000517a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ef0a  00000000  00000000  00079519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d97da  00000000  00000000  00098423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00171bfd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005eec  00000000  00000000  00171c50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008100 	.word	0x08008100

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08008100 	.word	0x08008100

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b96e 	b.w	8000d00 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	4604      	mov	r4, r0
 8000a44:	468c      	mov	ip, r1
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f040 8083 	bne.w	8000b52 <__udivmoddi4+0x116>
 8000a4c:	428a      	cmp	r2, r1
 8000a4e:	4617      	mov	r7, r2
 8000a50:	d947      	bls.n	8000ae2 <__udivmoddi4+0xa6>
 8000a52:	fab2 f282 	clz	r2, r2
 8000a56:	b142      	cbz	r2, 8000a6a <__udivmoddi4+0x2e>
 8000a58:	f1c2 0020 	rsb	r0, r2, #32
 8000a5c:	fa24 f000 	lsr.w	r0, r4, r0
 8000a60:	4091      	lsls	r1, r2
 8000a62:	4097      	lsls	r7, r2
 8000a64:	ea40 0c01 	orr.w	ip, r0, r1
 8000a68:	4094      	lsls	r4, r2
 8000a6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a6e:	0c23      	lsrs	r3, r4, #16
 8000a70:	fbbc f6f8 	udiv	r6, ip, r8
 8000a74:	fa1f fe87 	uxth.w	lr, r7
 8000a78:	fb08 c116 	mls	r1, r8, r6, ip
 8000a7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a80:	fb06 f10e 	mul.w	r1, r6, lr
 8000a84:	4299      	cmp	r1, r3
 8000a86:	d909      	bls.n	8000a9c <__udivmoddi4+0x60>
 8000a88:	18fb      	adds	r3, r7, r3
 8000a8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a8e:	f080 8119 	bcs.w	8000cc4 <__udivmoddi4+0x288>
 8000a92:	4299      	cmp	r1, r3
 8000a94:	f240 8116 	bls.w	8000cc4 <__udivmoddi4+0x288>
 8000a98:	3e02      	subs	r6, #2
 8000a9a:	443b      	add	r3, r7
 8000a9c:	1a5b      	subs	r3, r3, r1
 8000a9e:	b2a4      	uxth	r4, r4
 8000aa0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa4:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ab0:	45a6      	cmp	lr, r4
 8000ab2:	d909      	bls.n	8000ac8 <__udivmoddi4+0x8c>
 8000ab4:	193c      	adds	r4, r7, r4
 8000ab6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aba:	f080 8105 	bcs.w	8000cc8 <__udivmoddi4+0x28c>
 8000abe:	45a6      	cmp	lr, r4
 8000ac0:	f240 8102 	bls.w	8000cc8 <__udivmoddi4+0x28c>
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	443c      	add	r4, r7
 8000ac8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000acc:	eba4 040e 	sub.w	r4, r4, lr
 8000ad0:	2600      	movs	r6, #0
 8000ad2:	b11d      	cbz	r5, 8000adc <__udivmoddi4+0xa0>
 8000ad4:	40d4      	lsrs	r4, r2
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e9c5 4300 	strd	r4, r3, [r5]
 8000adc:	4631      	mov	r1, r6
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	b902      	cbnz	r2, 8000ae6 <__udivmoddi4+0xaa>
 8000ae4:	deff      	udf	#255	; 0xff
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	2a00      	cmp	r2, #0
 8000aec:	d150      	bne.n	8000b90 <__udivmoddi4+0x154>
 8000aee:	1bcb      	subs	r3, r1, r7
 8000af0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af4:	fa1f f887 	uxth.w	r8, r7
 8000af8:	2601      	movs	r6, #1
 8000afa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000afe:	0c21      	lsrs	r1, r4, #16
 8000b00:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b08:	fb08 f30c 	mul.w	r3, r8, ip
 8000b0c:	428b      	cmp	r3, r1
 8000b0e:	d907      	bls.n	8000b20 <__udivmoddi4+0xe4>
 8000b10:	1879      	adds	r1, r7, r1
 8000b12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0xe2>
 8000b18:	428b      	cmp	r3, r1
 8000b1a:	f200 80e9 	bhi.w	8000cf0 <__udivmoddi4+0x2b4>
 8000b1e:	4684      	mov	ip, r0
 8000b20:	1ac9      	subs	r1, r1, r3
 8000b22:	b2a3      	uxth	r3, r4
 8000b24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b28:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b2c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b30:	fb08 f800 	mul.w	r8, r8, r0
 8000b34:	45a0      	cmp	r8, r4
 8000b36:	d907      	bls.n	8000b48 <__udivmoddi4+0x10c>
 8000b38:	193c      	adds	r4, r7, r4
 8000b3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x10a>
 8000b40:	45a0      	cmp	r8, r4
 8000b42:	f200 80d9 	bhi.w	8000cf8 <__udivmoddi4+0x2bc>
 8000b46:	4618      	mov	r0, r3
 8000b48:	eba4 0408 	sub.w	r4, r4, r8
 8000b4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b50:	e7bf      	b.n	8000ad2 <__udivmoddi4+0x96>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d909      	bls.n	8000b6a <__udivmoddi4+0x12e>
 8000b56:	2d00      	cmp	r5, #0
 8000b58:	f000 80b1 	beq.w	8000cbe <__udivmoddi4+0x282>
 8000b5c:	2600      	movs	r6, #0
 8000b5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000b62:	4630      	mov	r0, r6
 8000b64:	4631      	mov	r1, r6
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	fab3 f683 	clz	r6, r3
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	d14a      	bne.n	8000c08 <__udivmoddi4+0x1cc>
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d302      	bcc.n	8000b7c <__udivmoddi4+0x140>
 8000b76:	4282      	cmp	r2, r0
 8000b78:	f200 80b8 	bhi.w	8000cec <__udivmoddi4+0x2b0>
 8000b7c:	1a84      	subs	r4, r0, r2
 8000b7e:	eb61 0103 	sbc.w	r1, r1, r3
 8000b82:	2001      	movs	r0, #1
 8000b84:	468c      	mov	ip, r1
 8000b86:	2d00      	cmp	r5, #0
 8000b88:	d0a8      	beq.n	8000adc <__udivmoddi4+0xa0>
 8000b8a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b8e:	e7a5      	b.n	8000adc <__udivmoddi4+0xa0>
 8000b90:	f1c2 0320 	rsb	r3, r2, #32
 8000b94:	fa20 f603 	lsr.w	r6, r0, r3
 8000b98:	4097      	lsls	r7, r2
 8000b9a:	fa01 f002 	lsl.w	r0, r1, r2
 8000b9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba2:	40d9      	lsrs	r1, r3
 8000ba4:	4330      	orrs	r0, r6
 8000ba6:	0c03      	lsrs	r3, r0, #16
 8000ba8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bac:	fa1f f887 	uxth.w	r8, r7
 8000bb0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb8:	fb06 f108 	mul.w	r1, r6, r8
 8000bbc:	4299      	cmp	r1, r3
 8000bbe:	fa04 f402 	lsl.w	r4, r4, r2
 8000bc2:	d909      	bls.n	8000bd8 <__udivmoddi4+0x19c>
 8000bc4:	18fb      	adds	r3, r7, r3
 8000bc6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bca:	f080 808d 	bcs.w	8000ce8 <__udivmoddi4+0x2ac>
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	f240 808a 	bls.w	8000ce8 <__udivmoddi4+0x2ac>
 8000bd4:	3e02      	subs	r6, #2
 8000bd6:	443b      	add	r3, r7
 8000bd8:	1a5b      	subs	r3, r3, r1
 8000bda:	b281      	uxth	r1, r0
 8000bdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000be0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000be4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be8:	fb00 f308 	mul.w	r3, r0, r8
 8000bec:	428b      	cmp	r3, r1
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x1c4>
 8000bf0:	1879      	adds	r1, r7, r1
 8000bf2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bf6:	d273      	bcs.n	8000ce0 <__udivmoddi4+0x2a4>
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	d971      	bls.n	8000ce0 <__udivmoddi4+0x2a4>
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	4439      	add	r1, r7
 8000c00:	1acb      	subs	r3, r1, r3
 8000c02:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c06:	e778      	b.n	8000afa <__udivmoddi4+0xbe>
 8000c08:	f1c6 0c20 	rsb	ip, r6, #32
 8000c0c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c10:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c14:	431c      	orrs	r4, r3
 8000c16:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c1e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c22:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c26:	431f      	orrs	r7, r3
 8000c28:	0c3b      	lsrs	r3, r7, #16
 8000c2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c2e:	fa1f f884 	uxth.w	r8, r4
 8000c32:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c36:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c3a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c3e:	458a      	cmp	sl, r1
 8000c40:	fa02 f206 	lsl.w	r2, r2, r6
 8000c44:	fa00 f306 	lsl.w	r3, r0, r6
 8000c48:	d908      	bls.n	8000c5c <__udivmoddi4+0x220>
 8000c4a:	1861      	adds	r1, r4, r1
 8000c4c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c50:	d248      	bcs.n	8000ce4 <__udivmoddi4+0x2a8>
 8000c52:	458a      	cmp	sl, r1
 8000c54:	d946      	bls.n	8000ce4 <__udivmoddi4+0x2a8>
 8000c56:	f1a9 0902 	sub.w	r9, r9, #2
 8000c5a:	4421      	add	r1, r4
 8000c5c:	eba1 010a 	sub.w	r1, r1, sl
 8000c60:	b2bf      	uxth	r7, r7
 8000c62:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c66:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c6a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c6e:	fb00 f808 	mul.w	r8, r0, r8
 8000c72:	45b8      	cmp	r8, r7
 8000c74:	d907      	bls.n	8000c86 <__udivmoddi4+0x24a>
 8000c76:	19e7      	adds	r7, r4, r7
 8000c78:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7c:	d22e      	bcs.n	8000cdc <__udivmoddi4+0x2a0>
 8000c7e:	45b8      	cmp	r8, r7
 8000c80:	d92c      	bls.n	8000cdc <__udivmoddi4+0x2a0>
 8000c82:	3802      	subs	r0, #2
 8000c84:	4427      	add	r7, r4
 8000c86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c8a:	eba7 0708 	sub.w	r7, r7, r8
 8000c8e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c92:	454f      	cmp	r7, r9
 8000c94:	46c6      	mov	lr, r8
 8000c96:	4649      	mov	r1, r9
 8000c98:	d31a      	bcc.n	8000cd0 <__udivmoddi4+0x294>
 8000c9a:	d017      	beq.n	8000ccc <__udivmoddi4+0x290>
 8000c9c:	b15d      	cbz	r5, 8000cb6 <__udivmoddi4+0x27a>
 8000c9e:	ebb3 020e 	subs.w	r2, r3, lr
 8000ca2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ca6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000caa:	40f2      	lsrs	r2, r6
 8000cac:	ea4c 0202 	orr.w	r2, ip, r2
 8000cb0:	40f7      	lsrs	r7, r6
 8000cb2:	e9c5 2700 	strd	r2, r7, [r5]
 8000cb6:	2600      	movs	r6, #0
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	462e      	mov	r6, r5
 8000cc0:	4628      	mov	r0, r5
 8000cc2:	e70b      	b.n	8000adc <__udivmoddi4+0xa0>
 8000cc4:	4606      	mov	r6, r0
 8000cc6:	e6e9      	b.n	8000a9c <__udivmoddi4+0x60>
 8000cc8:	4618      	mov	r0, r3
 8000cca:	e6fd      	b.n	8000ac8 <__udivmoddi4+0x8c>
 8000ccc:	4543      	cmp	r3, r8
 8000cce:	d2e5      	bcs.n	8000c9c <__udivmoddi4+0x260>
 8000cd0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cd4:	eb69 0104 	sbc.w	r1, r9, r4
 8000cd8:	3801      	subs	r0, #1
 8000cda:	e7df      	b.n	8000c9c <__udivmoddi4+0x260>
 8000cdc:	4608      	mov	r0, r1
 8000cde:	e7d2      	b.n	8000c86 <__udivmoddi4+0x24a>
 8000ce0:	4660      	mov	r0, ip
 8000ce2:	e78d      	b.n	8000c00 <__udivmoddi4+0x1c4>
 8000ce4:	4681      	mov	r9, r0
 8000ce6:	e7b9      	b.n	8000c5c <__udivmoddi4+0x220>
 8000ce8:	4666      	mov	r6, ip
 8000cea:	e775      	b.n	8000bd8 <__udivmoddi4+0x19c>
 8000cec:	4630      	mov	r0, r6
 8000cee:	e74a      	b.n	8000b86 <__udivmoddi4+0x14a>
 8000cf0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cf4:	4439      	add	r1, r7
 8000cf6:	e713      	b.n	8000b20 <__udivmoddi4+0xe4>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	443c      	add	r4, r7
 8000cfc:	e724      	b.n	8000b48 <__udivmoddi4+0x10c>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <robotInfoInit>:
 *      Author: Ignacio
 */

#include "3ARAInfo.h"

void robotInfoInit(RobotInfoHandler *info_handler, osMutexId *mutex){
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
	info_handler->mutexHandler = mutex;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	683a      	ldr	r2, [r7, #0]
 8000d12:	611a      	str	r2, [r3, #16]
	info_handler->angle_1 = 0;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f04f 0200 	mov.w	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
	info_handler->angle_2 = 0;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f04f 0200 	mov.w	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
	info_handler->angle_3 = 0;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f04f 0200 	mov.w	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
	info_handler->ticks = 0;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f04f 0200 	mov.w	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <setAngle1>:

void setAngle1(RobotInfoHandler *info_handler, float angle){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	ed87 0a00 	vstr	s0, [r7]
	osMutexWait(*(info_handler->mutexHandler), osWaitForever);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	691b      	ldr	r3, [r3, #16]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f04f 31ff 	mov.w	r1, #4294967295
 8000d56:	4618      	mov	r0, r3
 8000d58:	f004 fe7a 	bl	8005a50 <osMutexWait>
	info_handler->angle_1 = angle;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	683a      	ldr	r2, [r7, #0]
 8000d60:	601a      	str	r2, [r3, #0]
	osMutexRelease(*(info_handler->mutexHandler));
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	691b      	ldr	r3, [r3, #16]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f004 febf 	bl	8005aec <osMutexRelease>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <setAngle2>:

void setAngle2(RobotInfoHandler *info_handler, float angle){
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	ed87 0a00 	vstr	s0, [r7]
	osMutexWait(*(info_handler->mutexHandler), osWaitForever);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	691b      	ldr	r3, [r3, #16]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f004 fe5f 	bl	8005a50 <osMutexWait>
	info_handler->angle_2 = angle;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	683a      	ldr	r2, [r7, #0]
 8000d96:	605a      	str	r2, [r3, #4]
	osMutexRelease(*(info_handler->mutexHandler));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	691b      	ldr	r3, [r3, #16]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f004 fea4 	bl	8005aec <osMutexRelease>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <setAngle3>:

void setAngle3(RobotInfoHandler *info_handler, float angle){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	ed87 0a00 	vstr	s0, [r7]
	osMutexWait(*(info_handler->mutexHandler), osWaitForever);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	691b      	ldr	r3, [r3, #16]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f004 fe44 	bl	8005a50 <osMutexWait>
	info_handler->angle_3 = angle;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	609a      	str	r2, [r3, #8]
	osMutexRelease(*(info_handler->mutexHandler));
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	691b      	ldr	r3, [r3, #16]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f004 fe89 	bl	8005aec <osMutexRelease>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <_ZN7EncoderC1EP17TIM_HandleTypeDeff>:
#include "Encoder.hpp"

float ticks_1;
uint32_t angle_2_ticks;

Encoder::Encoder(TIM_HandleTypeDef* encoder_timer, float count_per_turn){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	ed87 0a01 	vstr	s0, [r7, #4]
	timer = encoder_timer;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	68ba      	ldr	r2, [r7, #8]
 8000df6:	601a      	str	r2, [r3, #0]
	encoder_resolution = 360.0f / count_per_turn;
 8000df8:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000e20 <_ZN7EncoderC1EP17TIM_HandleTypeDeff+0x3c>
 8000dfc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	edc3 7a03 	vstr	s15, [r3, #12]
	HAL_TIM_Encoder_Start(timer, TIM_CHANNEL_ALL);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	213c      	movs	r1, #60	; 0x3c
 8000e10:	4618      	mov	r0, r3
 8000e12:	f003 f989 	bl	8004128 <HAL_TIM_Encoder_Start>
}
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	43b40000 	.word	0x43b40000
 8000e24:	00000000 	.word	0x00000000

08000e28 <_ZN7Encoder8getAngleEv>:

float Encoder::getAngle(){
 8000e28:	b5b0      	push	{r4, r5, r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	ticks_1 = (float) __HAL_TIM_GetCounter(timer);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e38:	ee07 3a90 	vmov	s15, r3
 8000e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e40:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <_ZN7Encoder8getAngleEv+0x88>)
 8000e42:	edc3 7a00 	vstr	s15, [r3]
	angle = (ticks_1 - 32767.0) * encoder_resolution;
 8000e46:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <_ZN7Encoder8getAngleEv+0x88>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fb24 	bl	8000498 <__aeabi_f2d>
 8000e50:	a315      	add	r3, pc, #84	; (adr r3, 8000ea8 <_ZN7Encoder8getAngleEv+0x80>)
 8000e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e56:	f7ff f9bf 	bl	80001d8 <__aeabi_dsub>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	4614      	mov	r4, r2
 8000e60:	461d      	mov	r5, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fb16 	bl	8000498 <__aeabi_f2d>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	460b      	mov	r3, r1
 8000e70:	4620      	mov	r0, r4
 8000e72:	4629      	mov	r1, r5
 8000e74:	f7ff fb68 	bl	8000548 <__aeabi_dmul>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f7ff fd74 	bl	800096c <__aeabi_d2f>
 8000e84:	4602      	mov	r2, r0
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	605a      	str	r2, [r3, #4]
	angle_2_ticks = __HAL_TIM_GetCounter(timer);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e92:	4a08      	ldr	r2, [pc, #32]	; (8000eb4 <_ZN7Encoder8getAngleEv+0x8c>)
 8000e94:	6013      	str	r3, [r2, #0]
	return angle;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	ee07 3a90 	vmov	s15, r3
}
 8000e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ea8:	00000000 	.word	0x00000000
 8000eac:	40dfffc0 	.word	0x40dfffc0
 8000eb0:	2000002c 	.word	0x2000002c
 8000eb4:	20000030 	.word	0x20000030

08000eb8 <_ZN7Encoder17resetTicksCounterEv>:
float Encoder::getPulses(){
	ticks = __HAL_TIM_GET_COUNTER(timer);
	return ticks;
}

void Encoder::resetTicksCounter(){
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCounter(timer, 32767);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000eca:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <_ZN5MotorC1ER12MotorChannelR3PinS3_>:
#include "Motor.hpp"
#include "tim.h"
#include "stm32f4xx_hal_gpio.h"
#include "cmsis_os.h"

Motor::Motor(MotorChannel &motor_timer, Pin &motor_1, Pin &motor_2){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
 8000ee4:	603b      	str	r3, [r7, #0]
	gpio_pin_1 = motor_1.pin;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	889a      	ldrh	r2, [r3, #4]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	801a      	strh	r2, [r3, #0]
	gpio_pin_2 = motor_2.pin;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	889a      	ldrh	r2, [r3, #4]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	805a      	strh	r2, [r3, #2]
	gpio_port_1 = motor_1.port;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	605a      	str	r2, [r3, #4]
	gpio_port_2 = motor_2.port;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	609a      	str	r2, [r3, #8]
	channel = motor_timer.channel;
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	685a      	ldr	r2, [r3, #4]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	611a      	str	r2, [r3, #16]
	timer = motor_timer.timer;
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Start(motor_timer.timer, motor_timer.channel);
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4610      	mov	r0, r2
 8000f22:	f002 ff93 	bl	8003e4c <HAL_TIM_PWM_Start>
}
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_ZN5Motor8turnLeftEm>:

void Motor::turnLeft(uint32_t duty){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(gpio_port_1, gpio_pin_1, GPIO_PIN_SET);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6858      	ldr	r0, [r3, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	881b      	ldrh	r3, [r3, #0]
 8000f42:	2201      	movs	r2, #1
 8000f44:	4619      	mov	r1, r3
 8000f46:	f002 f831 	bl	8002fac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio_port_2, gpio_pin_2, GPIO_PIN_RESET);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6898      	ldr	r0, [r3, #8]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	885b      	ldrh	r3, [r3, #2]
 8000f52:	2200      	movs	r2, #0
 8000f54:	4619      	mov	r1, r3
 8000f56:	f002 f829 	bl	8002fac <HAL_GPIO_WritePin>
	switch(channel){
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	691b      	ldr	r3, [r3, #16]
 8000f5e:	2b0c      	cmp	r3, #12
 8000f60:	d834      	bhi.n	8000fcc <_ZN5Motor8turnLeftEm+0x9c>
 8000f62:	a201      	add	r2, pc, #4	; (adr r2, 8000f68 <_ZN5Motor8turnLeftEm+0x38>)
 8000f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f68:	08000f9d 	.word	0x08000f9d
 8000f6c:	08000fcd 	.word	0x08000fcd
 8000f70:	08000fcd 	.word	0x08000fcd
 8000f74:	08000fcd 	.word	0x08000fcd
 8000f78:	08000fa9 	.word	0x08000fa9
 8000f7c:	08000fcd 	.word	0x08000fcd
 8000f80:	08000fcd 	.word	0x08000fcd
 8000f84:	08000fcd 	.word	0x08000fcd
 8000f88:	08000fb5 	.word	0x08000fb5
 8000f8c:	08000fcd 	.word	0x08000fcd
 8000f90:	08000fcd 	.word	0x08000fcd
 8000f94:	08000fcd 	.word	0x08000fcd
 8000f98:	08000fc1 	.word	0x08000fc1
		case TIM_CHANNEL_1:
			timer->Instance -> CCR1 = duty;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	683a      	ldr	r2, [r7, #0]
 8000fa4:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000fa6:	e011      	b.n	8000fcc <_ZN5Motor8turnLeftEm+0x9c>
		case TIM_CHANNEL_2:
			timer->Instance -> CCR2 = duty;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	683a      	ldr	r2, [r7, #0]
 8000fb0:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8000fb2:	e00b      	b.n	8000fcc <_ZN5Motor8turnLeftEm+0x9c>
		case TIM_CHANNEL_3:
			timer->Instance -> CCR3 = duty;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000fbe:	e005      	b.n	8000fcc <_ZN5Motor8turnLeftEm+0x9c>
		case TIM_CHANNEL_4:
			timer->Instance -> CCR4 = duty;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000fca:	bf00      	nop
	}
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <_ZN5Motor9turnRightEm>:

void Motor::turnRight(uint32_t duty){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(gpio_port_1, gpio_pin_1, GPIO_PIN_RESET);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6858      	ldr	r0, [r3, #4]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f001 ffdf 	bl	8002fac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio_port_2, gpio_pin_2, GPIO_PIN_SET);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6898      	ldr	r0, [r3, #8]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	885b      	ldrh	r3, [r3, #2]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f001 ffd7 	bl	8002fac <HAL_GPIO_WritePin>
	switch(channel){
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	2b0c      	cmp	r3, #12
 8001004:	d834      	bhi.n	8001070 <_ZN5Motor9turnRightEm+0x9c>
 8001006:	a201      	add	r2, pc, #4	; (adr r2, 800100c <_ZN5Motor9turnRightEm+0x38>)
 8001008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100c:	08001041 	.word	0x08001041
 8001010:	08001071 	.word	0x08001071
 8001014:	08001071 	.word	0x08001071
 8001018:	08001071 	.word	0x08001071
 800101c:	0800104d 	.word	0x0800104d
 8001020:	08001071 	.word	0x08001071
 8001024:	08001071 	.word	0x08001071
 8001028:	08001071 	.word	0x08001071
 800102c:	08001059 	.word	0x08001059
 8001030:	08001071 	.word	0x08001071
 8001034:	08001071 	.word	0x08001071
 8001038:	08001071 	.word	0x08001071
 800103c:	08001065 	.word	0x08001065
			case TIM_CHANNEL_1:
				timer->Instance -> CCR1 = duty;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 800104a:	e011      	b.n	8001070 <_ZN5Motor9turnRightEm+0x9c>
			case TIM_CHANNEL_2:
				timer->Instance -> CCR2 = duty;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8001056:	e00b      	b.n	8001070 <_ZN5Motor9turnRightEm+0x9c>
			case TIM_CHANNEL_3:
				timer->Instance -> CCR3 = duty;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8001062:	e005      	b.n	8001070 <_ZN5Motor9turnRightEm+0x9c>
			case TIM_CHANNEL_4:
				timer->Instance -> CCR4 = duty;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 800106e:	bf00      	nop
	}
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <_ZN5Motor14goHomePositionEv>:

void Motor::goHomePosition(){
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	switch(channel){
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	2b0c      	cmp	r3, #12
 8001086:	f200 8083 	bhi.w	8001190 <_ZN5Motor14goHomePositionEv+0x118>
 800108a:	a201      	add	r2, pc, #4	; (adr r2, 8001090 <_ZN5Motor14goHomePositionEv+0x18>)
 800108c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001090:	080010c5 	.word	0x080010c5
 8001094:	08001191 	.word	0x08001191
 8001098:	08001191 	.word	0x08001191
 800109c:	08001191 	.word	0x08001191
 80010a0:	08001105 	.word	0x08001105
 80010a4:	08001191 	.word	0x08001191
 80010a8:	08001191 	.word	0x08001191
 80010ac:	08001191 	.word	0x08001191
 80010b0:	08001145 	.word	0x08001145
 80010b4:	08001191 	.word	0x08001191
 80010b8:	08001191 	.word	0x08001191
 80010bc:	08001191 	.word	0x08001191
 80010c0:	08001185 	.word	0x08001185
		// Motor 2
		case TIM_CHANNEL_1:
			Motor::turnRight(800);
 80010c4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff83 	bl	8000fd4 <_ZN5Motor9turnRightEm>
			while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6) == GPIO_PIN_SET){
 80010ce:	2140      	movs	r1, #64	; 0x40
 80010d0:	4831      	ldr	r0, [pc, #196]	; (8001198 <_ZN5Motor14goHomePositionEv+0x120>)
 80010d2:	f001 ff53 	bl	8002f7c <HAL_GPIO_ReadPin>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b01      	cmp	r3, #1
 80010da:	bf0c      	ite	eq
 80010dc:	2301      	moveq	r3, #1
 80010de:	2300      	movne	r3, #0
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <_ZN5Motor14goHomePositionEv+0x76>
				osDelay(2);
 80010e6:	2002      	movs	r0, #2
 80010e8:	f004 fc85 	bl	80059f6 <osDelay>
			while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6) == GPIO_PIN_SET){
 80010ec:	e7ef      	b.n	80010ce <_ZN5Motor14goHomePositionEv+0x56>
			}
			timer->Instance -> CCR1 = 0;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2200      	movs	r2, #0
 80010f6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCounter(&ENCODER_2_TIMER, 32767);
 80010f8:	4b28      	ldr	r3, [pc, #160]	; (800119c <_ZN5Motor14goHomePositionEv+0x124>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001100:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8001102:	e045      	b.n	8001190 <_ZN5Motor14goHomePositionEv+0x118>
		// Motor 1
		case TIM_CHANNEL_2:
			Motor::turnLeft(850);
 8001104:	f240 3152 	movw	r1, #850	; 0x352
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff11 	bl	8000f30 <_ZN5Motor8turnLeftEm>
			while(HAL_GPIO_ReadPin(HALL_SENSOR_1_GPIO_Port, HALL_SENSOR_1_Pin) == GPIO_PIN_SET){
 800110e:	2180      	movs	r1, #128	; 0x80
 8001110:	4821      	ldr	r0, [pc, #132]	; (8001198 <_ZN5Motor14goHomePositionEv+0x120>)
 8001112:	f001 ff33 	bl	8002f7c <HAL_GPIO_ReadPin>
 8001116:	4603      	mov	r3, r0
 8001118:	2b01      	cmp	r3, #1
 800111a:	bf0c      	ite	eq
 800111c:	2301      	moveq	r3, #1
 800111e:	2300      	movne	r3, #0
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <_ZN5Motor14goHomePositionEv+0xb6>
				osDelay(2);
 8001126:	2002      	movs	r0, #2
 8001128:	f004 fc65 	bl	80059f6 <osDelay>
			while(HAL_GPIO_ReadPin(HALL_SENSOR_1_GPIO_Port, HALL_SENSOR_1_Pin) == GPIO_PIN_SET){
 800112c:	e7ef      	b.n	800110e <_ZN5Motor14goHomePositionEv+0x96>
			}
			timer->Instance -> CCR2 = 0;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2200      	movs	r2, #0
 8001136:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SetCounter(&ENCODER_1_TIMER, 32767);
 8001138:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <_ZN5Motor14goHomePositionEv+0x128>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001140:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8001142:	e025      	b.n	8001190 <_ZN5Motor14goHomePositionEv+0x118>
	    // Motor 3
		case TIM_CHANNEL_3:
			Motor::turnRight(700);
 8001144:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff43 	bl	8000fd4 <_ZN5Motor9turnRightEm>
			while(HAL_GPIO_ReadPin(HALL_SENSOR_3_GPIO_Port, HALL_SENSOR_3_Pin) == GPIO_PIN_SET){
 800114e:	2120      	movs	r1, #32
 8001150:	4811      	ldr	r0, [pc, #68]	; (8001198 <_ZN5Motor14goHomePositionEv+0x120>)
 8001152:	f001 ff13 	bl	8002f7c <HAL_GPIO_ReadPin>
 8001156:	4603      	mov	r3, r0
 8001158:	2b01      	cmp	r3, #1
 800115a:	bf0c      	ite	eq
 800115c:	2301      	moveq	r3, #1
 800115e:	2300      	movne	r3, #0
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <_ZN5Motor14goHomePositionEv+0xf6>
				osDelay(2);
 8001166:	2002      	movs	r0, #2
 8001168:	f004 fc45 	bl	80059f6 <osDelay>
			while(HAL_GPIO_ReadPin(HALL_SENSOR_3_GPIO_Port, HALL_SENSOR_3_Pin) == GPIO_PIN_SET){
 800116c:	e7ef      	b.n	800114e <_ZN5Motor14goHomePositionEv+0xd6>
			}
			timer->Instance -> CCR3 = 0;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2200      	movs	r2, #0
 8001176:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SetCounter(&ENCODER_3_TIMER, 32767);
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <_ZN5Motor14goHomePositionEv+0x12c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001180:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8001182:	e005      	b.n	8001190 <_ZN5Motor14goHomePositionEv+0x118>
		case TIM_CHANNEL_4:
			timer->Instance -> CCR4 = 0;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2200      	movs	r2, #0
 800118c:	641a      	str	r2, [r3, #64]	; 0x40
			//__HAL_TIM_SetCounter(timer, 0);
			break;
 800118e:	bf00      	nop
	}
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40020c00 	.word	0x40020c00
 800119c:	200040d8 	.word	0x200040d8
 80011a0:	20004120 	.word	0x20004120
 80011a4:	20004168 	.word	0x20004168

080011a8 <_ZN5Motor9stopMotorEv>:

void Motor::stopMotor(){
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(gpio_port_1, gpio_pin_1, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(gpio_port_2, gpio_pin_2, GPIO_PIN_SET);
	switch(channel){
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	2b0c      	cmp	r3, #12
 80011b6:	d83a      	bhi.n	800122e <_ZN5Motor9stopMotorEv+0x86>
 80011b8:	a201      	add	r2, pc, #4	; (adr r2, 80011c0 <_ZN5Motor9stopMotorEv+0x18>)
 80011ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011be:	bf00      	nop
 80011c0:	080011f5 	.word	0x080011f5
 80011c4:	0800122f 	.word	0x0800122f
 80011c8:	0800122f 	.word	0x0800122f
 80011cc:	0800122f 	.word	0x0800122f
 80011d0:	0800120b 	.word	0x0800120b
 80011d4:	0800122f 	.word	0x0800122f
 80011d8:	0800122f 	.word	0x0800122f
 80011dc:	0800122f 	.word	0x0800122f
 80011e0:	08001217 	.word	0x08001217
 80011e4:	0800122f 	.word	0x0800122f
 80011e8:	0800122f 	.word	0x0800122f
 80011ec:	0800122f 	.word	0x0800122f
 80011f0:	08001223 	.word	0x08001223
			case TIM_CHANNEL_1:
				timer->Instance -> CCR1 = 0;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2200      	movs	r2, #0
 80011fc:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCounter(&ENCODER_2_TIMER, 32767);
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <_ZN5Motor9stopMotorEv+0x94>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001206:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 8001208:	e011      	b.n	800122e <_ZN5Motor9stopMotorEv+0x86>
			case TIM_CHANNEL_2:
				timer->Instance -> CCR2 = 0;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2200      	movs	r2, #0
 8001212:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8001214:	e00b      	b.n	800122e <_ZN5Motor9stopMotorEv+0x86>
			case TIM_CHANNEL_3:
				timer->Instance -> CCR3 = 0;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2200      	movs	r2, #0
 800121e:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8001220:	e005      	b.n	800122e <_ZN5Motor9stopMotorEv+0x86>
			case TIM_CHANNEL_4:
				timer->Instance -> CCR4 = 0;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2200      	movs	r2, #0
 800122a:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 800122c:	bf00      	nop
	}
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	200040d8 	.word	0x200040d8

08001240 <startSerialComms>:
// Flag that activates when arrives a new package from serial port
bool data_received = false;
// Flag that indicates to send the data to the serial port
bool data_send = false;

void startSerialComms(RobotInfoHandler *info_handler){
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, (uint8_t*) rx_buffer, RECEIVED_BYTES);
 8001248:	220e      	movs	r2, #14
 800124a:	493e      	ldr	r1, [pc, #248]	; (8001344 <startSerialComms+0x104>)
 800124c:	483e      	ldr	r0, [pc, #248]	; (8001348 <startSerialComms+0x108>)
 800124e:	f003 fdcc 	bl	8004dea <HAL_UART_Receive_IT>

	while(1){
		if(data_received == true){
 8001252:	4b3e      	ldr	r3, [pc, #248]	; (800134c <startSerialComms+0x10c>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d152      	bne.n	8001300 <startSerialComms+0xc0>
			data_received = false;
 800125a:	4b3c      	ldr	r3, [pc, #240]	; (800134c <startSerialComms+0x10c>)
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
			if(rx_buffer[0] == START_OF_PACKAGE && rx_buffer[13] == END_OF_PACKAGE){
 8001260:	4b38      	ldr	r3, [pc, #224]	; (8001344 <startSerialComms+0x104>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2ba1      	cmp	r3, #161	; 0xa1
 8001266:	d14b      	bne.n	8001300 <startSerialComms+0xc0>
 8001268:	4b36      	ldr	r3, [pc, #216]	; (8001344 <startSerialComms+0x104>)
 800126a:	7b5b      	ldrb	r3, [r3, #13]
 800126c:	2bb1      	cmp	r3, #177	; 0xb1
 800126e:	d147      	bne.n	8001300 <startSerialComms+0xc0>
				angle_1.bytes[0] = rx_buffer[1];
 8001270:	4b34      	ldr	r3, [pc, #208]	; (8001344 <startSerialComms+0x104>)
 8001272:	785a      	ldrb	r2, [r3, #1]
 8001274:	4b36      	ldr	r3, [pc, #216]	; (8001350 <startSerialComms+0x110>)
 8001276:	701a      	strb	r2, [r3, #0]
				angle_1.bytes[1] = rx_buffer[2];
 8001278:	4b32      	ldr	r3, [pc, #200]	; (8001344 <startSerialComms+0x104>)
 800127a:	789a      	ldrb	r2, [r3, #2]
 800127c:	4b34      	ldr	r3, [pc, #208]	; (8001350 <startSerialComms+0x110>)
 800127e:	705a      	strb	r2, [r3, #1]
				angle_1.bytes[2] = rx_buffer[3];
 8001280:	4b30      	ldr	r3, [pc, #192]	; (8001344 <startSerialComms+0x104>)
 8001282:	78da      	ldrb	r2, [r3, #3]
 8001284:	4b32      	ldr	r3, [pc, #200]	; (8001350 <startSerialComms+0x110>)
 8001286:	709a      	strb	r2, [r3, #2]
				angle_1.bytes[3] = rx_buffer[4];
 8001288:	4b2e      	ldr	r3, [pc, #184]	; (8001344 <startSerialComms+0x104>)
 800128a:	791a      	ldrb	r2, [r3, #4]
 800128c:	4b30      	ldr	r3, [pc, #192]	; (8001350 <startSerialComms+0x110>)
 800128e:	70da      	strb	r2, [r3, #3]
				angle_2.bytes[0] = rx_buffer[5];
 8001290:	4b2c      	ldr	r3, [pc, #176]	; (8001344 <startSerialComms+0x104>)
 8001292:	795a      	ldrb	r2, [r3, #5]
 8001294:	4b2f      	ldr	r3, [pc, #188]	; (8001354 <startSerialComms+0x114>)
 8001296:	701a      	strb	r2, [r3, #0]
				angle_2.bytes[1] = rx_buffer[6];
 8001298:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <startSerialComms+0x104>)
 800129a:	799a      	ldrb	r2, [r3, #6]
 800129c:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <startSerialComms+0x114>)
 800129e:	705a      	strb	r2, [r3, #1]
				angle_2.bytes[2] = rx_buffer[7];
 80012a0:	4b28      	ldr	r3, [pc, #160]	; (8001344 <startSerialComms+0x104>)
 80012a2:	79da      	ldrb	r2, [r3, #7]
 80012a4:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <startSerialComms+0x114>)
 80012a6:	709a      	strb	r2, [r3, #2]
				angle_2.bytes[3] = rx_buffer[8];
 80012a8:	4b26      	ldr	r3, [pc, #152]	; (8001344 <startSerialComms+0x104>)
 80012aa:	7a1a      	ldrb	r2, [r3, #8]
 80012ac:	4b29      	ldr	r3, [pc, #164]	; (8001354 <startSerialComms+0x114>)
 80012ae:	70da      	strb	r2, [r3, #3]
				angle_3.bytes[0] = rx_buffer[9];
 80012b0:	4b24      	ldr	r3, [pc, #144]	; (8001344 <startSerialComms+0x104>)
 80012b2:	7a5a      	ldrb	r2, [r3, #9]
 80012b4:	4b28      	ldr	r3, [pc, #160]	; (8001358 <startSerialComms+0x118>)
 80012b6:	701a      	strb	r2, [r3, #0]
				angle_3.bytes[1] = rx_buffer[10];
 80012b8:	4b22      	ldr	r3, [pc, #136]	; (8001344 <startSerialComms+0x104>)
 80012ba:	7a9a      	ldrb	r2, [r3, #10]
 80012bc:	4b26      	ldr	r3, [pc, #152]	; (8001358 <startSerialComms+0x118>)
 80012be:	705a      	strb	r2, [r3, #1]
				angle_3.bytes[2] = rx_buffer[11];
 80012c0:	4b20      	ldr	r3, [pc, #128]	; (8001344 <startSerialComms+0x104>)
 80012c2:	7ada      	ldrb	r2, [r3, #11]
 80012c4:	4b24      	ldr	r3, [pc, #144]	; (8001358 <startSerialComms+0x118>)
 80012c6:	709a      	strb	r2, [r3, #2]
				angle_3.bytes[3] = rx_buffer[12];
 80012c8:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <startSerialComms+0x104>)
 80012ca:	7b1a      	ldrb	r2, [r3, #12]
 80012cc:	4b22      	ldr	r3, [pc, #136]	; (8001358 <startSerialComms+0x118>)
 80012ce:	70da      	strb	r2, [r3, #3]
				setAngle1(info_handler, angle_1.float_value);
 80012d0:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <startSerialComms+0x110>)
 80012d2:	edd3 7a00 	vldr	s15, [r3]
 80012d6:	eeb0 0a67 	vmov.f32	s0, s15
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff fd30 	bl	8000d40 <setAngle1>
				setAngle2(info_handler, angle_2.float_value);
 80012e0:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <startSerialComms+0x114>)
 80012e2:	edd3 7a00 	vldr	s15, [r3]
 80012e6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff fd43 	bl	8000d76 <setAngle2>
				setAngle3(info_handler, angle_3.float_value);
 80012f0:	4b19      	ldr	r3, [pc, #100]	; (8001358 <startSerialComms+0x118>)
 80012f2:	edd3 7a00 	vldr	s15, [r3]
 80012f6:	eeb0 0a67 	vmov.f32	s0, s15
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff fd56 	bl	8000dac <setAngle3>
			}
		}
		if(data_send == true){
 8001300:	4b16      	ldr	r3, [pc, #88]	; (800135c <startSerialComms+0x11c>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d118      	bne.n	800133a <startSerialComms+0xfa>
			//ticks.float_value= info_handler->ticks;
			//HAL_UART_Transmit(&huart2, ticks.bytes, sizeof(ticks.bytes), 1000);

			HAL_UART_Transmit(&huart2, angle_1.bytes, sizeof(angle_1.bytes), 1000);
 8001308:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130c:	2204      	movs	r2, #4
 800130e:	4910      	ldr	r1, [pc, #64]	; (8001350 <startSerialComms+0x110>)
 8001310:	480d      	ldr	r0, [pc, #52]	; (8001348 <startSerialComms+0x108>)
 8001312:	f003 fcd8 	bl	8004cc6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, angle_2.bytes, sizeof(angle_2.bytes), 1000);
 8001316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131a:	2204      	movs	r2, #4
 800131c:	490d      	ldr	r1, [pc, #52]	; (8001354 <startSerialComms+0x114>)
 800131e:	480a      	ldr	r0, [pc, #40]	; (8001348 <startSerialComms+0x108>)
 8001320:	f003 fcd1 	bl	8004cc6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, angle_3.bytes, sizeof(angle_3.bytes), 1000);
 8001324:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001328:	2204      	movs	r2, #4
 800132a:	490b      	ldr	r1, [pc, #44]	; (8001358 <startSerialComms+0x118>)
 800132c:	4806      	ldr	r0, [pc, #24]	; (8001348 <startSerialComms+0x108>)
 800132e:	f003 fcca 	bl	8004cc6 <HAL_UART_Transmit>

			osDelay(500);
 8001332:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001336:	f004 fb5e 	bl	80059f6 <osDelay>
		}
		osDelay(100);
 800133a:	2064      	movs	r0, #100	; 0x64
 800133c:	f004 fb5b 	bl	80059f6 <osDelay>
		if(data_received == true){
 8001340:	e787      	b.n	8001252 <startSerialComms+0x12>
 8001342:	bf00      	nop
 8001344:	20000040 	.word	0x20000040
 8001348:	2000423c 	.word	0x2000423c
 800134c:	2000004e 	.word	0x2000004e
 8001350:	20000034 	.word	0x20000034
 8001354:	20000038 	.word	0x20000038
 8001358:	2000003c 	.word	0x2000003c
 800135c:	2000004f 	.word	0x2000004f

08001360 <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a07      	ldr	r2, [pc, #28]	; (800138c <HAL_UART_RxCpltCallback+0x2c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d102      	bne.n	8001378 <HAL_UART_RxCpltCallback+0x18>
		data_received = true;
 8001372:	4b07      	ldr	r3, [pc, #28]	; (8001390 <HAL_UART_RxCpltCallback+0x30>)
 8001374:	2201      	movs	r2, #1
 8001376:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t*) rx_buffer, RECEIVED_BYTES);
 8001378:	220e      	movs	r2, #14
 800137a:	4906      	ldr	r1, [pc, #24]	; (8001394 <HAL_UART_RxCpltCallback+0x34>)
 800137c:	4806      	ldr	r0, [pc, #24]	; (8001398 <HAL_UART_RxCpltCallback+0x38>)
 800137e:	f003 fd34 	bl	8004dea <HAL_UART_Receive_IT>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40004400 	.word	0x40004400
 8001390:	2000004e 	.word	0x2000004e
 8001394:	20000040 	.word	0x20000040
 8001398:	2000423c 	.word	0x2000423c

0800139c <_ZN3PIDC1Effffff>:
#include "Task/PID/PID.hpp"


PID::PID(float kp, float kd, float ki, float max_output, float min_output, float update_rate){
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	61f8      	str	r0, [r7, #28]
 80013a4:	ed87 0a06 	vstr	s0, [r7, #24]
 80013a8:	edc7 0a05 	vstr	s1, [r7, #20]
 80013ac:	ed87 1a04 	vstr	s2, [r7, #16]
 80013b0:	edc7 1a03 	vstr	s3, [r7, #12]
 80013b4:	ed87 2a02 	vstr	s4, [r7, #8]
 80013b8:	edc7 2a01 	vstr	s5, [r7, #4]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	4a15      	ldr	r2, [pc, #84]	; (8001414 <_ZN3PIDC1Effffff+0x78>)
 80013c0:	611a      	str	r2, [r3, #16]
	kp_ = kp;
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	601a      	str	r2, [r3, #0]
	ki_ = ki;
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	609a      	str	r2, [r3, #8]
	kd_ = kd;
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	605a      	str	r2, [r3, #4]
	pid_update_seconds = update_rate;
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	60da      	str	r2, [r3, #12]
	max_pid_output_ = max_output;
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	619a      	str	r2, [r3, #24]
	min_pid_output_ = min_output;
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	615a      	str	r2, [r3, #20]
	pid_.Kp = kp_;
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	63da      	str	r2, [r3, #60]	; 0x3c
	pid_.Ki = ki_;
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	641a      	str	r2, [r3, #64]	; 0x40
	pid_.Kd = kd_;
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	645a      	str	r2, [r3, #68]	; 0x44
	arm_pid_init_f32(&pid_, 1);
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3324      	adds	r3, #36	; 0x24
 8001402:	2101      	movs	r1, #1
 8001404:	4618      	mov	r0, r3
 8001406:	f001 fa30 	bl	800286a <arm_pid_init_f32>
}
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	4618      	mov	r0, r3
 800140e:	3720      	adds	r7, #32
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40a00000 	.word	0x40a00000

08001418 <_ZN3PID9updatePIDEff>:

float PID::updatePID(float setpoint_position, float current_position){
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	ed87 0a02 	vstr	s0, [r7, #8]
 8001424:	edc7 0a01 	vstr	s1, [r7, #4]
	error_ = setpoint_position - current_position;
 8001428:	ed97 7a02 	vldr	s14, [r7, #8]
 800142c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001430:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	edc3 7a07 	vstr	s15, [r3, #28]
	output = arm_pid_f32(&pid_, error_);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	61fa      	str	r2, [r7, #28]
 8001446:	61bb      	str	r3, [r7, #24]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	ed93 7a00 	vldr	s14, [r3]
 800144e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001452:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	edd3 6a01 	vldr	s13, [r3, #4]
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001462:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001466:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	edd3 7a04 	vldr	s15, [r3, #16]
 8001476:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800147a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001488:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Update state */
    S->state[1] = S->state[0];
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	621a      	str	r2, [r3, #32]
	if(output > max_pid_output_) output = max_pid_output_;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	ed93 7a08 	vldr	s14, [r3, #32]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80014b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ba:	dd04      	ble.n	80014c6 <_ZN3PID9updatePIDEff+0xae>
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	699a      	ldr	r2, [r3, #24]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	621a      	str	r2, [r3, #32]
 80014c4:	e00e      	b.n	80014e4 <_ZN3PID9updatePIDEff+0xcc>
	else if(output < min_pid_output_) output = min_pid_output_;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	ed93 7a08 	vldr	s14, [r3, #32]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	edd3 7a05 	vldr	s15, [r3, #20]
 80014d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014da:	d503      	bpl.n	80014e4 <_ZN3PID9updatePIDEff+0xcc>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	695a      	ldr	r2, [r3, #20]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	621a      	str	r2, [r3, #32]
	if(error_ < 2.0f && error_ > -2.0f) output = 0;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	edd3 7a07 	vldr	s15, [r3, #28]
 80014ea:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80014ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f6:	d50d      	bpl.n	8001514 <_ZN3PID9updatePIDEff+0xfc>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	edd3 7a07 	vldr	s15, [r3, #28]
 80014fe:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150a:	dd03      	ble.n	8001514 <_ZN3PID9updatePIDEff+0xfc>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	621a      	str	r2, [r3, #32]
	return output;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	ee07 3a90 	vmov	s15, r3
}
 800151c:	eeb0 0a67 	vmov.f32	s0, s15
 8001520:	3724      	adds	r7, #36	; 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <PID1Node>:
#include "Settings.h"

float output_pid_1=0;
float current_angle_1 = 0;

void PID1Node(RobotInfoHandler *robot_info_handler){
 800152c:	b580      	push	{r7, lr}
 800152e:	b0a4      	sub	sp, #144	; 0x90
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]

	// Pins definition for motor 1
	Pin motor_1_a{MOTOR_1_L_GPIO_Port, MOTOR_1_L_Pin};
 8001534:	4a29      	ldr	r2, [pc, #164]	; (80015dc <PID1Node+0xb0>)
 8001536:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800153a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800153e:	e883 0003 	stmia.w	r3, {r0, r1}
	Pin motor_1_b{MOTOR_1_R_GPIO_Port, MOTOR_1_R_Pin};
 8001542:	4a27      	ldr	r2, [pc, #156]	; (80015e0 <PID1Node+0xb4>)
 8001544:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001548:	e892 0003 	ldmia.w	r2, {r0, r1}
 800154c:	e883 0003 	stmia.w	r3, {r0, r1}

	// Timer definition for motor 1
	MotorChannel motor_1_timer{&MOTOR_1_TIMER, MOTOR_1_CHANNEL};
 8001550:	4a24      	ldr	r2, [pc, #144]	; (80015e4 <PID1Node+0xb8>)
 8001552:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001556:	e892 0003 	ldmia.w	r2, {r0, r1}
 800155a:	e883 0003 	stmia.w	r3, {r0, r1}

	// Motor 1 object creation
	Motor motor1(motor_1_timer, motor_1_a, motor_1_b);
 800155e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001562:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001566:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800156a:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800156e:	f7ff fcb3 	bl	8000ed8 <_ZN5MotorC1ER12MotorChannelR3PinS3_>

	// Encoder 1 object creation
	Encoder encoder1(&ENCODER_1_TIMER, ENCODER_1_STEPS);
 8001572:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001576:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 80015e8 <PID1Node+0xbc>
 800157a:	491c      	ldr	r1, [pc, #112]	; (80015ec <PID1Node+0xc0>)
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fc31 	bl	8000de4 <_ZN7EncoderC1EP17TIM_HandleTypeDeff>

	// PID 1 object creation
	PID pid1(KP_CONST_1, KD_CONST_1, KI_CONST_1, MAX_PID_OUTPUT, MIN_PID_OUTPUT, PID_UPDATE_TIME_S);
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	eddf 2a1a 	vldr	s5, [pc, #104]	; 80015f0 <PID1Node+0xc4>
 800158a:	ed9f 2a1a 	vldr	s4, [pc, #104]	; 80015f4 <PID1Node+0xc8>
 800158e:	eddf 1a1a 	vldr	s3, [pc, #104]	; 80015f8 <PID1Node+0xcc>
 8001592:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
 8001596:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800159a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80015fc <PID1Node+0xd0>
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fefc 	bl	800139c <_ZN3PIDC1Effffff>

	//float output_pid_1=0;
	//float current_angle = 0;
	if(robot_info_handler->angle_1 == 0){
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	edd3 7a00 	vldr	s15, [r3]
 80015aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b2:	d104      	bne.n	80015be <PID1Node+0x92>
		motor1.goHomePosition();
 80015b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fd5d 	bl	8001078 <_ZN5Motor14goHomePositionEv>
	}

	while(1){

		current_angle_1 = encoder1.getAngle();
 80015be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fc30 	bl	8000e28 <_ZN7Encoder8getAngleEv>
 80015c8:	eef0 7a40 	vmov.f32	s15, s0
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <PID1Node+0xd4>)
 80015ce:	edc3 7a00 	vstr	s15, [r3]
		//output_pid_1 = pid1.updatePID(robot_info_handler->angle_1, current_angle_1);
		//if(output_pid_1 > 0) motor1.turnRight(output_pid_1);
		//else if (output_pid_1 < 0) motor1.turnLeft(-output_pid_1);
		osDelay(PID_UPDATE_TIME_mS);
 80015d2:	203c      	movs	r0, #60	; 0x3c
 80015d4:	f004 fa0f 	bl	80059f6 <osDelay>
		current_angle_1 = encoder1.getAngle();
 80015d8:	e7f1      	b.n	80015be <PID1Node+0x92>
 80015da:	bf00      	nop
 80015dc:	08008118 	.word	0x08008118
 80015e0:	08008120 	.word	0x08008120
 80015e4:	08008128 	.word	0x08008128
 80015e8:	469d3e00 	.word	0x469d3e00
 80015ec:	20004120 	.word	0x20004120
 80015f0:	3d75c28f 	.word	0x3d75c28f
 80015f4:	c47a0000 	.word	0xc47a0000
 80015f8:	447a0000 	.word	0x447a0000
 80015fc:	44480000 	.word	0x44480000
 8001600:	20000050 	.word	0x20000050

08001604 <PID2Node>:

float output_pid_2 = 0;
float current_angle_2 = 0;
int hall_2_flag = 0;

void PID2Node(RobotInfoHandler *robot_info_handler){
 8001604:	b580      	push	{r7, lr}
 8001606:	b0a4      	sub	sp, #144	; 0x90
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

	// Pins definition for motor 2
	Pin motor_2_a{MOTOR_2_L_GPIO_Port, MOTOR_2_L_Pin};
 800160c:	4a5a      	ldr	r2, [pc, #360]	; (8001778 <PID2Node+0x174>)
 800160e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001612:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001616:	e883 0003 	stmia.w	r3, {r0, r1}
	Pin motor_2_b{MOTOR_2_R_GPIO_Port, MOTOR_2_R_Pin};
 800161a:	4a58      	ldr	r2, [pc, #352]	; (800177c <PID2Node+0x178>)
 800161c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001620:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001624:	e883 0003 	stmia.w	r3, {r0, r1}

	// Timer definition for motor 2
	MotorChannel motor_2_timer{&MOTOR_2_TIMER, MOTOR_2_CHANNEL};
 8001628:	4b55      	ldr	r3, [pc, #340]	; (8001780 <PID2Node+0x17c>)
 800162a:	67bb      	str	r3, [r7, #120]	; 0x78
 800162c:	2300      	movs	r3, #0
 800162e:	67fb      	str	r3, [r7, #124]	; 0x7c

	// Motor 2 object creation
	Motor motor2(motor_2_timer, motor_2_a, motor_2_b);
 8001630:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001634:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001638:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800163c:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8001640:	f7ff fc4a 	bl	8000ed8 <_ZN5MotorC1ER12MotorChannelR3PinS3_>

	// Encoder 2 object creation
	Encoder encoder2(&ENCODER_2_TIMER, ENCODER_2_STEPS);
 8001644:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001648:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8001784 <PID2Node+0x180>
 800164c:	494e      	ldr	r1, [pc, #312]	; (8001788 <PID2Node+0x184>)
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fbc8 	bl	8000de4 <_ZN7EncoderC1EP17TIM_HandleTypeDeff>

	// PID 2 object creation
	PID pid2(KP_CONST_2, KD_CONST_2, KI_CONST_2, MAX_PID_OUTPUT, MIN_PID_OUTPUT, PID_UPDATE_TIME_S);
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	eddf 2a4c 	vldr	s5, [pc, #304]	; 800178c <PID2Node+0x188>
 800165c:	ed9f 2a4c 	vldr	s4, [pc, #304]	; 8001790 <PID2Node+0x18c>
 8001660:	eddf 1a4c 	vldr	s3, [pc, #304]	; 8001794 <PID2Node+0x190>
 8001664:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
 8001668:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800166c:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8001798 <PID2Node+0x194>
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fe93 	bl	800139c <_ZN3PIDC1Effffff>

	//float current_angle = 0;
	if(robot_info_handler->angle_2 == 0){
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	edd3 7a01 	vldr	s15, [r3, #4]
 800167c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001684:	d11a      	bne.n	80016bc <PID2Node+0xb8>
		// Check if the hall is in the initial position
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6) == GPIO_PIN_RESET){
 8001686:	2140      	movs	r1, #64	; 0x40
 8001688:	4844      	ldr	r0, [pc, #272]	; (800179c <PID2Node+0x198>)
 800168a:	f001 fc77 	bl	8002f7c <HAL_GPIO_ReadPin>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	bf0c      	ite	eq
 8001694:	2301      	moveq	r3, #1
 8001696:	2300      	movne	r3, #0
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d009      	beq.n	80016b2 <PID2Node+0xae>
			current_angle_2 = 0;
 800169e:	4b40      	ldr	r3, [pc, #256]	; (80017a0 <PID2Node+0x19c>)
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
			encoder2.resetTicksCounter();
 80016a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fc04 	bl	8000eb8 <_ZN7Encoder17resetTicksCounterEv>
 80016b0:	e004      	b.n	80016bc <PID2Node+0xb8>
		}
		else	motor2.goHomePosition();
 80016b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fcde 	bl	8001078 <_ZN5Motor14goHomePositionEv>
	}

	while(1){
		if(hall_2_flag == 1){
 80016bc:	4b39      	ldr	r3, [pc, #228]	; (80017a4 <PID2Node+0x1a0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d10b      	bne.n	80016dc <PID2Node+0xd8>
			hall_2_flag = 0;
 80016c4:	4b37      	ldr	r3, [pc, #220]	; (80017a4 <PID2Node+0x1a0>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
			motor2.stopMotor();
 80016ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fd6a 	bl	80011a8 <_ZN5Motor9stopMotorEv>
			current_angle_2 = 0;
 80016d4:	4b32      	ldr	r3, [pc, #200]	; (80017a0 <PID2Node+0x19c>)
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
		}
		current_angle_2 = encoder2.getAngle();
 80016dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fba1 	bl	8000e28 <_ZN7Encoder8getAngleEv>
 80016e6:	eef0 7a40 	vmov.f32	s15, s0
 80016ea:	4b2d      	ldr	r3, [pc, #180]	; (80017a0 <PID2Node+0x19c>)
 80016ec:	edc3 7a00 	vstr	s15, [r3]
		output_pid_2 = pid2.updatePID(robot_info_handler->angle_2, current_angle_2);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80016f6:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <PID2Node+0x19c>)
 80016f8:	ed93 7a00 	vldr	s14, [r3]
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	eef0 0a47 	vmov.f32	s1, s14
 8001704:	eeb0 0a67 	vmov.f32	s0, s15
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fe85 	bl	8001418 <_ZN3PID9updatePIDEff>
 800170e:	eef0 7a40 	vmov.f32	s15, s0
 8001712:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <PID2Node+0x1a4>)
 8001714:	edc3 7a00 	vstr	s15, [r3]
		if(output_pid_2 > 0) motor2.turnLeft(output_pid_2);
 8001718:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <PID2Node+0x1a4>)
 800171a:	edd3 7a00 	vldr	s15, [r3]
 800171e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001726:	dd0c      	ble.n	8001742 <PID2Node+0x13e>
 8001728:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <PID2Node+0x1a4>)
 800172a:	edd3 7a00 	vldr	s15, [r3]
 800172e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001732:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001736:	ee17 1a90 	vmov	r1, s15
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fbf8 	bl	8000f30 <_ZN5Motor8turnLeftEm>
 8001740:	e015      	b.n	800176e <PID2Node+0x16a>
		else if (output_pid_2 < 0) motor2.turnRight(-output_pid_2);
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <PID2Node+0x1a4>)
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800174c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001750:	d50d      	bpl.n	800176e <PID2Node+0x16a>
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <PID2Node+0x1a4>)
 8001754:	edd3 7a00 	vldr	s15, [r3]
 8001758:	eef1 7a67 	vneg.f32	s15, s15
 800175c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001760:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001764:	ee17 1a90 	vmov	r1, s15
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fc33 	bl	8000fd4 <_ZN5Motor9turnRightEm>
		osDelay(PID_UPDATE_TIME_mS);
 800176e:	203c      	movs	r0, #60	; 0x3c
 8001770:	f004 f941 	bl	80059f6 <osDelay>
		if(hall_2_flag == 1){
 8001774:	e7a2      	b.n	80016bc <PID2Node+0xb8>
 8001776:	bf00      	nop
 8001778:	08008130 	.word	0x08008130
 800177c:	08008138 	.word	0x08008138
 8001780:	200041b0 	.word	0x200041b0
 8001784:	469d3e00 	.word	0x469d3e00
 8001788:	200040d8 	.word	0x200040d8
 800178c:	3d75c28f 	.word	0x3d75c28f
 8001790:	c47a0000 	.word	0xc47a0000
 8001794:	447a0000 	.word	0x447a0000
 8001798:	42c80000 	.word	0x42c80000
 800179c:	40020c00 	.word	0x40020c00
 80017a0:	20000058 	.word	0x20000058
 80017a4:	2000005c 	.word	0x2000005c
 80017a8:	20000054 	.word	0x20000054

080017ac <HAL_GPIO_EXTI_Callback>:
	}
}

// Callback function for external gpio interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_6){
 80017b6:	88fb      	ldrh	r3, [r7, #6]
 80017b8:	2b40      	cmp	r3, #64	; 0x40
 80017ba:	d106      	bne.n	80017ca <HAL_GPIO_EXTI_Callback+0x1e>
		hall_2_flag = 1;
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <HAL_GPIO_EXTI_Callback+0x28>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 80017c2:	2102      	movs	r1, #2
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <HAL_GPIO_EXTI_Callback+0x2c>)
 80017c6:	f001 fc0a 	bl	8002fde <HAL_GPIO_TogglePin>
	}
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	2000005c 	.word	0x2000005c
 80017d8:	40020800 	.word	0x40020800

080017dc <PID3Node>:
#include "Encoder.hpp"
#include "Settings.h"

float current_angle_3 = 0, output_pid_3 = 0;

void PID3Node(RobotInfoHandler *robot_info_handler){
 80017dc:	b580      	push	{r7, lr}
 80017de:	b0a4      	sub	sp, #144	; 0x90
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	// Pins definition for motor 3
	Pin motor_3_a{MOTOR_3_L_GPIO_Port, MOTOR_3_L_Pin};
 80017e4:	4a48      	ldr	r2, [pc, #288]	; (8001908 <PID3Node+0x12c>)
 80017e6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80017ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017ee:	e883 0003 	stmia.w	r3, {r0, r1}
	Pin motor_3_b{MOTOR_3_R_GPIO_Port, MOTOR_3_R_Pin};
 80017f2:	4a46      	ldr	r2, [pc, #280]	; (800190c <PID3Node+0x130>)
 80017f4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017fc:	e883 0003 	stmia.w	r3, {r0, r1}

	// Timer definition for motor 3
	MotorChannel motor_3_timer{&MOTOR_3_TIMER, MOTOR_3_CHANNEL};
 8001800:	4a43      	ldr	r2, [pc, #268]	; (8001910 <PID3Node+0x134>)
 8001802:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001806:	e892 0003 	ldmia.w	r2, {r0, r1}
 800180a:	e883 0003 	stmia.w	r3, {r0, r1}

	// Motor 3 object creation
	Motor motor3(motor_3_timer, motor_3_a, motor_3_b);
 800180e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001812:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001816:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800181a:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800181e:	f7ff fb5b 	bl	8000ed8 <_ZN5MotorC1ER12MotorChannelR3PinS3_>

	// Encoder 3 object creation
	Encoder encoder3(&ENCODER_3_TIMER, ENCODER_3_STEPS);
 8001822:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001826:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8001914 <PID3Node+0x138>
 800182a:	493b      	ldr	r1, [pc, #236]	; (8001918 <PID3Node+0x13c>)
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fad9 	bl	8000de4 <_ZN7EncoderC1EP17TIM_HandleTypeDeff>

	// PID 3 object creation
	PID pid3(KP_CONST_3, KD_CONST_3, KI_CONST_3, MAX_PID_OUTPUT, MIN_PID_OUTPUT, PID_UPDATE_TIME_S);
 8001832:	f107 030c 	add.w	r3, r7, #12
 8001836:	eddf 2a39 	vldr	s5, [pc, #228]	; 800191c <PID3Node+0x140>
 800183a:	ed9f 2a39 	vldr	s4, [pc, #228]	; 8001920 <PID3Node+0x144>
 800183e:	eddf 1a39 	vldr	s3, [pc, #228]	; 8001924 <PID3Node+0x148>
 8001842:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8001846:	eddf 0a38 	vldr	s1, [pc, #224]	; 8001928 <PID3Node+0x14c>
 800184a:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800192c <PID3Node+0x150>
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fda4 	bl	800139c <_ZN3PIDC1Effffff>

	//float current_angle = 0, output_pid_3 = 0;
	if(robot_info_handler->angle_3 == 0){
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	edd3 7a02 	vldr	s15, [r3, #8]
 800185a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800185e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001862:	d104      	bne.n	800186e <PID3Node+0x92>
		motor3.goHomePosition();
 8001864:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fc05 	bl	8001078 <_ZN5Motor14goHomePositionEv>
	}
	while(1){

		current_angle_3 = encoder3.getAngle();
 800186e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fad8 	bl	8000e28 <_ZN7Encoder8getAngleEv>
 8001878:	eef0 7a40 	vmov.f32	s15, s0
 800187c:	4b2c      	ldr	r3, [pc, #176]	; (8001930 <PID3Node+0x154>)
 800187e:	edc3 7a00 	vstr	s15, [r3]
		output_pid_3 = pid3.updatePID(robot_info_handler->angle_3, current_angle_3);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	edd3 7a02 	vldr	s15, [r3, #8]
 8001888:	4b29      	ldr	r3, [pc, #164]	; (8001930 <PID3Node+0x154>)
 800188a:	ed93 7a00 	vldr	s14, [r3]
 800188e:	f107 030c 	add.w	r3, r7, #12
 8001892:	eef0 0a47 	vmov.f32	s1, s14
 8001896:	eeb0 0a67 	vmov.f32	s0, s15
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fdbc 	bl	8001418 <_ZN3PID9updatePIDEff>
 80018a0:	eef0 7a40 	vmov.f32	s15, s0
 80018a4:	4b23      	ldr	r3, [pc, #140]	; (8001934 <PID3Node+0x158>)
 80018a6:	edc3 7a00 	vstr	s15, [r3]
		if(output_pid_3 > 0) motor3.turnLeft(output_pid_3);
 80018aa:	4b22      	ldr	r3, [pc, #136]	; (8001934 <PID3Node+0x158>)
 80018ac:	edd3 7a00 	vldr	s15, [r3]
 80018b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b8:	dd0c      	ble.n	80018d4 <PID3Node+0xf8>
 80018ba:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <PID3Node+0x158>)
 80018bc:	edd3 7a00 	vldr	s15, [r3]
 80018c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018c8:	ee17 1a90 	vmov	r1, s15
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fb2f 	bl	8000f30 <_ZN5Motor8turnLeftEm>
 80018d2:	e015      	b.n	8001900 <PID3Node+0x124>
		else if(output_pid_3 < 0) motor3.turnRight(-output_pid_3);
 80018d4:	4b17      	ldr	r3, [pc, #92]	; (8001934 <PID3Node+0x158>)
 80018d6:	edd3 7a00 	vldr	s15, [r3]
 80018da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e2:	d50d      	bpl.n	8001900 <PID3Node+0x124>
 80018e4:	4b13      	ldr	r3, [pc, #76]	; (8001934 <PID3Node+0x158>)
 80018e6:	edd3 7a00 	vldr	s15, [r3]
 80018ea:	eef1 7a67 	vneg.f32	s15, s15
 80018ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018f6:	ee17 1a90 	vmov	r1, s15
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fb6a 	bl	8000fd4 <_ZN5Motor9turnRightEm>

		osDelay(PID_UPDATE_TIME_mS);
 8001900:	203c      	movs	r0, #60	; 0x3c
 8001902:	f004 f878 	bl	80059f6 <osDelay>
		current_angle_3 = encoder3.getAngle();
 8001906:	e7b2      	b.n	800186e <PID3Node+0x92>
 8001908:	08008140 	.word	0x08008140
 800190c:	08008148 	.word	0x08008148
 8001910:	08008150 	.word	0x08008150
 8001914:	45872000 	.word	0x45872000
 8001918:	20004168 	.word	0x20004168
 800191c:	3d75c28f 	.word	0x3d75c28f
 8001920:	c47a0000 	.word	0xc47a0000
 8001924:	447a0000 	.word	0x447a0000
 8001928:	3e4ccccd 	.word	0x3e4ccccd
 800192c:	42b40000 	.word	0x42b40000
 8001930:	20000060 	.word	0x20000060
 8001934:	20000064 	.word	0x20000064

08001938 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4a07      	ldr	r2, [pc, #28]	; (8001964 <vApplicationGetIdleTaskMemory+0x2c>)
 8001948:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	4a06      	ldr	r2, [pc, #24]	; (8001968 <vApplicationGetIdleTaskMemory+0x30>)
 800194e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2280      	movs	r2, #128	; 0x80
 8001954:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000068 	.word	0x20000068
 8001968:	200000bc 	.word	0x200000bc

0800196c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800196c:	b5b0      	push	{r4, r5, r7, lr}
 800196e:	b0a6      	sub	sp, #152	; 0x98
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of mutex */
  osMutexDef(mutex);
 8001972:	2300      	movs	r3, #0
 8001974:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001978:	2300      	movs	r3, #0
 800197a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  mutexHandle = osMutexCreate(osMutex(mutex));
 800197e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001982:	4618      	mov	r0, r3
 8001984:	f004 f84b 	bl	8005a1e <osMutexCreate>
 8001988:	4603      	mov	r3, r0
 800198a:	4a31      	ldr	r2, [pc, #196]	; (8001a50 <MX_FREERTOS_Init+0xe4>)
 800198c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800198e:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <MX_FREERTOS_Init+0xe8>)
 8001990:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001994:	461d      	mov	r5, r3
 8001996:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001998:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800199a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800199e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80019a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019a6:	2100      	movs	r1, #0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f003 ffd8 	bl	800595e <osThreadCreate>
 80019ae:	4603      	mov	r3, r0
 80019b0:	4a29      	ldr	r2, [pc, #164]	; (8001a58 <MX_FREERTOS_Init+0xec>)
 80019b2:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskPID1 */
  osThreadDef(taskPID1, startPID1, osPriorityIdle, 0, 512);
 80019b4:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <MX_FREERTOS_Init+0xf0>)
 80019b6:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80019ba:	461d      	mov	r5, r3
 80019bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskPID1Handle = osThreadCreate(osThread(taskPID1), NULL);
 80019c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019cc:	2100      	movs	r1, #0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f003 ffc5 	bl	800595e <osThreadCreate>
 80019d4:	4603      	mov	r3, r0
 80019d6:	4a22      	ldr	r2, [pc, #136]	; (8001a60 <MX_FREERTOS_Init+0xf4>)
 80019d8:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskPID2 */
  osThreadDef(taskPID2, startPID2, osPriorityIdle, 0, 512);
 80019da:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <MX_FREERTOS_Init+0xf8>)
 80019dc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80019e0:	461d      	mov	r5, r3
 80019e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskPID2Handle = osThreadCreate(osThread(taskPID2), NULL);
 80019ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f003 ffb2 	bl	800595e <osThreadCreate>
 80019fa:	4603      	mov	r3, r0
 80019fc:	4a1a      	ldr	r2, [pc, #104]	; (8001a68 <MX_FREERTOS_Init+0xfc>)
 80019fe:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskPID3 */
  osThreadDef(taskPID3, startPID3, osPriorityNormal, 0, 512);
 8001a00:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <MX_FREERTOS_Init+0x100>)
 8001a02:	f107 0420 	add.w	r4, r7, #32
 8001a06:	461d      	mov	r5, r3
 8001a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskPID3Handle = osThreadCreate(osThread(taskPID3), NULL);
 8001a14:	f107 0320 	add.w	r3, r7, #32
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f003 ff9f 	bl	800595e <osThreadCreate>
 8001a20:	4603      	mov	r3, r0
 8001a22:	4a13      	ldr	r2, [pc, #76]	; (8001a70 <MX_FREERTOS_Init+0x104>)
 8001a24:	6013      	str	r3, [r2, #0]

  /* definition and creation of ROSComms */
  osThreadDef(ROSComms, startROSComms, osPriorityNormal, 0, 1024);
 8001a26:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <MX_FREERTOS_Init+0x108>)
 8001a28:	1d3c      	adds	r4, r7, #4
 8001a2a:	461d      	mov	r5, r3
 8001a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ROSCommsHandle = osThreadCreate(osThread(ROSComms), NULL);
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f003 ff8e 	bl	800595e <osThreadCreate>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4a0c      	ldr	r2, [pc, #48]	; (8001a78 <MX_FREERTOS_Init+0x10c>)
 8001a46:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001a48:	bf00      	nop
 8001a4a:	3798      	adds	r7, #152	; 0x98
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a50:	2000401c 	.word	0x2000401c
 8001a54:	08008194 	.word	0x08008194
 8001a58:	20004010 	.word	0x20004010
 8001a5c:	080081b0 	.word	0x080081b0
 8001a60:	20004018 	.word	0x20004018
 8001a64:	080081cc 	.word	0x080081cc
 8001a68:	20004024 	.word	0x20004024
 8001a6c:	080081e8 	.word	0x080081e8
 8001a70:	20004014 	.word	0x20004014
 8001a74:	08008204 	.word	0x08008204
 8001a78:	20004020 	.word	0x20004020

08001a7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8001a84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a88:	4803      	ldr	r0, [pc, #12]	; (8001a98 <StartDefaultTask+0x1c>)
 8001a8a:	f001 faa8 	bl	8002fde <HAL_GPIO_TogglePin>
    osDelay(2000);
 8001a8e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a92:	f003 ffb0 	bl	80059f6 <osDelay>
	HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8001a96:	e7f5      	b.n	8001a84 <StartDefaultTask+0x8>
 8001a98:	40021000 	.word	0x40021000

08001a9c <startPID1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPID1 */
void startPID1(void const * argument)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPID1 */
	PID1Node(&robot_info_handler);
 8001aa4:	4803      	ldr	r0, [pc, #12]	; (8001ab4 <startPID1+0x18>)
 8001aa6:	f7ff fd41 	bl	800152c <PID1Node>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8001aaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aae:	f003 ffa2 	bl	80059f6 <osDelay>
 8001ab2:	e7fa      	b.n	8001aaa <startPID1+0xe>
 8001ab4:	20004028 	.word	0x20004028

08001ab8 <startPID2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPID2 */
void startPID2(void const * argument)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPID2 */
	PID2Node(&robot_info_handler);
 8001ac0:	4803      	ldr	r0, [pc, #12]	; (8001ad0 <startPID2+0x18>)
 8001ac2:	f7ff fd9f 	bl	8001604 <PID2Node>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8001ac6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aca:	f003 ff94 	bl	80059f6 <osDelay>
 8001ace:	e7fa      	b.n	8001ac6 <startPID2+0xe>
 8001ad0:	20004028 	.word	0x20004028

08001ad4 <startPID3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPID3 */
void startPID3(void const * argument)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPID3 */
	PID3Node(&robot_info_handler);
 8001adc:	4803      	ldr	r0, [pc, #12]	; (8001aec <startPID3+0x18>)
 8001ade:	f7ff fe7d 	bl	80017dc <PID3Node>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8001ae2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ae6:	f003 ff86 	bl	80059f6 <osDelay>
 8001aea:	e7fa      	b.n	8001ae2 <startPID3+0xe>
 8001aec:	20004028 	.word	0x20004028

08001af0 <startROSComms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startROSComms */
void startROSComms(void const * argument)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startROSComms */
	robotInfoInit(&robot_info_handler, &mutexHandle);
 8001af8:	4905      	ldr	r1, [pc, #20]	; (8001b10 <startROSComms+0x20>)
 8001afa:	4806      	ldr	r0, [pc, #24]	; (8001b14 <startROSComms+0x24>)
 8001afc:	f7ff f902 	bl	8000d04 <robotInfoInit>
	startSerialComms(&robot_info_handler);
 8001b00:	4804      	ldr	r0, [pc, #16]	; (8001b14 <startROSComms+0x24>)
 8001b02:	f7ff fb9d 	bl	8001240 <startSerialComms>
  /* Infinite loop */
  for(;;)
  {
	osDelay(1);
 8001b06:	2001      	movs	r0, #1
 8001b08:	f003 ff75 	bl	80059f6 <osDelay>
 8001b0c:	e7fb      	b.n	8001b06 <startROSComms+0x16>
 8001b0e:	bf00      	nop
 8001b10:	2000401c 	.word	0x2000401c
 8001b14:	20004028 	.word	0x20004028

08001b18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08c      	sub	sp, #48	; 0x30
 8001b1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1e:	f107 031c 	add.w	r3, r7, #28
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	60da      	str	r2, [r3, #12]
 8001b2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61bb      	str	r3, [r7, #24]
 8001b32:	4b74      	ldr	r3, [pc, #464]	; (8001d04 <MX_GPIO_Init+0x1ec>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a73      	ldr	r2, [pc, #460]	; (8001d04 <MX_GPIO_Init+0x1ec>)
 8001b38:	f043 0310 	orr.w	r3, r3, #16
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b71      	ldr	r3, [pc, #452]	; (8001d04 <MX_GPIO_Init+0x1ec>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0310 	and.w	r3, r3, #16
 8001b46:	61bb      	str	r3, [r7, #24]
 8001b48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	4b6d      	ldr	r3, [pc, #436]	; (8001d04 <MX_GPIO_Init+0x1ec>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a6c      	ldr	r2, [pc, #432]	; (8001d04 <MX_GPIO_Init+0x1ec>)
 8001b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b6a      	ldr	r3, [pc, #424]	; (8001d04 <MX_GPIO_Init+0x1ec>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	4b66      	ldr	r3, [pc, #408]	; (8001d04 <MX_GPIO_Init+0x1ec>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a65      	ldr	r2, [pc, #404]	; (8001d04 <MX_GPIO_Init+0x1ec>)
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b63      	ldr	r3, [pc, #396]	; (8001d04 <MX_GPIO_Init+0x1ec>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b5f      	ldr	r3, [pc, #380]	; (8001d04 <MX_GPIO_Init+0x1ec>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a5e      	ldr	r2, [pc, #376]	; (8001d04 <MX_GPIO_Init+0x1ec>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b5c      	ldr	r3, [pc, #368]	; (8001d04 <MX_GPIO_Init+0x1ec>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	4b58      	ldr	r3, [pc, #352]	; (8001d04 <MX_GPIO_Init+0x1ec>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a57      	ldr	r2, [pc, #348]	; (8001d04 <MX_GPIO_Init+0x1ec>)
 8001ba8:	f043 0302 	orr.w	r3, r3, #2
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b55      	ldr	r3, [pc, #340]	; (8001d04 <MX_GPIO_Init+0x1ec>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	4b51      	ldr	r3, [pc, #324]	; (8001d04 <MX_GPIO_Init+0x1ec>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a50      	ldr	r2, [pc, #320]	; (8001d04 <MX_GPIO_Init+0x1ec>)
 8001bc4:	f043 0308 	orr.w	r3, r3, #8
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b4e      	ldr	r3, [pc, #312]	; (8001d04 <MX_GPIO_Init+0x1ec>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MOTOR_2_R_Pin|MOTOR_2_L_Pin|GPIO_PIN_7|LED_2_Pin, GPIO_PIN_RESET);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f248 0194 	movw	r1, #32916	; 0x8094
 8001bdc:	484a      	ldr	r0, [pc, #296]	; (8001d08 <MX_GPIO_Init+0x1f0>)
 8001bde:	f001 f9e5 	bl	8002fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|MOTOR_1_R_Pin, GPIO_PIN_RESET);
 8001be2:	2200      	movs	r2, #0
 8001be4:	210a      	movs	r1, #10
 8001be6:	4849      	ldr	r0, [pc, #292]	; (8001d0c <MX_GPIO_Init+0x1f4>)
 8001be8:	f001 f9e0 	bl	8002fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_1_L_GPIO_Port, MOTOR_1_L_Pin, GPIO_PIN_RESET);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2110      	movs	r1, #16
 8001bf0:	4847      	ldr	r0, [pc, #284]	; (8001d10 <MX_GPIO_Init+0x1f8>)
 8001bf2:	f001 f9db 	bl	8002fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001bfc:	4845      	ldr	r0, [pc, #276]	; (8001d14 <MX_GPIO_Init+0x1fc>)
 8001bfe:	f001 f9d5 	bl	8002fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR_3_R_Pin|MOTOR_3_L_Pin, GPIO_PIN_RESET);
 8001c02:	2200      	movs	r2, #0
 8001c04:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8001c08:	4843      	ldr	r0, [pc, #268]	; (8001d18 <MX_GPIO_Init+0x200>)
 8001c0a:	f001 f9cf 	bl	8002fac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PE7 PEPin */
  GPIO_InitStruct.Pin = MOTOR_2_R_Pin|MOTOR_2_L_Pin|GPIO_PIN_7|LED_2_Pin;
 8001c0e:	f248 0394 	movw	r3, #32916	; 0x8094
 8001c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c14:	2301      	movs	r3, #1
 8001c16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	4619      	mov	r1, r3
 8001c26:	4838      	ldr	r0, [pc, #224]	; (8001d08 <MX_GPIO_Init+0x1f0>)
 8001c28:	f001 f80c 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|MOTOR_1_R_Pin;
 8001c2c:	230a      	movs	r3, #10
 8001c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c30:	2301      	movs	r3, #1
 8001c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c3c:	f107 031c 	add.w	r3, r7, #28
 8001c40:	4619      	mov	r1, r3
 8001c42:	4832      	ldr	r0, [pc, #200]	; (8001d0c <MX_GPIO_Init+0x1f4>)
 8001c44:	f000 fffe 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_1_L_Pin;
 8001c48:	2310      	movs	r3, #16
 8001c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c54:	2300      	movs	r3, #0
 8001c56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MOTOR_1_L_GPIO_Port, &GPIO_InitStruct);
 8001c58:	f107 031c 	add.w	r3, r7, #28
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	482c      	ldr	r0, [pc, #176]	; (8001d10 <MX_GPIO_Init+0x1f8>)
 8001c60:	f000 fff0 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001c72:	f107 031c 	add.w	r3, r7, #28
 8001c76:	4619      	mov	r1, r3
 8001c78:	4823      	ldr	r0, [pc, #140]	; (8001d08 <MX_GPIO_Init+0x1f0>)
 8001c7a:	f000 ffe3 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001c7e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c84:	2301      	movs	r3, #1
 8001c86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c90:	f107 031c 	add.w	r3, r7, #28
 8001c94:	4619      	mov	r1, r3
 8001c96:	481f      	ldr	r0, [pc, #124]	; (8001d14 <MX_GPIO_Init+0x1fc>)
 8001c98:	f000 ffd4 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = MOTOR_3_R_Pin|MOTOR_3_L_Pin;
 8001c9c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001caa:	2300      	movs	r3, #0
 8001cac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cae:	f107 031c 	add.w	r3, r7, #28
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4818      	ldr	r0, [pc, #96]	; (8001d18 <MX_GPIO_Init+0x200>)
 8001cb6:	f000 ffc5 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = HALL_SENSOR_3_Pin|HALL_SENSOR_1_Pin;
 8001cba:	23a0      	movs	r3, #160	; 0xa0
 8001cbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cc6:	f107 031c 	add.w	r3, r7, #28
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4812      	ldr	r0, [pc, #72]	; (8001d18 <MX_GPIO_Init+0x200>)
 8001cce:	f000 ffb9 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cd2:	2340      	movs	r3, #64	; 0x40
 8001cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cd6:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <MX_GPIO_Init+0x204>)
 8001cd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cde:	f107 031c 	add.w	r3, r7, #28
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	480c      	ldr	r0, [pc, #48]	; (8001d18 <MX_GPIO_Init+0x200>)
 8001ce6:	f000 ffad 	bl	8002c44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2105      	movs	r1, #5
 8001cee:	2017      	movs	r0, #23
 8001cf0:	f000 feec 	bl	8002acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cf4:	2017      	movs	r0, #23
 8001cf6:	f000 ff05 	bl	8002b04 <HAL_NVIC_EnableIRQ>

}
 8001cfa:	bf00      	nop
 8001cfc:	3730      	adds	r7, #48	; 0x30
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40020800 	.word	0x40020800
 8001d10:	40020000 	.word	0x40020000
 8001d14:	40020400 	.word	0x40020400
 8001d18:	40020c00 	.word	0x40020c00
 8001d1c:	10210000 	.word	0x10210000

08001d20 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d26:	4a13      	ldr	r2, [pc, #76]	; (8001d74 <MX_I2C1_Init+0x54>)
 8001d28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d2a:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d2c:	4a12      	ldr	r2, [pc, #72]	; (8001d78 <MX_I2C1_Init+0x58>)
 8001d2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d44:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d50:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d5c:	4804      	ldr	r0, [pc, #16]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d5e:	f001 f971 	bl	8003044 <HAL_I2C_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d68:	f000 f8e8 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	2000403c 	.word	0x2000403c
 8001d74:	40005400 	.word	0x40005400
 8001d78:	000186a0 	.word	0x000186a0

08001d7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a19      	ldr	r2, [pc, #100]	; (8001e00 <HAL_I2C_MspInit+0x84>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d12b      	bne.n	8001df6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <HAL_I2C_MspInit+0x88>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a17      	ldr	r2, [pc, #92]	; (8001e04 <HAL_I2C_MspInit+0x88>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <HAL_I2C_MspInit+0x88>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dba:	23c0      	movs	r3, #192	; 0xc0
 8001dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dbe:	2312      	movs	r3, #18
 8001dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dca:	2304      	movs	r3, #4
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dce:	f107 0314 	add.w	r3, r7, #20
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	480c      	ldr	r0, [pc, #48]	; (8001e08 <HAL_I2C_MspInit+0x8c>)
 8001dd6:	f000 ff35 	bl	8002c44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <HAL_I2C_MspInit+0x88>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	4a08      	ldr	r2, [pc, #32]	; (8001e04 <HAL_I2C_MspInit+0x88>)
 8001de4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001de8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_I2C_MspInit+0x88>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001df6:	bf00      	nop
 8001df8:	3728      	adds	r7, #40	; 0x28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40005400 	.word	0x40005400
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40020400 	.word	0x40020400

08001e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e10:	f000 fd62 	bl	80028d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e14:	f000 f816 	bl	8001e44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e18:	f7ff fe7e 	bl	8001b18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001e1c:	f000 fc2c 	bl	8002678 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001e20:	f000 fa28 	bl	8002274 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001e24:	f000 f964 	bl	80020f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001e28:	f000 f9d0 	bl	80021cc <MX_TIM3_Init>
  MX_TIM8_Init();
 8001e2c:	f000 fa76 	bl	800231c <MX_TIM8_Init>
  MX_UART5_Init();
 8001e30:	f000 fbf8 	bl	8002624 <MX_UART5_Init>
  MX_I2C1_Init();
 8001e34:	f7ff ff74 	bl	8001d20 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001e38:	f7ff fd98 	bl	800196c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001e3c:	f003 fd88 	bl	8005950 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <main+0x34>
	...

08001e44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b094      	sub	sp, #80	; 0x50
 8001e48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e4a:	f107 0320 	add.w	r3, r7, #32
 8001e4e:	2230      	movs	r2, #48	; 0x30
 8001e50:	2100      	movs	r1, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f006 f94c 	bl	80080f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e58:	f107 030c 	add.w	r3, r7, #12
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <SystemClock_Config+0xcc>)
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	4a27      	ldr	r2, [pc, #156]	; (8001f10 <SystemClock_Config+0xcc>)
 8001e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e76:	6413      	str	r3, [r2, #64]	; 0x40
 8001e78:	4b25      	ldr	r3, [pc, #148]	; (8001f10 <SystemClock_Config+0xcc>)
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e84:	2300      	movs	r3, #0
 8001e86:	607b      	str	r3, [r7, #4]
 8001e88:	4b22      	ldr	r3, [pc, #136]	; (8001f14 <SystemClock_Config+0xd0>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a21      	ldr	r2, [pc, #132]	; (8001f14 <SystemClock_Config+0xd0>)
 8001e8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <SystemClock_Config+0xd0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9c:	607b      	str	r3, [r7, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ea4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001eb8:	23a8      	movs	r3, #168	; 0xa8
 8001eba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ec0:	2304      	movs	r3, #4
 8001ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ec4:	f107 0320 	add.w	r3, r7, #32
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f001 f9ff 	bl	80032cc <HAL_RCC_OscConfig>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ed4:	f000 f832 	bl	8001f3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ed8:	230f      	movs	r3, #15
 8001eda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001edc:	2302      	movs	r3, #2
 8001ede:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ee4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ee8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ef0:	f107 030c 	add.w	r3, r7, #12
 8001ef4:	2105      	movs	r1, #5
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f001 fc60 	bl	80037bc <HAL_RCC_ClockConfig>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f02:	f000 f81b 	bl	8001f3c <Error_Handler>
  }
}
 8001f06:	bf00      	nop
 8001f08:	3750      	adds	r7, #80	; 0x50
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40007000 	.word	0x40007000

08001f18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d101      	bne.n	8001f2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f2a:	f000 fcf7 	bl	800291c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40010000 	.word	0x40010000

08001f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	607b      	str	r3, [r7, #4]
 8001f56:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <HAL_MspInit+0x54>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	4a11      	ldr	r2, [pc, #68]	; (8001fa0 <HAL_MspInit+0x54>)
 8001f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f60:	6453      	str	r3, [r2, #68]	; 0x44
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <HAL_MspInit+0x54>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f6a:	607b      	str	r3, [r7, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	603b      	str	r3, [r7, #0]
 8001f72:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <HAL_MspInit+0x54>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <HAL_MspInit+0x54>)
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7e:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <HAL_MspInit+0x54>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	210f      	movs	r1, #15
 8001f8e:	f06f 0001 	mvn.w	r0, #1
 8001f92:	f000 fd9b 	bl	8002acc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800

08001fa4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	; 0x30
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	2019      	movs	r0, #25
 8001fba:	f000 fd87 	bl	8002acc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001fbe:	2019      	movs	r0, #25
 8001fc0:	f000 fda0 	bl	8002b04 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	4b1f      	ldr	r3, [pc, #124]	; (8002048 <HAL_InitTick+0xa4>)
 8001fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fcc:	4a1e      	ldr	r2, [pc, #120]	; (8002048 <HAL_InitTick+0xa4>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd4:	4b1c      	ldr	r3, [pc, #112]	; (8002048 <HAL_InitTick+0xa4>)
 8001fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fe0:	f107 0210 	add.w	r2, r7, #16
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	4611      	mov	r1, r2
 8001fea:	4618      	mov	r0, r3
 8001fec:	f001 fde2 	bl	8003bb4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001ff0:	f001 fdcc 	bl	8003b8c <HAL_RCC_GetPCLK2Freq>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ffc:	4a13      	ldr	r2, [pc, #76]	; (800204c <HAL_InitTick+0xa8>)
 8001ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8002002:	0c9b      	lsrs	r3, r3, #18
 8002004:	3b01      	subs	r3, #1
 8002006:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <HAL_InitTick+0xac>)
 800200a:	4a12      	ldr	r2, [pc, #72]	; (8002054 <HAL_InitTick+0xb0>)
 800200c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <HAL_InitTick+0xac>)
 8002010:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002014:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002016:	4a0e      	ldr	r2, [pc, #56]	; (8002050 <HAL_InitTick+0xac>)
 8002018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <HAL_InitTick+0xac>)
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002022:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <HAL_InitTick+0xac>)
 8002024:	2200      	movs	r2, #0
 8002026:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002028:	4809      	ldr	r0, [pc, #36]	; (8002050 <HAL_InitTick+0xac>)
 800202a:	f001 fdf5 	bl	8003c18 <HAL_TIM_Base_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d104      	bne.n	800203e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002034:	4806      	ldr	r0, [pc, #24]	; (8002050 <HAL_InitTick+0xac>)
 8002036:	f001 fe49 	bl	8003ccc <HAL_TIM_Base_Start_IT>
 800203a:	4603      	mov	r3, r0
 800203c:	e000      	b.n	8002040 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
}
 8002040:	4618      	mov	r0, r3
 8002042:	3730      	adds	r7, #48	; 0x30
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40023800 	.word	0x40023800
 800204c:	431bde83 	.word	0x431bde83
 8002050:	20004090 	.word	0x20004090
 8002054:	40010000 	.word	0x40010000

08002058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800206a:	e7fe      	b.n	800206a <HardFault_Handler+0x4>

0800206c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002070:	e7fe      	b.n	8002070 <MemManage_Handler+0x4>

08002072 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002076:	e7fe      	b.n	8002076 <BusFault_Handler+0x4>

08002078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800207c:	e7fe      	b.n	800207c <UsageFault_Handler+0x4>

0800207e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002090:	2040      	movs	r0, #64	; 0x40
 8002092:	f000 ffbf 	bl	8003014 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020a0:	4802      	ldr	r0, [pc, #8]	; (80020ac <TIM1_UP_TIM10_IRQHandler+0x10>)
 80020a2:	f002 f8cf 	bl	8004244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20004090 	.word	0x20004090

080020b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020b4:	4802      	ldr	r0, [pc, #8]	; (80020c0 <USART2_IRQHandler+0x10>)
 80020b6:	f002 fec9 	bl	8004e4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	2000423c 	.word	0x2000423c

080020c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020c8:	4b08      	ldr	r3, [pc, #32]	; (80020ec <SystemInit+0x28>)
 80020ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ce:	4a07      	ldr	r2, [pc, #28]	; (80020ec <SystemInit+0x28>)
 80020d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020d8:	4b04      	ldr	r3, [pc, #16]	; (80020ec <SystemInit+0x28>)
 80020da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020de:	609a      	str	r2, [r3, #8]
#endif
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f6:	f107 0320 	add.w	r3, r7, #32
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	60da      	str	r2, [r3, #12]
 800210c:	611a      	str	r2, [r3, #16]
 800210e:	615a      	str	r2, [r3, #20]
 8002110:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002112:	4b2d      	ldr	r3, [pc, #180]	; (80021c8 <MX_TIM2_Init+0xd8>)
 8002114:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002118:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800211a:	4b2b      	ldr	r3, [pc, #172]	; (80021c8 <MX_TIM2_Init+0xd8>)
 800211c:	2253      	movs	r2, #83	; 0x53
 800211e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002120:	4b29      	ldr	r3, [pc, #164]	; (80021c8 <MX_TIM2_Init+0xd8>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002126:	4b28      	ldr	r3, [pc, #160]	; (80021c8 <MX_TIM2_Init+0xd8>)
 8002128:	f240 32e7 	movw	r2, #999	; 0x3e7
 800212c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800212e:	4b26      	ldr	r3, [pc, #152]	; (80021c8 <MX_TIM2_Init+0xd8>)
 8002130:	2200      	movs	r2, #0
 8002132:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002134:	4b24      	ldr	r3, [pc, #144]	; (80021c8 <MX_TIM2_Init+0xd8>)
 8002136:	2200      	movs	r2, #0
 8002138:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800213a:	4823      	ldr	r0, [pc, #140]	; (80021c8 <MX_TIM2_Init+0xd8>)
 800213c:	f001 fe36 	bl	8003dac <HAL_TIM_PWM_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002146:	f7ff fef9 	bl	8001f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002152:	f107 0320 	add.w	r3, r7, #32
 8002156:	4619      	mov	r1, r3
 8002158:	481b      	ldr	r0, [pc, #108]	; (80021c8 <MX_TIM2_Init+0xd8>)
 800215a:	f002 fcd7 	bl	8004b0c <HAL_TIMEx_MasterConfigSynchronization>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002164:	f7ff feea 	bl	8001f3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002168:	2360      	movs	r3, #96	; 0x60
 800216a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002170:	2300      	movs	r3, #0
 8002172:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002178:	1d3b      	adds	r3, r7, #4
 800217a:	2200      	movs	r2, #0
 800217c:	4619      	mov	r1, r3
 800217e:	4812      	ldr	r0, [pc, #72]	; (80021c8 <MX_TIM2_Init+0xd8>)
 8002180:	f002 f968 	bl	8004454 <HAL_TIM_PWM_ConfigChannel>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800218a:	f7ff fed7 	bl	8001f3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	2204      	movs	r2, #4
 8002192:	4619      	mov	r1, r3
 8002194:	480c      	ldr	r0, [pc, #48]	; (80021c8 <MX_TIM2_Init+0xd8>)
 8002196:	f002 f95d 	bl	8004454 <HAL_TIM_PWM_ConfigChannel>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80021a0:	f7ff fecc 	bl	8001f3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021a4:	1d3b      	adds	r3, r7, #4
 80021a6:	2208      	movs	r2, #8
 80021a8:	4619      	mov	r1, r3
 80021aa:	4807      	ldr	r0, [pc, #28]	; (80021c8 <MX_TIM2_Init+0xd8>)
 80021ac:	f002 f952 	bl	8004454 <HAL_TIM_PWM_ConfigChannel>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80021b6:	f7ff fec1 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80021ba:	4803      	ldr	r0, [pc, #12]	; (80021c8 <MX_TIM2_Init+0xd8>)
 80021bc:	f000 f9da 	bl	8002574 <HAL_TIM_MspPostInit>

}
 80021c0:	bf00      	nop
 80021c2:	3728      	adds	r7, #40	; 0x28
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	200041b0 	.word	0x200041b0

080021cc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08c      	sub	sp, #48	; 0x30
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80021d2:	f107 030c 	add.w	r3, r7, #12
 80021d6:	2224      	movs	r2, #36	; 0x24
 80021d8:	2100      	movs	r1, #0
 80021da:	4618      	mov	r0, r3
 80021dc:	f005 ff88 	bl	80080f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e0:	1d3b      	adds	r3, r7, #4
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021e8:	4b20      	ldr	r3, [pc, #128]	; (800226c <MX_TIM3_Init+0xa0>)
 80021ea:	4a21      	ldr	r2, [pc, #132]	; (8002270 <MX_TIM3_Init+0xa4>)
 80021ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80021ee:	4b1f      	ldr	r3, [pc, #124]	; (800226c <MX_TIM3_Init+0xa0>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f4:	4b1d      	ldr	r3, [pc, #116]	; (800226c <MX_TIM3_Init+0xa0>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80021fa:	4b1c      	ldr	r3, [pc, #112]	; (800226c <MX_TIM3_Init+0xa0>)
 80021fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002200:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002202:	4b1a      	ldr	r3, [pc, #104]	; (800226c <MX_TIM3_Init+0xa0>)
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002208:	4b18      	ldr	r3, [pc, #96]	; (800226c <MX_TIM3_Init+0xa0>)
 800220a:	2200      	movs	r2, #0
 800220c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800220e:	2301      	movs	r3, #1
 8002210:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002216:	2301      	movs	r3, #1
 8002218:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800221a:	2300      	movs	r3, #0
 800221c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002222:	2300      	movs	r3, #0
 8002224:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002226:	2301      	movs	r3, #1
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800222a:	2300      	movs	r3, #0
 800222c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002232:	f107 030c 	add.w	r3, r7, #12
 8002236:	4619      	mov	r1, r3
 8002238:	480c      	ldr	r0, [pc, #48]	; (800226c <MX_TIM3_Init+0xa0>)
 800223a:	f001 fecf 	bl	8003fdc <HAL_TIM_Encoder_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002244:	f7ff fe7a 	bl	8001f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002248:	2300      	movs	r3, #0
 800224a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800224c:	2300      	movs	r3, #0
 800224e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002250:	1d3b      	adds	r3, r7, #4
 8002252:	4619      	mov	r1, r3
 8002254:	4805      	ldr	r0, [pc, #20]	; (800226c <MX_TIM3_Init+0xa0>)
 8002256:	f002 fc59 	bl	8004b0c <HAL_TIMEx_MasterConfigSynchronization>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002260:	f7ff fe6c 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002264:	bf00      	nop
 8002266:	3730      	adds	r7, #48	; 0x30
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20004168 	.word	0x20004168
 8002270:	40000400 	.word	0x40000400

08002274 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08c      	sub	sp, #48	; 0x30
 8002278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800227a:	f107 030c 	add.w	r3, r7, #12
 800227e:	2224      	movs	r2, #36	; 0x24
 8002280:	2100      	movs	r1, #0
 8002282:	4618      	mov	r0, r3
 8002284:	f005 ff34 	bl	80080f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002288:	1d3b      	adds	r3, r7, #4
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002290:	4b20      	ldr	r3, [pc, #128]	; (8002314 <MX_TIM4_Init+0xa0>)
 8002292:	4a21      	ldr	r2, [pc, #132]	; (8002318 <MX_TIM4_Init+0xa4>)
 8002294:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002296:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <MX_TIM4_Init+0xa0>)
 8002298:	2200      	movs	r2, #0
 800229a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229c:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <MX_TIM4_Init+0xa0>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20127;
 80022a2:	4b1c      	ldr	r3, [pc, #112]	; (8002314 <MX_TIM4_Init+0xa0>)
 80022a4:	f644 629f 	movw	r2, #20127	; 0x4e9f
 80022a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022aa:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <MX_TIM4_Init+0xa0>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b0:	4b18      	ldr	r3, [pc, #96]	; (8002314 <MX_TIM4_Init+0xa0>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80022b6:	2301      	movs	r3, #1
 80022b8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022be:	2301      	movs	r3, #1
 80022c0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80022c6:	230f      	movs	r3, #15
 80022c8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022ca:	2300      	movs	r3, #0
 80022cc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022ce:	2301      	movs	r3, #1
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022d2:	2300      	movs	r3, #0
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80022d6:	230f      	movs	r3, #15
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80022da:	f107 030c 	add.w	r3, r7, #12
 80022de:	4619      	mov	r1, r3
 80022e0:	480c      	ldr	r0, [pc, #48]	; (8002314 <MX_TIM4_Init+0xa0>)
 80022e2:	f001 fe7b 	bl	8003fdc <HAL_TIM_Encoder_Init>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80022ec:	f7ff fe26 	bl	8001f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f0:	2300      	movs	r3, #0
 80022f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022f8:	1d3b      	adds	r3, r7, #4
 80022fa:	4619      	mov	r1, r3
 80022fc:	4805      	ldr	r0, [pc, #20]	; (8002314 <MX_TIM4_Init+0xa0>)
 80022fe:	f002 fc05 	bl	8004b0c <HAL_TIMEx_MasterConfigSynchronization>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002308:	f7ff fe18 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800230c:	bf00      	nop
 800230e:	3730      	adds	r7, #48	; 0x30
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20004120 	.word	0x20004120
 8002318:	40000800 	.word	0x40000800

0800231c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08c      	sub	sp, #48	; 0x30
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002322:	f107 030c 	add.w	r3, r7, #12
 8002326:	2224      	movs	r2, #36	; 0x24
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f005 fee0 	bl	80080f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002330:	1d3b      	adds	r3, r7, #4
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002338:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <MX_TIM8_Init+0xa8>)
 800233a:	4a23      	ldr	r2, [pc, #140]	; (80023c8 <MX_TIM8_Init+0xac>)
 800233c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800233e:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <MX_TIM8_Init+0xa8>)
 8002340:	2200      	movs	r2, #0
 8002342:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002344:	4b1f      	ldr	r3, [pc, #124]	; (80023c4 <MX_TIM8_Init+0xa8>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800234a:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <MX_TIM8_Init+0xa8>)
 800234c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002350:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002352:	4b1c      	ldr	r3, [pc, #112]	; (80023c4 <MX_TIM8_Init+0xa8>)
 8002354:	2200      	movs	r2, #0
 8002356:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002358:	4b1a      	ldr	r3, [pc, #104]	; (80023c4 <MX_TIM8_Init+0xa8>)
 800235a:	2200      	movs	r2, #0
 800235c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800235e:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <MX_TIM8_Init+0xa8>)
 8002360:	2200      	movs	r2, #0
 8002362:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002364:	2301      	movs	r3, #1
 8002366:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002368:	2300      	movs	r3, #0
 800236a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800236c:	2301      	movs	r3, #1
 800236e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002370:	2300      	movs	r3, #0
 8002372:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002378:	2300      	movs	r3, #0
 800237a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800237c:	2301      	movs	r3, #1
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002380:	2300      	movs	r3, #0
 8002382:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002388:	f107 030c 	add.w	r3, r7, #12
 800238c:	4619      	mov	r1, r3
 800238e:	480d      	ldr	r0, [pc, #52]	; (80023c4 <MX_TIM8_Init+0xa8>)
 8002390:	f001 fe24 	bl	8003fdc <HAL_TIM_Encoder_Init>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800239a:	f7ff fdcf 	bl	8001f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800239e:	2300      	movs	r3, #0
 80023a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023a2:	2300      	movs	r3, #0
 80023a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80023a6:	1d3b      	adds	r3, r7, #4
 80023a8:	4619      	mov	r1, r3
 80023aa:	4806      	ldr	r0, [pc, #24]	; (80023c4 <MX_TIM8_Init+0xa8>)
 80023ac:	f002 fbae 	bl	8004b0c <HAL_TIMEx_MasterConfigSynchronization>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80023b6:	f7ff fdc1 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80023ba:	bf00      	nop
 80023bc:	3730      	adds	r7, #48	; 0x30
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200040d8 	.word	0x200040d8
 80023c8:	40010400 	.word	0x40010400

080023cc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023dc:	d10d      	bne.n	80023fa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	4b09      	ldr	r3, [pc, #36]	; (8002408 <HAL_TIM_PWM_MspInit+0x3c>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	4a08      	ldr	r2, [pc, #32]	; (8002408 <HAL_TIM_PWM_MspInit+0x3c>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	6413      	str	r3, [r2, #64]	; 0x40
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_TIM_PWM_MspInit+0x3c>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80023fa:	bf00      	nop
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800

0800240c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08e      	sub	sp, #56	; 0x38
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a4b      	ldr	r2, [pc, #300]	; (8002558 <HAL_TIM_Encoder_MspInit+0x14c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d12c      	bne.n	8002488 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	623b      	str	r3, [r7, #32]
 8002432:	4b4a      	ldr	r3, [pc, #296]	; (800255c <HAL_TIM_Encoder_MspInit+0x150>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	4a49      	ldr	r2, [pc, #292]	; (800255c <HAL_TIM_Encoder_MspInit+0x150>)
 8002438:	f043 0302 	orr.w	r3, r3, #2
 800243c:	6413      	str	r3, [r2, #64]	; 0x40
 800243e:	4b47      	ldr	r3, [pc, #284]	; (800255c <HAL_TIM_Encoder_MspInit+0x150>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	623b      	str	r3, [r7, #32]
 8002448:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	4b43      	ldr	r3, [pc, #268]	; (800255c <HAL_TIM_Encoder_MspInit+0x150>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	4a42      	ldr	r2, [pc, #264]	; (800255c <HAL_TIM_Encoder_MspInit+0x150>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6313      	str	r3, [r2, #48]	; 0x30
 800245a:	4b40      	ldr	r3, [pc, #256]	; (800255c <HAL_TIM_Encoder_MspInit+0x150>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	61fb      	str	r3, [r7, #28]
 8002464:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002466:	23c0      	movs	r3, #192	; 0xc0
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246a:	2302      	movs	r3, #2
 800246c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002472:	2300      	movs	r3, #0
 8002474:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002476:	2302      	movs	r3, #2
 8002478:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800247e:	4619      	mov	r1, r3
 8002480:	4837      	ldr	r0, [pc, #220]	; (8002560 <HAL_TIM_Encoder_MspInit+0x154>)
 8002482:	f000 fbdf 	bl	8002c44 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002486:	e063      	b.n	8002550 <HAL_TIM_Encoder_MspInit+0x144>
  else if(tim_encoderHandle->Instance==TIM4)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a35      	ldr	r2, [pc, #212]	; (8002564 <HAL_TIM_Encoder_MspInit+0x158>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d12d      	bne.n	80024ee <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
 8002496:	4b31      	ldr	r3, [pc, #196]	; (800255c <HAL_TIM_Encoder_MspInit+0x150>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	4a30      	ldr	r2, [pc, #192]	; (800255c <HAL_TIM_Encoder_MspInit+0x150>)
 800249c:	f043 0304 	orr.w	r3, r3, #4
 80024a0:	6413      	str	r3, [r2, #64]	; 0x40
 80024a2:	4b2e      	ldr	r3, [pc, #184]	; (800255c <HAL_TIM_Encoder_MspInit+0x150>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	61bb      	str	r3, [r7, #24]
 80024ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	4b2a      	ldr	r3, [pc, #168]	; (800255c <HAL_TIM_Encoder_MspInit+0x150>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4a29      	ldr	r2, [pc, #164]	; (800255c <HAL_TIM_Encoder_MspInit+0x150>)
 80024b8:	f043 0308 	orr.w	r3, r3, #8
 80024bc:	6313      	str	r3, [r2, #48]	; 0x30
 80024be:	4b27      	ldr	r3, [pc, #156]	; (800255c <HAL_TIM_Encoder_MspInit+0x150>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80024ca:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d0:	2302      	movs	r3, #2
 80024d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d8:	2300      	movs	r3, #0
 80024da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024dc:	2302      	movs	r3, #2
 80024de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e4:	4619      	mov	r1, r3
 80024e6:	4820      	ldr	r0, [pc, #128]	; (8002568 <HAL_TIM_Encoder_MspInit+0x15c>)
 80024e8:	f000 fbac 	bl	8002c44 <HAL_GPIO_Init>
}
 80024ec:	e030      	b.n	8002550 <HAL_TIM_Encoder_MspInit+0x144>
  else if(tim_encoderHandle->Instance==TIM8)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a1e      	ldr	r2, [pc, #120]	; (800256c <HAL_TIM_Encoder_MspInit+0x160>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d12b      	bne.n	8002550 <HAL_TIM_Encoder_MspInit+0x144>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80024f8:	2300      	movs	r3, #0
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	4b17      	ldr	r3, [pc, #92]	; (800255c <HAL_TIM_Encoder_MspInit+0x150>)
 80024fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002500:	4a16      	ldr	r2, [pc, #88]	; (800255c <HAL_TIM_Encoder_MspInit+0x150>)
 8002502:	f043 0302 	orr.w	r3, r3, #2
 8002506:	6453      	str	r3, [r2, #68]	; 0x44
 8002508:	4b14      	ldr	r3, [pc, #80]	; (800255c <HAL_TIM_Encoder_MspInit+0x150>)
 800250a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	4b10      	ldr	r3, [pc, #64]	; (800255c <HAL_TIM_Encoder_MspInit+0x150>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	4a0f      	ldr	r2, [pc, #60]	; (800255c <HAL_TIM_Encoder_MspInit+0x150>)
 800251e:	f043 0304 	orr.w	r3, r3, #4
 8002522:	6313      	str	r3, [r2, #48]	; 0x30
 8002524:	4b0d      	ldr	r3, [pc, #52]	; (800255c <HAL_TIM_Encoder_MspInit+0x150>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002530:	23c0      	movs	r3, #192	; 0xc0
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002534:	2302      	movs	r3, #2
 8002536:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253c:	2300      	movs	r3, #0
 800253e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002540:	2303      	movs	r3, #3
 8002542:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002548:	4619      	mov	r1, r3
 800254a:	4809      	ldr	r0, [pc, #36]	; (8002570 <HAL_TIM_Encoder_MspInit+0x164>)
 800254c:	f000 fb7a 	bl	8002c44 <HAL_GPIO_Init>
}
 8002550:	bf00      	nop
 8002552:	3738      	adds	r7, #56	; 0x38
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40000400 	.word	0x40000400
 800255c:	40023800 	.word	0x40023800
 8002560:	40020000 	.word	0x40020000
 8002564:	40000800 	.word	0x40000800
 8002568:	40020c00 	.word	0x40020c00
 800256c:	40010400 	.word	0x40010400
 8002570:	40020800 	.word	0x40020800

08002574 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	; 0x28
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002594:	d13c      	bne.n	8002610 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	4b1f      	ldr	r3, [pc, #124]	; (8002618 <HAL_TIM_MspPostInit+0xa4>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4a1e      	ldr	r2, [pc, #120]	; (8002618 <HAL_TIM_MspPostInit+0xa4>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <HAL_TIM_MspPostInit+0xa4>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	4b18      	ldr	r3, [pc, #96]	; (8002618 <HAL_TIM_MspPostInit+0xa4>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	4a17      	ldr	r2, [pc, #92]	; (8002618 <HAL_TIM_MspPostInit+0xa4>)
 80025bc:	f043 0302 	orr.w	r3, r3, #2
 80025c0:	6313      	str	r3, [r2, #48]	; 0x30
 80025c2:	4b15      	ldr	r3, [pc, #84]	; (8002618 <HAL_TIM_MspPostInit+0xa4>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_2_Pin|MOTOR_1_Pin;
 80025ce:	2303      	movs	r3, #3
 80025d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d2:	2302      	movs	r3, #2
 80025d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025da:	2300      	movs	r3, #0
 80025dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025de:	2301      	movs	r3, #1
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e2:	f107 0314 	add.w	r3, r7, #20
 80025e6:	4619      	mov	r1, r3
 80025e8:	480c      	ldr	r0, [pc, #48]	; (800261c <HAL_TIM_MspPostInit+0xa8>)
 80025ea:	f000 fb2b 	bl	8002c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_3_Pin;
 80025ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f4:	2302      	movs	r3, #2
 80025f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fc:	2300      	movs	r3, #0
 80025fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002600:	2301      	movs	r3, #1
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_3_GPIO_Port, &GPIO_InitStruct);
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	4619      	mov	r1, r3
 800260a:	4805      	ldr	r0, [pc, #20]	; (8002620 <HAL_TIM_MspPostInit+0xac>)
 800260c:	f000 fb1a 	bl	8002c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002610:	bf00      	nop
 8002612:	3728      	adds	r7, #40	; 0x28
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40023800 	.word	0x40023800
 800261c:	40020000 	.word	0x40020000
 8002620:	40020400 	.word	0x40020400

08002624 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart2;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002628:	4b11      	ldr	r3, [pc, #68]	; (8002670 <MX_UART5_Init+0x4c>)
 800262a:	4a12      	ldr	r2, [pc, #72]	; (8002674 <MX_UART5_Init+0x50>)
 800262c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800262e:	4b10      	ldr	r3, [pc, #64]	; (8002670 <MX_UART5_Init+0x4c>)
 8002630:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002634:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002636:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <MX_UART5_Init+0x4c>)
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <MX_UART5_Init+0x4c>)
 800263e:	2200      	movs	r2, #0
 8002640:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002642:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <MX_UART5_Init+0x4c>)
 8002644:	2200      	movs	r2, #0
 8002646:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <MX_UART5_Init+0x4c>)
 800264a:	220c      	movs	r2, #12
 800264c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800264e:	4b08      	ldr	r3, [pc, #32]	; (8002670 <MX_UART5_Init+0x4c>)
 8002650:	2200      	movs	r2, #0
 8002652:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <MX_UART5_Init+0x4c>)
 8002656:	2200      	movs	r2, #0
 8002658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800265a:	4805      	ldr	r0, [pc, #20]	; (8002670 <MX_UART5_Init+0x4c>)
 800265c:	f002 fae6 	bl	8004c2c <HAL_UART_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002666:	f7ff fc69 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	200041f8 	.word	0x200041f8
 8002674:	40005000 	.word	0x40005000

08002678 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800267c:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <MX_USART2_UART_Init+0x4c>)
 800267e:	4a12      	ldr	r2, [pc, #72]	; (80026c8 <MX_USART2_UART_Init+0x50>)
 8002680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8002682:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <MX_USART2_UART_Init+0x4c>)
 8002684:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800268a:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <MX_USART2_UART_Init+0x4c>)
 800268c:	2200      	movs	r2, #0
 800268e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <MX_USART2_UART_Init+0x4c>)
 8002692:	2200      	movs	r2, #0
 8002694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <MX_USART2_UART_Init+0x4c>)
 8002698:	2200      	movs	r2, #0
 800269a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800269c:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <MX_USART2_UART_Init+0x4c>)
 800269e:	220c      	movs	r2, #12
 80026a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026a2:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <MX_USART2_UART_Init+0x4c>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <MX_USART2_UART_Init+0x4c>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026ae:	4805      	ldr	r0, [pc, #20]	; (80026c4 <MX_USART2_UART_Init+0x4c>)
 80026b0:	f002 fabc 	bl	8004c2c <HAL_UART_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026ba:	f7ff fc3f 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	2000423c 	.word	0x2000423c
 80026c8:	40004400 	.word	0x40004400

080026cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08c      	sub	sp, #48	; 0x30
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d4:	f107 031c 	add.w	r3, r7, #28
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	60da      	str	r2, [r3, #12]
 80026e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a45      	ldr	r2, [pc, #276]	; (8002800 <HAL_UART_MspInit+0x134>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d14b      	bne.n	8002786 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	61bb      	str	r3, [r7, #24]
 80026f2:	4b44      	ldr	r3, [pc, #272]	; (8002804 <HAL_UART_MspInit+0x138>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	4a43      	ldr	r2, [pc, #268]	; (8002804 <HAL_UART_MspInit+0x138>)
 80026f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026fc:	6413      	str	r3, [r2, #64]	; 0x40
 80026fe:	4b41      	ldr	r3, [pc, #260]	; (8002804 <HAL_UART_MspInit+0x138>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002706:	61bb      	str	r3, [r7, #24]
 8002708:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	4b3d      	ldr	r3, [pc, #244]	; (8002804 <HAL_UART_MspInit+0x138>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	4a3c      	ldr	r2, [pc, #240]	; (8002804 <HAL_UART_MspInit+0x138>)
 8002714:	f043 0304 	orr.w	r3, r3, #4
 8002718:	6313      	str	r3, [r2, #48]	; 0x30
 800271a:	4b3a      	ldr	r3, [pc, #232]	; (8002804 <HAL_UART_MspInit+0x138>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	4b36      	ldr	r3, [pc, #216]	; (8002804 <HAL_UART_MspInit+0x138>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	4a35      	ldr	r2, [pc, #212]	; (8002804 <HAL_UART_MspInit+0x138>)
 8002730:	f043 0308 	orr.w	r3, r3, #8
 8002734:	6313      	str	r3, [r2, #48]	; 0x30
 8002736:	4b33      	ldr	r3, [pc, #204]	; (8002804 <HAL_UART_MspInit+0x138>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002748:	2302      	movs	r3, #2
 800274a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800274c:	2301      	movs	r3, #1
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002750:	2303      	movs	r3, #3
 8002752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002754:	2308      	movs	r3, #8
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002758:	f107 031c 	add.w	r3, r7, #28
 800275c:	4619      	mov	r1, r3
 800275e:	482a      	ldr	r0, [pc, #168]	; (8002808 <HAL_UART_MspInit+0x13c>)
 8002760:	f000 fa70 	bl	8002c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002764:	2304      	movs	r3, #4
 8002766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002768:	2302      	movs	r3, #2
 800276a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800276c:	2301      	movs	r3, #1
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002770:	2303      	movs	r3, #3
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002774:	2308      	movs	r3, #8
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002778:	f107 031c 	add.w	r3, r7, #28
 800277c:	4619      	mov	r1, r3
 800277e:	4823      	ldr	r0, [pc, #140]	; (800280c <HAL_UART_MspInit+0x140>)
 8002780:	f000 fa60 	bl	8002c44 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002784:	e038      	b.n	80027f8 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART2)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a21      	ldr	r2, [pc, #132]	; (8002810 <HAL_UART_MspInit+0x144>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d133      	bne.n	80027f8 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <HAL_UART_MspInit+0x138>)
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	4a1a      	ldr	r2, [pc, #104]	; (8002804 <HAL_UART_MspInit+0x138>)
 800279a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800279e:	6413      	str	r3, [r2, #64]	; 0x40
 80027a0:	4b18      	ldr	r3, [pc, #96]	; (8002804 <HAL_UART_MspInit+0x138>)
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ac:	2300      	movs	r3, #0
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	4b14      	ldr	r3, [pc, #80]	; (8002804 <HAL_UART_MspInit+0x138>)
 80027b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b4:	4a13      	ldr	r2, [pc, #76]	; (8002804 <HAL_UART_MspInit+0x138>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6313      	str	r3, [r2, #48]	; 0x30
 80027bc:	4b11      	ldr	r3, [pc, #68]	; (8002804 <HAL_UART_MspInit+0x138>)
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027c8:	230c      	movs	r3, #12
 80027ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027cc:	2302      	movs	r3, #2
 80027ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d4:	2303      	movs	r3, #3
 80027d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027d8:	2307      	movs	r3, #7
 80027da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027dc:	f107 031c 	add.w	r3, r7, #28
 80027e0:	4619      	mov	r1, r3
 80027e2:	480c      	ldr	r0, [pc, #48]	; (8002814 <HAL_UART_MspInit+0x148>)
 80027e4:	f000 fa2e 	bl	8002c44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80027e8:	2200      	movs	r2, #0
 80027ea:	2105      	movs	r1, #5
 80027ec:	2026      	movs	r0, #38	; 0x26
 80027ee:	f000 f96d 	bl	8002acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027f2:	2026      	movs	r0, #38	; 0x26
 80027f4:	f000 f986 	bl	8002b04 <HAL_NVIC_EnableIRQ>
}
 80027f8:	bf00      	nop
 80027fa:	3730      	adds	r7, #48	; 0x30
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40005000 	.word	0x40005000
 8002804:	40023800 	.word	0x40023800
 8002808:	40020800 	.word	0x40020800
 800280c:	40020c00 	.word	0x40020c00
 8002810:	40004400 	.word	0x40004400
 8002814:	40020000 	.word	0x40020000

08002818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002818:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002850 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800281c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800281e:	e003      	b.n	8002828 <LoopCopyDataInit>

08002820 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002822:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002824:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002826:	3104      	adds	r1, #4

08002828 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002828:	480b      	ldr	r0, [pc, #44]	; (8002858 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800282a:	4b0c      	ldr	r3, [pc, #48]	; (800285c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800282c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800282e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002830:	d3f6      	bcc.n	8002820 <CopyDataInit>
  ldr  r2, =_sbss
 8002832:	4a0b      	ldr	r2, [pc, #44]	; (8002860 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002834:	e002      	b.n	800283c <LoopFillZerobss>

08002836 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002836:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002838:	f842 3b04 	str.w	r3, [r2], #4

0800283c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800283c:	4b09      	ldr	r3, [pc, #36]	; (8002864 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800283e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002840:	d3f9      	bcc.n	8002836 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002842:	f7ff fc3f 	bl	80020c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002846:	f005 fc21 	bl	800808c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800284a:	f7ff fadf 	bl	8001e0c <main>
  bx  lr    
 800284e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002850:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002854:	08008250 	.word	0x08008250
  ldr  r0, =_sdata
 8002858:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800285c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8002860:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002864:	20004284 	.word	0x20004284

08002868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002868:	e7fe      	b.n	8002868 <ADC_IRQHandler>

0800286a <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	6039      	str	r1, [r7, #0]

  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	ed93 7a06 	vldr	s14, [r3, #24]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002880:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	edd3 7a08 	vldr	s15, [r3, #32]
 800288a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0 * S->Kd);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	edd3 7a06 	vldr	s15, [r3, #24]
 800289a:	eeb1 7a67 	vneg.f32	s14, s15
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	edd3 7a08 	vldr	s15, [r3, #32]
 80028a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80028a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1a      	ldr	r2, [r3, #32]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d006      	beq.n	80028ce <arm_pid_init_f32+0x64>
  {
    /* Clear the state buffer.  The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	330c      	adds	r3, #12
 80028c4:	220c      	movs	r2, #12
 80028c6:	2100      	movs	r1, #0
 80028c8:	4618      	mov	r0, r3
 80028ca:	f005 fc11 	bl	80080f0 <memset>
  }

}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028dc:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <HAL_Init+0x40>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a0d      	ldr	r2, [pc, #52]	; (8002918 <HAL_Init+0x40>)
 80028e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <HAL_Init+0x40>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a0a      	ldr	r2, [pc, #40]	; (8002918 <HAL_Init+0x40>)
 80028ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <HAL_Init+0x40>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a07      	ldr	r2, [pc, #28]	; (8002918 <HAL_Init+0x40>)
 80028fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002900:	2003      	movs	r0, #3
 8002902:	f000 f8d8 	bl	8002ab6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002906:	2000      	movs	r0, #0
 8002908:	f7ff fb4c 	bl	8001fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800290c:	f7ff fb1e 	bl	8001f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40023c00 	.word	0x40023c00

0800291c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <HAL_IncTick+0x20>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	461a      	mov	r2, r3
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_IncTick+0x24>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4413      	add	r3, r2
 800292c:	4a04      	ldr	r2, [pc, #16]	; (8002940 <HAL_IncTick+0x24>)
 800292e:	6013      	str	r3, [r2, #0]
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	20000008 	.word	0x20000008
 8002940:	20004280 	.word	0x20004280

08002944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return uwTick;
 8002948:	4b03      	ldr	r3, [pc, #12]	; (8002958 <HAL_GetTick+0x14>)
 800294a:	681b      	ldr	r3, [r3, #0]
}
 800294c:	4618      	mov	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	20004280 	.word	0x20004280

0800295c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800296c:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <__NVIC_SetPriorityGrouping+0x44>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002978:	4013      	ands	r3, r2
 800297a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002984:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800298c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800298e:	4a04      	ldr	r2, [pc, #16]	; (80029a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	60d3      	str	r3, [r2, #12]
}
 8002994:	bf00      	nop
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a8:	4b04      	ldr	r3, [pc, #16]	; (80029bc <__NVIC_GetPriorityGrouping+0x18>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	0a1b      	lsrs	r3, r3, #8
 80029ae:	f003 0307 	and.w	r3, r3, #7
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	db0b      	blt.n	80029ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	f003 021f 	and.w	r2, r3, #31
 80029d8:	4907      	ldr	r1, [pc, #28]	; (80029f8 <__NVIC_EnableIRQ+0x38>)
 80029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	2001      	movs	r0, #1
 80029e2:	fa00 f202 	lsl.w	r2, r0, r2
 80029e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	e000e100 	.word	0xe000e100

080029fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	6039      	str	r1, [r7, #0]
 8002a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	db0a      	blt.n	8002a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	490c      	ldr	r1, [pc, #48]	; (8002a48 <__NVIC_SetPriority+0x4c>)
 8002a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1a:	0112      	lsls	r2, r2, #4
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	440b      	add	r3, r1
 8002a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a24:	e00a      	b.n	8002a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	4908      	ldr	r1, [pc, #32]	; (8002a4c <__NVIC_SetPriority+0x50>)
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	3b04      	subs	r3, #4
 8002a34:	0112      	lsls	r2, r2, #4
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	440b      	add	r3, r1
 8002a3a:	761a      	strb	r2, [r3, #24]
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	e000e100 	.word	0xe000e100
 8002a4c:	e000ed00 	.word	0xe000ed00

08002a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b089      	sub	sp, #36	; 0x24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f1c3 0307 	rsb	r3, r3, #7
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	bf28      	it	cs
 8002a6e:	2304      	movcs	r3, #4
 8002a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3304      	adds	r3, #4
 8002a76:	2b06      	cmp	r3, #6
 8002a78:	d902      	bls.n	8002a80 <NVIC_EncodePriority+0x30>
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	3b03      	subs	r3, #3
 8002a7e:	e000      	b.n	8002a82 <NVIC_EncodePriority+0x32>
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a84:	f04f 32ff 	mov.w	r2, #4294967295
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43da      	mvns	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	401a      	ands	r2, r3
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a98:	f04f 31ff 	mov.w	r1, #4294967295
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa2:	43d9      	mvns	r1, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa8:	4313      	orrs	r3, r2
         );
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3724      	adds	r7, #36	; 0x24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7ff ff4c 	bl	800295c <__NVIC_SetPriorityGrouping>
}
 8002ac4:	bf00      	nop
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ade:	f7ff ff61 	bl	80029a4 <__NVIC_GetPriorityGrouping>
 8002ae2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	68b9      	ldr	r1, [r7, #8]
 8002ae8:	6978      	ldr	r0, [r7, #20]
 8002aea:	f7ff ffb1 	bl	8002a50 <NVIC_EncodePriority>
 8002aee:	4602      	mov	r2, r0
 8002af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af4:	4611      	mov	r1, r2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff ff80 	bl	80029fc <__NVIC_SetPriority>
}
 8002afc:	bf00      	nop
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff ff54 	bl	80029c0 <__NVIC_EnableIRQ>
}
 8002b18:	bf00      	nop
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b2e:	f7ff ff09 	bl	8002944 <HAL_GetTick>
 8002b32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d008      	beq.n	8002b52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2280      	movs	r2, #128	; 0x80
 8002b44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e052      	b.n	8002bf8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0216 	bic.w	r2, r2, #22
 8002b60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695a      	ldr	r2, [r3, #20]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d103      	bne.n	8002b82 <HAL_DMA_Abort+0x62>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d007      	beq.n	8002b92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0208 	bic.w	r2, r2, #8
 8002b90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0201 	bic.w	r2, r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ba2:	e013      	b.n	8002bcc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ba4:	f7ff fece 	bl	8002944 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b05      	cmp	r3, #5
 8002bb0:	d90c      	bls.n	8002bcc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e015      	b.n	8002bf8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1e4      	bne.n	8002ba4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bde:	223f      	movs	r2, #63	; 0x3f
 8002be0:	409a      	lsls	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d004      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2280      	movs	r2, #128	; 0x80
 8002c18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e00c      	b.n	8002c38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2205      	movs	r2, #5
 8002c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0201 	bic.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b089      	sub	sp, #36	; 0x24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61fb      	str	r3, [r7, #28]
 8002c5e:	e16b      	b.n	8002f38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c60:	2201      	movs	r2, #1
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	4013      	ands	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	f040 815a 	bne.w	8002f32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d005      	beq.n	8002c96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d130      	bne.n	8002cf8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	2203      	movs	r2, #3
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4013      	ands	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ccc:	2201      	movs	r2, #1
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	091b      	lsrs	r3, r3, #4
 8002ce2:	f003 0201 	and.w	r2, r3, #1
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 0303 	and.w	r3, r3, #3
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d017      	beq.n	8002d34 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	2203      	movs	r2, #3
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 0303 	and.w	r3, r3, #3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d123      	bne.n	8002d88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	08da      	lsrs	r2, r3, #3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3208      	adds	r2, #8
 8002d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	220f      	movs	r2, #15
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4013      	ands	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	691a      	ldr	r2, [r3, #16]
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	08da      	lsrs	r2, r3, #3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3208      	adds	r2, #8
 8002d82:	69b9      	ldr	r1, [r7, #24]
 8002d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	2203      	movs	r2, #3
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 0203 	and.w	r2, r3, #3
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80b4 	beq.w	8002f32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	4b60      	ldr	r3, [pc, #384]	; (8002f50 <HAL_GPIO_Init+0x30c>)
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd2:	4a5f      	ldr	r2, [pc, #380]	; (8002f50 <HAL_GPIO_Init+0x30c>)
 8002dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dda:	4b5d      	ldr	r3, [pc, #372]	; (8002f50 <HAL_GPIO_Init+0x30c>)
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002de6:	4a5b      	ldr	r2, [pc, #364]	; (8002f54 <HAL_GPIO_Init+0x310>)
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	089b      	lsrs	r3, r3, #2
 8002dec:	3302      	adds	r3, #2
 8002dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	220f      	movs	r2, #15
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a52      	ldr	r2, [pc, #328]	; (8002f58 <HAL_GPIO_Init+0x314>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d02b      	beq.n	8002e6a <HAL_GPIO_Init+0x226>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a51      	ldr	r2, [pc, #324]	; (8002f5c <HAL_GPIO_Init+0x318>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d025      	beq.n	8002e66 <HAL_GPIO_Init+0x222>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a50      	ldr	r2, [pc, #320]	; (8002f60 <HAL_GPIO_Init+0x31c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d01f      	beq.n	8002e62 <HAL_GPIO_Init+0x21e>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a4f      	ldr	r2, [pc, #316]	; (8002f64 <HAL_GPIO_Init+0x320>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d019      	beq.n	8002e5e <HAL_GPIO_Init+0x21a>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a4e      	ldr	r2, [pc, #312]	; (8002f68 <HAL_GPIO_Init+0x324>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d013      	beq.n	8002e5a <HAL_GPIO_Init+0x216>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a4d      	ldr	r2, [pc, #308]	; (8002f6c <HAL_GPIO_Init+0x328>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00d      	beq.n	8002e56 <HAL_GPIO_Init+0x212>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a4c      	ldr	r2, [pc, #304]	; (8002f70 <HAL_GPIO_Init+0x32c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d007      	beq.n	8002e52 <HAL_GPIO_Init+0x20e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a4b      	ldr	r2, [pc, #300]	; (8002f74 <HAL_GPIO_Init+0x330>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d101      	bne.n	8002e4e <HAL_GPIO_Init+0x20a>
 8002e4a:	2307      	movs	r3, #7
 8002e4c:	e00e      	b.n	8002e6c <HAL_GPIO_Init+0x228>
 8002e4e:	2308      	movs	r3, #8
 8002e50:	e00c      	b.n	8002e6c <HAL_GPIO_Init+0x228>
 8002e52:	2306      	movs	r3, #6
 8002e54:	e00a      	b.n	8002e6c <HAL_GPIO_Init+0x228>
 8002e56:	2305      	movs	r3, #5
 8002e58:	e008      	b.n	8002e6c <HAL_GPIO_Init+0x228>
 8002e5a:	2304      	movs	r3, #4
 8002e5c:	e006      	b.n	8002e6c <HAL_GPIO_Init+0x228>
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e004      	b.n	8002e6c <HAL_GPIO_Init+0x228>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e002      	b.n	8002e6c <HAL_GPIO_Init+0x228>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <HAL_GPIO_Init+0x228>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	69fa      	ldr	r2, [r7, #28]
 8002e6e:	f002 0203 	and.w	r2, r2, #3
 8002e72:	0092      	lsls	r2, r2, #2
 8002e74:	4093      	lsls	r3, r2
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e7c:	4935      	ldr	r1, [pc, #212]	; (8002f54 <HAL_GPIO_Init+0x310>)
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	089b      	lsrs	r3, r3, #2
 8002e82:	3302      	adds	r3, #2
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e8a:	4b3b      	ldr	r3, [pc, #236]	; (8002f78 <HAL_GPIO_Init+0x334>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	43db      	mvns	r3, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eae:	4a32      	ldr	r2, [pc, #200]	; (8002f78 <HAL_GPIO_Init+0x334>)
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002eb4:	4b30      	ldr	r3, [pc, #192]	; (8002f78 <HAL_GPIO_Init+0x334>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ed8:	4a27      	ldr	r2, [pc, #156]	; (8002f78 <HAL_GPIO_Init+0x334>)
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ede:	4b26      	ldr	r3, [pc, #152]	; (8002f78 <HAL_GPIO_Init+0x334>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4013      	ands	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f02:	4a1d      	ldr	r2, [pc, #116]	; (8002f78 <HAL_GPIO_Init+0x334>)
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f08:	4b1b      	ldr	r3, [pc, #108]	; (8002f78 <HAL_GPIO_Init+0x334>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	43db      	mvns	r3, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4013      	ands	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f2c:	4a12      	ldr	r2, [pc, #72]	; (8002f78 <HAL_GPIO_Init+0x334>)
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	3301      	adds	r3, #1
 8002f36:	61fb      	str	r3, [r7, #28]
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	2b0f      	cmp	r3, #15
 8002f3c:	f67f ae90 	bls.w	8002c60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f40:	bf00      	nop
 8002f42:	bf00      	nop
 8002f44:	3724      	adds	r7, #36	; 0x24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800
 8002f54:	40013800 	.word	0x40013800
 8002f58:	40020000 	.word	0x40020000
 8002f5c:	40020400 	.word	0x40020400
 8002f60:	40020800 	.word	0x40020800
 8002f64:	40020c00 	.word	0x40020c00
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	40021400 	.word	0x40021400
 8002f70:	40021800 	.word	0x40021800
 8002f74:	40021c00 	.word	0x40021c00
 8002f78:	40013c00 	.word	0x40013c00

08002f7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	887b      	ldrh	r3, [r7, #2]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
 8002f98:	e001      	b.n	8002f9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	807b      	strh	r3, [r7, #2]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fbc:	787b      	ldrb	r3, [r7, #1]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fc2:	887a      	ldrh	r2, [r7, #2]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fc8:	e003      	b.n	8002fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fca:	887b      	ldrh	r3, [r7, #2]
 8002fcc:	041a      	lsls	r2, r3, #16
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	619a      	str	r2, [r3, #24]
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b085      	sub	sp, #20
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ff0:	887a      	ldrh	r2, [r7, #2]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	041a      	lsls	r2, r3, #16
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	43d9      	mvns	r1, r3
 8002ffc:	887b      	ldrh	r3, [r7, #2]
 8002ffe:	400b      	ands	r3, r1
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	619a      	str	r2, [r3, #24]
}
 8003006:	bf00      	nop
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
	...

08003014 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800301e:	4b08      	ldr	r3, [pc, #32]	; (8003040 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003020:	695a      	ldr	r2, [r3, #20]
 8003022:	88fb      	ldrh	r3, [r7, #6]
 8003024:	4013      	ands	r3, r2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d006      	beq.n	8003038 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800302a:	4a05      	ldr	r2, [pc, #20]	; (8003040 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800302c:	88fb      	ldrh	r3, [r7, #6]
 800302e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003030:	88fb      	ldrh	r3, [r7, #6]
 8003032:	4618      	mov	r0, r3
 8003034:	f7fe fbba 	bl	80017ac <HAL_GPIO_EXTI_Callback>
  }
}
 8003038:	bf00      	nop
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40013c00 	.word	0x40013c00

08003044 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e12b      	b.n	80032ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7fe fe86 	bl	8001d7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2224      	movs	r2, #36	; 0x24
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0201 	bic.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003096:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030a8:	f000 fd5c 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
 80030ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4a81      	ldr	r2, [pc, #516]	; (80032b8 <HAL_I2C_Init+0x274>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d807      	bhi.n	80030c8 <HAL_I2C_Init+0x84>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4a80      	ldr	r2, [pc, #512]	; (80032bc <HAL_I2C_Init+0x278>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	bf94      	ite	ls
 80030c0:	2301      	movls	r3, #1
 80030c2:	2300      	movhi	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e006      	b.n	80030d6 <HAL_I2C_Init+0x92>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4a7d      	ldr	r2, [pc, #500]	; (80032c0 <HAL_I2C_Init+0x27c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	bf94      	ite	ls
 80030d0:	2301      	movls	r3, #1
 80030d2:	2300      	movhi	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e0e7      	b.n	80032ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4a78      	ldr	r2, [pc, #480]	; (80032c4 <HAL_I2C_Init+0x280>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	0c9b      	lsrs	r3, r3, #18
 80030e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	4a6a      	ldr	r2, [pc, #424]	; (80032b8 <HAL_I2C_Init+0x274>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d802      	bhi.n	8003118 <HAL_I2C_Init+0xd4>
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	3301      	adds	r3, #1
 8003116:	e009      	b.n	800312c <HAL_I2C_Init+0xe8>
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800311e:	fb02 f303 	mul.w	r3, r2, r3
 8003122:	4a69      	ldr	r2, [pc, #420]	; (80032c8 <HAL_I2C_Init+0x284>)
 8003124:	fba2 2303 	umull	r2, r3, r2, r3
 8003128:	099b      	lsrs	r3, r3, #6
 800312a:	3301      	adds	r3, #1
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	430b      	orrs	r3, r1
 8003132:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800313e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	495c      	ldr	r1, [pc, #368]	; (80032b8 <HAL_I2C_Init+0x274>)
 8003148:	428b      	cmp	r3, r1
 800314a:	d819      	bhi.n	8003180 <HAL_I2C_Init+0x13c>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	1e59      	subs	r1, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	fbb1 f3f3 	udiv	r3, r1, r3
 800315a:	1c59      	adds	r1, r3, #1
 800315c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003160:	400b      	ands	r3, r1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_I2C_Init+0x138>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	1e59      	subs	r1, r3, #1
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	fbb1 f3f3 	udiv	r3, r1, r3
 8003174:	3301      	adds	r3, #1
 8003176:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800317a:	e051      	b.n	8003220 <HAL_I2C_Init+0x1dc>
 800317c:	2304      	movs	r3, #4
 800317e:	e04f      	b.n	8003220 <HAL_I2C_Init+0x1dc>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d111      	bne.n	80031ac <HAL_I2C_Init+0x168>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	1e58      	subs	r0, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6859      	ldr	r1, [r3, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	440b      	add	r3, r1
 8003196:	fbb0 f3f3 	udiv	r3, r0, r3
 800319a:	3301      	adds	r3, #1
 800319c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bf0c      	ite	eq
 80031a4:	2301      	moveq	r3, #1
 80031a6:	2300      	movne	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	e012      	b.n	80031d2 <HAL_I2C_Init+0x18e>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1e58      	subs	r0, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6859      	ldr	r1, [r3, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	0099      	lsls	r1, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	fbb0 f3f3 	udiv	r3, r0, r3
 80031c2:	3301      	adds	r3, #1
 80031c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bf0c      	ite	eq
 80031cc:	2301      	moveq	r3, #1
 80031ce:	2300      	movne	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_I2C_Init+0x196>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e022      	b.n	8003220 <HAL_I2C_Init+0x1dc>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10e      	bne.n	8003200 <HAL_I2C_Init+0x1bc>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1e58      	subs	r0, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6859      	ldr	r1, [r3, #4]
 80031ea:	460b      	mov	r3, r1
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	440b      	add	r3, r1
 80031f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80031f4:	3301      	adds	r3, #1
 80031f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031fe:	e00f      	b.n	8003220 <HAL_I2C_Init+0x1dc>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	1e58      	subs	r0, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6859      	ldr	r1, [r3, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	0099      	lsls	r1, r3, #2
 8003210:	440b      	add	r3, r1
 8003212:	fbb0 f3f3 	udiv	r3, r0, r3
 8003216:	3301      	adds	r3, #1
 8003218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	6809      	ldr	r1, [r1, #0]
 8003224:	4313      	orrs	r3, r2
 8003226:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69da      	ldr	r2, [r3, #28]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800324e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6911      	ldr	r1, [r2, #16]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	68d2      	ldr	r2, [r2, #12]
 800325a:	4311      	orrs	r1, r2
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6812      	ldr	r2, [r2, #0]
 8003260:	430b      	orrs	r3, r1
 8003262:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2220      	movs	r2, #32
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	000186a0 	.word	0x000186a0
 80032bc:	001e847f 	.word	0x001e847f
 80032c0:	003d08ff 	.word	0x003d08ff
 80032c4:	431bde83 	.word	0x431bde83
 80032c8:	10624dd3 	.word	0x10624dd3

080032cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e264      	b.n	80037a8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d075      	beq.n	80033d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ea:	4ba3      	ldr	r3, [pc, #652]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 030c 	and.w	r3, r3, #12
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d00c      	beq.n	8003310 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032f6:	4ba0      	ldr	r3, [pc, #640]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032fe:	2b08      	cmp	r3, #8
 8003300:	d112      	bne.n	8003328 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003302:	4b9d      	ldr	r3, [pc, #628]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800330a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800330e:	d10b      	bne.n	8003328 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003310:	4b99      	ldr	r3, [pc, #612]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d05b      	beq.n	80033d4 <HAL_RCC_OscConfig+0x108>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d157      	bne.n	80033d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e23f      	b.n	80037a8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003330:	d106      	bne.n	8003340 <HAL_RCC_OscConfig+0x74>
 8003332:	4b91      	ldr	r3, [pc, #580]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a90      	ldr	r2, [pc, #576]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 8003338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	e01d      	b.n	800337c <HAL_RCC_OscConfig+0xb0>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003348:	d10c      	bne.n	8003364 <HAL_RCC_OscConfig+0x98>
 800334a:	4b8b      	ldr	r3, [pc, #556]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a8a      	ldr	r2, [pc, #552]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 8003350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	4b88      	ldr	r3, [pc, #544]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a87      	ldr	r2, [pc, #540]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 800335c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	e00b      	b.n	800337c <HAL_RCC_OscConfig+0xb0>
 8003364:	4b84      	ldr	r3, [pc, #528]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a83      	ldr	r2, [pc, #524]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 800336a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	4b81      	ldr	r3, [pc, #516]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a80      	ldr	r2, [pc, #512]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 8003376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800337a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d013      	beq.n	80033ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003384:	f7ff fade 	bl	8002944 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800338c:	f7ff fada 	bl	8002944 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b64      	cmp	r3, #100	; 0x64
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e204      	b.n	80037a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339e:	4b76      	ldr	r3, [pc, #472]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0xc0>
 80033aa:	e014      	b.n	80033d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ac:	f7ff faca 	bl	8002944 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033b4:	f7ff fac6 	bl	8002944 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b64      	cmp	r3, #100	; 0x64
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e1f0      	b.n	80037a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033c6:	4b6c      	ldr	r3, [pc, #432]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0xe8>
 80033d2:	e000      	b.n	80033d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d063      	beq.n	80034aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033e2:	4b65      	ldr	r3, [pc, #404]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00b      	beq.n	8003406 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ee:	4b62      	ldr	r3, [pc, #392]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d11c      	bne.n	8003434 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033fa:	4b5f      	ldr	r3, [pc, #380]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d116      	bne.n	8003434 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003406:	4b5c      	ldr	r3, [pc, #368]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d005      	beq.n	800341e <HAL_RCC_OscConfig+0x152>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d001      	beq.n	800341e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e1c4      	b.n	80037a8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800341e:	4b56      	ldr	r3, [pc, #344]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	4952      	ldr	r1, [pc, #328]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 800342e:	4313      	orrs	r3, r2
 8003430:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003432:	e03a      	b.n	80034aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d020      	beq.n	800347e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800343c:	4b4f      	ldr	r3, [pc, #316]	; (800357c <HAL_RCC_OscConfig+0x2b0>)
 800343e:	2201      	movs	r2, #1
 8003440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003442:	f7ff fa7f 	bl	8002944 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800344a:	f7ff fa7b 	bl	8002944 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e1a5      	b.n	80037a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345c:	4b46      	ldr	r3, [pc, #280]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0f0      	beq.n	800344a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003468:	4b43      	ldr	r3, [pc, #268]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	4940      	ldr	r1, [pc, #256]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 8003478:	4313      	orrs	r3, r2
 800347a:	600b      	str	r3, [r1, #0]
 800347c:	e015      	b.n	80034aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800347e:	4b3f      	ldr	r3, [pc, #252]	; (800357c <HAL_RCC_OscConfig+0x2b0>)
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003484:	f7ff fa5e 	bl	8002944 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800348c:	f7ff fa5a 	bl	8002944 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e184      	b.n	80037a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800349e:	4b36      	ldr	r3, [pc, #216]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d030      	beq.n	8003518 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d016      	beq.n	80034ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034be:	4b30      	ldr	r3, [pc, #192]	; (8003580 <HAL_RCC_OscConfig+0x2b4>)
 80034c0:	2201      	movs	r2, #1
 80034c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c4:	f7ff fa3e 	bl	8002944 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034cc:	f7ff fa3a 	bl	8002944 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e164      	b.n	80037a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034de:	4b26      	ldr	r3, [pc, #152]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 80034e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCC_OscConfig+0x200>
 80034ea:	e015      	b.n	8003518 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ec:	4b24      	ldr	r3, [pc, #144]	; (8003580 <HAL_RCC_OscConfig+0x2b4>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f2:	f7ff fa27 	bl	8002944 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034fa:	f7ff fa23 	bl	8002944 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e14d      	b.n	80037a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800350c:	4b1a      	ldr	r3, [pc, #104]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 800350e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1f0      	bne.n	80034fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 80a0 	beq.w	8003666 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003526:	2300      	movs	r3, #0
 8003528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800352a:	4b13      	ldr	r3, [pc, #76]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10f      	bne.n	8003556 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	4b0f      	ldr	r3, [pc, #60]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	4a0e      	ldr	r2, [pc, #56]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 8003540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003544:	6413      	str	r3, [r2, #64]	; 0x40
 8003546:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <HAL_RCC_OscConfig+0x2ac>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003552:	2301      	movs	r3, #1
 8003554:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003556:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <HAL_RCC_OscConfig+0x2b8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355e:	2b00      	cmp	r3, #0
 8003560:	d121      	bne.n	80035a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003562:	4b08      	ldr	r3, [pc, #32]	; (8003584 <HAL_RCC_OscConfig+0x2b8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a07      	ldr	r2, [pc, #28]	; (8003584 <HAL_RCC_OscConfig+0x2b8>)
 8003568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800356c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800356e:	f7ff f9e9 	bl	8002944 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003574:	e011      	b.n	800359a <HAL_RCC_OscConfig+0x2ce>
 8003576:	bf00      	nop
 8003578:	40023800 	.word	0x40023800
 800357c:	42470000 	.word	0x42470000
 8003580:	42470e80 	.word	0x42470e80
 8003584:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003588:	f7ff f9dc 	bl	8002944 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e106      	b.n	80037a8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359a:	4b85      	ldr	r3, [pc, #532]	; (80037b0 <HAL_RCC_OscConfig+0x4e4>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f0      	beq.n	8003588 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d106      	bne.n	80035bc <HAL_RCC_OscConfig+0x2f0>
 80035ae:	4b81      	ldr	r3, [pc, #516]	; (80037b4 <HAL_RCC_OscConfig+0x4e8>)
 80035b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b2:	4a80      	ldr	r2, [pc, #512]	; (80037b4 <HAL_RCC_OscConfig+0x4e8>)
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	6713      	str	r3, [r2, #112]	; 0x70
 80035ba:	e01c      	b.n	80035f6 <HAL_RCC_OscConfig+0x32a>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	2b05      	cmp	r3, #5
 80035c2:	d10c      	bne.n	80035de <HAL_RCC_OscConfig+0x312>
 80035c4:	4b7b      	ldr	r3, [pc, #492]	; (80037b4 <HAL_RCC_OscConfig+0x4e8>)
 80035c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c8:	4a7a      	ldr	r2, [pc, #488]	; (80037b4 <HAL_RCC_OscConfig+0x4e8>)
 80035ca:	f043 0304 	orr.w	r3, r3, #4
 80035ce:	6713      	str	r3, [r2, #112]	; 0x70
 80035d0:	4b78      	ldr	r3, [pc, #480]	; (80037b4 <HAL_RCC_OscConfig+0x4e8>)
 80035d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d4:	4a77      	ldr	r2, [pc, #476]	; (80037b4 <HAL_RCC_OscConfig+0x4e8>)
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	6713      	str	r3, [r2, #112]	; 0x70
 80035dc:	e00b      	b.n	80035f6 <HAL_RCC_OscConfig+0x32a>
 80035de:	4b75      	ldr	r3, [pc, #468]	; (80037b4 <HAL_RCC_OscConfig+0x4e8>)
 80035e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e2:	4a74      	ldr	r2, [pc, #464]	; (80037b4 <HAL_RCC_OscConfig+0x4e8>)
 80035e4:	f023 0301 	bic.w	r3, r3, #1
 80035e8:	6713      	str	r3, [r2, #112]	; 0x70
 80035ea:	4b72      	ldr	r3, [pc, #456]	; (80037b4 <HAL_RCC_OscConfig+0x4e8>)
 80035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ee:	4a71      	ldr	r2, [pc, #452]	; (80037b4 <HAL_RCC_OscConfig+0x4e8>)
 80035f0:	f023 0304 	bic.w	r3, r3, #4
 80035f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d015      	beq.n	800362a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fe:	f7ff f9a1 	bl	8002944 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003604:	e00a      	b.n	800361c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003606:	f7ff f99d 	bl	8002944 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	f241 3288 	movw	r2, #5000	; 0x1388
 8003614:	4293      	cmp	r3, r2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e0c5      	b.n	80037a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361c:	4b65      	ldr	r3, [pc, #404]	; (80037b4 <HAL_RCC_OscConfig+0x4e8>)
 800361e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0ee      	beq.n	8003606 <HAL_RCC_OscConfig+0x33a>
 8003628:	e014      	b.n	8003654 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800362a:	f7ff f98b 	bl	8002944 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003630:	e00a      	b.n	8003648 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003632:	f7ff f987 	bl	8002944 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003640:	4293      	cmp	r3, r2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e0af      	b.n	80037a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003648:	4b5a      	ldr	r3, [pc, #360]	; (80037b4 <HAL_RCC_OscConfig+0x4e8>)
 800364a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1ee      	bne.n	8003632 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003654:	7dfb      	ldrb	r3, [r7, #23]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d105      	bne.n	8003666 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800365a:	4b56      	ldr	r3, [pc, #344]	; (80037b4 <HAL_RCC_OscConfig+0x4e8>)
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	4a55      	ldr	r2, [pc, #340]	; (80037b4 <HAL_RCC_OscConfig+0x4e8>)
 8003660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003664:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 809b 	beq.w	80037a6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003670:	4b50      	ldr	r3, [pc, #320]	; (80037b4 <HAL_RCC_OscConfig+0x4e8>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 030c 	and.w	r3, r3, #12
 8003678:	2b08      	cmp	r3, #8
 800367a:	d05c      	beq.n	8003736 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	2b02      	cmp	r3, #2
 8003682:	d141      	bne.n	8003708 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003684:	4b4c      	ldr	r3, [pc, #304]	; (80037b8 <HAL_RCC_OscConfig+0x4ec>)
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368a:	f7ff f95b 	bl	8002944 <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003692:	f7ff f957 	bl	8002944 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e081      	b.n	80037a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a4:	4b43      	ldr	r3, [pc, #268]	; (80037b4 <HAL_RCC_OscConfig+0x4e8>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1f0      	bne.n	8003692 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69da      	ldr	r2, [r3, #28]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	431a      	orrs	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	019b      	lsls	r3, r3, #6
 80036c0:	431a      	orrs	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c6:	085b      	lsrs	r3, r3, #1
 80036c8:	3b01      	subs	r3, #1
 80036ca:	041b      	lsls	r3, r3, #16
 80036cc:	431a      	orrs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d2:	061b      	lsls	r3, r3, #24
 80036d4:	4937      	ldr	r1, [pc, #220]	; (80037b4 <HAL_RCC_OscConfig+0x4e8>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036da:	4b37      	ldr	r3, [pc, #220]	; (80037b8 <HAL_RCC_OscConfig+0x4ec>)
 80036dc:	2201      	movs	r2, #1
 80036de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e0:	f7ff f930 	bl	8002944 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e8:	f7ff f92c 	bl	8002944 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e056      	b.n	80037a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036fa:	4b2e      	ldr	r3, [pc, #184]	; (80037b4 <HAL_RCC_OscConfig+0x4e8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0f0      	beq.n	80036e8 <HAL_RCC_OscConfig+0x41c>
 8003706:	e04e      	b.n	80037a6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003708:	4b2b      	ldr	r3, [pc, #172]	; (80037b8 <HAL_RCC_OscConfig+0x4ec>)
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370e:	f7ff f919 	bl	8002944 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003716:	f7ff f915 	bl	8002944 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e03f      	b.n	80037a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003728:	4b22      	ldr	r3, [pc, #136]	; (80037b4 <HAL_RCC_OscConfig+0x4e8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1f0      	bne.n	8003716 <HAL_RCC_OscConfig+0x44a>
 8003734:	e037      	b.n	80037a6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e032      	b.n	80037a8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003742:	4b1c      	ldr	r3, [pc, #112]	; (80037b4 <HAL_RCC_OscConfig+0x4e8>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d028      	beq.n	80037a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800375a:	429a      	cmp	r2, r3
 800375c:	d121      	bne.n	80037a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003768:	429a      	cmp	r2, r3
 800376a:	d11a      	bne.n	80037a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003772:	4013      	ands	r3, r2
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003778:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800377a:	4293      	cmp	r3, r2
 800377c:	d111      	bne.n	80037a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003788:	085b      	lsrs	r3, r3, #1
 800378a:	3b01      	subs	r3, #1
 800378c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800378e:	429a      	cmp	r2, r3
 8003790:	d107      	bne.n	80037a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800379e:	429a      	cmp	r2, r3
 80037a0:	d001      	beq.n	80037a6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e000      	b.n	80037a8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40007000 	.word	0x40007000
 80037b4:	40023800 	.word	0x40023800
 80037b8:	42470060 	.word	0x42470060

080037bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0cc      	b.n	800396a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037d0:	4b68      	ldr	r3, [pc, #416]	; (8003974 <HAL_RCC_ClockConfig+0x1b8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d90c      	bls.n	80037f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037de:	4b65      	ldr	r3, [pc, #404]	; (8003974 <HAL_RCC_ClockConfig+0x1b8>)
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e6:	4b63      	ldr	r3, [pc, #396]	; (8003974 <HAL_RCC_ClockConfig+0x1b8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0b8      	b.n	800396a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d020      	beq.n	8003846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003810:	4b59      	ldr	r3, [pc, #356]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	4a58      	ldr	r2, [pc, #352]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800381a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003828:	4b53      	ldr	r3, [pc, #332]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	4a52      	ldr	r2, [pc, #328]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003834:	4b50      	ldr	r3, [pc, #320]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	494d      	ldr	r1, [pc, #308]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	4313      	orrs	r3, r2
 8003844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d044      	beq.n	80038dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d107      	bne.n	800386a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385a:	4b47      	ldr	r3, [pc, #284]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d119      	bne.n	800389a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e07f      	b.n	800396a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d003      	beq.n	800387a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003876:	2b03      	cmp	r3, #3
 8003878:	d107      	bne.n	800388a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800387a:	4b3f      	ldr	r3, [pc, #252]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d109      	bne.n	800389a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e06f      	b.n	800396a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388a:	4b3b      	ldr	r3, [pc, #236]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e067      	b.n	800396a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800389a:	4b37      	ldr	r3, [pc, #220]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f023 0203 	bic.w	r2, r3, #3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	4934      	ldr	r1, [pc, #208]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038ac:	f7ff f84a 	bl	8002944 <HAL_GetTick>
 80038b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b2:	e00a      	b.n	80038ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b4:	f7ff f846 	bl	8002944 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e04f      	b.n	800396a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ca:	4b2b      	ldr	r3, [pc, #172]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 020c 	and.w	r2, r3, #12
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	429a      	cmp	r2, r3
 80038da:	d1eb      	bne.n	80038b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038dc:	4b25      	ldr	r3, [pc, #148]	; (8003974 <HAL_RCC_ClockConfig+0x1b8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d20c      	bcs.n	8003904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ea:	4b22      	ldr	r3, [pc, #136]	; (8003974 <HAL_RCC_ClockConfig+0x1b8>)
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f2:	4b20      	ldr	r3, [pc, #128]	; (8003974 <HAL_RCC_ClockConfig+0x1b8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d001      	beq.n	8003904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e032      	b.n	800396a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003910:	4b19      	ldr	r3, [pc, #100]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4916      	ldr	r1, [pc, #88]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	4313      	orrs	r3, r2
 8003920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d009      	beq.n	8003942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800392e:	4b12      	ldr	r3, [pc, #72]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	490e      	ldr	r1, [pc, #56]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	4313      	orrs	r3, r2
 8003940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003942:	f000 f821 	bl	8003988 <HAL_RCC_GetSysClockFreq>
 8003946:	4602      	mov	r2, r0
 8003948:	4b0b      	ldr	r3, [pc, #44]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	091b      	lsrs	r3, r3, #4
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	490a      	ldr	r1, [pc, #40]	; (800397c <HAL_RCC_ClockConfig+0x1c0>)
 8003954:	5ccb      	ldrb	r3, [r1, r3]
 8003956:	fa22 f303 	lsr.w	r3, r2, r3
 800395a:	4a09      	ldr	r2, [pc, #36]	; (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 800395c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800395e:	4b09      	ldr	r3, [pc, #36]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f7fe fb1e 	bl	8001fa4 <HAL_InitTick>

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40023c00 	.word	0x40023c00
 8003978:	40023800 	.word	0x40023800
 800397c:	08008228 	.word	0x08008228
 8003980:	20000000 	.word	0x20000000
 8003984:	20000004 	.word	0x20000004

08003988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003988:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800398c:	b084      	sub	sp, #16
 800398e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	607b      	str	r3, [r7, #4]
 8003994:	2300      	movs	r3, #0
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	2300      	movs	r3, #0
 800399a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800399c:	2300      	movs	r3, #0
 800399e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039a0:	4b67      	ldr	r3, [pc, #412]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 030c 	and.w	r3, r3, #12
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d00d      	beq.n	80039c8 <HAL_RCC_GetSysClockFreq+0x40>
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	f200 80bd 	bhi.w	8003b2c <HAL_RCC_GetSysClockFreq+0x1a4>
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <HAL_RCC_GetSysClockFreq+0x34>
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d003      	beq.n	80039c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80039ba:	e0b7      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039bc:	4b61      	ldr	r3, [pc, #388]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80039be:	60bb      	str	r3, [r7, #8]
       break;
 80039c0:	e0b7      	b.n	8003b32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039c2:	4b61      	ldr	r3, [pc, #388]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80039c4:	60bb      	str	r3, [r7, #8]
      break;
 80039c6:	e0b4      	b.n	8003b32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039c8:	4b5d      	ldr	r3, [pc, #372]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039d2:	4b5b      	ldr	r3, [pc, #364]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d04d      	beq.n	8003a7a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039de:	4b58      	ldr	r3, [pc, #352]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	099b      	lsrs	r3, r3, #6
 80039e4:	461a      	mov	r2, r3
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039ee:	f04f 0100 	mov.w	r1, #0
 80039f2:	ea02 0800 	and.w	r8, r2, r0
 80039f6:	ea03 0901 	and.w	r9, r3, r1
 80039fa:	4640      	mov	r0, r8
 80039fc:	4649      	mov	r1, r9
 80039fe:	f04f 0200 	mov.w	r2, #0
 8003a02:	f04f 0300 	mov.w	r3, #0
 8003a06:	014b      	lsls	r3, r1, #5
 8003a08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a0c:	0142      	lsls	r2, r0, #5
 8003a0e:	4610      	mov	r0, r2
 8003a10:	4619      	mov	r1, r3
 8003a12:	ebb0 0008 	subs.w	r0, r0, r8
 8003a16:	eb61 0109 	sbc.w	r1, r1, r9
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	018b      	lsls	r3, r1, #6
 8003a24:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a28:	0182      	lsls	r2, r0, #6
 8003a2a:	1a12      	subs	r2, r2, r0
 8003a2c:	eb63 0301 	sbc.w	r3, r3, r1
 8003a30:	f04f 0000 	mov.w	r0, #0
 8003a34:	f04f 0100 	mov.w	r1, #0
 8003a38:	00d9      	lsls	r1, r3, #3
 8003a3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a3e:	00d0      	lsls	r0, r2, #3
 8003a40:	4602      	mov	r2, r0
 8003a42:	460b      	mov	r3, r1
 8003a44:	eb12 0208 	adds.w	r2, r2, r8
 8003a48:	eb43 0309 	adc.w	r3, r3, r9
 8003a4c:	f04f 0000 	mov.w	r0, #0
 8003a50:	f04f 0100 	mov.w	r1, #0
 8003a54:	0259      	lsls	r1, r3, #9
 8003a56:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003a5a:	0250      	lsls	r0, r2, #9
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4610      	mov	r0, r2
 8003a62:	4619      	mov	r1, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	461a      	mov	r2, r3
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	f7fc ffce 	bl	8000a0c <__aeabi_uldivmod>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4613      	mov	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	e04a      	b.n	8003b10 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a7a:	4b31      	ldr	r3, [pc, #196]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	099b      	lsrs	r3, r3, #6
 8003a80:	461a      	mov	r2, r3
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a8a:	f04f 0100 	mov.w	r1, #0
 8003a8e:	ea02 0400 	and.w	r4, r2, r0
 8003a92:	ea03 0501 	and.w	r5, r3, r1
 8003a96:	4620      	mov	r0, r4
 8003a98:	4629      	mov	r1, r5
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	014b      	lsls	r3, r1, #5
 8003aa4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003aa8:	0142      	lsls	r2, r0, #5
 8003aaa:	4610      	mov	r0, r2
 8003aac:	4619      	mov	r1, r3
 8003aae:	1b00      	subs	r0, r0, r4
 8003ab0:	eb61 0105 	sbc.w	r1, r1, r5
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	018b      	lsls	r3, r1, #6
 8003abe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ac2:	0182      	lsls	r2, r0, #6
 8003ac4:	1a12      	subs	r2, r2, r0
 8003ac6:	eb63 0301 	sbc.w	r3, r3, r1
 8003aca:	f04f 0000 	mov.w	r0, #0
 8003ace:	f04f 0100 	mov.w	r1, #0
 8003ad2:	00d9      	lsls	r1, r3, #3
 8003ad4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ad8:	00d0      	lsls	r0, r2, #3
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	1912      	adds	r2, r2, r4
 8003ae0:	eb45 0303 	adc.w	r3, r5, r3
 8003ae4:	f04f 0000 	mov.w	r0, #0
 8003ae8:	f04f 0100 	mov.w	r1, #0
 8003aec:	0299      	lsls	r1, r3, #10
 8003aee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003af2:	0290      	lsls	r0, r2, #10
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4610      	mov	r0, r2
 8003afa:	4619      	mov	r1, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	461a      	mov	r2, r3
 8003b00:	f04f 0300 	mov.w	r3, #0
 8003b04:	f7fc ff82 	bl	8000a0c <__aeabi_uldivmod>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b10:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	0c1b      	lsrs	r3, r3, #16
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b28:	60bb      	str	r3, [r7, #8]
      break;
 8003b2a:	e002      	b.n	8003b32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b2c:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b2e:	60bb      	str	r3, [r7, #8]
      break;
 8003b30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b32:	68bb      	ldr	r3, [r7, #8]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b3e:	bf00      	nop
 8003b40:	40023800 	.word	0x40023800
 8003b44:	00f42400 	.word	0x00f42400
 8003b48:	007a1200 	.word	0x007a1200

08003b4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b50:	4b03      	ldr	r3, [pc, #12]	; (8003b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b52:	681b      	ldr	r3, [r3, #0]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	20000000 	.word	0x20000000

08003b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b68:	f7ff fff0 	bl	8003b4c <HAL_RCC_GetHCLKFreq>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	0a9b      	lsrs	r3, r3, #10
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	4903      	ldr	r1, [pc, #12]	; (8003b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b7a:	5ccb      	ldrb	r3, [r1, r3]
 8003b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40023800 	.word	0x40023800
 8003b88:	08008238 	.word	0x08008238

08003b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b90:	f7ff ffdc 	bl	8003b4c <HAL_RCC_GetHCLKFreq>
 8003b94:	4602      	mov	r2, r0
 8003b96:	4b05      	ldr	r3, [pc, #20]	; (8003bac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	0b5b      	lsrs	r3, r3, #13
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	4903      	ldr	r1, [pc, #12]	; (8003bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ba2:	5ccb      	ldrb	r3, [r1, r3]
 8003ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	08008238 	.word	0x08008238

08003bb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	220f      	movs	r2, #15
 8003bc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003bc4:	4b12      	ldr	r3, [pc, #72]	; (8003c10 <HAL_RCC_GetClockConfig+0x5c>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 0203 	and.w	r2, r3, #3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	; (8003c10 <HAL_RCC_GetClockConfig+0x5c>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003bdc:	4b0c      	ldr	r3, [pc, #48]	; (8003c10 <HAL_RCC_GetClockConfig+0x5c>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003be8:	4b09      	ldr	r3, [pc, #36]	; (8003c10 <HAL_RCC_GetClockConfig+0x5c>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	08db      	lsrs	r3, r3, #3
 8003bee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003bf6:	4b07      	ldr	r3, [pc, #28]	; (8003c14 <HAL_RCC_GetClockConfig+0x60>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0207 	and.w	r2, r3, #7
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	601a      	str	r2, [r3, #0]
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	40023800 	.word	0x40023800
 8003c14:	40023c00 	.word	0x40023c00

08003c18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e041      	b.n	8003cae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f839 	bl	8003cb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3304      	adds	r3, #4
 8003c54:	4619      	mov	r1, r3
 8003c56:	4610      	mov	r0, r2
 8003c58:	f000 fce2 	bl	8004620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
	...

08003ccc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d001      	beq.n	8003ce4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e04e      	b.n	8003d82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0201 	orr.w	r2, r2, #1
 8003cfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a23      	ldr	r2, [pc, #140]	; (8003d90 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d022      	beq.n	8003d4c <HAL_TIM_Base_Start_IT+0x80>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0e:	d01d      	beq.n	8003d4c <HAL_TIM_Base_Start_IT+0x80>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a1f      	ldr	r2, [pc, #124]	; (8003d94 <HAL_TIM_Base_Start_IT+0xc8>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d018      	beq.n	8003d4c <HAL_TIM_Base_Start_IT+0x80>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a1e      	ldr	r2, [pc, #120]	; (8003d98 <HAL_TIM_Base_Start_IT+0xcc>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d013      	beq.n	8003d4c <HAL_TIM_Base_Start_IT+0x80>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a1c      	ldr	r2, [pc, #112]	; (8003d9c <HAL_TIM_Base_Start_IT+0xd0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d00e      	beq.n	8003d4c <HAL_TIM_Base_Start_IT+0x80>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a1b      	ldr	r2, [pc, #108]	; (8003da0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d009      	beq.n	8003d4c <HAL_TIM_Base_Start_IT+0x80>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a19      	ldr	r2, [pc, #100]	; (8003da4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d004      	beq.n	8003d4c <HAL_TIM_Base_Start_IT+0x80>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a18      	ldr	r2, [pc, #96]	; (8003da8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d111      	bne.n	8003d70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b06      	cmp	r3, #6
 8003d5c:	d010      	beq.n	8003d80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f042 0201 	orr.w	r2, r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d6e:	e007      	b.n	8003d80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40010000 	.word	0x40010000
 8003d94:	40000400 	.word	0x40000400
 8003d98:	40000800 	.word	0x40000800
 8003d9c:	40000c00 	.word	0x40000c00
 8003da0:	40010400 	.word	0x40010400
 8003da4:	40014000 	.word	0x40014000
 8003da8:	40001800 	.word	0x40001800

08003dac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e041      	b.n	8003e42 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d106      	bne.n	8003dd8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7fe fafa 	bl	80023cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3304      	adds	r3, #4
 8003de8:	4619      	mov	r1, r3
 8003dea:	4610      	mov	r0, r2
 8003dec:	f000 fc18 	bl	8004620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
	...

08003e4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d109      	bne.n	8003e70 <HAL_TIM_PWM_Start+0x24>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	bf14      	ite	ne
 8003e68:	2301      	movne	r3, #1
 8003e6a:	2300      	moveq	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	e022      	b.n	8003eb6 <HAL_TIM_PWM_Start+0x6a>
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d109      	bne.n	8003e8a <HAL_TIM_PWM_Start+0x3e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	bf14      	ite	ne
 8003e82:	2301      	movne	r3, #1
 8003e84:	2300      	moveq	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	e015      	b.n	8003eb6 <HAL_TIM_PWM_Start+0x6a>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d109      	bne.n	8003ea4 <HAL_TIM_PWM_Start+0x58>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	bf14      	ite	ne
 8003e9c:	2301      	movne	r3, #1
 8003e9e:	2300      	moveq	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	e008      	b.n	8003eb6 <HAL_TIM_PWM_Start+0x6a>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	bf14      	ite	ne
 8003eb0:	2301      	movne	r3, #1
 8003eb2:	2300      	moveq	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e07c      	b.n	8003fb8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d104      	bne.n	8003ece <HAL_TIM_PWM_Start+0x82>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ecc:	e013      	b.n	8003ef6 <HAL_TIM_PWM_Start+0xaa>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d104      	bne.n	8003ede <HAL_TIM_PWM_Start+0x92>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003edc:	e00b      	b.n	8003ef6 <HAL_TIM_PWM_Start+0xaa>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d104      	bne.n	8003eee <HAL_TIM_PWM_Start+0xa2>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eec:	e003      	b.n	8003ef6 <HAL_TIM_PWM_Start+0xaa>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2201      	movs	r2, #1
 8003efc:	6839      	ldr	r1, [r7, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fdde 	bl	8004ac0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a2d      	ldr	r2, [pc, #180]	; (8003fc0 <HAL_TIM_PWM_Start+0x174>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d004      	beq.n	8003f18 <HAL_TIM_PWM_Start+0xcc>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a2c      	ldr	r2, [pc, #176]	; (8003fc4 <HAL_TIM_PWM_Start+0x178>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d101      	bne.n	8003f1c <HAL_TIM_PWM_Start+0xd0>
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e000      	b.n	8003f1e <HAL_TIM_PWM_Start+0xd2>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d007      	beq.n	8003f32 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a22      	ldr	r2, [pc, #136]	; (8003fc0 <HAL_TIM_PWM_Start+0x174>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d022      	beq.n	8003f82 <HAL_TIM_PWM_Start+0x136>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f44:	d01d      	beq.n	8003f82 <HAL_TIM_PWM_Start+0x136>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a1f      	ldr	r2, [pc, #124]	; (8003fc8 <HAL_TIM_PWM_Start+0x17c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d018      	beq.n	8003f82 <HAL_TIM_PWM_Start+0x136>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a1d      	ldr	r2, [pc, #116]	; (8003fcc <HAL_TIM_PWM_Start+0x180>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d013      	beq.n	8003f82 <HAL_TIM_PWM_Start+0x136>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a1c      	ldr	r2, [pc, #112]	; (8003fd0 <HAL_TIM_PWM_Start+0x184>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00e      	beq.n	8003f82 <HAL_TIM_PWM_Start+0x136>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a16      	ldr	r2, [pc, #88]	; (8003fc4 <HAL_TIM_PWM_Start+0x178>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d009      	beq.n	8003f82 <HAL_TIM_PWM_Start+0x136>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a18      	ldr	r2, [pc, #96]	; (8003fd4 <HAL_TIM_PWM_Start+0x188>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d004      	beq.n	8003f82 <HAL_TIM_PWM_Start+0x136>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a16      	ldr	r2, [pc, #88]	; (8003fd8 <HAL_TIM_PWM_Start+0x18c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d111      	bne.n	8003fa6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2b06      	cmp	r3, #6
 8003f92:	d010      	beq.n	8003fb6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa4:	e007      	b.n	8003fb6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f042 0201 	orr.w	r2, r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40010000 	.word	0x40010000
 8003fc4:	40010400 	.word	0x40010400
 8003fc8:	40000400 	.word	0x40000400
 8003fcc:	40000800 	.word	0x40000800
 8003fd0:	40000c00 	.word	0x40000c00
 8003fd4:	40014000 	.word	0x40014000
 8003fd8:	40001800 	.word	0x40001800

08003fdc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e097      	b.n	8004120 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d106      	bne.n	800400a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7fe fa01 	bl	800240c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2202      	movs	r2, #2
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6812      	ldr	r2, [r2, #0]
 800401c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004020:	f023 0307 	bic.w	r3, r3, #7
 8004024:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3304      	adds	r3, #4
 800402e:	4619      	mov	r1, r3
 8004030:	4610      	mov	r0, r2
 8004032:	f000 faf5 	bl	8004620 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405e:	f023 0303 	bic.w	r3, r3, #3
 8004062:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	4313      	orrs	r3, r2
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800407c:	f023 030c 	bic.w	r3, r3, #12
 8004080:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004088:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800408c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	021b      	lsls	r3, r3, #8
 8004098:	4313      	orrs	r3, r2
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	011a      	lsls	r2, r3, #4
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	031b      	lsls	r3, r3, #12
 80040ac:	4313      	orrs	r3, r2
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80040ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80040c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	4313      	orrs	r3, r2
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004138:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004140:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004148:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004150:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d110      	bne.n	800417a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004158:	7bfb      	ldrb	r3, [r7, #15]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d102      	bne.n	8004164 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800415e:	7b7b      	ldrb	r3, [r7, #13]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d001      	beq.n	8004168 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e069      	b.n	800423c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004178:	e031      	b.n	80041de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b04      	cmp	r3, #4
 800417e:	d110      	bne.n	80041a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004180:	7bbb      	ldrb	r3, [r7, #14]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d102      	bne.n	800418c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004186:	7b3b      	ldrb	r3, [r7, #12]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d001      	beq.n	8004190 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e055      	b.n	800423c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2202      	movs	r2, #2
 8004194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041a0:	e01d      	b.n	80041de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d108      	bne.n	80041ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80041a8:	7bbb      	ldrb	r3, [r7, #14]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d105      	bne.n	80041ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041ae:	7b7b      	ldrb	r3, [r7, #13]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d102      	bne.n	80041ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80041b4:	7b3b      	ldrb	r3, [r7, #12]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d001      	beq.n	80041be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e03e      	b.n	800423c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2202      	movs	r2, #2
 80041c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2202      	movs	r2, #2
 80041ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2202      	movs	r2, #2
 80041d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2202      	movs	r2, #2
 80041da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <HAL_TIM_Encoder_Start+0xc4>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d008      	beq.n	80041fc <HAL_TIM_Encoder_Start+0xd4>
 80041ea:	e00f      	b.n	800420c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2201      	movs	r2, #1
 80041f2:	2100      	movs	r1, #0
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 fc63 	bl	8004ac0 <TIM_CCxChannelCmd>
      break;
 80041fa:	e016      	b.n	800422a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2201      	movs	r2, #1
 8004202:	2104      	movs	r1, #4
 8004204:	4618      	mov	r0, r3
 8004206:	f000 fc5b 	bl	8004ac0 <TIM_CCxChannelCmd>
      break;
 800420a:	e00e      	b.n	800422a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2201      	movs	r2, #1
 8004212:	2100      	movs	r1, #0
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fc53 	bl	8004ac0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2201      	movs	r2, #1
 8004220:	2104      	movs	r1, #4
 8004222:	4618      	mov	r0, r3
 8004224:	f000 fc4c 	bl	8004ac0 <TIM_CCxChannelCmd>
      break;
 8004228:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f042 0201 	orr.w	r2, r2, #1
 8004238:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b02      	cmp	r3, #2
 8004258:	d122      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b02      	cmp	r3, #2
 8004266:	d11b      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f06f 0202 	mvn.w	r2, #2
 8004270:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f9ac 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 800428c:	e005      	b.n	800429a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f99e 	bl	80045d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f9af 	bl	80045f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f003 0304 	and.w	r3, r3, #4
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d122      	bne.n	80042f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	d11b      	bne.n	80042f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f06f 0204 	mvn.w	r2, #4
 80042c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2202      	movs	r2, #2
 80042ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f982 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 80042e0:	e005      	b.n	80042ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f974 	bl	80045d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f985 	bl	80045f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b08      	cmp	r3, #8
 8004300:	d122      	bne.n	8004348 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f003 0308 	and.w	r3, r3, #8
 800430c:	2b08      	cmp	r3, #8
 800430e:	d11b      	bne.n	8004348 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f06f 0208 	mvn.w	r2, #8
 8004318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2204      	movs	r2, #4
 800431e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f958 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 8004334:	e005      	b.n	8004342 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f94a 	bl	80045d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 f95b 	bl	80045f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f003 0310 	and.w	r3, r3, #16
 8004352:	2b10      	cmp	r3, #16
 8004354:	d122      	bne.n	800439c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f003 0310 	and.w	r3, r3, #16
 8004360:	2b10      	cmp	r3, #16
 8004362:	d11b      	bne.n	800439c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f06f 0210 	mvn.w	r2, #16
 800436c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2208      	movs	r2, #8
 8004372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f92e 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 8004388:	e005      	b.n	8004396 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f920 	bl	80045d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f931 	bl	80045f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d10e      	bne.n	80043c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d107      	bne.n	80043c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0201 	mvn.w	r2, #1
 80043c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7fd fda8 	bl	8001f18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d2:	2b80      	cmp	r3, #128	; 0x80
 80043d4:	d10e      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e0:	2b80      	cmp	r3, #128	; 0x80
 80043e2:	d107      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fc12 	bl	8004c18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fe:	2b40      	cmp	r3, #64	; 0x40
 8004400:	d10e      	bne.n	8004420 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440c:	2b40      	cmp	r3, #64	; 0x40
 800440e:	d107      	bne.n	8004420 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f8f6 	bl	800460c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f003 0320 	and.w	r3, r3, #32
 800442a:	2b20      	cmp	r3, #32
 800442c:	d10e      	bne.n	800444c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f003 0320 	and.w	r3, r3, #32
 8004438:	2b20      	cmp	r3, #32
 800443a:	d107      	bne.n	800444c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0220 	mvn.w	r2, #32
 8004444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fbdc 	bl	8004c04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800444c:	bf00      	nop
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800446a:	2302      	movs	r3, #2
 800446c:	e0ac      	b.n	80045c8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b0c      	cmp	r3, #12
 800447a:	f200 809f 	bhi.w	80045bc <HAL_TIM_PWM_ConfigChannel+0x168>
 800447e:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004484:	080044b9 	.word	0x080044b9
 8004488:	080045bd 	.word	0x080045bd
 800448c:	080045bd 	.word	0x080045bd
 8004490:	080045bd 	.word	0x080045bd
 8004494:	080044f9 	.word	0x080044f9
 8004498:	080045bd 	.word	0x080045bd
 800449c:	080045bd 	.word	0x080045bd
 80044a0:	080045bd 	.word	0x080045bd
 80044a4:	0800453b 	.word	0x0800453b
 80044a8:	080045bd 	.word	0x080045bd
 80044ac:	080045bd 	.word	0x080045bd
 80044b0:	080045bd 	.word	0x080045bd
 80044b4:	0800457b 	.word	0x0800457b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68b9      	ldr	r1, [r7, #8]
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 f94e 	bl	8004760 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699a      	ldr	r2, [r3, #24]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0208 	orr.w	r2, r2, #8
 80044d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699a      	ldr	r2, [r3, #24]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0204 	bic.w	r2, r2, #4
 80044e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6999      	ldr	r1, [r3, #24]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	691a      	ldr	r2, [r3, #16]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	619a      	str	r2, [r3, #24]
      break;
 80044f6:	e062      	b.n	80045be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68b9      	ldr	r1, [r7, #8]
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 f99e 	bl	8004840 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699a      	ldr	r2, [r3, #24]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004512:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6999      	ldr	r1, [r3, #24]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	021a      	lsls	r2, r3, #8
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	619a      	str	r2, [r3, #24]
      break;
 8004538:	e041      	b.n	80045be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68b9      	ldr	r1, [r7, #8]
 8004540:	4618      	mov	r0, r3
 8004542:	f000 f9f3 	bl	800492c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	69da      	ldr	r2, [r3, #28]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f042 0208 	orr.w	r2, r2, #8
 8004554:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	69da      	ldr	r2, [r3, #28]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0204 	bic.w	r2, r2, #4
 8004564:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69d9      	ldr	r1, [r3, #28]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	61da      	str	r2, [r3, #28]
      break;
 8004578:	e021      	b.n	80045be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68b9      	ldr	r1, [r7, #8]
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fa47 	bl	8004a14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69da      	ldr	r2, [r3, #28]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004594:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69da      	ldr	r2, [r3, #28]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69d9      	ldr	r1, [r3, #28]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	021a      	lsls	r2, r3, #8
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	61da      	str	r2, [r3, #28]
      break;
 80045ba:	e000      	b.n	80045be <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80045bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a40      	ldr	r2, [pc, #256]	; (8004734 <TIM_Base_SetConfig+0x114>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d013      	beq.n	8004660 <TIM_Base_SetConfig+0x40>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800463e:	d00f      	beq.n	8004660 <TIM_Base_SetConfig+0x40>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a3d      	ldr	r2, [pc, #244]	; (8004738 <TIM_Base_SetConfig+0x118>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d00b      	beq.n	8004660 <TIM_Base_SetConfig+0x40>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a3c      	ldr	r2, [pc, #240]	; (800473c <TIM_Base_SetConfig+0x11c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d007      	beq.n	8004660 <TIM_Base_SetConfig+0x40>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a3b      	ldr	r2, [pc, #236]	; (8004740 <TIM_Base_SetConfig+0x120>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d003      	beq.n	8004660 <TIM_Base_SetConfig+0x40>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a3a      	ldr	r2, [pc, #232]	; (8004744 <TIM_Base_SetConfig+0x124>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d108      	bne.n	8004672 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	4313      	orrs	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a2f      	ldr	r2, [pc, #188]	; (8004734 <TIM_Base_SetConfig+0x114>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d02b      	beq.n	80046d2 <TIM_Base_SetConfig+0xb2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004680:	d027      	beq.n	80046d2 <TIM_Base_SetConfig+0xb2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a2c      	ldr	r2, [pc, #176]	; (8004738 <TIM_Base_SetConfig+0x118>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d023      	beq.n	80046d2 <TIM_Base_SetConfig+0xb2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a2b      	ldr	r2, [pc, #172]	; (800473c <TIM_Base_SetConfig+0x11c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d01f      	beq.n	80046d2 <TIM_Base_SetConfig+0xb2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a2a      	ldr	r2, [pc, #168]	; (8004740 <TIM_Base_SetConfig+0x120>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d01b      	beq.n	80046d2 <TIM_Base_SetConfig+0xb2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a29      	ldr	r2, [pc, #164]	; (8004744 <TIM_Base_SetConfig+0x124>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d017      	beq.n	80046d2 <TIM_Base_SetConfig+0xb2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a28      	ldr	r2, [pc, #160]	; (8004748 <TIM_Base_SetConfig+0x128>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d013      	beq.n	80046d2 <TIM_Base_SetConfig+0xb2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a27      	ldr	r2, [pc, #156]	; (800474c <TIM_Base_SetConfig+0x12c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d00f      	beq.n	80046d2 <TIM_Base_SetConfig+0xb2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a26      	ldr	r2, [pc, #152]	; (8004750 <TIM_Base_SetConfig+0x130>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d00b      	beq.n	80046d2 <TIM_Base_SetConfig+0xb2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a25      	ldr	r2, [pc, #148]	; (8004754 <TIM_Base_SetConfig+0x134>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d007      	beq.n	80046d2 <TIM_Base_SetConfig+0xb2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a24      	ldr	r2, [pc, #144]	; (8004758 <TIM_Base_SetConfig+0x138>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d003      	beq.n	80046d2 <TIM_Base_SetConfig+0xb2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a23      	ldr	r2, [pc, #140]	; (800475c <TIM_Base_SetConfig+0x13c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d108      	bne.n	80046e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a0a      	ldr	r2, [pc, #40]	; (8004734 <TIM_Base_SetConfig+0x114>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d003      	beq.n	8004718 <TIM_Base_SetConfig+0xf8>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a0c      	ldr	r2, [pc, #48]	; (8004744 <TIM_Base_SetConfig+0x124>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d103      	bne.n	8004720 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	691a      	ldr	r2, [r3, #16]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	615a      	str	r2, [r3, #20]
}
 8004726:	bf00      	nop
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	40010000 	.word	0x40010000
 8004738:	40000400 	.word	0x40000400
 800473c:	40000800 	.word	0x40000800
 8004740:	40000c00 	.word	0x40000c00
 8004744:	40010400 	.word	0x40010400
 8004748:	40014000 	.word	0x40014000
 800474c:	40014400 	.word	0x40014400
 8004750:	40014800 	.word	0x40014800
 8004754:	40001800 	.word	0x40001800
 8004758:	40001c00 	.word	0x40001c00
 800475c:	40002000 	.word	0x40002000

08004760 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004760:	b480      	push	{r7}
 8004762:	b087      	sub	sp, #28
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	f023 0201 	bic.w	r2, r3, #1
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f023 0303 	bic.w	r3, r3, #3
 8004796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f023 0302 	bic.w	r3, r3, #2
 80047a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a20      	ldr	r2, [pc, #128]	; (8004838 <TIM_OC1_SetConfig+0xd8>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d003      	beq.n	80047c4 <TIM_OC1_SetConfig+0x64>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a1f      	ldr	r2, [pc, #124]	; (800483c <TIM_OC1_SetConfig+0xdc>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d10c      	bne.n	80047de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f023 0308 	bic.w	r3, r3, #8
 80047ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f023 0304 	bic.w	r3, r3, #4
 80047dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a15      	ldr	r2, [pc, #84]	; (8004838 <TIM_OC1_SetConfig+0xd8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d003      	beq.n	80047ee <TIM_OC1_SetConfig+0x8e>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a14      	ldr	r2, [pc, #80]	; (800483c <TIM_OC1_SetConfig+0xdc>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d111      	bne.n	8004812 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	4313      	orrs	r3, r2
 8004806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	4313      	orrs	r3, r2
 8004810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	621a      	str	r2, [r3, #32]
}
 800482c:	bf00      	nop
 800482e:	371c      	adds	r7, #28
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	40010000 	.word	0x40010000
 800483c:	40010400 	.word	0x40010400

08004840 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	f023 0210 	bic.w	r2, r3, #16
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800486e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	021b      	lsls	r3, r3, #8
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	4313      	orrs	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f023 0320 	bic.w	r3, r3, #32
 800488a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	4313      	orrs	r3, r2
 8004896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a22      	ldr	r2, [pc, #136]	; (8004924 <TIM_OC2_SetConfig+0xe4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d003      	beq.n	80048a8 <TIM_OC2_SetConfig+0x68>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a21      	ldr	r2, [pc, #132]	; (8004928 <TIM_OC2_SetConfig+0xe8>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d10d      	bne.n	80048c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a17      	ldr	r2, [pc, #92]	; (8004924 <TIM_OC2_SetConfig+0xe4>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d003      	beq.n	80048d4 <TIM_OC2_SetConfig+0x94>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a16      	ldr	r2, [pc, #88]	; (8004928 <TIM_OC2_SetConfig+0xe8>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d113      	bne.n	80048fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	621a      	str	r2, [r3, #32]
}
 8004916:	bf00      	nop
 8004918:	371c      	adds	r7, #28
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	40010000 	.word	0x40010000
 8004928:	40010400 	.word	0x40010400

0800492c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800492c:	b480      	push	{r7}
 800492e:	b087      	sub	sp, #28
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 0303 	bic.w	r3, r3, #3
 8004962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004974:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	021b      	lsls	r3, r3, #8
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	4313      	orrs	r3, r2
 8004980:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a21      	ldr	r2, [pc, #132]	; (8004a0c <TIM_OC3_SetConfig+0xe0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d003      	beq.n	8004992 <TIM_OC3_SetConfig+0x66>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a20      	ldr	r2, [pc, #128]	; (8004a10 <TIM_OC3_SetConfig+0xe4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d10d      	bne.n	80049ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004998:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	021b      	lsls	r3, r3, #8
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a16      	ldr	r2, [pc, #88]	; (8004a0c <TIM_OC3_SetConfig+0xe0>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d003      	beq.n	80049be <TIM_OC3_SetConfig+0x92>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a15      	ldr	r2, [pc, #84]	; (8004a10 <TIM_OC3_SetConfig+0xe4>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d113      	bne.n	80049e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	621a      	str	r2, [r3, #32]
}
 8004a00:	bf00      	nop
 8004a02:	371c      	adds	r7, #28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	40010000 	.word	0x40010000
 8004a10:	40010400 	.word	0x40010400

08004a14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	021b      	lsls	r3, r3, #8
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	031b      	lsls	r3, r3, #12
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a12      	ldr	r2, [pc, #72]	; (8004ab8 <TIM_OC4_SetConfig+0xa4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d003      	beq.n	8004a7c <TIM_OC4_SetConfig+0x68>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a11      	ldr	r2, [pc, #68]	; (8004abc <TIM_OC4_SetConfig+0xa8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d109      	bne.n	8004a90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	019b      	lsls	r3, r3, #6
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	621a      	str	r2, [r3, #32]
}
 8004aaa:	bf00      	nop
 8004aac:	371c      	adds	r7, #28
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	40010000 	.word	0x40010000
 8004abc:	40010400 	.word	0x40010400

08004ac0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f003 031f 	and.w	r3, r3, #31
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6a1a      	ldr	r2, [r3, #32]
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	43db      	mvns	r3, r3
 8004ae2:	401a      	ands	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6a1a      	ldr	r2, [r3, #32]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f003 031f 	and.w	r3, r3, #31
 8004af2:	6879      	ldr	r1, [r7, #4]
 8004af4:	fa01 f303 	lsl.w	r3, r1, r3
 8004af8:	431a      	orrs	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	621a      	str	r2, [r3, #32]
}
 8004afe:	bf00      	nop
 8004b00:	371c      	adds	r7, #28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
	...

08004b0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b20:	2302      	movs	r3, #2
 8004b22:	e05a      	b.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a21      	ldr	r2, [pc, #132]	; (8004be8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d022      	beq.n	8004bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b70:	d01d      	beq.n	8004bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a1d      	ldr	r2, [pc, #116]	; (8004bec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d018      	beq.n	8004bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a1b      	ldr	r2, [pc, #108]	; (8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d013      	beq.n	8004bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a1a      	ldr	r2, [pc, #104]	; (8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00e      	beq.n	8004bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a18      	ldr	r2, [pc, #96]	; (8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d009      	beq.n	8004bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a17      	ldr	r2, [pc, #92]	; (8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d004      	beq.n	8004bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a15      	ldr	r2, [pc, #84]	; (8004c00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d10c      	bne.n	8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	40010000 	.word	0x40010000
 8004bec:	40000400 	.word	0x40000400
 8004bf0:	40000800 	.word	0x40000800
 8004bf4:	40000c00 	.word	0x40000c00
 8004bf8:	40010400 	.word	0x40010400
 8004bfc:	40014000 	.word	0x40014000
 8004c00:	40001800 	.word	0x40001800

08004c04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e03f      	b.n	8004cbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d106      	bne.n	8004c58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7fd fd3a 	bl	80026cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2224      	movs	r2, #36	; 0x24
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 fc7b 	bl	800556c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	691a      	ldr	r2, [r3, #16]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695a      	ldr	r2, [r3, #20]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ca4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b08a      	sub	sp, #40	; 0x28
 8004cca:	af02      	add	r7, sp, #8
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	603b      	str	r3, [r7, #0]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b20      	cmp	r3, #32
 8004ce4:	d17c      	bne.n	8004de0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <HAL_UART_Transmit+0x2c>
 8004cec:	88fb      	ldrh	r3, [r7, #6]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e075      	b.n	8004de2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <HAL_UART_Transmit+0x3e>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e06e      	b.n	8004de2 <HAL_UART_Transmit+0x11c>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2221      	movs	r2, #33	; 0x21
 8004d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d1a:	f7fd fe13 	bl	8002944 <HAL_GetTick>
 8004d1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	88fa      	ldrh	r2, [r7, #6]
 8004d24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	88fa      	ldrh	r2, [r7, #6]
 8004d2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d34:	d108      	bne.n	8004d48 <HAL_UART_Transmit+0x82>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d104      	bne.n	8004d48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	61bb      	str	r3, [r7, #24]
 8004d46:	e003      	b.n	8004d50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004d58:	e02a      	b.n	8004db0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2200      	movs	r2, #0
 8004d62:	2180      	movs	r1, #128	; 0x80
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 fa3d 	bl	80051e4 <UART_WaitOnFlagUntilTimeout>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e036      	b.n	8004de2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10b      	bne.n	8004d92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	3302      	adds	r3, #2
 8004d8e:	61bb      	str	r3, [r7, #24]
 8004d90:	e007      	b.n	8004da2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	781a      	ldrb	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1cf      	bne.n	8004d5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	2140      	movs	r1, #64	; 0x40
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 fa0d 	bl	80051e4 <UART_WaitOnFlagUntilTimeout>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e006      	b.n	8004de2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	e000      	b.n	8004de2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004de0:	2302      	movs	r3, #2
  }
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3720      	adds	r7, #32
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b084      	sub	sp, #16
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	4613      	mov	r3, r2
 8004df6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b20      	cmp	r3, #32
 8004e02:	d11d      	bne.n	8004e40 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <HAL_UART_Receive_IT+0x26>
 8004e0a:	88fb      	ldrh	r3, [r7, #6]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e016      	b.n	8004e42 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d101      	bne.n	8004e22 <HAL_UART_Receive_IT+0x38>
 8004e1e:	2302      	movs	r3, #2
 8004e20:	e00f      	b.n	8004e42 <HAL_UART_Receive_IT+0x58>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004e30:	88fb      	ldrh	r3, [r7, #6]
 8004e32:	461a      	mov	r2, r3
 8004e34:	68b9      	ldr	r1, [r7, #8]
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 fa1e 	bl	8005278 <UART_Start_Receive_IT>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	e000      	b.n	8004e42 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004e40:	2302      	movs	r3, #2
  }
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08a      	sub	sp, #40	; 0x28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10d      	bne.n	8004e9e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	f003 0320 	and.w	r3, r3, #32
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d008      	beq.n	8004e9e <HAL_UART_IRQHandler+0x52>
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	f003 0320 	and.w	r3, r3, #32
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fad1 	bl	800543e <UART_Receive_IT>
      return;
 8004e9c:	e17c      	b.n	8005198 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 80b1 	beq.w	8005008 <HAL_UART_IRQHandler+0x1bc>
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d105      	bne.n	8004ebc <HAL_UART_IRQHandler+0x70>
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 80a6 	beq.w	8005008 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <HAL_UART_IRQHandler+0x90>
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed4:	f043 0201 	orr.w	r2, r3, #1
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	f003 0304 	and.w	r3, r3, #4
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <HAL_UART_IRQHandler+0xb0>
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d005      	beq.n	8004efc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef4:	f043 0202 	orr.w	r2, r3, #2
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <HAL_UART_IRQHandler+0xd0>
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d005      	beq.n	8004f1c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f14:	f043 0204 	orr.w	r2, r3, #4
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00f      	beq.n	8004f46 <HAL_UART_IRQHandler+0xfa>
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	f003 0320 	and.w	r3, r3, #32
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d104      	bne.n	8004f3a <HAL_UART_IRQHandler+0xee>
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d005      	beq.n	8004f46 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	f043 0208 	orr.w	r2, r3, #8
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 811f 	beq.w	800518e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	f003 0320 	and.w	r3, r3, #32
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d007      	beq.n	8004f6a <HAL_UART_IRQHandler+0x11e>
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	f003 0320 	and.w	r3, r3, #32
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fa6a 	bl	800543e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f74:	2b40      	cmp	r3, #64	; 0x40
 8004f76:	bf0c      	ite	eq
 8004f78:	2301      	moveq	r3, #1
 8004f7a:	2300      	movne	r3, #0
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	f003 0308 	and.w	r3, r3, #8
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d102      	bne.n	8004f92 <HAL_UART_IRQHandler+0x146>
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d031      	beq.n	8004ff6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f9aa 	bl	80052ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa2:	2b40      	cmp	r3, #64	; 0x40
 8004fa4:	d123      	bne.n	8004fee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	695a      	ldr	r2, [r3, #20]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fb4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d013      	beq.n	8004fe6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc2:	4a77      	ldr	r2, [pc, #476]	; (80051a0 <HAL_UART_IRQHandler+0x354>)
 8004fc4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fd fe18 	bl	8002c00 <HAL_DMA_Abort_IT>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d016      	beq.n	8005004 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe4:	e00e      	b.n	8005004 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f8e6 	bl	80051b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fec:	e00a      	b.n	8005004 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f8e2 	bl	80051b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff4:	e006      	b.n	8005004 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f8de 	bl	80051b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005002:	e0c4      	b.n	800518e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005004:	bf00      	nop
    return;
 8005006:	e0c2      	b.n	800518e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500c:	2b01      	cmp	r3, #1
 800500e:	f040 80a2 	bne.w	8005156 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	f003 0310 	and.w	r3, r3, #16
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 809c 	beq.w	8005156 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	f003 0310 	and.w	r3, r3, #16
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 8096 	beq.w	8005156 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800502a:	2300      	movs	r3, #0
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504a:	2b40      	cmp	r3, #64	; 0x40
 800504c:	d14f      	bne.n	80050ee <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005058:	8a3b      	ldrh	r3, [r7, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 8099 	beq.w	8005192 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005064:	8a3a      	ldrh	r2, [r7, #16]
 8005066:	429a      	cmp	r2, r3
 8005068:	f080 8093 	bcs.w	8005192 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	8a3a      	ldrh	r2, [r7, #16]
 8005070:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800507c:	d02b      	beq.n	80050d6 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68da      	ldr	r2, [r3, #12]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800508c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695a      	ldr	r2, [r3, #20]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0201 	bic.w	r2, r2, #1
 800509c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695a      	ldr	r2, [r3, #20]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ac:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2220      	movs	r2, #32
 80050b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0210 	bic.w	r2, r2, #16
 80050ca:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7fd fd25 	bl	8002b20 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050de:	b29b      	uxth	r3, r3
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	4619      	mov	r1, r3
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f870 	bl	80051cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80050ec:	e051      	b.n	8005192 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005100:	b29b      	uxth	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d047      	beq.n	8005196 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8005106:	8a7b      	ldrh	r3, [r7, #18]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d044      	beq.n	8005196 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68da      	ldr	r2, [r3, #12]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800511a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695a      	ldr	r2, [r3, #20]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0201 	bic.w	r2, r2, #1
 800512a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2220      	movs	r2, #32
 8005130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0210 	bic.w	r2, r2, #16
 8005148:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800514a:	8a7b      	ldrh	r3, [r7, #18]
 800514c:	4619      	mov	r1, r3
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f83c 	bl	80051cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005154:	e01f      	b.n	8005196 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515c:	2b00      	cmp	r3, #0
 800515e:	d008      	beq.n	8005172 <HAL_UART_IRQHandler+0x326>
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f8ff 	bl	800536e <UART_Transmit_IT>
    return;
 8005170:	e012      	b.n	8005198 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00d      	beq.n	8005198 <HAL_UART_IRQHandler+0x34c>
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005182:	2b00      	cmp	r3, #0
 8005184:	d008      	beq.n	8005198 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f941 	bl	800540e <UART_EndTransmit_IT>
    return;
 800518c:	e004      	b.n	8005198 <HAL_UART_IRQHandler+0x34c>
    return;
 800518e:	bf00      	nop
 8005190:	e002      	b.n	8005198 <HAL_UART_IRQHandler+0x34c>
      return;
 8005192:	bf00      	nop
 8005194:	e000      	b.n	8005198 <HAL_UART_IRQHandler+0x34c>
      return;
 8005196:	bf00      	nop
  }
}
 8005198:	3728      	adds	r7, #40	; 0x28
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	08005347 	.word	0x08005347

080051a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	460b      	mov	r3, r1
 80051d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	603b      	str	r3, [r7, #0]
 80051f0:	4613      	mov	r3, r2
 80051f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051f4:	e02c      	b.n	8005250 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fc:	d028      	beq.n	8005250 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d007      	beq.n	8005214 <UART_WaitOnFlagUntilTimeout+0x30>
 8005204:	f7fd fb9e 	bl	8002944 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	429a      	cmp	r2, r3
 8005212:	d21d      	bcs.n	8005250 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005222:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695a      	ldr	r2, [r3, #20]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0201 	bic.w	r2, r2, #1
 8005232:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2220      	movs	r2, #32
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2220      	movs	r2, #32
 8005240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e00f      	b.n	8005270 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	4013      	ands	r3, r2
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	429a      	cmp	r2, r3
 800525e:	bf0c      	ite	eq
 8005260:	2301      	moveq	r3, #1
 8005262:	2300      	movne	r3, #0
 8005264:	b2db      	uxtb	r3, r3
 8005266:	461a      	mov	r2, r3
 8005268:	79fb      	ldrb	r3, [r7, #7]
 800526a:	429a      	cmp	r2, r3
 800526c:	d0c3      	beq.n	80051f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	4613      	mov	r3, r2
 8005284:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	88fa      	ldrh	r2, [r7, #6]
 8005290:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	88fa      	ldrh	r2, [r7, #6]
 8005296:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2222      	movs	r2, #34	; 0x22
 80052a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68da      	ldr	r2, [r3, #12]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052bc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	695a      	ldr	r2, [r3, #20]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f042 0201 	orr.w	r2, r2, #1
 80052cc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68da      	ldr	r2, [r3, #12]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f042 0220 	orr.w	r2, r2, #32
 80052dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005302:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	695a      	ldr	r2, [r3, #20]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 0201 	bic.w	r2, r2, #1
 8005312:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005318:	2b01      	cmp	r3, #1
 800531a:	d107      	bne.n	800532c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68da      	ldr	r2, [r3, #12]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0210 	bic.w	r2, r2, #16
 800532a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2220      	movs	r2, #32
 8005330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	631a      	str	r2, [r3, #48]	; 0x30
}
 800533a:	bf00      	nop
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b084      	sub	sp, #16
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005352:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f7ff ff29 	bl	80051b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005366:	bf00      	nop
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800536e:	b480      	push	{r7}
 8005370:	b085      	sub	sp, #20
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b21      	cmp	r3, #33	; 0x21
 8005380:	d13e      	bne.n	8005400 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800538a:	d114      	bne.n	80053b6 <UART_Transmit_IT+0x48>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d110      	bne.n	80053b6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	461a      	mov	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	1c9a      	adds	r2, r3, #2
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	621a      	str	r2, [r3, #32]
 80053b4:	e008      	b.n	80053c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	1c59      	adds	r1, r3, #1
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	6211      	str	r1, [r2, #32]
 80053c0:	781a      	ldrb	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	3b01      	subs	r3, #1
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	4619      	mov	r1, r3
 80053d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10f      	bne.n	80053fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68da      	ldr	r2, [r3, #12]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053fc:	2300      	movs	r3, #0
 80053fe:	e000      	b.n	8005402 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005400:	2302      	movs	r3, #2
  }
}
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b082      	sub	sp, #8
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68da      	ldr	r2, [r3, #12]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005424:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2220      	movs	r2, #32
 800542a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7ff feb8 	bl	80051a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b084      	sub	sp, #16
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b22      	cmp	r3, #34	; 0x22
 8005450:	f040 8087 	bne.w	8005562 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800545c:	d117      	bne.n	800548e <UART_Receive_IT+0x50>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d113      	bne.n	800548e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005466:	2300      	movs	r3, #0
 8005468:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	b29b      	uxth	r3, r3
 8005478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800547c:	b29a      	uxth	r2, r3
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005486:	1c9a      	adds	r2, r3, #2
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	629a      	str	r2, [r3, #40]	; 0x28
 800548c:	e026      	b.n	80054dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005492:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005494:	2300      	movs	r3, #0
 8005496:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054a0:	d007      	beq.n	80054b2 <UART_Receive_IT+0x74>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10a      	bne.n	80054c0 <UART_Receive_IT+0x82>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d106      	bne.n	80054c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	701a      	strb	r2, [r3, #0]
 80054be:	e008      	b.n	80054d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d6:	1c5a      	adds	r2, r3, #1
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	3b01      	subs	r3, #1
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	4619      	mov	r1, r3
 80054ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d136      	bne.n	800555e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68da      	ldr	r2, [r3, #12]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 0220 	bic.w	r2, r2, #32
 80054fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68da      	ldr	r2, [r3, #12]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800550e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	695a      	ldr	r2, [r3, #20]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 0201 	bic.w	r2, r2, #1
 800551e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2220      	movs	r2, #32
 8005524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552c:	2b01      	cmp	r3, #1
 800552e:	d10e      	bne.n	800554e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68da      	ldr	r2, [r3, #12]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0210 	bic.w	r2, r2, #16
 800553e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005544:	4619      	mov	r1, r3
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7ff fe40 	bl	80051cc <HAL_UARTEx_RxEventCallback>
 800554c:	e002      	b.n	8005554 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7fb ff06 	bl	8001360 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	e002      	b.n	8005564 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	e000      	b.n	8005564 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005562:	2302      	movs	r3, #2
  }
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800556c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005570:	b09f      	sub	sp, #124	; 0x7c
 8005572:	af00      	add	r7, sp, #0
 8005574:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005582:	68d9      	ldr	r1, [r3, #12]
 8005584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	ea40 0301 	orr.w	r3, r0, r1
 800558c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800558e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005590:	689a      	ldr	r2, [r3, #8]
 8005592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	431a      	orrs	r2, r3
 8005598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	431a      	orrs	r2, r3
 800559e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80055a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80055b0:	f021 010c 	bic.w	r1, r1, #12
 80055b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055ba:	430b      	orrs	r3, r1
 80055bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80055c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ca:	6999      	ldr	r1, [r3, #24]
 80055cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	ea40 0301 	orr.w	r3, r0, r1
 80055d4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	4bc5      	ldr	r3, [pc, #788]	; (80058f0 <UART_SetConfig+0x384>)
 80055dc:	429a      	cmp	r2, r3
 80055de:	d004      	beq.n	80055ea <UART_SetConfig+0x7e>
 80055e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	4bc3      	ldr	r3, [pc, #780]	; (80058f4 <UART_SetConfig+0x388>)
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d103      	bne.n	80055f2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055ea:	f7fe facf 	bl	8003b8c <HAL_RCC_GetPCLK2Freq>
 80055ee:	6778      	str	r0, [r7, #116]	; 0x74
 80055f0:	e002      	b.n	80055f8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055f2:	f7fe fab7 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
 80055f6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005600:	f040 80b6 	bne.w	8005770 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005606:	461c      	mov	r4, r3
 8005608:	f04f 0500 	mov.w	r5, #0
 800560c:	4622      	mov	r2, r4
 800560e:	462b      	mov	r3, r5
 8005610:	1891      	adds	r1, r2, r2
 8005612:	6439      	str	r1, [r7, #64]	; 0x40
 8005614:	415b      	adcs	r3, r3
 8005616:	647b      	str	r3, [r7, #68]	; 0x44
 8005618:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800561c:	1912      	adds	r2, r2, r4
 800561e:	eb45 0303 	adc.w	r3, r5, r3
 8005622:	f04f 0000 	mov.w	r0, #0
 8005626:	f04f 0100 	mov.w	r1, #0
 800562a:	00d9      	lsls	r1, r3, #3
 800562c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005630:	00d0      	lsls	r0, r2, #3
 8005632:	4602      	mov	r2, r0
 8005634:	460b      	mov	r3, r1
 8005636:	1911      	adds	r1, r2, r4
 8005638:	6639      	str	r1, [r7, #96]	; 0x60
 800563a:	416b      	adcs	r3, r5
 800563c:	667b      	str	r3, [r7, #100]	; 0x64
 800563e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	461a      	mov	r2, r3
 8005644:	f04f 0300 	mov.w	r3, #0
 8005648:	1891      	adds	r1, r2, r2
 800564a:	63b9      	str	r1, [r7, #56]	; 0x38
 800564c:	415b      	adcs	r3, r3
 800564e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005650:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005654:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005658:	f7fb f9d8 	bl	8000a0c <__aeabi_uldivmod>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4ba5      	ldr	r3, [pc, #660]	; (80058f8 <UART_SetConfig+0x38c>)
 8005662:	fba3 2302 	umull	r2, r3, r3, r2
 8005666:	095b      	lsrs	r3, r3, #5
 8005668:	011e      	lsls	r6, r3, #4
 800566a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800566c:	461c      	mov	r4, r3
 800566e:	f04f 0500 	mov.w	r5, #0
 8005672:	4622      	mov	r2, r4
 8005674:	462b      	mov	r3, r5
 8005676:	1891      	adds	r1, r2, r2
 8005678:	6339      	str	r1, [r7, #48]	; 0x30
 800567a:	415b      	adcs	r3, r3
 800567c:	637b      	str	r3, [r7, #52]	; 0x34
 800567e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005682:	1912      	adds	r2, r2, r4
 8005684:	eb45 0303 	adc.w	r3, r5, r3
 8005688:	f04f 0000 	mov.w	r0, #0
 800568c:	f04f 0100 	mov.w	r1, #0
 8005690:	00d9      	lsls	r1, r3, #3
 8005692:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005696:	00d0      	lsls	r0, r2, #3
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	1911      	adds	r1, r2, r4
 800569e:	65b9      	str	r1, [r7, #88]	; 0x58
 80056a0:	416b      	adcs	r3, r5
 80056a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	461a      	mov	r2, r3
 80056aa:	f04f 0300 	mov.w	r3, #0
 80056ae:	1891      	adds	r1, r2, r2
 80056b0:	62b9      	str	r1, [r7, #40]	; 0x28
 80056b2:	415b      	adcs	r3, r3
 80056b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056ba:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80056be:	f7fb f9a5 	bl	8000a0c <__aeabi_uldivmod>
 80056c2:	4602      	mov	r2, r0
 80056c4:	460b      	mov	r3, r1
 80056c6:	4b8c      	ldr	r3, [pc, #560]	; (80058f8 <UART_SetConfig+0x38c>)
 80056c8:	fba3 1302 	umull	r1, r3, r3, r2
 80056cc:	095b      	lsrs	r3, r3, #5
 80056ce:	2164      	movs	r1, #100	; 0x64
 80056d0:	fb01 f303 	mul.w	r3, r1, r3
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	3332      	adds	r3, #50	; 0x32
 80056da:	4a87      	ldr	r2, [pc, #540]	; (80058f8 <UART_SetConfig+0x38c>)
 80056dc:	fba2 2303 	umull	r2, r3, r2, r3
 80056e0:	095b      	lsrs	r3, r3, #5
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056e8:	441e      	add	r6, r3
 80056ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056ec:	4618      	mov	r0, r3
 80056ee:	f04f 0100 	mov.w	r1, #0
 80056f2:	4602      	mov	r2, r0
 80056f4:	460b      	mov	r3, r1
 80056f6:	1894      	adds	r4, r2, r2
 80056f8:	623c      	str	r4, [r7, #32]
 80056fa:	415b      	adcs	r3, r3
 80056fc:	627b      	str	r3, [r7, #36]	; 0x24
 80056fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005702:	1812      	adds	r2, r2, r0
 8005704:	eb41 0303 	adc.w	r3, r1, r3
 8005708:	f04f 0400 	mov.w	r4, #0
 800570c:	f04f 0500 	mov.w	r5, #0
 8005710:	00dd      	lsls	r5, r3, #3
 8005712:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005716:	00d4      	lsls	r4, r2, #3
 8005718:	4622      	mov	r2, r4
 800571a:	462b      	mov	r3, r5
 800571c:	1814      	adds	r4, r2, r0
 800571e:	653c      	str	r4, [r7, #80]	; 0x50
 8005720:	414b      	adcs	r3, r1
 8005722:	657b      	str	r3, [r7, #84]	; 0x54
 8005724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	461a      	mov	r2, r3
 800572a:	f04f 0300 	mov.w	r3, #0
 800572e:	1891      	adds	r1, r2, r2
 8005730:	61b9      	str	r1, [r7, #24]
 8005732:	415b      	adcs	r3, r3
 8005734:	61fb      	str	r3, [r7, #28]
 8005736:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800573a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800573e:	f7fb f965 	bl	8000a0c <__aeabi_uldivmod>
 8005742:	4602      	mov	r2, r0
 8005744:	460b      	mov	r3, r1
 8005746:	4b6c      	ldr	r3, [pc, #432]	; (80058f8 <UART_SetConfig+0x38c>)
 8005748:	fba3 1302 	umull	r1, r3, r3, r2
 800574c:	095b      	lsrs	r3, r3, #5
 800574e:	2164      	movs	r1, #100	; 0x64
 8005750:	fb01 f303 	mul.w	r3, r1, r3
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	3332      	adds	r3, #50	; 0x32
 800575a:	4a67      	ldr	r2, [pc, #412]	; (80058f8 <UART_SetConfig+0x38c>)
 800575c:	fba2 2303 	umull	r2, r3, r2, r3
 8005760:	095b      	lsrs	r3, r3, #5
 8005762:	f003 0207 	and.w	r2, r3, #7
 8005766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4432      	add	r2, r6
 800576c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800576e:	e0b9      	b.n	80058e4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005770:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005772:	461c      	mov	r4, r3
 8005774:	f04f 0500 	mov.w	r5, #0
 8005778:	4622      	mov	r2, r4
 800577a:	462b      	mov	r3, r5
 800577c:	1891      	adds	r1, r2, r2
 800577e:	6139      	str	r1, [r7, #16]
 8005780:	415b      	adcs	r3, r3
 8005782:	617b      	str	r3, [r7, #20]
 8005784:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005788:	1912      	adds	r2, r2, r4
 800578a:	eb45 0303 	adc.w	r3, r5, r3
 800578e:	f04f 0000 	mov.w	r0, #0
 8005792:	f04f 0100 	mov.w	r1, #0
 8005796:	00d9      	lsls	r1, r3, #3
 8005798:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800579c:	00d0      	lsls	r0, r2, #3
 800579e:	4602      	mov	r2, r0
 80057a0:	460b      	mov	r3, r1
 80057a2:	eb12 0804 	adds.w	r8, r2, r4
 80057a6:	eb43 0905 	adc.w	r9, r3, r5
 80057aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f04f 0100 	mov.w	r1, #0
 80057b4:	f04f 0200 	mov.w	r2, #0
 80057b8:	f04f 0300 	mov.w	r3, #0
 80057bc:	008b      	lsls	r3, r1, #2
 80057be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80057c2:	0082      	lsls	r2, r0, #2
 80057c4:	4640      	mov	r0, r8
 80057c6:	4649      	mov	r1, r9
 80057c8:	f7fb f920 	bl	8000a0c <__aeabi_uldivmod>
 80057cc:	4602      	mov	r2, r0
 80057ce:	460b      	mov	r3, r1
 80057d0:	4b49      	ldr	r3, [pc, #292]	; (80058f8 <UART_SetConfig+0x38c>)
 80057d2:	fba3 2302 	umull	r2, r3, r3, r2
 80057d6:	095b      	lsrs	r3, r3, #5
 80057d8:	011e      	lsls	r6, r3, #4
 80057da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057dc:	4618      	mov	r0, r3
 80057de:	f04f 0100 	mov.w	r1, #0
 80057e2:	4602      	mov	r2, r0
 80057e4:	460b      	mov	r3, r1
 80057e6:	1894      	adds	r4, r2, r2
 80057e8:	60bc      	str	r4, [r7, #8]
 80057ea:	415b      	adcs	r3, r3
 80057ec:	60fb      	str	r3, [r7, #12]
 80057ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057f2:	1812      	adds	r2, r2, r0
 80057f4:	eb41 0303 	adc.w	r3, r1, r3
 80057f8:	f04f 0400 	mov.w	r4, #0
 80057fc:	f04f 0500 	mov.w	r5, #0
 8005800:	00dd      	lsls	r5, r3, #3
 8005802:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005806:	00d4      	lsls	r4, r2, #3
 8005808:	4622      	mov	r2, r4
 800580a:	462b      	mov	r3, r5
 800580c:	1814      	adds	r4, r2, r0
 800580e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005810:	414b      	adcs	r3, r1
 8005812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	4618      	mov	r0, r3
 800581a:	f04f 0100 	mov.w	r1, #0
 800581e:	f04f 0200 	mov.w	r2, #0
 8005822:	f04f 0300 	mov.w	r3, #0
 8005826:	008b      	lsls	r3, r1, #2
 8005828:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800582c:	0082      	lsls	r2, r0, #2
 800582e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005832:	f7fb f8eb 	bl	8000a0c <__aeabi_uldivmod>
 8005836:	4602      	mov	r2, r0
 8005838:	460b      	mov	r3, r1
 800583a:	4b2f      	ldr	r3, [pc, #188]	; (80058f8 <UART_SetConfig+0x38c>)
 800583c:	fba3 1302 	umull	r1, r3, r3, r2
 8005840:	095b      	lsrs	r3, r3, #5
 8005842:	2164      	movs	r1, #100	; 0x64
 8005844:	fb01 f303 	mul.w	r3, r1, r3
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	011b      	lsls	r3, r3, #4
 800584c:	3332      	adds	r3, #50	; 0x32
 800584e:	4a2a      	ldr	r2, [pc, #168]	; (80058f8 <UART_SetConfig+0x38c>)
 8005850:	fba2 2303 	umull	r2, r3, r2, r3
 8005854:	095b      	lsrs	r3, r3, #5
 8005856:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800585a:	441e      	add	r6, r3
 800585c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800585e:	4618      	mov	r0, r3
 8005860:	f04f 0100 	mov.w	r1, #0
 8005864:	4602      	mov	r2, r0
 8005866:	460b      	mov	r3, r1
 8005868:	1894      	adds	r4, r2, r2
 800586a:	603c      	str	r4, [r7, #0]
 800586c:	415b      	adcs	r3, r3
 800586e:	607b      	str	r3, [r7, #4]
 8005870:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005874:	1812      	adds	r2, r2, r0
 8005876:	eb41 0303 	adc.w	r3, r1, r3
 800587a:	f04f 0400 	mov.w	r4, #0
 800587e:	f04f 0500 	mov.w	r5, #0
 8005882:	00dd      	lsls	r5, r3, #3
 8005884:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005888:	00d4      	lsls	r4, r2, #3
 800588a:	4622      	mov	r2, r4
 800588c:	462b      	mov	r3, r5
 800588e:	eb12 0a00 	adds.w	sl, r2, r0
 8005892:	eb43 0b01 	adc.w	fp, r3, r1
 8005896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	4618      	mov	r0, r3
 800589c:	f04f 0100 	mov.w	r1, #0
 80058a0:	f04f 0200 	mov.w	r2, #0
 80058a4:	f04f 0300 	mov.w	r3, #0
 80058a8:	008b      	lsls	r3, r1, #2
 80058aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80058ae:	0082      	lsls	r2, r0, #2
 80058b0:	4650      	mov	r0, sl
 80058b2:	4659      	mov	r1, fp
 80058b4:	f7fb f8aa 	bl	8000a0c <__aeabi_uldivmod>
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	4b0e      	ldr	r3, [pc, #56]	; (80058f8 <UART_SetConfig+0x38c>)
 80058be:	fba3 1302 	umull	r1, r3, r3, r2
 80058c2:	095b      	lsrs	r3, r3, #5
 80058c4:	2164      	movs	r1, #100	; 0x64
 80058c6:	fb01 f303 	mul.w	r3, r1, r3
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	011b      	lsls	r3, r3, #4
 80058ce:	3332      	adds	r3, #50	; 0x32
 80058d0:	4a09      	ldr	r2, [pc, #36]	; (80058f8 <UART_SetConfig+0x38c>)
 80058d2:	fba2 2303 	umull	r2, r3, r2, r3
 80058d6:	095b      	lsrs	r3, r3, #5
 80058d8:	f003 020f 	and.w	r2, r3, #15
 80058dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4432      	add	r2, r6
 80058e2:	609a      	str	r2, [r3, #8]
}
 80058e4:	bf00      	nop
 80058e6:	377c      	adds	r7, #124	; 0x7c
 80058e8:	46bd      	mov	sp, r7
 80058ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ee:	bf00      	nop
 80058f0:	40011000 	.word	0x40011000
 80058f4:	40011400 	.word	0x40011400
 80058f8:	51eb851f 	.word	0x51eb851f

080058fc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	4603      	mov	r3, r0
 8005904:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005906:	2300      	movs	r3, #0
 8005908:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800590a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800590e:	2b84      	cmp	r3, #132	; 0x84
 8005910:	d005      	beq.n	800591e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005912:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4413      	add	r3, r2
 800591a:	3303      	adds	r3, #3
 800591c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800591e:	68fb      	ldr	r3, [r7, #12]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005932:	f3ef 8305 	mrs	r3, IPSR
 8005936:	607b      	str	r3, [r7, #4]
  return(result);
 8005938:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800593a:	2b00      	cmp	r3, #0
 800593c:	bf14      	ite	ne
 800593e:	2301      	movne	r3, #1
 8005940:	2300      	moveq	r3, #0
 8005942:	b2db      	uxtb	r3, r3
}
 8005944:	4618      	mov	r0, r3
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005954:	f001 f942 	bl	8006bdc <vTaskStartScheduler>
  
  return osOK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	bd80      	pop	{r7, pc}

0800595e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800595e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005960:	b089      	sub	sp, #36	; 0x24
 8005962:	af04      	add	r7, sp, #16
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d020      	beq.n	80059b2 <osThreadCreate+0x54>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d01c      	beq.n	80059b2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685c      	ldr	r4, [r3, #4]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681d      	ldr	r5, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	691e      	ldr	r6, [r3, #16]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800598a:	4618      	mov	r0, r3
 800598c:	f7ff ffb6 	bl	80058fc <makeFreeRtosPriority>
 8005990:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800599a:	9202      	str	r2, [sp, #8]
 800599c:	9301      	str	r3, [sp, #4]
 800599e:	9100      	str	r1, [sp, #0]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	4632      	mov	r2, r6
 80059a4:	4629      	mov	r1, r5
 80059a6:	4620      	mov	r0, r4
 80059a8:	f000 ff50 	bl	800684c <xTaskCreateStatic>
 80059ac:	4603      	mov	r3, r0
 80059ae:	60fb      	str	r3, [r7, #12]
 80059b0:	e01c      	b.n	80059ec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685c      	ldr	r4, [r3, #4]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059be:	b29e      	uxth	r6, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7ff ff98 	bl	80058fc <makeFreeRtosPriority>
 80059cc:	4602      	mov	r2, r0
 80059ce:	f107 030c 	add.w	r3, r7, #12
 80059d2:	9301      	str	r3, [sp, #4]
 80059d4:	9200      	str	r2, [sp, #0]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	4632      	mov	r2, r6
 80059da:	4629      	mov	r1, r5
 80059dc:	4620      	mov	r0, r4
 80059de:	f000 ff92 	bl	8006906 <xTaskCreate>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d001      	beq.n	80059ec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80059e8:	2300      	movs	r3, #0
 80059ea:	e000      	b.n	80059ee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80059ec:	68fb      	ldr	r3, [r7, #12]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059f6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b084      	sub	sp, #16
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <osDelay+0x16>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	e000      	b.n	8005a0e <osDelay+0x18>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f001 f8b0 	bl	8006b74 <vTaskDelay>
  
  return osOK;
 8005a14:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b082      	sub	sp, #8
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d007      	beq.n	8005a3e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	4619      	mov	r1, r3
 8005a34:	2001      	movs	r0, #1
 8005a36:	f000 faae 	bl	8005f96 <xQueueCreateMutexStatic>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	e003      	b.n	8005a46 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005a3e:	2001      	movs	r0, #1
 8005a40:	f000 fa91 	bl	8005f66 <xQueueCreateMutex>
 8005a44:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
	...

08005a50 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <osMutexWait+0x18>
    return osErrorParameter;
 8005a64:	2380      	movs	r3, #128	; 0x80
 8005a66:	e03a      	b.n	8005ade <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a72:	d103      	bne.n	8005a7c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005a74:	f04f 33ff 	mov.w	r3, #4294967295
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	e009      	b.n	8005a90 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d006      	beq.n	8005a90 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <osMutexWait+0x40>
      ticks = 1;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005a90:	f7ff ff4c 	bl	800592c <inHandlerMode>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d017      	beq.n	8005aca <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005a9a:	f107 0308 	add.w	r3, r7, #8
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fd2a 	bl	80064fc <xQueueReceiveFromISR>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d001      	beq.n	8005ab2 <osMutexWait+0x62>
      return osErrorOS;
 8005aae:	23ff      	movs	r3, #255	; 0xff
 8005ab0:	e015      	b.n	8005ade <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d011      	beq.n	8005adc <osMutexWait+0x8c>
 8005ab8:	4b0b      	ldr	r3, [pc, #44]	; (8005ae8 <osMutexWait+0x98>)
 8005aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	e008      	b.n	8005adc <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005aca:	68f9      	ldr	r1, [r7, #12]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 fc09 	bl	80062e4 <xQueueSemaphoreTake>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d001      	beq.n	8005adc <osMutexWait+0x8c>
    return osErrorOS;
 8005ad8:	23ff      	movs	r3, #255	; 0xff
 8005ada:	e000      	b.n	8005ade <osMutexWait+0x8e>
  }
  
  return osOK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	e000ed04 	.word	0xe000ed04

08005aec <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005af4:	2300      	movs	r3, #0
 8005af6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005af8:	2300      	movs	r3, #0
 8005afa:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005afc:	f7ff ff16 	bl	800592c <inHandlerMode>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d016      	beq.n	8005b34 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005b06:	f107 0308 	add.w	r3, r7, #8
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fb5b 	bl	80061c8 <xQueueGiveFromISR>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d001      	beq.n	8005b1c <osMutexRelease+0x30>
      return osErrorOS;
 8005b18:	23ff      	movs	r3, #255	; 0xff
 8005b1a:	e017      	b.n	8005b4c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d013      	beq.n	8005b4a <osMutexRelease+0x5e>
 8005b22:	4b0c      	ldr	r3, [pc, #48]	; (8005b54 <osMutexRelease+0x68>)
 8005b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	e00a      	b.n	8005b4a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005b34:	2300      	movs	r3, #0
 8005b36:	2200      	movs	r2, #0
 8005b38:	2100      	movs	r1, #0
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fa46 	bl	8005fcc <xQueueGenericSend>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d001      	beq.n	8005b4a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005b46:	23ff      	movs	r3, #255	; 0xff
 8005b48:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	e000ed04 	.word	0xe000ed04

08005b58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f103 0208 	add.w	r2, r3, #8
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f103 0208 	add.w	r2, r3, #8
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f103 0208 	add.w	r2, r3, #8
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ba6:	bf00      	nop
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b085      	sub	sp, #20
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	1c5a      	adds	r2, r3, #1
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	601a      	str	r2, [r3, #0]
}
 8005bee:	bf00      	nop
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b085      	sub	sp, #20
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c10:	d103      	bne.n	8005c1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	e00c      	b.n	8005c34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	3308      	adds	r3, #8
 8005c1e:	60fb      	str	r3, [r7, #12]
 8005c20:	e002      	b.n	8005c28 <vListInsert+0x2e>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	60fb      	str	r3, [r7, #12]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d2f6      	bcs.n	8005c22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	1c5a      	adds	r2, r3, #1
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	601a      	str	r2, [r3, #0]
}
 8005c60:	bf00      	nop
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	6892      	ldr	r2, [r2, #8]
 8005c82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	6852      	ldr	r2, [r2, #4]
 8005c8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d103      	bne.n	8005ca0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	1e5a      	subs	r2, r3, #1
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10a      	bne.n	8005cea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd8:	f383 8811 	msr	BASEPRI, r3
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ce6:	bf00      	nop
 8005ce8:	e7fe      	b.n	8005ce8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005cea:	f001 fec3 	bl	8007a74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf6:	68f9      	ldr	r1, [r7, #12]
 8005cf8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005cfa:	fb01 f303 	mul.w	r3, r1, r3
 8005cfe:	441a      	add	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	68f9      	ldr	r1, [r7, #12]
 8005d1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d20:	fb01 f303 	mul.w	r3, r1, r3
 8005d24:	441a      	add	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	22ff      	movs	r2, #255	; 0xff
 8005d2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	22ff      	movs	r2, #255	; 0xff
 8005d36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d114      	bne.n	8005d6a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d01a      	beq.n	8005d7e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	3310      	adds	r3, #16
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f001 f987 	bl	8007060 <xTaskRemoveFromEventList>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d012      	beq.n	8005d7e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d58:	4b0c      	ldr	r3, [pc, #48]	; (8005d8c <xQueueGenericReset+0xcc>)
 8005d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	e009      	b.n	8005d7e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	3310      	adds	r3, #16
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff fef2 	bl	8005b58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	3324      	adds	r3, #36	; 0x24
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7ff feed 	bl	8005b58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d7e:	f001 fea9 	bl	8007ad4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d82:	2301      	movs	r3, #1
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	e000ed04 	.word	0xe000ed04

08005d90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b08e      	sub	sp, #56	; 0x38
 8005d94:	af02      	add	r7, sp, #8
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10a      	bne.n	8005dba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005db6:	bf00      	nop
 8005db8:	e7fe      	b.n	8005db8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10a      	bne.n	8005dd6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005dd2:	bf00      	nop
 8005dd4:	e7fe      	b.n	8005dd4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <xQueueGenericCreateStatic+0x52>
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <xQueueGenericCreateStatic+0x56>
 8005de2:	2301      	movs	r3, #1
 8005de4:	e000      	b.n	8005de8 <xQueueGenericCreateStatic+0x58>
 8005de6:	2300      	movs	r3, #0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10a      	bne.n	8005e02 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	623b      	str	r3, [r7, #32]
}
 8005dfe:	bf00      	nop
 8005e00:	e7fe      	b.n	8005e00 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d102      	bne.n	8005e0e <xQueueGenericCreateStatic+0x7e>
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <xQueueGenericCreateStatic+0x82>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e000      	b.n	8005e14 <xQueueGenericCreateStatic+0x84>
 8005e12:	2300      	movs	r3, #0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10a      	bne.n	8005e2e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	61fb      	str	r3, [r7, #28]
}
 8005e2a:	bf00      	nop
 8005e2c:	e7fe      	b.n	8005e2c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e2e:	2348      	movs	r3, #72	; 0x48
 8005e30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2b48      	cmp	r3, #72	; 0x48
 8005e36:	d00a      	beq.n	8005e4e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3c:	f383 8811 	msr	BASEPRI, r3
 8005e40:	f3bf 8f6f 	isb	sy
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	61bb      	str	r3, [r7, #24]
}
 8005e4a:	bf00      	nop
 8005e4c:	e7fe      	b.n	8005e4c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005e4e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00d      	beq.n	8005e76 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e62:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	68b9      	ldr	r1, [r7, #8]
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 f83f 	bl	8005ef4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3730      	adds	r7, #48	; 0x30
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b08a      	sub	sp, #40	; 0x28
 8005e84:	af02      	add	r7, sp, #8
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10a      	bne.n	8005eaa <xQueueGenericCreate+0x2a>
	__asm volatile
 8005e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	613b      	str	r3, [r7, #16]
}
 8005ea6:	bf00      	nop
 8005ea8:	e7fe      	b.n	8005ea8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	fb02 f303 	mul.w	r3, r2, r3
 8005eb2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	3348      	adds	r3, #72	; 0x48
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f001 fefd 	bl	8007cb8 <pvPortMalloc>
 8005ebe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d011      	beq.n	8005eea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	3348      	adds	r3, #72	; 0x48
 8005ece:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ed8:	79fa      	ldrb	r2, [r7, #7]
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	68b9      	ldr	r1, [r7, #8]
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f000 f805 	bl	8005ef4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005eea:	69bb      	ldr	r3, [r7, #24]
	}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3720      	adds	r7, #32
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
 8005f00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d103      	bne.n	8005f10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	e002      	b.n	8005f16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f22:	2101      	movs	r1, #1
 8005f24:	69b8      	ldr	r0, [r7, #24]
 8005f26:	f7ff fecb 	bl	8005cc0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005f2a:	bf00      	nop
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b082      	sub	sp, #8
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00e      	beq.n	8005f5e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005f52:	2300      	movs	r3, #0
 8005f54:	2200      	movs	r2, #0
 8005f56:	2100      	movs	r1, #0
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f837 	bl	8005fcc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005f5e:	bf00      	nop
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b086      	sub	sp, #24
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005f70:	2301      	movs	r3, #1
 8005f72:	617b      	str	r3, [r7, #20]
 8005f74:	2300      	movs	r3, #0
 8005f76:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005f78:	79fb      	ldrb	r3, [r7, #7]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	6939      	ldr	r1, [r7, #16]
 8005f7e:	6978      	ldr	r0, [r7, #20]
 8005f80:	f7ff ff7e 	bl	8005e80 <xQueueGenericCreate>
 8005f84:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f7ff ffd3 	bl	8005f32 <prvInitialiseMutex>

		return xNewQueue;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
	}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3718      	adds	r7, #24
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b088      	sub	sp, #32
 8005f9a:	af02      	add	r7, sp, #8
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	6039      	str	r1, [r7, #0]
 8005fa0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	617b      	str	r3, [r7, #20]
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005faa:	79fb      	ldrb	r3, [r7, #7]
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	6939      	ldr	r1, [r7, #16]
 8005fb4:	6978      	ldr	r0, [r7, #20]
 8005fb6:	f7ff feeb 	bl	8005d90 <xQueueGenericCreateStatic>
 8005fba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f7ff ffb8 	bl	8005f32 <prvInitialiseMutex>

		return xNewQueue;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
	}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3718      	adds	r7, #24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08e      	sub	sp, #56	; 0x38
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
 8005fd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10a      	bne.n	8005ffe <xQueueGenericSend+0x32>
	__asm volatile
 8005fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ffa:	bf00      	nop
 8005ffc:	e7fe      	b.n	8005ffc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d103      	bne.n	800600c <xQueueGenericSend+0x40>
 8006004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <xQueueGenericSend+0x44>
 800600c:	2301      	movs	r3, #1
 800600e:	e000      	b.n	8006012 <xQueueGenericSend+0x46>
 8006010:	2300      	movs	r3, #0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10a      	bne.n	800602c <xQueueGenericSend+0x60>
	__asm volatile
 8006016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601a:	f383 8811 	msr	BASEPRI, r3
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006028:	bf00      	nop
 800602a:	e7fe      	b.n	800602a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	2b02      	cmp	r3, #2
 8006030:	d103      	bne.n	800603a <xQueueGenericSend+0x6e>
 8006032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006036:	2b01      	cmp	r3, #1
 8006038:	d101      	bne.n	800603e <xQueueGenericSend+0x72>
 800603a:	2301      	movs	r3, #1
 800603c:	e000      	b.n	8006040 <xQueueGenericSend+0x74>
 800603e:	2300      	movs	r3, #0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10a      	bne.n	800605a <xQueueGenericSend+0x8e>
	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	623b      	str	r3, [r7, #32]
}
 8006056:	bf00      	nop
 8006058:	e7fe      	b.n	8006058 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800605a:	f001 f9bd 	bl	80073d8 <xTaskGetSchedulerState>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d102      	bne.n	800606a <xQueueGenericSend+0x9e>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <xQueueGenericSend+0xa2>
 800606a:	2301      	movs	r3, #1
 800606c:	e000      	b.n	8006070 <xQueueGenericSend+0xa4>
 800606e:	2300      	movs	r3, #0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10a      	bne.n	800608a <xQueueGenericSend+0xbe>
	__asm volatile
 8006074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006078:	f383 8811 	msr	BASEPRI, r3
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	61fb      	str	r3, [r7, #28]
}
 8006086:	bf00      	nop
 8006088:	e7fe      	b.n	8006088 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800608a:	f001 fcf3 	bl	8007a74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800608e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006096:	429a      	cmp	r2, r3
 8006098:	d302      	bcc.n	80060a0 <xQueueGenericSend+0xd4>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b02      	cmp	r3, #2
 800609e:	d129      	bne.n	80060f4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	68b9      	ldr	r1, [r7, #8]
 80060a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060a6:	f000 fac1 	bl	800662c <prvCopyDataToQueue>
 80060aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d010      	beq.n	80060d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b6:	3324      	adds	r3, #36	; 0x24
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 ffd1 	bl	8007060 <xTaskRemoveFromEventList>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d013      	beq.n	80060ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80060c4:	4b3f      	ldr	r3, [pc, #252]	; (80061c4 <xQueueGenericSend+0x1f8>)
 80060c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	e00a      	b.n	80060ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80060d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d007      	beq.n	80060ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80060dc:	4b39      	ldr	r3, [pc, #228]	; (80061c4 <xQueueGenericSend+0x1f8>)
 80060de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80060ec:	f001 fcf2 	bl	8007ad4 <vPortExitCritical>
				return pdPASS;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e063      	b.n	80061bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d103      	bne.n	8006102 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80060fa:	f001 fceb 	bl	8007ad4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80060fe:	2300      	movs	r3, #0
 8006100:	e05c      	b.n	80061bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006104:	2b00      	cmp	r3, #0
 8006106:	d106      	bne.n	8006116 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006108:	f107 0314 	add.w	r3, r7, #20
 800610c:	4618      	mov	r0, r3
 800610e:	f001 f809 	bl	8007124 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006112:	2301      	movs	r3, #1
 8006114:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006116:	f001 fcdd 	bl	8007ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800611a:	f000 fdbf 	bl	8006c9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800611e:	f001 fca9 	bl	8007a74 <vPortEnterCritical>
 8006122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006124:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006128:	b25b      	sxtb	r3, r3
 800612a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612e:	d103      	bne.n	8006138 <xQueueGenericSend+0x16c>
 8006130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006132:	2200      	movs	r2, #0
 8006134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800613e:	b25b      	sxtb	r3, r3
 8006140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006144:	d103      	bne.n	800614e <xQueueGenericSend+0x182>
 8006146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800614e:	f001 fcc1 	bl	8007ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006152:	1d3a      	adds	r2, r7, #4
 8006154:	f107 0314 	add.w	r3, r7, #20
 8006158:	4611      	mov	r1, r2
 800615a:	4618      	mov	r0, r3
 800615c:	f000 fff8 	bl	8007150 <xTaskCheckForTimeOut>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d124      	bne.n	80061b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006166:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006168:	f000 fb58 	bl	800681c <prvIsQueueFull>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d018      	beq.n	80061a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006174:	3310      	adds	r3, #16
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	4611      	mov	r1, r2
 800617a:	4618      	mov	r0, r3
 800617c:	f000 ff4c 	bl	8007018 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006180:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006182:	f000 fae3 	bl	800674c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006186:	f000 fd97 	bl	8006cb8 <xTaskResumeAll>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	f47f af7c 	bne.w	800608a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006192:	4b0c      	ldr	r3, [pc, #48]	; (80061c4 <xQueueGenericSend+0x1f8>)
 8006194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006198:	601a      	str	r2, [r3, #0]
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	e772      	b.n	800608a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80061a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061a6:	f000 fad1 	bl	800674c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061aa:	f000 fd85 	bl	8006cb8 <xTaskResumeAll>
 80061ae:	e76c      	b.n	800608a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80061b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061b2:	f000 facb 	bl	800674c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061b6:	f000 fd7f 	bl	8006cb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80061ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3738      	adds	r7, #56	; 0x38
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	e000ed04 	.word	0xe000ed04

080061c8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b08e      	sub	sp, #56	; 0x38
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10a      	bne.n	80061f2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80061dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e0:	f383 8811 	msr	BASEPRI, r3
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	623b      	str	r3, [r7, #32]
}
 80061ee:	bf00      	nop
 80061f0:	e7fe      	b.n	80061f0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80061f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00a      	beq.n	8006210 <xQueueGiveFromISR+0x48>
	__asm volatile
 80061fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	61fb      	str	r3, [r7, #28]
}
 800620c:	bf00      	nop
 800620e:	e7fe      	b.n	800620e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d103      	bne.n	8006220 <xQueueGiveFromISR+0x58>
 8006218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <xQueueGiveFromISR+0x5c>
 8006220:	2301      	movs	r3, #1
 8006222:	e000      	b.n	8006226 <xQueueGiveFromISR+0x5e>
 8006224:	2300      	movs	r3, #0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10a      	bne.n	8006240 <xQueueGiveFromISR+0x78>
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	61bb      	str	r3, [r7, #24]
}
 800623c:	bf00      	nop
 800623e:	e7fe      	b.n	800623e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006240:	f001 fcfa 	bl	8007c38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006244:	f3ef 8211 	mrs	r2, BASEPRI
 8006248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	617a      	str	r2, [r7, #20]
 800625a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800625c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800625e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006264:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800626c:	429a      	cmp	r2, r3
 800626e:	d22b      	bcs.n	80062c8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006272:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	1c5a      	adds	r2, r3, #1
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006282:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628a:	d112      	bne.n	80062b2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	2b00      	cmp	r3, #0
 8006292:	d016      	beq.n	80062c2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006296:	3324      	adds	r3, #36	; 0x24
 8006298:	4618      	mov	r0, r3
 800629a:	f000 fee1 	bl	8007060 <xTaskRemoveFromEventList>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00e      	beq.n	80062c2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00b      	beq.n	80062c2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	2201      	movs	r2, #1
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	e007      	b.n	80062c2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80062b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062b6:	3301      	adds	r3, #1
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	b25a      	sxtb	r2, r3
 80062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80062c2:	2301      	movs	r3, #1
 80062c4:	637b      	str	r3, [r7, #52]	; 0x34
 80062c6:	e001      	b.n	80062cc <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80062c8:	2300      	movs	r3, #0
 80062ca:	637b      	str	r3, [r7, #52]	; 0x34
 80062cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ce:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80062d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80062d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3738      	adds	r7, #56	; 0x38
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
	...

080062e4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b08e      	sub	sp, #56	; 0x38
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80062ee:	2300      	movs	r3, #0
 80062f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80062f6:	2300      	movs	r3, #0
 80062f8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80062fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10a      	bne.n	8006316 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	623b      	str	r3, [r7, #32]
}
 8006312:	bf00      	nop
 8006314:	e7fe      	b.n	8006314 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00a      	beq.n	8006334 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	61fb      	str	r3, [r7, #28]
}
 8006330:	bf00      	nop
 8006332:	e7fe      	b.n	8006332 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006334:	f001 f850 	bl	80073d8 <xTaskGetSchedulerState>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d102      	bne.n	8006344 <xQueueSemaphoreTake+0x60>
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <xQueueSemaphoreTake+0x64>
 8006344:	2301      	movs	r3, #1
 8006346:	e000      	b.n	800634a <xQueueSemaphoreTake+0x66>
 8006348:	2300      	movs	r3, #0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10a      	bne.n	8006364 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	61bb      	str	r3, [r7, #24]
}
 8006360:	bf00      	nop
 8006362:	e7fe      	b.n	8006362 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006364:	f001 fb86 	bl	8007a74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800636e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006370:	2b00      	cmp	r3, #0
 8006372:	d024      	beq.n	80063be <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006376:	1e5a      	subs	r2, r3, #1
 8006378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800637c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d104      	bne.n	800638e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006384:	f001 f9d0 	bl	8007728 <pvTaskIncrementMutexHeldCount>
 8006388:	4602      	mov	r2, r0
 800638a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800638e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00f      	beq.n	80063b6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006398:	3310      	adds	r3, #16
 800639a:	4618      	mov	r0, r3
 800639c:	f000 fe60 	bl	8007060 <xTaskRemoveFromEventList>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d007      	beq.n	80063b6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80063a6:	4b54      	ldr	r3, [pc, #336]	; (80064f8 <xQueueSemaphoreTake+0x214>)
 80063a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063ac:	601a      	str	r2, [r3, #0]
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80063b6:	f001 fb8d 	bl	8007ad4 <vPortExitCritical>
				return pdPASS;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e097      	b.n	80064ee <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d111      	bne.n	80063e8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80063c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80063ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ce:	f383 8811 	msr	BASEPRI, r3
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	617b      	str	r3, [r7, #20]
}
 80063dc:	bf00      	nop
 80063de:	e7fe      	b.n	80063de <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80063e0:	f001 fb78 	bl	8007ad4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80063e4:	2300      	movs	r3, #0
 80063e6:	e082      	b.n	80064ee <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80063e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d106      	bne.n	80063fc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063ee:	f107 030c 	add.w	r3, r7, #12
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fe96 	bl	8007124 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063f8:	2301      	movs	r3, #1
 80063fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063fc:	f001 fb6a 	bl	8007ad4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006400:	f000 fc4c 	bl	8006c9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006404:	f001 fb36 	bl	8007a74 <vPortEnterCritical>
 8006408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800640e:	b25b      	sxtb	r3, r3
 8006410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006414:	d103      	bne.n	800641e <xQueueSemaphoreTake+0x13a>
 8006416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800641e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006420:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006424:	b25b      	sxtb	r3, r3
 8006426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642a:	d103      	bne.n	8006434 <xQueueSemaphoreTake+0x150>
 800642c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642e:	2200      	movs	r2, #0
 8006430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006434:	f001 fb4e 	bl	8007ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006438:	463a      	mov	r2, r7
 800643a:	f107 030c 	add.w	r3, r7, #12
 800643e:	4611      	mov	r1, r2
 8006440:	4618      	mov	r0, r3
 8006442:	f000 fe85 	bl	8007150 <xTaskCheckForTimeOut>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d132      	bne.n	80064b2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800644c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800644e:	f000 f9cf 	bl	80067f0 <prvIsQueueEmpty>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d026      	beq.n	80064a6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d109      	bne.n	8006474 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006460:	f001 fb08 	bl	8007a74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	4618      	mov	r0, r3
 800646a:	f000 ffd3 	bl	8007414 <xTaskPriorityInherit>
 800646e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006470:	f001 fb30 	bl	8007ad4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006476:	3324      	adds	r3, #36	; 0x24
 8006478:	683a      	ldr	r2, [r7, #0]
 800647a:	4611      	mov	r1, r2
 800647c:	4618      	mov	r0, r3
 800647e:	f000 fdcb 	bl	8007018 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006482:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006484:	f000 f962 	bl	800674c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006488:	f000 fc16 	bl	8006cb8 <xTaskResumeAll>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	f47f af68 	bne.w	8006364 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006494:	4b18      	ldr	r3, [pc, #96]	; (80064f8 <xQueueSemaphoreTake+0x214>)
 8006496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	e75e      	b.n	8006364 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80064a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064a8:	f000 f950 	bl	800674c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064ac:	f000 fc04 	bl	8006cb8 <xTaskResumeAll>
 80064b0:	e758      	b.n	8006364 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80064b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064b4:	f000 f94a 	bl	800674c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064b8:	f000 fbfe 	bl	8006cb8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064be:	f000 f997 	bl	80067f0 <prvIsQueueEmpty>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f43f af4d 	beq.w	8006364 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80064ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00d      	beq.n	80064ec <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80064d0:	f001 fad0 	bl	8007a74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80064d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064d6:	f000 f891 	bl	80065fc <prvGetDisinheritPriorityAfterTimeout>
 80064da:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80064dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064e2:	4618      	mov	r0, r3
 80064e4:	f001 f892 	bl	800760c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80064e8:	f001 faf4 	bl	8007ad4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80064ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3738      	adds	r7, #56	; 0x38
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	e000ed04 	.word	0xe000ed04

080064fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08e      	sub	sp, #56	; 0x38
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10a      	bne.n	8006528 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	623b      	str	r3, [r7, #32]
}
 8006524:	bf00      	nop
 8006526:	e7fe      	b.n	8006526 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d103      	bne.n	8006536 <xQueueReceiveFromISR+0x3a>
 800652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <xQueueReceiveFromISR+0x3e>
 8006536:	2301      	movs	r3, #1
 8006538:	e000      	b.n	800653c <xQueueReceiveFromISR+0x40>
 800653a:	2300      	movs	r3, #0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10a      	bne.n	8006556 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	61fb      	str	r3, [r7, #28]
}
 8006552:	bf00      	nop
 8006554:	e7fe      	b.n	8006554 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006556:	f001 fb6f 	bl	8007c38 <vPortValidateInterruptPriority>
	__asm volatile
 800655a:	f3ef 8211 	mrs	r2, BASEPRI
 800655e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	61ba      	str	r2, [r7, #24]
 8006570:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006572:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006574:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800657c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657e:	2b00      	cmp	r3, #0
 8006580:	d02f      	beq.n	80065e2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006584:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800658c:	68b9      	ldr	r1, [r7, #8]
 800658e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006590:	f000 f8b6 	bl	8006700 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	1e5a      	subs	r2, r3, #1
 8006598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800659c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80065a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a4:	d112      	bne.n	80065cc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d016      	beq.n	80065dc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b0:	3310      	adds	r3, #16
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 fd54 	bl	8007060 <xTaskRemoveFromEventList>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00e      	beq.n	80065dc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00b      	beq.n	80065dc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	e007      	b.n	80065dc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80065cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065d0:	3301      	adds	r3, #1
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	b25a      	sxtb	r2, r3
 80065d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80065dc:	2301      	movs	r3, #1
 80065de:	637b      	str	r3, [r7, #52]	; 0x34
 80065e0:	e001      	b.n	80065e6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80065e2:	2300      	movs	r3, #0
 80065e4:	637b      	str	r3, [r7, #52]	; 0x34
 80065e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f383 8811 	msr	BASEPRI, r3
}
 80065f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80065f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3738      	adds	r7, #56	; 0x38
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006608:	2b00      	cmp	r3, #0
 800660a:	d006      	beq.n	800661a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f1c3 0307 	rsb	r3, r3, #7
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	e001      	b.n	800661e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800661a:	2300      	movs	r3, #0
 800661c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800661e:	68fb      	ldr	r3, [r7, #12]
	}
 8006620:	4618      	mov	r0, r3
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006638:	2300      	movs	r3, #0
 800663a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006640:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10d      	bne.n	8006666 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d14d      	bne.n	80066ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	4618      	mov	r0, r3
 8006658:	f000 ff52 	bl	8007500 <xTaskPriorityDisinherit>
 800665c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	609a      	str	r2, [r3, #8]
 8006664:	e043      	b.n	80066ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d119      	bne.n	80066a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6858      	ldr	r0, [r3, #4]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006674:	461a      	mov	r2, r3
 8006676:	68b9      	ldr	r1, [r7, #8]
 8006678:	f001 fd2c 	bl	80080d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006684:	441a      	add	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	429a      	cmp	r2, r3
 8006694:	d32b      	bcc.n	80066ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	605a      	str	r2, [r3, #4]
 800669e:	e026      	b.n	80066ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	68d8      	ldr	r0, [r3, #12]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a8:	461a      	mov	r2, r3
 80066aa:	68b9      	ldr	r1, [r7, #8]
 80066ac:	f001 fd12 	bl	80080d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	68da      	ldr	r2, [r3, #12]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b8:	425b      	negs	r3, r3
 80066ba:	441a      	add	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	68da      	ldr	r2, [r3, #12]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d207      	bcs.n	80066dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	689a      	ldr	r2, [r3, #8]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d4:	425b      	negs	r3, r3
 80066d6:	441a      	add	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d105      	bne.n	80066ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d002      	beq.n	80066ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	3b01      	subs	r3, #1
 80066ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	1c5a      	adds	r2, r3, #1
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80066f6:	697b      	ldr	r3, [r7, #20]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3718      	adds	r7, #24
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670e:	2b00      	cmp	r3, #0
 8006710:	d018      	beq.n	8006744 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68da      	ldr	r2, [r3, #12]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671a:	441a      	add	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68da      	ldr	r2, [r3, #12]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	429a      	cmp	r2, r3
 800672a:	d303      	bcc.n	8006734 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68d9      	ldr	r1, [r3, #12]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673c:	461a      	mov	r2, r3
 800673e:	6838      	ldr	r0, [r7, #0]
 8006740:	f001 fcc8 	bl	80080d4 <memcpy>
	}
}
 8006744:	bf00      	nop
 8006746:	3708      	adds	r7, #8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006754:	f001 f98e 	bl	8007a74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800675e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006760:	e011      	b.n	8006786 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006766:	2b00      	cmp	r3, #0
 8006768:	d012      	beq.n	8006790 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	3324      	adds	r3, #36	; 0x24
 800676e:	4618      	mov	r0, r3
 8006770:	f000 fc76 	bl	8007060 <xTaskRemoveFromEventList>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800677a:	f000 fd4b 	bl	8007214 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800677e:	7bfb      	ldrb	r3, [r7, #15]
 8006780:	3b01      	subs	r3, #1
 8006782:	b2db      	uxtb	r3, r3
 8006784:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800678a:	2b00      	cmp	r3, #0
 800678c:	dce9      	bgt.n	8006762 <prvUnlockQueue+0x16>
 800678e:	e000      	b.n	8006792 <prvUnlockQueue+0x46>
					break;
 8006790:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	22ff      	movs	r2, #255	; 0xff
 8006796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800679a:	f001 f99b 	bl	8007ad4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800679e:	f001 f969 	bl	8007a74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067aa:	e011      	b.n	80067d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d012      	beq.n	80067da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	3310      	adds	r3, #16
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 fc51 	bl	8007060 <xTaskRemoveFromEventList>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80067c4:	f000 fd26 	bl	8007214 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80067c8:	7bbb      	ldrb	r3, [r7, #14]
 80067ca:	3b01      	subs	r3, #1
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	dce9      	bgt.n	80067ac <prvUnlockQueue+0x60>
 80067d8:	e000      	b.n	80067dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80067da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	22ff      	movs	r2, #255	; 0xff
 80067e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80067e4:	f001 f976 	bl	8007ad4 <vPortExitCritical>
}
 80067e8:	bf00      	nop
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067f8:	f001 f93c 	bl	8007a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006800:	2b00      	cmp	r3, #0
 8006802:	d102      	bne.n	800680a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006804:	2301      	movs	r3, #1
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	e001      	b.n	800680e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800680a:	2300      	movs	r3, #0
 800680c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800680e:	f001 f961 	bl	8007ad4 <vPortExitCritical>

	return xReturn;
 8006812:	68fb      	ldr	r3, [r7, #12]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006824:	f001 f926 	bl	8007a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006830:	429a      	cmp	r2, r3
 8006832:	d102      	bne.n	800683a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006834:	2301      	movs	r3, #1
 8006836:	60fb      	str	r3, [r7, #12]
 8006838:	e001      	b.n	800683e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800683e:	f001 f949 	bl	8007ad4 <vPortExitCritical>

	return xReturn;
 8006842:	68fb      	ldr	r3, [r7, #12]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800684c:	b580      	push	{r7, lr}
 800684e:	b08e      	sub	sp, #56	; 0x38
 8006850:	af04      	add	r7, sp, #16
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
 8006858:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800685a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10a      	bne.n	8006876 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	623b      	str	r3, [r7, #32]
}
 8006872:	bf00      	nop
 8006874:	e7fe      	b.n	8006874 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10a      	bne.n	8006892 <xTaskCreateStatic+0x46>
	__asm volatile
 800687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	61fb      	str	r3, [r7, #28]
}
 800688e:	bf00      	nop
 8006890:	e7fe      	b.n	8006890 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006892:	2354      	movs	r3, #84	; 0x54
 8006894:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	2b54      	cmp	r3, #84	; 0x54
 800689a:	d00a      	beq.n	80068b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800689c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	61bb      	str	r3, [r7, #24]
}
 80068ae:	bf00      	nop
 80068b0:	e7fe      	b.n	80068b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80068b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80068b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d01e      	beq.n	80068f8 <xTaskCreateStatic+0xac>
 80068ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d01b      	beq.n	80068f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80068c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	2202      	movs	r2, #2
 80068ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80068d2:	2300      	movs	r3, #0
 80068d4:	9303      	str	r3, [sp, #12]
 80068d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d8:	9302      	str	r3, [sp, #8]
 80068da:	f107 0314 	add.w	r3, r7, #20
 80068de:	9301      	str	r3, [sp, #4]
 80068e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	68b9      	ldr	r1, [r7, #8]
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f000 f850 	bl	8006990 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068f2:	f000 f8d5 	bl	8006aa0 <prvAddNewTaskToReadyList>
 80068f6:	e001      	b.n	80068fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80068f8:	2300      	movs	r3, #0
 80068fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80068fc:	697b      	ldr	r3, [r7, #20]
	}
 80068fe:	4618      	mov	r0, r3
 8006900:	3728      	adds	r7, #40	; 0x28
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006906:	b580      	push	{r7, lr}
 8006908:	b08c      	sub	sp, #48	; 0x30
 800690a:	af04      	add	r7, sp, #16
 800690c:	60f8      	str	r0, [r7, #12]
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	603b      	str	r3, [r7, #0]
 8006912:	4613      	mov	r3, r2
 8006914:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006916:	88fb      	ldrh	r3, [r7, #6]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4618      	mov	r0, r3
 800691c:	f001 f9cc 	bl	8007cb8 <pvPortMalloc>
 8006920:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00e      	beq.n	8006946 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006928:	2054      	movs	r0, #84	; 0x54
 800692a:	f001 f9c5 	bl	8007cb8 <pvPortMalloc>
 800692e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	631a      	str	r2, [r3, #48]	; 0x30
 800693c:	e005      	b.n	800694a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800693e:	6978      	ldr	r0, [r7, #20]
 8006940:	f001 fa86 	bl	8007e50 <vPortFree>
 8006944:	e001      	b.n	800694a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006946:	2300      	movs	r3, #0
 8006948:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d017      	beq.n	8006980 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006958:	88fa      	ldrh	r2, [r7, #6]
 800695a:	2300      	movs	r3, #0
 800695c:	9303      	str	r3, [sp, #12]
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	9302      	str	r3, [sp, #8]
 8006962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006964:	9301      	str	r3, [sp, #4]
 8006966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68b9      	ldr	r1, [r7, #8]
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 f80e 	bl	8006990 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006974:	69f8      	ldr	r0, [r7, #28]
 8006976:	f000 f893 	bl	8006aa0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800697a:	2301      	movs	r3, #1
 800697c:	61bb      	str	r3, [r7, #24]
 800697e:	e002      	b.n	8006986 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006980:	f04f 33ff 	mov.w	r3, #4294967295
 8006984:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006986:	69bb      	ldr	r3, [r7, #24]
	}
 8006988:	4618      	mov	r0, r3
 800698a:	3720      	adds	r7, #32
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b088      	sub	sp, #32
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
 800699c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800699e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80069a8:	3b01      	subs	r3, #1
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	f023 0307 	bic.w	r3, r3, #7
 80069b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	f003 0307 	and.w	r3, r3, #7
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00a      	beq.n	80069d8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80069c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	617b      	str	r3, [r7, #20]
}
 80069d4:	bf00      	nop
 80069d6:	e7fe      	b.n	80069d6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d01f      	beq.n	8006a1e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069de:	2300      	movs	r3, #0
 80069e0:	61fb      	str	r3, [r7, #28]
 80069e2:	e012      	b.n	8006a0a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	4413      	add	r3, r2
 80069ea:	7819      	ldrb	r1, [r3, #0]
 80069ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	4413      	add	r3, r2
 80069f2:	3334      	adds	r3, #52	; 0x34
 80069f4:	460a      	mov	r2, r1
 80069f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	4413      	add	r3, r2
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d006      	beq.n	8006a12 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	3301      	adds	r3, #1
 8006a08:	61fb      	str	r3, [r7, #28]
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	2b0f      	cmp	r3, #15
 8006a0e:	d9e9      	bls.n	80069e4 <prvInitialiseNewTask+0x54>
 8006a10:	e000      	b.n	8006a14 <prvInitialiseNewTask+0x84>
			{
				break;
 8006a12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a1c:	e003      	b.n	8006a26 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a28:	2b06      	cmp	r3, #6
 8006a2a:	d901      	bls.n	8006a30 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a2c:	2306      	movs	r3, #6
 8006a2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a3a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3e:	2200      	movs	r2, #0
 8006a40:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a44:	3304      	adds	r3, #4
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7ff f8a6 	bl	8005b98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4e:	3318      	adds	r3, #24
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7ff f8a1 	bl	8005b98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5e:	f1c3 0207 	rsb	r2, r3, #7
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6e:	2200      	movs	r2, #0
 8006a70:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	68f9      	ldr	r1, [r7, #12]
 8006a7e:	69b8      	ldr	r0, [r7, #24]
 8006a80:	f000 fecc 	bl	800781c <pxPortInitialiseStack>
 8006a84:	4602      	mov	r2, r0
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d002      	beq.n	8006a96 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a96:	bf00      	nop
 8006a98:	3720      	adds	r7, #32
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
	...

08006aa0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006aa8:	f000 ffe4 	bl	8007a74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006aac:	4b2a      	ldr	r3, [pc, #168]	; (8006b58 <prvAddNewTaskToReadyList+0xb8>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	4a29      	ldr	r2, [pc, #164]	; (8006b58 <prvAddNewTaskToReadyList+0xb8>)
 8006ab4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006ab6:	4b29      	ldr	r3, [pc, #164]	; (8006b5c <prvAddNewTaskToReadyList+0xbc>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d109      	bne.n	8006ad2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006abe:	4a27      	ldr	r2, [pc, #156]	; (8006b5c <prvAddNewTaskToReadyList+0xbc>)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ac4:	4b24      	ldr	r3, [pc, #144]	; (8006b58 <prvAddNewTaskToReadyList+0xb8>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d110      	bne.n	8006aee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006acc:	f000 fbc6 	bl	800725c <prvInitialiseTaskLists>
 8006ad0:	e00d      	b.n	8006aee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ad2:	4b23      	ldr	r3, [pc, #140]	; (8006b60 <prvAddNewTaskToReadyList+0xc0>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d109      	bne.n	8006aee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ada:	4b20      	ldr	r3, [pc, #128]	; (8006b5c <prvAddNewTaskToReadyList+0xbc>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d802      	bhi.n	8006aee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ae8:	4a1c      	ldr	r2, [pc, #112]	; (8006b5c <prvAddNewTaskToReadyList+0xbc>)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006aee:	4b1d      	ldr	r3, [pc, #116]	; (8006b64 <prvAddNewTaskToReadyList+0xc4>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3301      	adds	r3, #1
 8006af4:	4a1b      	ldr	r2, [pc, #108]	; (8006b64 <prvAddNewTaskToReadyList+0xc4>)
 8006af6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afc:	2201      	movs	r2, #1
 8006afe:	409a      	lsls	r2, r3
 8006b00:	4b19      	ldr	r3, [pc, #100]	; (8006b68 <prvAddNewTaskToReadyList+0xc8>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	4a18      	ldr	r2, [pc, #96]	; (8006b68 <prvAddNewTaskToReadyList+0xc8>)
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0e:	4613      	mov	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4a15      	ldr	r2, [pc, #84]	; (8006b6c <prvAddNewTaskToReadyList+0xcc>)
 8006b18:	441a      	add	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	3304      	adds	r3, #4
 8006b1e:	4619      	mov	r1, r3
 8006b20:	4610      	mov	r0, r2
 8006b22:	f7ff f846 	bl	8005bb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006b26:	f000 ffd5 	bl	8007ad4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006b2a:	4b0d      	ldr	r3, [pc, #52]	; (8006b60 <prvAddNewTaskToReadyList+0xc0>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00e      	beq.n	8006b50 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b32:	4b0a      	ldr	r3, [pc, #40]	; (8006b5c <prvAddNewTaskToReadyList+0xbc>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d207      	bcs.n	8006b50 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b40:	4b0b      	ldr	r3, [pc, #44]	; (8006b70 <prvAddNewTaskToReadyList+0xd0>)
 8006b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b50:	bf00      	nop
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	200003bc 	.word	0x200003bc
 8006b5c:	200002bc 	.word	0x200002bc
 8006b60:	200003c8 	.word	0x200003c8
 8006b64:	200003d8 	.word	0x200003d8
 8006b68:	200003c4 	.word	0x200003c4
 8006b6c:	200002c0 	.word	0x200002c0
 8006b70:	e000ed04 	.word	0xe000ed04

08006b74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d017      	beq.n	8006bb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b86:	4b13      	ldr	r3, [pc, #76]	; (8006bd4 <vTaskDelay+0x60>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00a      	beq.n	8006ba4 <vTaskDelay+0x30>
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	60bb      	str	r3, [r7, #8]
}
 8006ba0:	bf00      	nop
 8006ba2:	e7fe      	b.n	8006ba2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ba4:	f000 f87a 	bl	8006c9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ba8:	2100      	movs	r1, #0
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fdd0 	bl	8007750 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006bb0:	f000 f882 	bl	8006cb8 <xTaskResumeAll>
 8006bb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d107      	bne.n	8006bcc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006bbc:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <vTaskDelay+0x64>)
 8006bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bcc:	bf00      	nop
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	200003e4 	.word	0x200003e4
 8006bd8:	e000ed04 	.word	0xe000ed04

08006bdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b08a      	sub	sp, #40	; 0x28
 8006be0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006be2:	2300      	movs	r3, #0
 8006be4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006be6:	2300      	movs	r3, #0
 8006be8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006bea:	463a      	mov	r2, r7
 8006bec:	1d39      	adds	r1, r7, #4
 8006bee:	f107 0308 	add.w	r3, r7, #8
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fa fea0 	bl	8001938 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	9202      	str	r2, [sp, #8]
 8006c00:	9301      	str	r3, [sp, #4]
 8006c02:	2300      	movs	r3, #0
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	2300      	movs	r3, #0
 8006c08:	460a      	mov	r2, r1
 8006c0a:	491e      	ldr	r1, [pc, #120]	; (8006c84 <vTaskStartScheduler+0xa8>)
 8006c0c:	481e      	ldr	r0, [pc, #120]	; (8006c88 <vTaskStartScheduler+0xac>)
 8006c0e:	f7ff fe1d 	bl	800684c <xTaskCreateStatic>
 8006c12:	4603      	mov	r3, r0
 8006c14:	4a1d      	ldr	r2, [pc, #116]	; (8006c8c <vTaskStartScheduler+0xb0>)
 8006c16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c18:	4b1c      	ldr	r3, [pc, #112]	; (8006c8c <vTaskStartScheduler+0xb0>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d002      	beq.n	8006c26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c20:	2301      	movs	r3, #1
 8006c22:	617b      	str	r3, [r7, #20]
 8006c24:	e001      	b.n	8006c2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c26:	2300      	movs	r3, #0
 8006c28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d116      	bne.n	8006c5e <vTaskStartScheduler+0x82>
	__asm volatile
 8006c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	613b      	str	r3, [r7, #16]
}
 8006c42:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c44:	4b12      	ldr	r3, [pc, #72]	; (8006c90 <vTaskStartScheduler+0xb4>)
 8006c46:	f04f 32ff 	mov.w	r2, #4294967295
 8006c4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c4c:	4b11      	ldr	r3, [pc, #68]	; (8006c94 <vTaskStartScheduler+0xb8>)
 8006c4e:	2201      	movs	r2, #1
 8006c50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c52:	4b11      	ldr	r3, [pc, #68]	; (8006c98 <vTaskStartScheduler+0xbc>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c58:	f000 fe6a 	bl	8007930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c5c:	e00e      	b.n	8006c7c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c64:	d10a      	bne.n	8006c7c <vTaskStartScheduler+0xa0>
	__asm volatile
 8006c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	60fb      	str	r3, [r7, #12]
}
 8006c78:	bf00      	nop
 8006c7a:	e7fe      	b.n	8006c7a <vTaskStartScheduler+0x9e>
}
 8006c7c:	bf00      	nop
 8006c7e:	3718      	adds	r7, #24
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	08008220 	.word	0x08008220
 8006c88:	0800722d 	.word	0x0800722d
 8006c8c:	200003e0 	.word	0x200003e0
 8006c90:	200003dc 	.word	0x200003dc
 8006c94:	200003c8 	.word	0x200003c8
 8006c98:	200003c0 	.word	0x200003c0

08006c9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ca0:	4b04      	ldr	r3, [pc, #16]	; (8006cb4 <vTaskSuspendAll+0x18>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	4a03      	ldr	r2, [pc, #12]	; (8006cb4 <vTaskSuspendAll+0x18>)
 8006ca8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006caa:	bf00      	nop
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr
 8006cb4:	200003e4 	.word	0x200003e4

08006cb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006cc6:	4b41      	ldr	r3, [pc, #260]	; (8006dcc <xTaskResumeAll+0x114>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10a      	bne.n	8006ce4 <xTaskResumeAll+0x2c>
	__asm volatile
 8006cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd2:	f383 8811 	msr	BASEPRI, r3
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	603b      	str	r3, [r7, #0]
}
 8006ce0:	bf00      	nop
 8006ce2:	e7fe      	b.n	8006ce2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ce4:	f000 fec6 	bl	8007a74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ce8:	4b38      	ldr	r3, [pc, #224]	; (8006dcc <xTaskResumeAll+0x114>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3b01      	subs	r3, #1
 8006cee:	4a37      	ldr	r2, [pc, #220]	; (8006dcc <xTaskResumeAll+0x114>)
 8006cf0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cf2:	4b36      	ldr	r3, [pc, #216]	; (8006dcc <xTaskResumeAll+0x114>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d161      	bne.n	8006dbe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006cfa:	4b35      	ldr	r3, [pc, #212]	; (8006dd0 <xTaskResumeAll+0x118>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d05d      	beq.n	8006dbe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d02:	e02e      	b.n	8006d62 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d04:	4b33      	ldr	r3, [pc, #204]	; (8006dd4 <xTaskResumeAll+0x11c>)
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	3318      	adds	r3, #24
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7fe ffab 	bl	8005c6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	3304      	adds	r3, #4
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fe ffa6 	bl	8005c6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d24:	2201      	movs	r2, #1
 8006d26:	409a      	lsls	r2, r3
 8006d28:	4b2b      	ldr	r3, [pc, #172]	; (8006dd8 <xTaskResumeAll+0x120>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	4a2a      	ldr	r2, [pc, #168]	; (8006dd8 <xTaskResumeAll+0x120>)
 8006d30:	6013      	str	r3, [r2, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d36:	4613      	mov	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4a27      	ldr	r2, [pc, #156]	; (8006ddc <xTaskResumeAll+0x124>)
 8006d40:	441a      	add	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	3304      	adds	r3, #4
 8006d46:	4619      	mov	r1, r3
 8006d48:	4610      	mov	r0, r2
 8006d4a:	f7fe ff32 	bl	8005bb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d52:	4b23      	ldr	r3, [pc, #140]	; (8006de0 <xTaskResumeAll+0x128>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d302      	bcc.n	8006d62 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006d5c:	4b21      	ldr	r3, [pc, #132]	; (8006de4 <xTaskResumeAll+0x12c>)
 8006d5e:	2201      	movs	r2, #1
 8006d60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d62:	4b1c      	ldr	r3, [pc, #112]	; (8006dd4 <xTaskResumeAll+0x11c>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1cc      	bne.n	8006d04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d001      	beq.n	8006d74 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d70:	f000 fb12 	bl	8007398 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006d74:	4b1c      	ldr	r3, [pc, #112]	; (8006de8 <xTaskResumeAll+0x130>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d010      	beq.n	8006da2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d80:	f000 f836 	bl	8006df0 <xTaskIncrementTick>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d002      	beq.n	8006d90 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006d8a:	4b16      	ldr	r3, [pc, #88]	; (8006de4 <xTaskResumeAll+0x12c>)
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3b01      	subs	r3, #1
 8006d94:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1f1      	bne.n	8006d80 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006d9c:	4b12      	ldr	r3, [pc, #72]	; (8006de8 <xTaskResumeAll+0x130>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006da2:	4b10      	ldr	r3, [pc, #64]	; (8006de4 <xTaskResumeAll+0x12c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d009      	beq.n	8006dbe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006daa:	2301      	movs	r3, #1
 8006dac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006dae:	4b0f      	ldr	r3, [pc, #60]	; (8006dec <xTaskResumeAll+0x134>)
 8006db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006dbe:	f000 fe89 	bl	8007ad4 <vPortExitCritical>

	return xAlreadyYielded;
 8006dc2:	68bb      	ldr	r3, [r7, #8]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	200003e4 	.word	0x200003e4
 8006dd0:	200003bc 	.word	0x200003bc
 8006dd4:	2000037c 	.word	0x2000037c
 8006dd8:	200003c4 	.word	0x200003c4
 8006ddc:	200002c0 	.word	0x200002c0
 8006de0:	200002bc 	.word	0x200002bc
 8006de4:	200003d0 	.word	0x200003d0
 8006de8:	200003cc 	.word	0x200003cc
 8006dec:	e000ed04 	.word	0xe000ed04

08006df0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006df6:	2300      	movs	r3, #0
 8006df8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dfa:	4b4e      	ldr	r3, [pc, #312]	; (8006f34 <xTaskIncrementTick+0x144>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f040 808e 	bne.w	8006f20 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e04:	4b4c      	ldr	r3, [pc, #304]	; (8006f38 <xTaskIncrementTick+0x148>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e0c:	4a4a      	ldr	r2, [pc, #296]	; (8006f38 <xTaskIncrementTick+0x148>)
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d120      	bne.n	8006e5a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e18:	4b48      	ldr	r3, [pc, #288]	; (8006f3c <xTaskIncrementTick+0x14c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00a      	beq.n	8006e38 <xTaskIncrementTick+0x48>
	__asm volatile
 8006e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	603b      	str	r3, [r7, #0]
}
 8006e34:	bf00      	nop
 8006e36:	e7fe      	b.n	8006e36 <xTaskIncrementTick+0x46>
 8006e38:	4b40      	ldr	r3, [pc, #256]	; (8006f3c <xTaskIncrementTick+0x14c>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	60fb      	str	r3, [r7, #12]
 8006e3e:	4b40      	ldr	r3, [pc, #256]	; (8006f40 <xTaskIncrementTick+0x150>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a3e      	ldr	r2, [pc, #248]	; (8006f3c <xTaskIncrementTick+0x14c>)
 8006e44:	6013      	str	r3, [r2, #0]
 8006e46:	4a3e      	ldr	r2, [pc, #248]	; (8006f40 <xTaskIncrementTick+0x150>)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6013      	str	r3, [r2, #0]
 8006e4c:	4b3d      	ldr	r3, [pc, #244]	; (8006f44 <xTaskIncrementTick+0x154>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3301      	adds	r3, #1
 8006e52:	4a3c      	ldr	r2, [pc, #240]	; (8006f44 <xTaskIncrementTick+0x154>)
 8006e54:	6013      	str	r3, [r2, #0]
 8006e56:	f000 fa9f 	bl	8007398 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e5a:	4b3b      	ldr	r3, [pc, #236]	; (8006f48 <xTaskIncrementTick+0x158>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d348      	bcc.n	8006ef6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e64:	4b35      	ldr	r3, [pc, #212]	; (8006f3c <xTaskIncrementTick+0x14c>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d104      	bne.n	8006e78 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e6e:	4b36      	ldr	r3, [pc, #216]	; (8006f48 <xTaskIncrementTick+0x158>)
 8006e70:	f04f 32ff 	mov.w	r2, #4294967295
 8006e74:	601a      	str	r2, [r3, #0]
					break;
 8006e76:	e03e      	b.n	8006ef6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e78:	4b30      	ldr	r3, [pc, #192]	; (8006f3c <xTaskIncrementTick+0x14c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d203      	bcs.n	8006e98 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e90:	4a2d      	ldr	r2, [pc, #180]	; (8006f48 <xTaskIncrementTick+0x158>)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006e96:	e02e      	b.n	8006ef6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	3304      	adds	r3, #4
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fe fee5 	bl	8005c6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d004      	beq.n	8006eb4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	3318      	adds	r3, #24
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fe fedc 	bl	8005c6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb8:	2201      	movs	r2, #1
 8006eba:	409a      	lsls	r2, r3
 8006ebc:	4b23      	ldr	r3, [pc, #140]	; (8006f4c <xTaskIncrementTick+0x15c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	4a22      	ldr	r2, [pc, #136]	; (8006f4c <xTaskIncrementTick+0x15c>)
 8006ec4:	6013      	str	r3, [r2, #0]
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eca:	4613      	mov	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4a1f      	ldr	r2, [pc, #124]	; (8006f50 <xTaskIncrementTick+0x160>)
 8006ed4:	441a      	add	r2, r3
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	3304      	adds	r3, #4
 8006eda:	4619      	mov	r1, r3
 8006edc:	4610      	mov	r0, r2
 8006ede:	f7fe fe68 	bl	8005bb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee6:	4b1b      	ldr	r3, [pc, #108]	; (8006f54 <xTaskIncrementTick+0x164>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d3b9      	bcc.n	8006e64 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ef4:	e7b6      	b.n	8006e64 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ef6:	4b17      	ldr	r3, [pc, #92]	; (8006f54 <xTaskIncrementTick+0x164>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006efc:	4914      	ldr	r1, [pc, #80]	; (8006f50 <xTaskIncrementTick+0x160>)
 8006efe:	4613      	mov	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4413      	add	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	440b      	add	r3, r1
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d901      	bls.n	8006f12 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006f12:	4b11      	ldr	r3, [pc, #68]	; (8006f58 <xTaskIncrementTick+0x168>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d007      	beq.n	8006f2a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	617b      	str	r3, [r7, #20]
 8006f1e:	e004      	b.n	8006f2a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006f20:	4b0e      	ldr	r3, [pc, #56]	; (8006f5c <xTaskIncrementTick+0x16c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3301      	adds	r3, #1
 8006f26:	4a0d      	ldr	r2, [pc, #52]	; (8006f5c <xTaskIncrementTick+0x16c>)
 8006f28:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006f2a:	697b      	ldr	r3, [r7, #20]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	200003e4 	.word	0x200003e4
 8006f38:	200003c0 	.word	0x200003c0
 8006f3c:	20000374 	.word	0x20000374
 8006f40:	20000378 	.word	0x20000378
 8006f44:	200003d4 	.word	0x200003d4
 8006f48:	200003dc 	.word	0x200003dc
 8006f4c:	200003c4 	.word	0x200003c4
 8006f50:	200002c0 	.word	0x200002c0
 8006f54:	200002bc 	.word	0x200002bc
 8006f58:	200003d0 	.word	0x200003d0
 8006f5c:	200003cc 	.word	0x200003cc

08006f60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f60:	b480      	push	{r7}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f66:	4b27      	ldr	r3, [pc, #156]	; (8007004 <vTaskSwitchContext+0xa4>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d003      	beq.n	8006f76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f6e:	4b26      	ldr	r3, [pc, #152]	; (8007008 <vTaskSwitchContext+0xa8>)
 8006f70:	2201      	movs	r2, #1
 8006f72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f74:	e03f      	b.n	8006ff6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006f76:	4b24      	ldr	r3, [pc, #144]	; (8007008 <vTaskSwitchContext+0xa8>)
 8006f78:	2200      	movs	r2, #0
 8006f7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f7c:	4b23      	ldr	r3, [pc, #140]	; (800700c <vTaskSwitchContext+0xac>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	fab3 f383 	clz	r3, r3
 8006f88:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006f8a:	7afb      	ldrb	r3, [r7, #11]
 8006f8c:	f1c3 031f 	rsb	r3, r3, #31
 8006f90:	617b      	str	r3, [r7, #20]
 8006f92:	491f      	ldr	r1, [pc, #124]	; (8007010 <vTaskSwitchContext+0xb0>)
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	4613      	mov	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	440b      	add	r3, r1
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10a      	bne.n	8006fbc <vTaskSwitchContext+0x5c>
	__asm volatile
 8006fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	607b      	str	r3, [r7, #4]
}
 8006fb8:	bf00      	nop
 8006fba:	e7fe      	b.n	8006fba <vTaskSwitchContext+0x5a>
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4a12      	ldr	r2, [pc, #72]	; (8007010 <vTaskSwitchContext+0xb0>)
 8006fc8:	4413      	add	r3, r2
 8006fca:	613b      	str	r3, [r7, #16]
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	685a      	ldr	r2, [r3, #4]
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	605a      	str	r2, [r3, #4]
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	3308      	adds	r3, #8
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d104      	bne.n	8006fec <vTaskSwitchContext+0x8c>
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	685a      	ldr	r2, [r3, #4]
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	605a      	str	r2, [r3, #4]
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	4a08      	ldr	r2, [pc, #32]	; (8007014 <vTaskSwitchContext+0xb4>)
 8006ff4:	6013      	str	r3, [r2, #0]
}
 8006ff6:	bf00      	nop
 8006ff8:	371c      	adds	r7, #28
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	200003e4 	.word	0x200003e4
 8007008:	200003d0 	.word	0x200003d0
 800700c:	200003c4 	.word	0x200003c4
 8007010:	200002c0 	.word	0x200002c0
 8007014:	200002bc 	.word	0x200002bc

08007018 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10a      	bne.n	800703e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702c:	f383 8811 	msr	BASEPRI, r3
 8007030:	f3bf 8f6f 	isb	sy
 8007034:	f3bf 8f4f 	dsb	sy
 8007038:	60fb      	str	r3, [r7, #12]
}
 800703a:	bf00      	nop
 800703c:	e7fe      	b.n	800703c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800703e:	4b07      	ldr	r3, [pc, #28]	; (800705c <vTaskPlaceOnEventList+0x44>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	3318      	adds	r3, #24
 8007044:	4619      	mov	r1, r3
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7fe fdd7 	bl	8005bfa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800704c:	2101      	movs	r1, #1
 800704e:	6838      	ldr	r0, [r7, #0]
 8007050:	f000 fb7e 	bl	8007750 <prvAddCurrentTaskToDelayedList>
}
 8007054:	bf00      	nop
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	200002bc 	.word	0x200002bc

08007060 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10a      	bne.n	800708c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	60fb      	str	r3, [r7, #12]
}
 8007088:	bf00      	nop
 800708a:	e7fe      	b.n	800708a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	3318      	adds	r3, #24
 8007090:	4618      	mov	r0, r3
 8007092:	f7fe fdeb 	bl	8005c6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007096:	4b1d      	ldr	r3, [pc, #116]	; (800710c <xTaskRemoveFromEventList+0xac>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d11c      	bne.n	80070d8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	3304      	adds	r3, #4
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7fe fde2 	bl	8005c6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ac:	2201      	movs	r2, #1
 80070ae:	409a      	lsls	r2, r3
 80070b0:	4b17      	ldr	r3, [pc, #92]	; (8007110 <xTaskRemoveFromEventList+0xb0>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	4a16      	ldr	r2, [pc, #88]	; (8007110 <xTaskRemoveFromEventList+0xb0>)
 80070b8:	6013      	str	r3, [r2, #0]
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070be:	4613      	mov	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	4a13      	ldr	r2, [pc, #76]	; (8007114 <xTaskRemoveFromEventList+0xb4>)
 80070c8:	441a      	add	r2, r3
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	3304      	adds	r3, #4
 80070ce:	4619      	mov	r1, r3
 80070d0:	4610      	mov	r0, r2
 80070d2:	f7fe fd6e 	bl	8005bb2 <vListInsertEnd>
 80070d6:	e005      	b.n	80070e4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	3318      	adds	r3, #24
 80070dc:	4619      	mov	r1, r3
 80070de:	480e      	ldr	r0, [pc, #56]	; (8007118 <xTaskRemoveFromEventList+0xb8>)
 80070e0:	f7fe fd67 	bl	8005bb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e8:	4b0c      	ldr	r3, [pc, #48]	; (800711c <xTaskRemoveFromEventList+0xbc>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d905      	bls.n	80070fe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80070f2:	2301      	movs	r3, #1
 80070f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80070f6:	4b0a      	ldr	r3, [pc, #40]	; (8007120 <xTaskRemoveFromEventList+0xc0>)
 80070f8:	2201      	movs	r2, #1
 80070fa:	601a      	str	r2, [r3, #0]
 80070fc:	e001      	b.n	8007102 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80070fe:	2300      	movs	r3, #0
 8007100:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007102:	697b      	ldr	r3, [r7, #20]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3718      	adds	r7, #24
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	200003e4 	.word	0x200003e4
 8007110:	200003c4 	.word	0x200003c4
 8007114:	200002c0 	.word	0x200002c0
 8007118:	2000037c 	.word	0x2000037c
 800711c:	200002bc 	.word	0x200002bc
 8007120:	200003d0 	.word	0x200003d0

08007124 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800712c:	4b06      	ldr	r3, [pc, #24]	; (8007148 <vTaskInternalSetTimeOutState+0x24>)
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007134:	4b05      	ldr	r3, [pc, #20]	; (800714c <vTaskInternalSetTimeOutState+0x28>)
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	605a      	str	r2, [r3, #4]
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	200003d4 	.word	0x200003d4
 800714c:	200003c0 	.word	0x200003c0

08007150 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b088      	sub	sp, #32
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10a      	bne.n	8007176 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	613b      	str	r3, [r7, #16]
}
 8007172:	bf00      	nop
 8007174:	e7fe      	b.n	8007174 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10a      	bne.n	8007192 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800717c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007180:	f383 8811 	msr	BASEPRI, r3
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	60fb      	str	r3, [r7, #12]
}
 800718e:	bf00      	nop
 8007190:	e7fe      	b.n	8007190 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007192:	f000 fc6f 	bl	8007a74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007196:	4b1d      	ldr	r3, [pc, #116]	; (800720c <xTaskCheckForTimeOut+0xbc>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	69ba      	ldr	r2, [r7, #24]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ae:	d102      	bne.n	80071b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80071b0:	2300      	movs	r3, #0
 80071b2:	61fb      	str	r3, [r7, #28]
 80071b4:	e023      	b.n	80071fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	4b15      	ldr	r3, [pc, #84]	; (8007210 <xTaskCheckForTimeOut+0xc0>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d007      	beq.n	80071d2 <xTaskCheckForTimeOut+0x82>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	69ba      	ldr	r2, [r7, #24]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d302      	bcc.n	80071d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80071cc:	2301      	movs	r3, #1
 80071ce:	61fb      	str	r3, [r7, #28]
 80071d0:	e015      	b.n	80071fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d20b      	bcs.n	80071f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	1ad2      	subs	r2, r2, r3
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7ff ff9b 	bl	8007124 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80071ee:	2300      	movs	r3, #0
 80071f0:	61fb      	str	r3, [r7, #28]
 80071f2:	e004      	b.n	80071fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	2200      	movs	r2, #0
 80071f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80071fa:	2301      	movs	r3, #1
 80071fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80071fe:	f000 fc69 	bl	8007ad4 <vPortExitCritical>

	return xReturn;
 8007202:	69fb      	ldr	r3, [r7, #28]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3720      	adds	r7, #32
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	200003c0 	.word	0x200003c0
 8007210:	200003d4 	.word	0x200003d4

08007214 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007214:	b480      	push	{r7}
 8007216:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007218:	4b03      	ldr	r3, [pc, #12]	; (8007228 <vTaskMissedYield+0x14>)
 800721a:	2201      	movs	r2, #1
 800721c:	601a      	str	r2, [r3, #0]
}
 800721e:	bf00      	nop
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	200003d0 	.word	0x200003d0

0800722c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007234:	f000 f852 	bl	80072dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007238:	4b06      	ldr	r3, [pc, #24]	; (8007254 <prvIdleTask+0x28>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d9f9      	bls.n	8007234 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007240:	4b05      	ldr	r3, [pc, #20]	; (8007258 <prvIdleTask+0x2c>)
 8007242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007246:	601a      	str	r2, [r3, #0]
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007250:	e7f0      	b.n	8007234 <prvIdleTask+0x8>
 8007252:	bf00      	nop
 8007254:	200002c0 	.word	0x200002c0
 8007258:	e000ed04 	.word	0xe000ed04

0800725c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007262:	2300      	movs	r3, #0
 8007264:	607b      	str	r3, [r7, #4]
 8007266:	e00c      	b.n	8007282 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	4613      	mov	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4413      	add	r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4a12      	ldr	r2, [pc, #72]	; (80072bc <prvInitialiseTaskLists+0x60>)
 8007274:	4413      	add	r3, r2
 8007276:	4618      	mov	r0, r3
 8007278:	f7fe fc6e 	bl	8005b58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	3301      	adds	r3, #1
 8007280:	607b      	str	r3, [r7, #4]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2b06      	cmp	r3, #6
 8007286:	d9ef      	bls.n	8007268 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007288:	480d      	ldr	r0, [pc, #52]	; (80072c0 <prvInitialiseTaskLists+0x64>)
 800728a:	f7fe fc65 	bl	8005b58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800728e:	480d      	ldr	r0, [pc, #52]	; (80072c4 <prvInitialiseTaskLists+0x68>)
 8007290:	f7fe fc62 	bl	8005b58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007294:	480c      	ldr	r0, [pc, #48]	; (80072c8 <prvInitialiseTaskLists+0x6c>)
 8007296:	f7fe fc5f 	bl	8005b58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800729a:	480c      	ldr	r0, [pc, #48]	; (80072cc <prvInitialiseTaskLists+0x70>)
 800729c:	f7fe fc5c 	bl	8005b58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80072a0:	480b      	ldr	r0, [pc, #44]	; (80072d0 <prvInitialiseTaskLists+0x74>)
 80072a2:	f7fe fc59 	bl	8005b58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80072a6:	4b0b      	ldr	r3, [pc, #44]	; (80072d4 <prvInitialiseTaskLists+0x78>)
 80072a8:	4a05      	ldr	r2, [pc, #20]	; (80072c0 <prvInitialiseTaskLists+0x64>)
 80072aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072ac:	4b0a      	ldr	r3, [pc, #40]	; (80072d8 <prvInitialiseTaskLists+0x7c>)
 80072ae:	4a05      	ldr	r2, [pc, #20]	; (80072c4 <prvInitialiseTaskLists+0x68>)
 80072b0:	601a      	str	r2, [r3, #0]
}
 80072b2:	bf00      	nop
 80072b4:	3708      	adds	r7, #8
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	200002c0 	.word	0x200002c0
 80072c0:	2000034c 	.word	0x2000034c
 80072c4:	20000360 	.word	0x20000360
 80072c8:	2000037c 	.word	0x2000037c
 80072cc:	20000390 	.word	0x20000390
 80072d0:	200003a8 	.word	0x200003a8
 80072d4:	20000374 	.word	0x20000374
 80072d8:	20000378 	.word	0x20000378

080072dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072e2:	e019      	b.n	8007318 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80072e4:	f000 fbc6 	bl	8007a74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072e8:	4b10      	ldr	r3, [pc, #64]	; (800732c <prvCheckTasksWaitingTermination+0x50>)
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	3304      	adds	r3, #4
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7fe fcb9 	bl	8005c6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80072fa:	4b0d      	ldr	r3, [pc, #52]	; (8007330 <prvCheckTasksWaitingTermination+0x54>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3b01      	subs	r3, #1
 8007300:	4a0b      	ldr	r2, [pc, #44]	; (8007330 <prvCheckTasksWaitingTermination+0x54>)
 8007302:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007304:	4b0b      	ldr	r3, [pc, #44]	; (8007334 <prvCheckTasksWaitingTermination+0x58>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	3b01      	subs	r3, #1
 800730a:	4a0a      	ldr	r2, [pc, #40]	; (8007334 <prvCheckTasksWaitingTermination+0x58>)
 800730c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800730e:	f000 fbe1 	bl	8007ad4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f810 	bl	8007338 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007318:	4b06      	ldr	r3, [pc, #24]	; (8007334 <prvCheckTasksWaitingTermination+0x58>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1e1      	bne.n	80072e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007320:	bf00      	nop
 8007322:	bf00      	nop
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	20000390 	.word	0x20000390
 8007330:	200003bc 	.word	0x200003bc
 8007334:	200003a4 	.word	0x200003a4

08007338 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007346:	2b00      	cmp	r3, #0
 8007348:	d108      	bne.n	800735c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734e:	4618      	mov	r0, r3
 8007350:	f000 fd7e 	bl	8007e50 <vPortFree>
				vPortFree( pxTCB );
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fd7b 	bl	8007e50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800735a:	e018      	b.n	800738e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007362:	2b01      	cmp	r3, #1
 8007364:	d103      	bne.n	800736e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fd72 	bl	8007e50 <vPortFree>
	}
 800736c:	e00f      	b.n	800738e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007374:	2b02      	cmp	r3, #2
 8007376:	d00a      	beq.n	800738e <prvDeleteTCB+0x56>
	__asm volatile
 8007378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737c:	f383 8811 	msr	BASEPRI, r3
 8007380:	f3bf 8f6f 	isb	sy
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	60fb      	str	r3, [r7, #12]
}
 800738a:	bf00      	nop
 800738c:	e7fe      	b.n	800738c <prvDeleteTCB+0x54>
	}
 800738e:	bf00      	nop
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
	...

08007398 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800739e:	4b0c      	ldr	r3, [pc, #48]	; (80073d0 <prvResetNextTaskUnblockTime+0x38>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d104      	bne.n	80073b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80073a8:	4b0a      	ldr	r3, [pc, #40]	; (80073d4 <prvResetNextTaskUnblockTime+0x3c>)
 80073aa:	f04f 32ff 	mov.w	r2, #4294967295
 80073ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80073b0:	e008      	b.n	80073c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073b2:	4b07      	ldr	r3, [pc, #28]	; (80073d0 <prvResetNextTaskUnblockTime+0x38>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	4a04      	ldr	r2, [pc, #16]	; (80073d4 <prvResetNextTaskUnblockTime+0x3c>)
 80073c2:	6013      	str	r3, [r2, #0]
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr
 80073d0:	20000374 	.word	0x20000374
 80073d4:	200003dc 	.word	0x200003dc

080073d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80073de:	4b0b      	ldr	r3, [pc, #44]	; (800740c <xTaskGetSchedulerState+0x34>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d102      	bne.n	80073ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80073e6:	2301      	movs	r3, #1
 80073e8:	607b      	str	r3, [r7, #4]
 80073ea:	e008      	b.n	80073fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073ec:	4b08      	ldr	r3, [pc, #32]	; (8007410 <xTaskGetSchedulerState+0x38>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d102      	bne.n	80073fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80073f4:	2302      	movs	r3, #2
 80073f6:	607b      	str	r3, [r7, #4]
 80073f8:	e001      	b.n	80073fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80073fa:	2300      	movs	r3, #0
 80073fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80073fe:	687b      	ldr	r3, [r7, #4]
	}
 8007400:	4618      	mov	r0, r3
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	200003c8 	.word	0x200003c8
 8007410:	200003e4 	.word	0x200003e4

08007414 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007420:	2300      	movs	r3, #0
 8007422:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d05e      	beq.n	80074e8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800742e:	4b31      	ldr	r3, [pc, #196]	; (80074f4 <xTaskPriorityInherit+0xe0>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007434:	429a      	cmp	r2, r3
 8007436:	d24e      	bcs.n	80074d6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	2b00      	cmp	r3, #0
 800743e:	db06      	blt.n	800744e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007440:	4b2c      	ldr	r3, [pc, #176]	; (80074f4 <xTaskPriorityInherit+0xe0>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007446:	f1c3 0207 	rsb	r2, r3, #7
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	6959      	ldr	r1, [r3, #20]
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007456:	4613      	mov	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4a26      	ldr	r2, [pc, #152]	; (80074f8 <xTaskPriorityInherit+0xe4>)
 8007460:	4413      	add	r3, r2
 8007462:	4299      	cmp	r1, r3
 8007464:	d12f      	bne.n	80074c6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	3304      	adds	r3, #4
 800746a:	4618      	mov	r0, r3
 800746c:	f7fe fbfe 	bl	8005c6c <uxListRemove>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10a      	bne.n	800748c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747a:	2201      	movs	r2, #1
 800747c:	fa02 f303 	lsl.w	r3, r2, r3
 8007480:	43da      	mvns	r2, r3
 8007482:	4b1e      	ldr	r3, [pc, #120]	; (80074fc <xTaskPriorityInherit+0xe8>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4013      	ands	r3, r2
 8007488:	4a1c      	ldr	r2, [pc, #112]	; (80074fc <xTaskPriorityInherit+0xe8>)
 800748a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800748c:	4b19      	ldr	r3, [pc, #100]	; (80074f4 <xTaskPriorityInherit+0xe0>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749a:	2201      	movs	r2, #1
 800749c:	409a      	lsls	r2, r3
 800749e:	4b17      	ldr	r3, [pc, #92]	; (80074fc <xTaskPriorityInherit+0xe8>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	4a15      	ldr	r2, [pc, #84]	; (80074fc <xTaskPriorityInherit+0xe8>)
 80074a6:	6013      	str	r3, [r2, #0]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ac:	4613      	mov	r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4413      	add	r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	4a10      	ldr	r2, [pc, #64]	; (80074f8 <xTaskPriorityInherit+0xe4>)
 80074b6:	441a      	add	r2, r3
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	3304      	adds	r3, #4
 80074bc:	4619      	mov	r1, r3
 80074be:	4610      	mov	r0, r2
 80074c0:	f7fe fb77 	bl	8005bb2 <vListInsertEnd>
 80074c4:	e004      	b.n	80074d0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80074c6:	4b0b      	ldr	r3, [pc, #44]	; (80074f4 <xTaskPriorityInherit+0xe0>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80074d0:	2301      	movs	r3, #1
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	e008      	b.n	80074e8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074da:	4b06      	ldr	r3, [pc, #24]	; (80074f4 <xTaskPriorityInherit+0xe0>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d201      	bcs.n	80074e8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80074e4:	2301      	movs	r3, #1
 80074e6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074e8:	68fb      	ldr	r3, [r7, #12]
	}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	200002bc 	.word	0x200002bc
 80074f8:	200002c0 	.word	0x200002c0
 80074fc:	200003c4 	.word	0x200003c4

08007500 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800750c:	2300      	movs	r3, #0
 800750e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d06e      	beq.n	80075f4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007516:	4b3a      	ldr	r3, [pc, #232]	; (8007600 <xTaskPriorityDisinherit+0x100>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	693a      	ldr	r2, [r7, #16]
 800751c:	429a      	cmp	r2, r3
 800751e:	d00a      	beq.n	8007536 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	60fb      	str	r3, [r7, #12]
}
 8007532:	bf00      	nop
 8007534:	e7fe      	b.n	8007534 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10a      	bne.n	8007554 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800753e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	60bb      	str	r3, [r7, #8]
}
 8007550:	bf00      	nop
 8007552:	e7fe      	b.n	8007552 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007558:	1e5a      	subs	r2, r3, #1
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007566:	429a      	cmp	r2, r3
 8007568:	d044      	beq.n	80075f4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800756e:	2b00      	cmp	r3, #0
 8007570:	d140      	bne.n	80075f4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	3304      	adds	r3, #4
 8007576:	4618      	mov	r0, r3
 8007578:	f7fe fb78 	bl	8005c6c <uxListRemove>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d115      	bne.n	80075ae <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007586:	491f      	ldr	r1, [pc, #124]	; (8007604 <xTaskPriorityDisinherit+0x104>)
 8007588:	4613      	mov	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	440b      	add	r3, r1
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10a      	bne.n	80075ae <xTaskPriorityDisinherit+0xae>
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759c:	2201      	movs	r2, #1
 800759e:	fa02 f303 	lsl.w	r3, r2, r3
 80075a2:	43da      	mvns	r2, r3
 80075a4:	4b18      	ldr	r3, [pc, #96]	; (8007608 <xTaskPriorityDisinherit+0x108>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4013      	ands	r3, r2
 80075aa:	4a17      	ldr	r2, [pc, #92]	; (8007608 <xTaskPriorityDisinherit+0x108>)
 80075ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ba:	f1c3 0207 	rsb	r2, r3, #7
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c6:	2201      	movs	r2, #1
 80075c8:	409a      	lsls	r2, r3
 80075ca:	4b0f      	ldr	r3, [pc, #60]	; (8007608 <xTaskPriorityDisinherit+0x108>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	4a0d      	ldr	r2, [pc, #52]	; (8007608 <xTaskPriorityDisinherit+0x108>)
 80075d2:	6013      	str	r3, [r2, #0]
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d8:	4613      	mov	r3, r2
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	4413      	add	r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	4a08      	ldr	r2, [pc, #32]	; (8007604 <xTaskPriorityDisinherit+0x104>)
 80075e2:	441a      	add	r2, r3
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	3304      	adds	r3, #4
 80075e8:	4619      	mov	r1, r3
 80075ea:	4610      	mov	r0, r2
 80075ec:	f7fe fae1 	bl	8005bb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80075f0:	2301      	movs	r3, #1
 80075f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075f4:	697b      	ldr	r3, [r7, #20]
	}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	200002bc 	.word	0x200002bc
 8007604:	200002c0 	.word	0x200002c0
 8007608:	200003c4 	.word	0x200003c4

0800760c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800760c:	b580      	push	{r7, lr}
 800760e:	b088      	sub	sp, #32
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800761a:	2301      	movs	r3, #1
 800761c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d077      	beq.n	8007714 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10a      	bne.n	8007642 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800762c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007630:	f383 8811 	msr	BASEPRI, r3
 8007634:	f3bf 8f6f 	isb	sy
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	60fb      	str	r3, [r7, #12]
}
 800763e:	bf00      	nop
 8007640:	e7fe      	b.n	8007640 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	429a      	cmp	r2, r3
 800764a:	d902      	bls.n	8007652 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	61fb      	str	r3, [r7, #28]
 8007650:	e002      	b.n	8007658 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007656:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765c:	69fa      	ldr	r2, [r7, #28]
 800765e:	429a      	cmp	r2, r3
 8007660:	d058      	beq.n	8007714 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	429a      	cmp	r2, r3
 800766a:	d153      	bne.n	8007714 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800766c:	4b2b      	ldr	r3, [pc, #172]	; (800771c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	429a      	cmp	r2, r3
 8007674:	d10a      	bne.n	800768c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767a:	f383 8811 	msr	BASEPRI, r3
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f3bf 8f4f 	dsb	sy
 8007686:	60bb      	str	r3, [r7, #8]
}
 8007688:	bf00      	nop
 800768a:	e7fe      	b.n	800768a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007690:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	69fa      	ldr	r2, [r7, #28]
 8007696:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	2b00      	cmp	r3, #0
 800769e:	db04      	blt.n	80076aa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	f1c3 0207 	rsb	r2, r3, #7
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	6959      	ldr	r1, [r3, #20]
 80076ae:	693a      	ldr	r2, [r7, #16]
 80076b0:	4613      	mov	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4413      	add	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	4a19      	ldr	r2, [pc, #100]	; (8007720 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80076ba:	4413      	add	r3, r2
 80076bc:	4299      	cmp	r1, r3
 80076be:	d129      	bne.n	8007714 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	3304      	adds	r3, #4
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7fe fad1 	bl	8005c6c <uxListRemove>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10a      	bne.n	80076e6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	2201      	movs	r2, #1
 80076d6:	fa02 f303 	lsl.w	r3, r2, r3
 80076da:	43da      	mvns	r2, r3
 80076dc:	4b11      	ldr	r3, [pc, #68]	; (8007724 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4013      	ands	r3, r2
 80076e2:	4a10      	ldr	r2, [pc, #64]	; (8007724 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80076e4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ea:	2201      	movs	r2, #1
 80076ec:	409a      	lsls	r2, r3
 80076ee:	4b0d      	ldr	r3, [pc, #52]	; (8007724 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	4a0b      	ldr	r2, [pc, #44]	; (8007724 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80076f6:	6013      	str	r3, [r2, #0]
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076fc:	4613      	mov	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	4413      	add	r3, r2
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	4a06      	ldr	r2, [pc, #24]	; (8007720 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007706:	441a      	add	r2, r3
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	3304      	adds	r3, #4
 800770c:	4619      	mov	r1, r3
 800770e:	4610      	mov	r0, r2
 8007710:	f7fe fa4f 	bl	8005bb2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007714:	bf00      	nop
 8007716:	3720      	adds	r7, #32
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	200002bc 	.word	0x200002bc
 8007720:	200002c0 	.word	0x200002c0
 8007724:	200003c4 	.word	0x200003c4

08007728 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007728:	b480      	push	{r7}
 800772a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800772c:	4b07      	ldr	r3, [pc, #28]	; (800774c <pvTaskIncrementMutexHeldCount+0x24>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d004      	beq.n	800773e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007734:	4b05      	ldr	r3, [pc, #20]	; (800774c <pvTaskIncrementMutexHeldCount+0x24>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800773a:	3201      	adds	r2, #1
 800773c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800773e:	4b03      	ldr	r3, [pc, #12]	; (800774c <pvTaskIncrementMutexHeldCount+0x24>)
 8007740:	681b      	ldr	r3, [r3, #0]
	}
 8007742:	4618      	mov	r0, r3
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	200002bc 	.word	0x200002bc

08007750 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800775a:	4b29      	ldr	r3, [pc, #164]	; (8007800 <prvAddCurrentTaskToDelayedList+0xb0>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007760:	4b28      	ldr	r3, [pc, #160]	; (8007804 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3304      	adds	r3, #4
 8007766:	4618      	mov	r0, r3
 8007768:	f7fe fa80 	bl	8005c6c <uxListRemove>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d10b      	bne.n	800778a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007772:	4b24      	ldr	r3, [pc, #144]	; (8007804 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007778:	2201      	movs	r2, #1
 800777a:	fa02 f303 	lsl.w	r3, r2, r3
 800777e:	43da      	mvns	r2, r3
 8007780:	4b21      	ldr	r3, [pc, #132]	; (8007808 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4013      	ands	r3, r2
 8007786:	4a20      	ldr	r2, [pc, #128]	; (8007808 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007788:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007790:	d10a      	bne.n	80077a8 <prvAddCurrentTaskToDelayedList+0x58>
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d007      	beq.n	80077a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007798:	4b1a      	ldr	r3, [pc, #104]	; (8007804 <prvAddCurrentTaskToDelayedList+0xb4>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	3304      	adds	r3, #4
 800779e:	4619      	mov	r1, r3
 80077a0:	481a      	ldr	r0, [pc, #104]	; (800780c <prvAddCurrentTaskToDelayedList+0xbc>)
 80077a2:	f7fe fa06 	bl	8005bb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80077a6:	e026      	b.n	80077f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4413      	add	r3, r2
 80077ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80077b0:	4b14      	ldr	r3, [pc, #80]	; (8007804 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d209      	bcs.n	80077d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077c0:	4b13      	ldr	r3, [pc, #76]	; (8007810 <prvAddCurrentTaskToDelayedList+0xc0>)
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	4b0f      	ldr	r3, [pc, #60]	; (8007804 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	3304      	adds	r3, #4
 80077ca:	4619      	mov	r1, r3
 80077cc:	4610      	mov	r0, r2
 80077ce:	f7fe fa14 	bl	8005bfa <vListInsert>
}
 80077d2:	e010      	b.n	80077f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077d4:	4b0f      	ldr	r3, [pc, #60]	; (8007814 <prvAddCurrentTaskToDelayedList+0xc4>)
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	4b0a      	ldr	r3, [pc, #40]	; (8007804 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3304      	adds	r3, #4
 80077de:	4619      	mov	r1, r3
 80077e0:	4610      	mov	r0, r2
 80077e2:	f7fe fa0a 	bl	8005bfa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077e6:	4b0c      	ldr	r3, [pc, #48]	; (8007818 <prvAddCurrentTaskToDelayedList+0xc8>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d202      	bcs.n	80077f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80077f0:	4a09      	ldr	r2, [pc, #36]	; (8007818 <prvAddCurrentTaskToDelayedList+0xc8>)
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	6013      	str	r3, [r2, #0]
}
 80077f6:	bf00      	nop
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	200003c0 	.word	0x200003c0
 8007804:	200002bc 	.word	0x200002bc
 8007808:	200003c4 	.word	0x200003c4
 800780c:	200003a8 	.word	0x200003a8
 8007810:	20000378 	.word	0x20000378
 8007814:	20000374 	.word	0x20000374
 8007818:	200003dc 	.word	0x200003dc

0800781c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	3b04      	subs	r3, #4
 800782c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007834:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	3b04      	subs	r3, #4
 800783a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f023 0201 	bic.w	r2, r3, #1
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	3b04      	subs	r3, #4
 800784a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800784c:	4a0c      	ldr	r2, [pc, #48]	; (8007880 <pxPortInitialiseStack+0x64>)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3b14      	subs	r3, #20
 8007856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3b04      	subs	r3, #4
 8007862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f06f 0202 	mvn.w	r2, #2
 800786a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	3b20      	subs	r3, #32
 8007870:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007872:	68fb      	ldr	r3, [r7, #12]
}
 8007874:	4618      	mov	r0, r3
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	08007885 	.word	0x08007885

08007884 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800788a:	2300      	movs	r3, #0
 800788c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800788e:	4b12      	ldr	r3, [pc, #72]	; (80078d8 <prvTaskExitError+0x54>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007896:	d00a      	beq.n	80078ae <prvTaskExitError+0x2a>
	__asm volatile
 8007898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	60fb      	str	r3, [r7, #12]
}
 80078aa:	bf00      	nop
 80078ac:	e7fe      	b.n	80078ac <prvTaskExitError+0x28>
	__asm volatile
 80078ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	60bb      	str	r3, [r7, #8]
}
 80078c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078c2:	bf00      	nop
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d0fc      	beq.n	80078c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078ca:	bf00      	nop
 80078cc:	bf00      	nop
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr
 80078d8:	2000000c 	.word	0x2000000c
 80078dc:	00000000 	.word	0x00000000

080078e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80078e0:	4b07      	ldr	r3, [pc, #28]	; (8007900 <pxCurrentTCBConst2>)
 80078e2:	6819      	ldr	r1, [r3, #0]
 80078e4:	6808      	ldr	r0, [r1, #0]
 80078e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ea:	f380 8809 	msr	PSP, r0
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	f04f 0000 	mov.w	r0, #0
 80078f6:	f380 8811 	msr	BASEPRI, r0
 80078fa:	4770      	bx	lr
 80078fc:	f3af 8000 	nop.w

08007900 <pxCurrentTCBConst2>:
 8007900:	200002bc 	.word	0x200002bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007904:	bf00      	nop
 8007906:	bf00      	nop

08007908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007908:	4808      	ldr	r0, [pc, #32]	; (800792c <prvPortStartFirstTask+0x24>)
 800790a:	6800      	ldr	r0, [r0, #0]
 800790c:	6800      	ldr	r0, [r0, #0]
 800790e:	f380 8808 	msr	MSP, r0
 8007912:	f04f 0000 	mov.w	r0, #0
 8007916:	f380 8814 	msr	CONTROL, r0
 800791a:	b662      	cpsie	i
 800791c:	b661      	cpsie	f
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	f3bf 8f6f 	isb	sy
 8007926:	df00      	svc	0
 8007928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800792a:	bf00      	nop
 800792c:	e000ed08 	.word	0xe000ed08

08007930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007936:	4b46      	ldr	r3, [pc, #280]	; (8007a50 <xPortStartScheduler+0x120>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a46      	ldr	r2, [pc, #280]	; (8007a54 <xPortStartScheduler+0x124>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d10a      	bne.n	8007956 <xPortStartScheduler+0x26>
	__asm volatile
 8007940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	613b      	str	r3, [r7, #16]
}
 8007952:	bf00      	nop
 8007954:	e7fe      	b.n	8007954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007956:	4b3e      	ldr	r3, [pc, #248]	; (8007a50 <xPortStartScheduler+0x120>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a3f      	ldr	r2, [pc, #252]	; (8007a58 <xPortStartScheduler+0x128>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d10a      	bne.n	8007976 <xPortStartScheduler+0x46>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	60fb      	str	r3, [r7, #12]
}
 8007972:	bf00      	nop
 8007974:	e7fe      	b.n	8007974 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007976:	4b39      	ldr	r3, [pc, #228]	; (8007a5c <xPortStartScheduler+0x12c>)
 8007978:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	b2db      	uxtb	r3, r3
 8007980:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	22ff      	movs	r2, #255	; 0xff
 8007986:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	b2db      	uxtb	r3, r3
 800798e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007990:	78fb      	ldrb	r3, [r7, #3]
 8007992:	b2db      	uxtb	r3, r3
 8007994:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007998:	b2da      	uxtb	r2, r3
 800799a:	4b31      	ldr	r3, [pc, #196]	; (8007a60 <xPortStartScheduler+0x130>)
 800799c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800799e:	4b31      	ldr	r3, [pc, #196]	; (8007a64 <xPortStartScheduler+0x134>)
 80079a0:	2207      	movs	r2, #7
 80079a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079a4:	e009      	b.n	80079ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80079a6:	4b2f      	ldr	r3, [pc, #188]	; (8007a64 <xPortStartScheduler+0x134>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	3b01      	subs	r3, #1
 80079ac:	4a2d      	ldr	r2, [pc, #180]	; (8007a64 <xPortStartScheduler+0x134>)
 80079ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079b0:	78fb      	ldrb	r3, [r7, #3]
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	005b      	lsls	r3, r3, #1
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079ba:	78fb      	ldrb	r3, [r7, #3]
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c2:	2b80      	cmp	r3, #128	; 0x80
 80079c4:	d0ef      	beq.n	80079a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079c6:	4b27      	ldr	r3, [pc, #156]	; (8007a64 <xPortStartScheduler+0x134>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f1c3 0307 	rsb	r3, r3, #7
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	d00a      	beq.n	80079e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80079d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	60bb      	str	r3, [r7, #8]
}
 80079e4:	bf00      	nop
 80079e6:	e7fe      	b.n	80079e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079e8:	4b1e      	ldr	r3, [pc, #120]	; (8007a64 <xPortStartScheduler+0x134>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	021b      	lsls	r3, r3, #8
 80079ee:	4a1d      	ldr	r2, [pc, #116]	; (8007a64 <xPortStartScheduler+0x134>)
 80079f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079f2:	4b1c      	ldr	r3, [pc, #112]	; (8007a64 <xPortStartScheduler+0x134>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079fa:	4a1a      	ldr	r2, [pc, #104]	; (8007a64 <xPortStartScheduler+0x134>)
 80079fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a06:	4b18      	ldr	r3, [pc, #96]	; (8007a68 <xPortStartScheduler+0x138>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a17      	ldr	r2, [pc, #92]	; (8007a68 <xPortStartScheduler+0x138>)
 8007a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a12:	4b15      	ldr	r3, [pc, #84]	; (8007a68 <xPortStartScheduler+0x138>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a14      	ldr	r2, [pc, #80]	; (8007a68 <xPortStartScheduler+0x138>)
 8007a18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a1e:	f000 f8dd 	bl	8007bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a22:	4b12      	ldr	r3, [pc, #72]	; (8007a6c <xPortStartScheduler+0x13c>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a28:	f000 f8fc 	bl	8007c24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a2c:	4b10      	ldr	r3, [pc, #64]	; (8007a70 <xPortStartScheduler+0x140>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a0f      	ldr	r2, [pc, #60]	; (8007a70 <xPortStartScheduler+0x140>)
 8007a32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a38:	f7ff ff66 	bl	8007908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a3c:	f7ff fa90 	bl	8006f60 <vTaskSwitchContext>
	prvTaskExitError();
 8007a40:	f7ff ff20 	bl	8007884 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	e000ed00 	.word	0xe000ed00
 8007a54:	410fc271 	.word	0x410fc271
 8007a58:	410fc270 	.word	0x410fc270
 8007a5c:	e000e400 	.word	0xe000e400
 8007a60:	200003e8 	.word	0x200003e8
 8007a64:	200003ec 	.word	0x200003ec
 8007a68:	e000ed20 	.word	0xe000ed20
 8007a6c:	2000000c 	.word	0x2000000c
 8007a70:	e000ef34 	.word	0xe000ef34

08007a74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
	__asm volatile
 8007a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7e:	f383 8811 	msr	BASEPRI, r3
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	607b      	str	r3, [r7, #4]
}
 8007a8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a8e:	4b0f      	ldr	r3, [pc, #60]	; (8007acc <vPortEnterCritical+0x58>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3301      	adds	r3, #1
 8007a94:	4a0d      	ldr	r2, [pc, #52]	; (8007acc <vPortEnterCritical+0x58>)
 8007a96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a98:	4b0c      	ldr	r3, [pc, #48]	; (8007acc <vPortEnterCritical+0x58>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d10f      	bne.n	8007ac0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007aa0:	4b0b      	ldr	r3, [pc, #44]	; (8007ad0 <vPortEnterCritical+0x5c>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00a      	beq.n	8007ac0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aae:	f383 8811 	msr	BASEPRI, r3
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	f3bf 8f4f 	dsb	sy
 8007aba:	603b      	str	r3, [r7, #0]
}
 8007abc:	bf00      	nop
 8007abe:	e7fe      	b.n	8007abe <vPortEnterCritical+0x4a>
	}
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr
 8007acc:	2000000c 	.word	0x2000000c
 8007ad0:	e000ed04 	.word	0xe000ed04

08007ad4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007ada:	4b12      	ldr	r3, [pc, #72]	; (8007b24 <vPortExitCritical+0x50>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10a      	bne.n	8007af8 <vPortExitCritical+0x24>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	607b      	str	r3, [r7, #4]
}
 8007af4:	bf00      	nop
 8007af6:	e7fe      	b.n	8007af6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007af8:	4b0a      	ldr	r3, [pc, #40]	; (8007b24 <vPortExitCritical+0x50>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3b01      	subs	r3, #1
 8007afe:	4a09      	ldr	r2, [pc, #36]	; (8007b24 <vPortExitCritical+0x50>)
 8007b00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b02:	4b08      	ldr	r3, [pc, #32]	; (8007b24 <vPortExitCritical+0x50>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d105      	bne.n	8007b16 <vPortExitCritical+0x42>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	f383 8811 	msr	BASEPRI, r3
}
 8007b14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b16:	bf00      	nop
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	2000000c 	.word	0x2000000c
	...

08007b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b30:	f3ef 8009 	mrs	r0, PSP
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	4b15      	ldr	r3, [pc, #84]	; (8007b90 <pxCurrentTCBConst>)
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	f01e 0f10 	tst.w	lr, #16
 8007b40:	bf08      	it	eq
 8007b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b4a:	6010      	str	r0, [r2, #0]
 8007b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b54:	f380 8811 	msr	BASEPRI, r0
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f7ff f9fe 	bl	8006f60 <vTaskSwitchContext>
 8007b64:	f04f 0000 	mov.w	r0, #0
 8007b68:	f380 8811 	msr	BASEPRI, r0
 8007b6c:	bc09      	pop	{r0, r3}
 8007b6e:	6819      	ldr	r1, [r3, #0]
 8007b70:	6808      	ldr	r0, [r1, #0]
 8007b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b76:	f01e 0f10 	tst.w	lr, #16
 8007b7a:	bf08      	it	eq
 8007b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b80:	f380 8809 	msr	PSP, r0
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	f3af 8000 	nop.w

08007b90 <pxCurrentTCBConst>:
 8007b90:	200002bc 	.word	0x200002bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b94:	bf00      	nop
 8007b96:	bf00      	nop

08007b98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	607b      	str	r3, [r7, #4]
}
 8007bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007bb2:	f7ff f91d 	bl	8006df0 <xTaskIncrementTick>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d003      	beq.n	8007bc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007bbc:	4b06      	ldr	r3, [pc, #24]	; (8007bd8 <SysTick_Handler+0x40>)
 8007bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	f383 8811 	msr	BASEPRI, r3
}
 8007bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007bd0:	bf00      	nop
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	e000ed04 	.word	0xe000ed04

08007bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007bdc:	b480      	push	{r7}
 8007bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007be0:	4b0b      	ldr	r3, [pc, #44]	; (8007c10 <vPortSetupTimerInterrupt+0x34>)
 8007be2:	2200      	movs	r2, #0
 8007be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007be6:	4b0b      	ldr	r3, [pc, #44]	; (8007c14 <vPortSetupTimerInterrupt+0x38>)
 8007be8:	2200      	movs	r2, #0
 8007bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007bec:	4b0a      	ldr	r3, [pc, #40]	; (8007c18 <vPortSetupTimerInterrupt+0x3c>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a0a      	ldr	r2, [pc, #40]	; (8007c1c <vPortSetupTimerInterrupt+0x40>)
 8007bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf6:	099b      	lsrs	r3, r3, #6
 8007bf8:	4a09      	ldr	r2, [pc, #36]	; (8007c20 <vPortSetupTimerInterrupt+0x44>)
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007bfe:	4b04      	ldr	r3, [pc, #16]	; (8007c10 <vPortSetupTimerInterrupt+0x34>)
 8007c00:	2207      	movs	r2, #7
 8007c02:	601a      	str	r2, [r3, #0]
}
 8007c04:	bf00      	nop
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	e000e010 	.word	0xe000e010
 8007c14:	e000e018 	.word	0xe000e018
 8007c18:	20000000 	.word	0x20000000
 8007c1c:	10624dd3 	.word	0x10624dd3
 8007c20:	e000e014 	.word	0xe000e014

08007c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c34 <vPortEnableVFP+0x10>
 8007c28:	6801      	ldr	r1, [r0, #0]
 8007c2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c2e:	6001      	str	r1, [r0, #0]
 8007c30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c32:	bf00      	nop
 8007c34:	e000ed88 	.word	0xe000ed88

08007c38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c3e:	f3ef 8305 	mrs	r3, IPSR
 8007c42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2b0f      	cmp	r3, #15
 8007c48:	d914      	bls.n	8007c74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c4a:	4a17      	ldr	r2, [pc, #92]	; (8007ca8 <vPortValidateInterruptPriority+0x70>)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	4413      	add	r3, r2
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c54:	4b15      	ldr	r3, [pc, #84]	; (8007cac <vPortValidateInterruptPriority+0x74>)
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	7afa      	ldrb	r2, [r7, #11]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d20a      	bcs.n	8007c74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	607b      	str	r3, [r7, #4]
}
 8007c70:	bf00      	nop
 8007c72:	e7fe      	b.n	8007c72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c74:	4b0e      	ldr	r3, [pc, #56]	; (8007cb0 <vPortValidateInterruptPriority+0x78>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c7c:	4b0d      	ldr	r3, [pc, #52]	; (8007cb4 <vPortValidateInterruptPriority+0x7c>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d90a      	bls.n	8007c9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c88:	f383 8811 	msr	BASEPRI, r3
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	f3bf 8f4f 	dsb	sy
 8007c94:	603b      	str	r3, [r7, #0]
}
 8007c96:	bf00      	nop
 8007c98:	e7fe      	b.n	8007c98 <vPortValidateInterruptPriority+0x60>
	}
 8007c9a:	bf00      	nop
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	e000e3f0 	.word	0xe000e3f0
 8007cac:	200003e8 	.word	0x200003e8
 8007cb0:	e000ed0c 	.word	0xe000ed0c
 8007cb4:	200003ec 	.word	0x200003ec

08007cb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b08a      	sub	sp, #40	; 0x28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007cc4:	f7fe ffea 	bl	8006c9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007cc8:	4b5b      	ldr	r3, [pc, #364]	; (8007e38 <pvPortMalloc+0x180>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d101      	bne.n	8007cd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007cd0:	f000 f920 	bl	8007f14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007cd4:	4b59      	ldr	r3, [pc, #356]	; (8007e3c <pvPortMalloc+0x184>)
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4013      	ands	r3, r2
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f040 8093 	bne.w	8007e08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d01d      	beq.n	8007d24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007ce8:	2208      	movs	r2, #8
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4413      	add	r3, r2
 8007cee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f003 0307 	and.w	r3, r3, #7
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d014      	beq.n	8007d24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f023 0307 	bic.w	r3, r3, #7
 8007d00:	3308      	adds	r3, #8
 8007d02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f003 0307 	and.w	r3, r3, #7
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00a      	beq.n	8007d24 <pvPortMalloc+0x6c>
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	617b      	str	r3, [r7, #20]
}
 8007d20:	bf00      	nop
 8007d22:	e7fe      	b.n	8007d22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d06e      	beq.n	8007e08 <pvPortMalloc+0x150>
 8007d2a:	4b45      	ldr	r3, [pc, #276]	; (8007e40 <pvPortMalloc+0x188>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d869      	bhi.n	8007e08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d34:	4b43      	ldr	r3, [pc, #268]	; (8007e44 <pvPortMalloc+0x18c>)
 8007d36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d38:	4b42      	ldr	r3, [pc, #264]	; (8007e44 <pvPortMalloc+0x18c>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d3e:	e004      	b.n	8007d4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d903      	bls.n	8007d5c <pvPortMalloc+0xa4>
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1f1      	bne.n	8007d40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d5c:	4b36      	ldr	r3, [pc, #216]	; (8007e38 <pvPortMalloc+0x180>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d050      	beq.n	8007e08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d66:	6a3b      	ldr	r3, [r7, #32]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2208      	movs	r2, #8
 8007d6c:	4413      	add	r3, r2
 8007d6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7a:	685a      	ldr	r2, [r3, #4]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	1ad2      	subs	r2, r2, r3
 8007d80:	2308      	movs	r3, #8
 8007d82:	005b      	lsls	r3, r3, #1
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d91f      	bls.n	8007dc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	f003 0307 	and.w	r3, r3, #7
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00a      	beq.n	8007db0 <pvPortMalloc+0xf8>
	__asm volatile
 8007d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	613b      	str	r3, [r7, #16]
}
 8007dac:	bf00      	nop
 8007dae:	e7fe      	b.n	8007dae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db2:	685a      	ldr	r2, [r3, #4]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	1ad2      	subs	r2, r2, r3
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007dc2:	69b8      	ldr	r0, [r7, #24]
 8007dc4:	f000 f908 	bl	8007fd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007dc8:	4b1d      	ldr	r3, [pc, #116]	; (8007e40 <pvPortMalloc+0x188>)
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	4a1b      	ldr	r2, [pc, #108]	; (8007e40 <pvPortMalloc+0x188>)
 8007dd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007dd6:	4b1a      	ldr	r3, [pc, #104]	; (8007e40 <pvPortMalloc+0x188>)
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	4b1b      	ldr	r3, [pc, #108]	; (8007e48 <pvPortMalloc+0x190>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d203      	bcs.n	8007dea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007de2:	4b17      	ldr	r3, [pc, #92]	; (8007e40 <pvPortMalloc+0x188>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a18      	ldr	r2, [pc, #96]	; (8007e48 <pvPortMalloc+0x190>)
 8007de8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dec:	685a      	ldr	r2, [r3, #4]
 8007dee:	4b13      	ldr	r3, [pc, #76]	; (8007e3c <pvPortMalloc+0x184>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	431a      	orrs	r2, r3
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007dfe:	4b13      	ldr	r3, [pc, #76]	; (8007e4c <pvPortMalloc+0x194>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3301      	adds	r3, #1
 8007e04:	4a11      	ldr	r2, [pc, #68]	; (8007e4c <pvPortMalloc+0x194>)
 8007e06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e08:	f7fe ff56 	bl	8006cb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	f003 0307 	and.w	r3, r3, #7
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00a      	beq.n	8007e2c <pvPortMalloc+0x174>
	__asm volatile
 8007e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1a:	f383 8811 	msr	BASEPRI, r3
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f3bf 8f4f 	dsb	sy
 8007e26:	60fb      	str	r3, [r7, #12]
}
 8007e28:	bf00      	nop
 8007e2a:	e7fe      	b.n	8007e2a <pvPortMalloc+0x172>
	return pvReturn;
 8007e2c:	69fb      	ldr	r3, [r7, #28]
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3728      	adds	r7, #40	; 0x28
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	20003ff8 	.word	0x20003ff8
 8007e3c:	2000400c 	.word	0x2000400c
 8007e40:	20003ffc 	.word	0x20003ffc
 8007e44:	20003ff0 	.word	0x20003ff0
 8007e48:	20004000 	.word	0x20004000
 8007e4c:	20004004 	.word	0x20004004

08007e50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d04d      	beq.n	8007efe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e62:	2308      	movs	r3, #8
 8007e64:	425b      	negs	r3, r3
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	4413      	add	r3, r2
 8007e6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	4b24      	ldr	r3, [pc, #144]	; (8007f08 <vPortFree+0xb8>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4013      	ands	r3, r2
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10a      	bne.n	8007e94 <vPortFree+0x44>
	__asm volatile
 8007e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e82:	f383 8811 	msr	BASEPRI, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	60fb      	str	r3, [r7, #12]
}
 8007e90:	bf00      	nop
 8007e92:	e7fe      	b.n	8007e92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00a      	beq.n	8007eb2 <vPortFree+0x62>
	__asm volatile
 8007e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea0:	f383 8811 	msr	BASEPRI, r3
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	60bb      	str	r3, [r7, #8]
}
 8007eae:	bf00      	nop
 8007eb0:	e7fe      	b.n	8007eb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	4b14      	ldr	r3, [pc, #80]	; (8007f08 <vPortFree+0xb8>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4013      	ands	r3, r2
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d01e      	beq.n	8007efe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d11a      	bne.n	8007efe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	4b0e      	ldr	r3, [pc, #56]	; (8007f08 <vPortFree+0xb8>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	43db      	mvns	r3, r3
 8007ed2:	401a      	ands	r2, r3
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ed8:	f7fe fee0 	bl	8006c9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	4b0a      	ldr	r3, [pc, #40]	; (8007f0c <vPortFree+0xbc>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	4a09      	ldr	r2, [pc, #36]	; (8007f0c <vPortFree+0xbc>)
 8007ee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007eea:	6938      	ldr	r0, [r7, #16]
 8007eec:	f000 f874 	bl	8007fd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ef0:	4b07      	ldr	r3, [pc, #28]	; (8007f10 <vPortFree+0xc0>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	4a06      	ldr	r2, [pc, #24]	; (8007f10 <vPortFree+0xc0>)
 8007ef8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007efa:	f7fe fedd 	bl	8006cb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007efe:	bf00      	nop
 8007f00:	3718      	adds	r7, #24
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	2000400c 	.word	0x2000400c
 8007f0c:	20003ffc 	.word	0x20003ffc
 8007f10:	20004008 	.word	0x20004008

08007f14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007f1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f20:	4b27      	ldr	r3, [pc, #156]	; (8007fc0 <prvHeapInit+0xac>)
 8007f22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f003 0307 	and.w	r3, r3, #7
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00c      	beq.n	8007f48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	3307      	adds	r3, #7
 8007f32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f023 0307 	bic.w	r3, r3, #7
 8007f3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	4a1f      	ldr	r2, [pc, #124]	; (8007fc0 <prvHeapInit+0xac>)
 8007f44:	4413      	add	r3, r2
 8007f46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f4c:	4a1d      	ldr	r2, [pc, #116]	; (8007fc4 <prvHeapInit+0xb0>)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f52:	4b1c      	ldr	r3, [pc, #112]	; (8007fc4 <prvHeapInit+0xb0>)
 8007f54:	2200      	movs	r2, #0
 8007f56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f60:	2208      	movs	r2, #8
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	1a9b      	subs	r3, r3, r2
 8007f66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f023 0307 	bic.w	r3, r3, #7
 8007f6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	4a15      	ldr	r2, [pc, #84]	; (8007fc8 <prvHeapInit+0xb4>)
 8007f74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f76:	4b14      	ldr	r3, [pc, #80]	; (8007fc8 <prvHeapInit+0xb4>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f7e:	4b12      	ldr	r3, [pc, #72]	; (8007fc8 <prvHeapInit+0xb4>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2200      	movs	r2, #0
 8007f84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	1ad2      	subs	r2, r2, r3
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f94:	4b0c      	ldr	r3, [pc, #48]	; (8007fc8 <prvHeapInit+0xb4>)
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	4a0a      	ldr	r2, [pc, #40]	; (8007fcc <prvHeapInit+0xb8>)
 8007fa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	4a09      	ldr	r2, [pc, #36]	; (8007fd0 <prvHeapInit+0xbc>)
 8007faa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007fac:	4b09      	ldr	r3, [pc, #36]	; (8007fd4 <prvHeapInit+0xc0>)
 8007fae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007fb2:	601a      	str	r2, [r3, #0]
}
 8007fb4:	bf00      	nop
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr
 8007fc0:	200003f0 	.word	0x200003f0
 8007fc4:	20003ff0 	.word	0x20003ff0
 8007fc8:	20003ff8 	.word	0x20003ff8
 8007fcc:	20004000 	.word	0x20004000
 8007fd0:	20003ffc 	.word	0x20003ffc
 8007fd4:	2000400c 	.word	0x2000400c

08007fd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007fe0:	4b28      	ldr	r3, [pc, #160]	; (8008084 <prvInsertBlockIntoFreeList+0xac>)
 8007fe2:	60fb      	str	r3, [r7, #12]
 8007fe4:	e002      	b.n	8007fec <prvInsertBlockIntoFreeList+0x14>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	60fb      	str	r3, [r7, #12]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d8f7      	bhi.n	8007fe6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	4413      	add	r3, r2
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	429a      	cmp	r2, r3
 8008006:	d108      	bne.n	800801a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	441a      	add	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	441a      	add	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	429a      	cmp	r2, r3
 800802c:	d118      	bne.n	8008060 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	4b15      	ldr	r3, [pc, #84]	; (8008088 <prvInsertBlockIntoFreeList+0xb0>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	429a      	cmp	r2, r3
 8008038:	d00d      	beq.n	8008056 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	685a      	ldr	r2, [r3, #4]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	441a      	add	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	601a      	str	r2, [r3, #0]
 8008054:	e008      	b.n	8008068 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008056:	4b0c      	ldr	r3, [pc, #48]	; (8008088 <prvInsertBlockIntoFreeList+0xb0>)
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	601a      	str	r2, [r3, #0]
 800805e:	e003      	b.n	8008068 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	429a      	cmp	r2, r3
 800806e:	d002      	beq.n	8008076 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008076:	bf00      	nop
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	20003ff0 	.word	0x20003ff0
 8008088:	20003ff8 	.word	0x20003ff8

0800808c <__libc_init_array>:
 800808c:	b570      	push	{r4, r5, r6, lr}
 800808e:	4d0d      	ldr	r5, [pc, #52]	; (80080c4 <__libc_init_array+0x38>)
 8008090:	4c0d      	ldr	r4, [pc, #52]	; (80080c8 <__libc_init_array+0x3c>)
 8008092:	1b64      	subs	r4, r4, r5
 8008094:	10a4      	asrs	r4, r4, #2
 8008096:	2600      	movs	r6, #0
 8008098:	42a6      	cmp	r6, r4
 800809a:	d109      	bne.n	80080b0 <__libc_init_array+0x24>
 800809c:	4d0b      	ldr	r5, [pc, #44]	; (80080cc <__libc_init_array+0x40>)
 800809e:	4c0c      	ldr	r4, [pc, #48]	; (80080d0 <__libc_init_array+0x44>)
 80080a0:	f000 f82e 	bl	8008100 <_init>
 80080a4:	1b64      	subs	r4, r4, r5
 80080a6:	10a4      	asrs	r4, r4, #2
 80080a8:	2600      	movs	r6, #0
 80080aa:	42a6      	cmp	r6, r4
 80080ac:	d105      	bne.n	80080ba <__libc_init_array+0x2e>
 80080ae:	bd70      	pop	{r4, r5, r6, pc}
 80080b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080b4:	4798      	blx	r3
 80080b6:	3601      	adds	r6, #1
 80080b8:	e7ee      	b.n	8008098 <__libc_init_array+0xc>
 80080ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80080be:	4798      	blx	r3
 80080c0:	3601      	adds	r6, #1
 80080c2:	e7f2      	b.n	80080aa <__libc_init_array+0x1e>
 80080c4:	08008248 	.word	0x08008248
 80080c8:	08008248 	.word	0x08008248
 80080cc:	08008248 	.word	0x08008248
 80080d0:	0800824c 	.word	0x0800824c

080080d4 <memcpy>:
 80080d4:	440a      	add	r2, r1
 80080d6:	4291      	cmp	r1, r2
 80080d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80080dc:	d100      	bne.n	80080e0 <memcpy+0xc>
 80080de:	4770      	bx	lr
 80080e0:	b510      	push	{r4, lr}
 80080e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080ea:	4291      	cmp	r1, r2
 80080ec:	d1f9      	bne.n	80080e2 <memcpy+0xe>
 80080ee:	bd10      	pop	{r4, pc}

080080f0 <memset>:
 80080f0:	4402      	add	r2, r0
 80080f2:	4603      	mov	r3, r0
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d100      	bne.n	80080fa <memset+0xa>
 80080f8:	4770      	bx	lr
 80080fa:	f803 1b01 	strb.w	r1, [r3], #1
 80080fe:	e7f9      	b.n	80080f4 <memset+0x4>

08008100 <_init>:
 8008100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008102:	bf00      	nop
 8008104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008106:	bc08      	pop	{r3}
 8008108:	469e      	mov	lr, r3
 800810a:	4770      	bx	lr

0800810c <_fini>:
 800810c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800810e:	bf00      	nop
 8008110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008112:	bc08      	pop	{r3}
 8008114:	469e      	mov	lr, r3
 8008116:	4770      	bx	lr
