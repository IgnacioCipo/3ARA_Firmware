
3ARA-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008158  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080082e8  080082e8  000182e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008410  08008410  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008410  08008410  00018410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008418  08008418  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008418  08008418  00018418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800841c  0800841c  0001841c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004284  20000010  08008430  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004294  08008430  00024294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029a65  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000515d  00000000  00000000  00049aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  0004ec08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001540  00000000  00000000  00050318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d59  00000000  00000000  00051858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ef7d  00000000  00000000  000795b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9786  00000000  00000000  0009852e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00171cb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005eec  00000000  00000000  00171d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080082d0 	.word	0x080082d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080082d0 	.word	0x080082d0

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b96e 	b.w	8000d00 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	4604      	mov	r4, r0
 8000a44:	468c      	mov	ip, r1
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f040 8083 	bne.w	8000b52 <__udivmoddi4+0x116>
 8000a4c:	428a      	cmp	r2, r1
 8000a4e:	4617      	mov	r7, r2
 8000a50:	d947      	bls.n	8000ae2 <__udivmoddi4+0xa6>
 8000a52:	fab2 f282 	clz	r2, r2
 8000a56:	b142      	cbz	r2, 8000a6a <__udivmoddi4+0x2e>
 8000a58:	f1c2 0020 	rsb	r0, r2, #32
 8000a5c:	fa24 f000 	lsr.w	r0, r4, r0
 8000a60:	4091      	lsls	r1, r2
 8000a62:	4097      	lsls	r7, r2
 8000a64:	ea40 0c01 	orr.w	ip, r0, r1
 8000a68:	4094      	lsls	r4, r2
 8000a6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a6e:	0c23      	lsrs	r3, r4, #16
 8000a70:	fbbc f6f8 	udiv	r6, ip, r8
 8000a74:	fa1f fe87 	uxth.w	lr, r7
 8000a78:	fb08 c116 	mls	r1, r8, r6, ip
 8000a7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a80:	fb06 f10e 	mul.w	r1, r6, lr
 8000a84:	4299      	cmp	r1, r3
 8000a86:	d909      	bls.n	8000a9c <__udivmoddi4+0x60>
 8000a88:	18fb      	adds	r3, r7, r3
 8000a8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a8e:	f080 8119 	bcs.w	8000cc4 <__udivmoddi4+0x288>
 8000a92:	4299      	cmp	r1, r3
 8000a94:	f240 8116 	bls.w	8000cc4 <__udivmoddi4+0x288>
 8000a98:	3e02      	subs	r6, #2
 8000a9a:	443b      	add	r3, r7
 8000a9c:	1a5b      	subs	r3, r3, r1
 8000a9e:	b2a4      	uxth	r4, r4
 8000aa0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa4:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ab0:	45a6      	cmp	lr, r4
 8000ab2:	d909      	bls.n	8000ac8 <__udivmoddi4+0x8c>
 8000ab4:	193c      	adds	r4, r7, r4
 8000ab6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aba:	f080 8105 	bcs.w	8000cc8 <__udivmoddi4+0x28c>
 8000abe:	45a6      	cmp	lr, r4
 8000ac0:	f240 8102 	bls.w	8000cc8 <__udivmoddi4+0x28c>
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	443c      	add	r4, r7
 8000ac8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000acc:	eba4 040e 	sub.w	r4, r4, lr
 8000ad0:	2600      	movs	r6, #0
 8000ad2:	b11d      	cbz	r5, 8000adc <__udivmoddi4+0xa0>
 8000ad4:	40d4      	lsrs	r4, r2
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e9c5 4300 	strd	r4, r3, [r5]
 8000adc:	4631      	mov	r1, r6
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	b902      	cbnz	r2, 8000ae6 <__udivmoddi4+0xaa>
 8000ae4:	deff      	udf	#255	; 0xff
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	2a00      	cmp	r2, #0
 8000aec:	d150      	bne.n	8000b90 <__udivmoddi4+0x154>
 8000aee:	1bcb      	subs	r3, r1, r7
 8000af0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af4:	fa1f f887 	uxth.w	r8, r7
 8000af8:	2601      	movs	r6, #1
 8000afa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000afe:	0c21      	lsrs	r1, r4, #16
 8000b00:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b08:	fb08 f30c 	mul.w	r3, r8, ip
 8000b0c:	428b      	cmp	r3, r1
 8000b0e:	d907      	bls.n	8000b20 <__udivmoddi4+0xe4>
 8000b10:	1879      	adds	r1, r7, r1
 8000b12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0xe2>
 8000b18:	428b      	cmp	r3, r1
 8000b1a:	f200 80e9 	bhi.w	8000cf0 <__udivmoddi4+0x2b4>
 8000b1e:	4684      	mov	ip, r0
 8000b20:	1ac9      	subs	r1, r1, r3
 8000b22:	b2a3      	uxth	r3, r4
 8000b24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b28:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b2c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b30:	fb08 f800 	mul.w	r8, r8, r0
 8000b34:	45a0      	cmp	r8, r4
 8000b36:	d907      	bls.n	8000b48 <__udivmoddi4+0x10c>
 8000b38:	193c      	adds	r4, r7, r4
 8000b3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x10a>
 8000b40:	45a0      	cmp	r8, r4
 8000b42:	f200 80d9 	bhi.w	8000cf8 <__udivmoddi4+0x2bc>
 8000b46:	4618      	mov	r0, r3
 8000b48:	eba4 0408 	sub.w	r4, r4, r8
 8000b4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b50:	e7bf      	b.n	8000ad2 <__udivmoddi4+0x96>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d909      	bls.n	8000b6a <__udivmoddi4+0x12e>
 8000b56:	2d00      	cmp	r5, #0
 8000b58:	f000 80b1 	beq.w	8000cbe <__udivmoddi4+0x282>
 8000b5c:	2600      	movs	r6, #0
 8000b5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000b62:	4630      	mov	r0, r6
 8000b64:	4631      	mov	r1, r6
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	fab3 f683 	clz	r6, r3
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	d14a      	bne.n	8000c08 <__udivmoddi4+0x1cc>
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d302      	bcc.n	8000b7c <__udivmoddi4+0x140>
 8000b76:	4282      	cmp	r2, r0
 8000b78:	f200 80b8 	bhi.w	8000cec <__udivmoddi4+0x2b0>
 8000b7c:	1a84      	subs	r4, r0, r2
 8000b7e:	eb61 0103 	sbc.w	r1, r1, r3
 8000b82:	2001      	movs	r0, #1
 8000b84:	468c      	mov	ip, r1
 8000b86:	2d00      	cmp	r5, #0
 8000b88:	d0a8      	beq.n	8000adc <__udivmoddi4+0xa0>
 8000b8a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b8e:	e7a5      	b.n	8000adc <__udivmoddi4+0xa0>
 8000b90:	f1c2 0320 	rsb	r3, r2, #32
 8000b94:	fa20 f603 	lsr.w	r6, r0, r3
 8000b98:	4097      	lsls	r7, r2
 8000b9a:	fa01 f002 	lsl.w	r0, r1, r2
 8000b9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba2:	40d9      	lsrs	r1, r3
 8000ba4:	4330      	orrs	r0, r6
 8000ba6:	0c03      	lsrs	r3, r0, #16
 8000ba8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bac:	fa1f f887 	uxth.w	r8, r7
 8000bb0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb8:	fb06 f108 	mul.w	r1, r6, r8
 8000bbc:	4299      	cmp	r1, r3
 8000bbe:	fa04 f402 	lsl.w	r4, r4, r2
 8000bc2:	d909      	bls.n	8000bd8 <__udivmoddi4+0x19c>
 8000bc4:	18fb      	adds	r3, r7, r3
 8000bc6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bca:	f080 808d 	bcs.w	8000ce8 <__udivmoddi4+0x2ac>
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	f240 808a 	bls.w	8000ce8 <__udivmoddi4+0x2ac>
 8000bd4:	3e02      	subs	r6, #2
 8000bd6:	443b      	add	r3, r7
 8000bd8:	1a5b      	subs	r3, r3, r1
 8000bda:	b281      	uxth	r1, r0
 8000bdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000be0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000be4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be8:	fb00 f308 	mul.w	r3, r0, r8
 8000bec:	428b      	cmp	r3, r1
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x1c4>
 8000bf0:	1879      	adds	r1, r7, r1
 8000bf2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bf6:	d273      	bcs.n	8000ce0 <__udivmoddi4+0x2a4>
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	d971      	bls.n	8000ce0 <__udivmoddi4+0x2a4>
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	4439      	add	r1, r7
 8000c00:	1acb      	subs	r3, r1, r3
 8000c02:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c06:	e778      	b.n	8000afa <__udivmoddi4+0xbe>
 8000c08:	f1c6 0c20 	rsb	ip, r6, #32
 8000c0c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c10:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c14:	431c      	orrs	r4, r3
 8000c16:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c1e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c22:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c26:	431f      	orrs	r7, r3
 8000c28:	0c3b      	lsrs	r3, r7, #16
 8000c2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c2e:	fa1f f884 	uxth.w	r8, r4
 8000c32:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c36:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c3a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c3e:	458a      	cmp	sl, r1
 8000c40:	fa02 f206 	lsl.w	r2, r2, r6
 8000c44:	fa00 f306 	lsl.w	r3, r0, r6
 8000c48:	d908      	bls.n	8000c5c <__udivmoddi4+0x220>
 8000c4a:	1861      	adds	r1, r4, r1
 8000c4c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c50:	d248      	bcs.n	8000ce4 <__udivmoddi4+0x2a8>
 8000c52:	458a      	cmp	sl, r1
 8000c54:	d946      	bls.n	8000ce4 <__udivmoddi4+0x2a8>
 8000c56:	f1a9 0902 	sub.w	r9, r9, #2
 8000c5a:	4421      	add	r1, r4
 8000c5c:	eba1 010a 	sub.w	r1, r1, sl
 8000c60:	b2bf      	uxth	r7, r7
 8000c62:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c66:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c6a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c6e:	fb00 f808 	mul.w	r8, r0, r8
 8000c72:	45b8      	cmp	r8, r7
 8000c74:	d907      	bls.n	8000c86 <__udivmoddi4+0x24a>
 8000c76:	19e7      	adds	r7, r4, r7
 8000c78:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7c:	d22e      	bcs.n	8000cdc <__udivmoddi4+0x2a0>
 8000c7e:	45b8      	cmp	r8, r7
 8000c80:	d92c      	bls.n	8000cdc <__udivmoddi4+0x2a0>
 8000c82:	3802      	subs	r0, #2
 8000c84:	4427      	add	r7, r4
 8000c86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c8a:	eba7 0708 	sub.w	r7, r7, r8
 8000c8e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c92:	454f      	cmp	r7, r9
 8000c94:	46c6      	mov	lr, r8
 8000c96:	4649      	mov	r1, r9
 8000c98:	d31a      	bcc.n	8000cd0 <__udivmoddi4+0x294>
 8000c9a:	d017      	beq.n	8000ccc <__udivmoddi4+0x290>
 8000c9c:	b15d      	cbz	r5, 8000cb6 <__udivmoddi4+0x27a>
 8000c9e:	ebb3 020e 	subs.w	r2, r3, lr
 8000ca2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ca6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000caa:	40f2      	lsrs	r2, r6
 8000cac:	ea4c 0202 	orr.w	r2, ip, r2
 8000cb0:	40f7      	lsrs	r7, r6
 8000cb2:	e9c5 2700 	strd	r2, r7, [r5]
 8000cb6:	2600      	movs	r6, #0
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	462e      	mov	r6, r5
 8000cc0:	4628      	mov	r0, r5
 8000cc2:	e70b      	b.n	8000adc <__udivmoddi4+0xa0>
 8000cc4:	4606      	mov	r6, r0
 8000cc6:	e6e9      	b.n	8000a9c <__udivmoddi4+0x60>
 8000cc8:	4618      	mov	r0, r3
 8000cca:	e6fd      	b.n	8000ac8 <__udivmoddi4+0x8c>
 8000ccc:	4543      	cmp	r3, r8
 8000cce:	d2e5      	bcs.n	8000c9c <__udivmoddi4+0x260>
 8000cd0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cd4:	eb69 0104 	sbc.w	r1, r9, r4
 8000cd8:	3801      	subs	r0, #1
 8000cda:	e7df      	b.n	8000c9c <__udivmoddi4+0x260>
 8000cdc:	4608      	mov	r0, r1
 8000cde:	e7d2      	b.n	8000c86 <__udivmoddi4+0x24a>
 8000ce0:	4660      	mov	r0, ip
 8000ce2:	e78d      	b.n	8000c00 <__udivmoddi4+0x1c4>
 8000ce4:	4681      	mov	r9, r0
 8000ce6:	e7b9      	b.n	8000c5c <__udivmoddi4+0x220>
 8000ce8:	4666      	mov	r6, ip
 8000cea:	e775      	b.n	8000bd8 <__udivmoddi4+0x19c>
 8000cec:	4630      	mov	r0, r6
 8000cee:	e74a      	b.n	8000b86 <__udivmoddi4+0x14a>
 8000cf0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cf4:	4439      	add	r1, r7
 8000cf6:	e713      	b.n	8000b20 <__udivmoddi4+0xe4>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	443c      	add	r4, r7
 8000cfc:	e724      	b.n	8000b48 <__udivmoddi4+0x10c>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <robotInfoInit>:
 *      Author: Ignacio
 */

#include "3ARAInfo.h"

void robotInfoInit(RobotInfoHandler *info_handler, osMutexId *mutex){
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
	info_handler->mutexHandler = mutex;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	683a      	ldr	r2, [r7, #0]
 8000d12:	611a      	str	r2, [r3, #16]
	info_handler->angle_1 = 0;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f04f 0200 	mov.w	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
	info_handler->angle_2 = 0;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f04f 0200 	mov.w	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
	info_handler->angle_3 = 0;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f04f 0200 	mov.w	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
	info_handler->ticks = 0;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f04f 0200 	mov.w	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <setAngle1>:

void setAngle1(RobotInfoHandler *info_handler, float angle){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	ed87 0a00 	vstr	s0, [r7]
	osMutexWait(*(info_handler->mutexHandler), osWaitForever);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	691b      	ldr	r3, [r3, #16]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f04f 31ff 	mov.w	r1, #4294967295
 8000d56:	4618      	mov	r0, r3
 8000d58:	f004 ff62 	bl	8005c20 <osMutexWait>
	info_handler->angle_1 = angle;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	683a      	ldr	r2, [r7, #0]
 8000d60:	601a      	str	r2, [r3, #0]
	osMutexRelease(*(info_handler->mutexHandler));
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	691b      	ldr	r3, [r3, #16]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f004 ffa7 	bl	8005cbc <osMutexRelease>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <setAngle2>:

void setAngle2(RobotInfoHandler *info_handler, float angle){
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	ed87 0a00 	vstr	s0, [r7]
	osMutexWait(*(info_handler->mutexHandler), osWaitForever);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	691b      	ldr	r3, [r3, #16]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f004 ff47 	bl	8005c20 <osMutexWait>
	info_handler->angle_2 = angle;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	683a      	ldr	r2, [r7, #0]
 8000d96:	605a      	str	r2, [r3, #4]
	osMutexRelease(*(info_handler->mutexHandler));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	691b      	ldr	r3, [r3, #16]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f004 ff8c 	bl	8005cbc <osMutexRelease>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <setAngle3>:

void setAngle3(RobotInfoHandler *info_handler, float angle){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	ed87 0a00 	vstr	s0, [r7]
	osMutexWait(*(info_handler->mutexHandler), osWaitForever);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	691b      	ldr	r3, [r3, #16]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f004 ff2c 	bl	8005c20 <osMutexWait>
	info_handler->angle_3 = angle;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	609a      	str	r2, [r3, #8]
	osMutexRelease(*(info_handler->mutexHandler));
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	691b      	ldr	r3, [r3, #16]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f004 ff71 	bl	8005cbc <osMutexRelease>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <_ZN7EncoderC1EP17TIM_HandleTypeDeff>:
#include "Encoder.hpp"

float ticks_1;
//uint32_t angle_2_ticks;

Encoder::Encoder(TIM_HandleTypeDef* encoder_timer, float count_per_turn){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	ed87 0a01 	vstr	s0, [r7, #4]
	timer = encoder_timer;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	68ba      	ldr	r2, [r7, #8]
 8000df6:	601a      	str	r2, [r3, #0]
	encoder_resolution = 360.0f / count_per_turn;
 8000df8:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000e20 <_ZN7EncoderC1EP17TIM_HandleTypeDeff+0x3c>
 8000dfc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	edc3 7a03 	vstr	s15, [r3, #12]
	HAL_TIM_Encoder_Start(timer, TIM_CHANNEL_ALL);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	213c      	movs	r1, #60	; 0x3c
 8000e10:	4618      	mov	r0, r3
 8000e12:	f003 fa71 	bl	80042f8 <HAL_TIM_Encoder_Start>
}
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	43b40000 	.word	0x43b40000
 8000e24:	00000000 	.word	0x00000000

08000e28 <_ZN7Encoder8getAngleEv>:

float Encoder::getAngle(){
 8000e28:	b5b0      	push	{r4, r5, r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	ticks_1 = (float) __HAL_TIM_GetCounter(timer);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e38:	ee07 3a90 	vmov	s15, r3
 8000e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e40:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <_ZN7Encoder8getAngleEv+0x80>)
 8000e42:	edc3 7a00 	vstr	s15, [r3]
	angle = (ticks_1 - 32767.0) * encoder_resolution;
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <_ZN7Encoder8getAngleEv+0x80>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fb24 	bl	8000498 <__aeabi_f2d>
 8000e50:	a313      	add	r3, pc, #76	; (adr r3, 8000ea0 <_ZN7Encoder8getAngleEv+0x78>)
 8000e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e56:	f7ff f9bf 	bl	80001d8 <__aeabi_dsub>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	4614      	mov	r4, r2
 8000e60:	461d      	mov	r5, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fb16 	bl	8000498 <__aeabi_f2d>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	460b      	mov	r3, r1
 8000e70:	4620      	mov	r0, r4
 8000e72:	4629      	mov	r1, r5
 8000e74:	f7ff fb68 	bl	8000548 <__aeabi_dmul>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f7ff fd74 	bl	800096c <__aeabi_d2f>
 8000e84:	4602      	mov	r2, r0
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	605a      	str	r2, [r3, #4]
	//angle_2_ticks = __HAL_TIM_GetCounter(timer);
	return angle;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	ee07 3a90 	vmov	s15, r3
}
 8000e92:	eeb0 0a67 	vmov.f32	s0, s15
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e9c:	f3af 8000 	nop.w
 8000ea0:	00000000 	.word	0x00000000
 8000ea4:	40dfffc0 	.word	0x40dfffc0
 8000ea8:	2000002c 	.word	0x2000002c

08000eac <_ZN7Encoder9getPulsesEv>:

float Encoder::getPulses(){
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	ticks = __HAL_TIM_GET_COUNTER(timer);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ebc:	ee07 3a90 	vmov	s15, r3
 8000ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	edc3 7a02 	vstr	s15, [r3, #8]
	return ticks;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	ee07 3a90 	vmov	s15, r3
}
 8000ed2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <_ZN7Encoder17resetTicksCounterEv>:

void Encoder::resetTicksCounter(){
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCounter(timer, 32767);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000ef2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <_ZN5MotorC1ER12MotorChannelR3PinS3_>:
#include "Motor.hpp"
#include "tim.h"
#include "stm32f4xx_hal_gpio.h"
#include "cmsis_os.h"

Motor::Motor(MotorChannel &motor_timer, Pin &motor_1, Pin &motor_2){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
 8000f0c:	603b      	str	r3, [r7, #0]
	gpio_pin_1 = motor_1.pin;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	889a      	ldrh	r2, [r3, #4]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	801a      	strh	r2, [r3, #0]
	gpio_pin_2 = motor_2.pin;
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	889a      	ldrh	r2, [r3, #4]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	805a      	strh	r2, [r3, #2]
	gpio_port_1 = motor_1.port;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	605a      	str	r2, [r3, #4]
	gpio_port_2 = motor_2.port;
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	609a      	str	r2, [r3, #8]
	channel = motor_timer.channel;
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	611a      	str	r2, [r3, #16]
	timer = motor_timer.timer;
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Start(motor_timer.timer, motor_timer.channel);
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	4619      	mov	r1, r3
 8000f48:	4610      	mov	r0, r2
 8000f4a:	f003 f867 	bl	800401c <HAL_TIM_PWM_Start>
}
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	4618      	mov	r0, r3
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <_ZN5Motor8turnLeftEm>:

void Motor::turnLeft(uint32_t duty){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(gpio_port_1, gpio_pin_1, GPIO_PIN_SET);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6858      	ldr	r0, [r3, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f002 f905 	bl	800317c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio_port_2, gpio_pin_2, GPIO_PIN_RESET);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6898      	ldr	r0, [r3, #8]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	885b      	ldrh	r3, [r3, #2]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f002 f8fd 	bl	800317c <HAL_GPIO_WritePin>
	switch(channel){
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	2b0c      	cmp	r3, #12
 8000f88:	d834      	bhi.n	8000ff4 <_ZN5Motor8turnLeftEm+0x9c>
 8000f8a:	a201      	add	r2, pc, #4	; (adr r2, 8000f90 <_ZN5Motor8turnLeftEm+0x38>)
 8000f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f90:	08000fc5 	.word	0x08000fc5
 8000f94:	08000ff5 	.word	0x08000ff5
 8000f98:	08000ff5 	.word	0x08000ff5
 8000f9c:	08000ff5 	.word	0x08000ff5
 8000fa0:	08000fd1 	.word	0x08000fd1
 8000fa4:	08000ff5 	.word	0x08000ff5
 8000fa8:	08000ff5 	.word	0x08000ff5
 8000fac:	08000ff5 	.word	0x08000ff5
 8000fb0:	08000fdd 	.word	0x08000fdd
 8000fb4:	08000ff5 	.word	0x08000ff5
 8000fb8:	08000ff5 	.word	0x08000ff5
 8000fbc:	08000ff5 	.word	0x08000ff5
 8000fc0:	08000fe9 	.word	0x08000fe9
		case TIM_CHANNEL_1:
			timer->Instance -> CCR1 = duty;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	683a      	ldr	r2, [r7, #0]
 8000fcc:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000fce:	e011      	b.n	8000ff4 <_ZN5Motor8turnLeftEm+0x9c>
		case TIM_CHANNEL_2:
			timer->Instance -> CCR2 = duty;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8000fda:	e00b      	b.n	8000ff4 <_ZN5Motor8turnLeftEm+0x9c>
		case TIM_CHANNEL_3:
			timer->Instance -> CCR3 = duty;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000fe6:	e005      	b.n	8000ff4 <_ZN5Motor8turnLeftEm+0x9c>
		case TIM_CHANNEL_4:
			timer->Instance -> CCR4 = duty;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000ff2:	bf00      	nop
	}
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <_ZN5Motor9turnRightEm>:

void Motor::turnRight(uint32_t duty){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(gpio_port_1, gpio_pin_1, GPIO_PIN_RESET);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6858      	ldr	r0, [r3, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	2200      	movs	r2, #0
 8001010:	4619      	mov	r1, r3
 8001012:	f002 f8b3 	bl	800317c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio_port_2, gpio_pin_2, GPIO_PIN_SET);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6898      	ldr	r0, [r3, #8]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	885b      	ldrh	r3, [r3, #2]
 800101e:	2201      	movs	r2, #1
 8001020:	4619      	mov	r1, r3
 8001022:	f002 f8ab 	bl	800317c <HAL_GPIO_WritePin>
	switch(channel){
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	2b0c      	cmp	r3, #12
 800102c:	d834      	bhi.n	8001098 <_ZN5Motor9turnRightEm+0x9c>
 800102e:	a201      	add	r2, pc, #4	; (adr r2, 8001034 <_ZN5Motor9turnRightEm+0x38>)
 8001030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001034:	08001069 	.word	0x08001069
 8001038:	08001099 	.word	0x08001099
 800103c:	08001099 	.word	0x08001099
 8001040:	08001099 	.word	0x08001099
 8001044:	08001075 	.word	0x08001075
 8001048:	08001099 	.word	0x08001099
 800104c:	08001099 	.word	0x08001099
 8001050:	08001099 	.word	0x08001099
 8001054:	08001081 	.word	0x08001081
 8001058:	08001099 	.word	0x08001099
 800105c:	08001099 	.word	0x08001099
 8001060:	08001099 	.word	0x08001099
 8001064:	0800108d 	.word	0x0800108d
			case TIM_CHANNEL_1:
				timer->Instance -> CCR1 = duty;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8001072:	e011      	b.n	8001098 <_ZN5Motor9turnRightEm+0x9c>
			case TIM_CHANNEL_2:
				timer->Instance -> CCR2 = duty;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 800107e:	e00b      	b.n	8001098 <_ZN5Motor9turnRightEm+0x9c>
			case TIM_CHANNEL_3:
				timer->Instance -> CCR3 = duty;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	683a      	ldr	r2, [r7, #0]
 8001088:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 800108a:	e005      	b.n	8001098 <_ZN5Motor9turnRightEm+0x9c>
			case TIM_CHANNEL_4:
				timer->Instance -> CCR4 = duty;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8001096:	bf00      	nop
	}
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_ZN5Motor14goHomePositionEv>:

void Motor::goHomePosition(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	switch(channel){
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	2b0c      	cmp	r3, #12
 80010ae:	f200 8083 	bhi.w	80011b8 <_ZN5Motor14goHomePositionEv+0x118>
 80010b2:	a201      	add	r2, pc, #4	; (adr r2, 80010b8 <_ZN5Motor14goHomePositionEv+0x18>)
 80010b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b8:	080010ed 	.word	0x080010ed
 80010bc:	080011b9 	.word	0x080011b9
 80010c0:	080011b9 	.word	0x080011b9
 80010c4:	080011b9 	.word	0x080011b9
 80010c8:	0800112d 	.word	0x0800112d
 80010cc:	080011b9 	.word	0x080011b9
 80010d0:	080011b9 	.word	0x080011b9
 80010d4:	080011b9 	.word	0x080011b9
 80010d8:	0800116d 	.word	0x0800116d
 80010dc:	080011b9 	.word	0x080011b9
 80010e0:	080011b9 	.word	0x080011b9
 80010e4:	080011b9 	.word	0x080011b9
 80010e8:	080011ad 	.word	0x080011ad
		// Motor 2
		case TIM_CHANNEL_1:
			Motor::turnRight(800);
 80010ec:	f44f 7148 	mov.w	r1, #800	; 0x320
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff83 	bl	8000ffc <_ZN5Motor9turnRightEm>
			while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6) == GPIO_PIN_SET){
 80010f6:	2140      	movs	r1, #64	; 0x40
 80010f8:	4831      	ldr	r0, [pc, #196]	; (80011c0 <_ZN5Motor14goHomePositionEv+0x120>)
 80010fa:	f002 f827 	bl	800314c <HAL_GPIO_ReadPin>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b01      	cmp	r3, #1
 8001102:	bf0c      	ite	eq
 8001104:	2301      	moveq	r3, #1
 8001106:	2300      	movne	r3, #0
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <_ZN5Motor14goHomePositionEv+0x76>
				osDelay(2);
 800110e:	2002      	movs	r0, #2
 8001110:	f004 fd59 	bl	8005bc6 <osDelay>
			while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6) == GPIO_PIN_SET){
 8001114:	e7ef      	b.n	80010f6 <_ZN5Motor14goHomePositionEv+0x56>
			}
			timer->Instance -> CCR1 = 0;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2200      	movs	r2, #0
 800111e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCounter(&ENCODER_2_TIMER, 32767);
 8001120:	4b28      	ldr	r3, [pc, #160]	; (80011c4 <_ZN5Motor14goHomePositionEv+0x124>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001128:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800112a:	e045      	b.n	80011b8 <_ZN5Motor14goHomePositionEv+0x118>
		// Motor 1
		case TIM_CHANNEL_2:
			Motor::turnLeft(850);
 800112c:	f240 3152 	movw	r1, #850	; 0x352
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff11 	bl	8000f58 <_ZN5Motor8turnLeftEm>
			while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7) == GPIO_PIN_SET){
 8001136:	2180      	movs	r1, #128	; 0x80
 8001138:	4821      	ldr	r0, [pc, #132]	; (80011c0 <_ZN5Motor14goHomePositionEv+0x120>)
 800113a:	f002 f807 	bl	800314c <HAL_GPIO_ReadPin>
 800113e:	4603      	mov	r3, r0
 8001140:	2b01      	cmp	r3, #1
 8001142:	bf0c      	ite	eq
 8001144:	2301      	moveq	r3, #1
 8001146:	2300      	movne	r3, #0
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <_ZN5Motor14goHomePositionEv+0xb6>
				osDelay(2);
 800114e:	2002      	movs	r0, #2
 8001150:	f004 fd39 	bl	8005bc6 <osDelay>
			while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7) == GPIO_PIN_SET){
 8001154:	e7ef      	b.n	8001136 <_ZN5Motor14goHomePositionEv+0x96>
			}
			timer->Instance -> CCR2 = 0;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2200      	movs	r2, #0
 800115e:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SetCounter(&ENCODER_1_TIMER, 32767);
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <_ZN5Motor14goHomePositionEv+0x128>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001168:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800116a:	e025      	b.n	80011b8 <_ZN5Motor14goHomePositionEv+0x118>
	    // Motor 3
		case TIM_CHANNEL_3:
			Motor::turnRight(700);
 800116c:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ff43 	bl	8000ffc <_ZN5Motor9turnRightEm>
			while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5) == GPIO_PIN_SET){
 8001176:	2120      	movs	r1, #32
 8001178:	4811      	ldr	r0, [pc, #68]	; (80011c0 <_ZN5Motor14goHomePositionEv+0x120>)
 800117a:	f001 ffe7 	bl	800314c <HAL_GPIO_ReadPin>
 800117e:	4603      	mov	r3, r0
 8001180:	2b01      	cmp	r3, #1
 8001182:	bf0c      	ite	eq
 8001184:	2301      	moveq	r3, #1
 8001186:	2300      	movne	r3, #0
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <_ZN5Motor14goHomePositionEv+0xf6>
				osDelay(2);
 800118e:	2002      	movs	r0, #2
 8001190:	f004 fd19 	bl	8005bc6 <osDelay>
			while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5) == GPIO_PIN_SET){
 8001194:	e7ef      	b.n	8001176 <_ZN5Motor14goHomePositionEv+0xd6>
			}
			timer->Instance -> CCR3 = 0;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2200      	movs	r2, #0
 800119e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SetCounter(&ENCODER_3_TIMER, 32767);
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <_ZN5Motor14goHomePositionEv+0x12c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80011a8:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 80011aa:	e005      	b.n	80011b8 <_ZN5Motor14goHomePositionEv+0x118>
		case TIM_CHANNEL_4:
			timer->Instance -> CCR4 = 0;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2200      	movs	r2, #0
 80011b4:	641a      	str	r2, [r3, #64]	; 0x40
			//__HAL_TIM_SetCounter(timer, 0);
			break;
 80011b6:	bf00      	nop
	}
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40020c00 	.word	0x40020c00
 80011c4:	200040e8 	.word	0x200040e8
 80011c8:	20004130 	.word	0x20004130
 80011cc:	20004178 	.word	0x20004178

080011d0 <_ZN5Motor9stopMotorEv>:

void Motor::stopMotor(){
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(gpio_port_1, gpio_pin_1, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(gpio_port_2, gpio_pin_2, GPIO_PIN_SET);
	switch(channel){
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	2b0c      	cmp	r3, #12
 80011de:	d844      	bhi.n	800126a <_ZN5Motor9stopMotorEv+0x9a>
 80011e0:	a201      	add	r2, pc, #4	; (adr r2, 80011e8 <_ZN5Motor9stopMotorEv+0x18>)
 80011e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e6:	bf00      	nop
 80011e8:	0800121d 	.word	0x0800121d
 80011ec:	0800126b 	.word	0x0800126b
 80011f0:	0800126b 	.word	0x0800126b
 80011f4:	0800126b 	.word	0x0800126b
 80011f8:	08001233 	.word	0x08001233
 80011fc:	0800126b 	.word	0x0800126b
 8001200:	0800126b 	.word	0x0800126b
 8001204:	0800126b 	.word	0x0800126b
 8001208:	08001249 	.word	0x08001249
 800120c:	0800126b 	.word	0x0800126b
 8001210:	0800126b 	.word	0x0800126b
 8001214:	0800126b 	.word	0x0800126b
 8001218:	0800125f 	.word	0x0800125f
			case TIM_CHANNEL_1:
				timer->Instance -> CCR1 = 0;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2200      	movs	r2, #0
 8001224:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCounter(&ENCODER_2_TIMER, 32767);
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <_ZN5Motor9stopMotorEv+0xa8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800122e:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 8001230:	e01b      	b.n	800126a <_ZN5Motor9stopMotorEv+0x9a>
			case TIM_CHANNEL_2:
				timer->Instance -> CCR2 = 0;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2200      	movs	r2, #0
 800123a:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SetCounter(&ENCODER_1_TIMER, 32767);
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <_ZN5Motor9stopMotorEv+0xac>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001244:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 8001246:	e010      	b.n	800126a <_ZN5Motor9stopMotorEv+0x9a>
			case TIM_CHANNEL_3:
				timer->Instance -> CCR3 = 0;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2200      	movs	r2, #0
 8001250:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SetCounter(&ENCODER_3_TIMER, 32767);
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <_ZN5Motor9stopMotorEv+0xb0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800125a:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 800125c:	e005      	b.n	800126a <_ZN5Motor9stopMotorEv+0x9a>
			case TIM_CHANNEL_4:
				timer->Instance -> CCR4 = 0;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2200      	movs	r2, #0
 8001266:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8001268:	bf00      	nop
	}
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	200040e8 	.word	0x200040e8
 800127c:	20004130 	.word	0x20004130
 8001280:	20004178 	.word	0x20004178

08001284 <startSerialComms>:
// Flag that activates when arrives a new package from serial port
bool data_received = false;
// Flag that indicates to send the data to the serial port
bool data_send = false;

void startSerialComms(RobotInfoHandler *info_handler){
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, (uint8_t*) rx_buffer, RECEIVED_BYTES);
 800128c:	220e      	movs	r2, #14
 800128e:	493e      	ldr	r1, [pc, #248]	; (8001388 <startSerialComms+0x104>)
 8001290:	483e      	ldr	r0, [pc, #248]	; (800138c <startSerialComms+0x108>)
 8001292:	f003 fe92 	bl	8004fba <HAL_UART_Receive_IT>

	while(1){
		if(data_received == true){
 8001296:	4b3e      	ldr	r3, [pc, #248]	; (8001390 <startSerialComms+0x10c>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d152      	bne.n	8001344 <startSerialComms+0xc0>
			data_received = false;
 800129e:	4b3c      	ldr	r3, [pc, #240]	; (8001390 <startSerialComms+0x10c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
			if(rx_buffer[0] == START_OF_PACKAGE && rx_buffer[13] == END_OF_PACKAGE){
 80012a4:	4b38      	ldr	r3, [pc, #224]	; (8001388 <startSerialComms+0x104>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2ba1      	cmp	r3, #161	; 0xa1
 80012aa:	d14b      	bne.n	8001344 <startSerialComms+0xc0>
 80012ac:	4b36      	ldr	r3, [pc, #216]	; (8001388 <startSerialComms+0x104>)
 80012ae:	7b5b      	ldrb	r3, [r3, #13]
 80012b0:	2bb1      	cmp	r3, #177	; 0xb1
 80012b2:	d147      	bne.n	8001344 <startSerialComms+0xc0>
				angle_1.bytes[0] = rx_buffer[1];
 80012b4:	4b34      	ldr	r3, [pc, #208]	; (8001388 <startSerialComms+0x104>)
 80012b6:	785a      	ldrb	r2, [r3, #1]
 80012b8:	4b36      	ldr	r3, [pc, #216]	; (8001394 <startSerialComms+0x110>)
 80012ba:	701a      	strb	r2, [r3, #0]
				angle_1.bytes[1] = rx_buffer[2];
 80012bc:	4b32      	ldr	r3, [pc, #200]	; (8001388 <startSerialComms+0x104>)
 80012be:	789a      	ldrb	r2, [r3, #2]
 80012c0:	4b34      	ldr	r3, [pc, #208]	; (8001394 <startSerialComms+0x110>)
 80012c2:	705a      	strb	r2, [r3, #1]
				angle_1.bytes[2] = rx_buffer[3];
 80012c4:	4b30      	ldr	r3, [pc, #192]	; (8001388 <startSerialComms+0x104>)
 80012c6:	78da      	ldrb	r2, [r3, #3]
 80012c8:	4b32      	ldr	r3, [pc, #200]	; (8001394 <startSerialComms+0x110>)
 80012ca:	709a      	strb	r2, [r3, #2]
				angle_1.bytes[3] = rx_buffer[4];
 80012cc:	4b2e      	ldr	r3, [pc, #184]	; (8001388 <startSerialComms+0x104>)
 80012ce:	791a      	ldrb	r2, [r3, #4]
 80012d0:	4b30      	ldr	r3, [pc, #192]	; (8001394 <startSerialComms+0x110>)
 80012d2:	70da      	strb	r2, [r3, #3]
				angle_2.bytes[0] = rx_buffer[5];
 80012d4:	4b2c      	ldr	r3, [pc, #176]	; (8001388 <startSerialComms+0x104>)
 80012d6:	795a      	ldrb	r2, [r3, #5]
 80012d8:	4b2f      	ldr	r3, [pc, #188]	; (8001398 <startSerialComms+0x114>)
 80012da:	701a      	strb	r2, [r3, #0]
				angle_2.bytes[1] = rx_buffer[6];
 80012dc:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <startSerialComms+0x104>)
 80012de:	799a      	ldrb	r2, [r3, #6]
 80012e0:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <startSerialComms+0x114>)
 80012e2:	705a      	strb	r2, [r3, #1]
				angle_2.bytes[2] = rx_buffer[7];
 80012e4:	4b28      	ldr	r3, [pc, #160]	; (8001388 <startSerialComms+0x104>)
 80012e6:	79da      	ldrb	r2, [r3, #7]
 80012e8:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <startSerialComms+0x114>)
 80012ea:	709a      	strb	r2, [r3, #2]
				angle_2.bytes[3] = rx_buffer[8];
 80012ec:	4b26      	ldr	r3, [pc, #152]	; (8001388 <startSerialComms+0x104>)
 80012ee:	7a1a      	ldrb	r2, [r3, #8]
 80012f0:	4b29      	ldr	r3, [pc, #164]	; (8001398 <startSerialComms+0x114>)
 80012f2:	70da      	strb	r2, [r3, #3]
				angle_3.bytes[0] = rx_buffer[9];
 80012f4:	4b24      	ldr	r3, [pc, #144]	; (8001388 <startSerialComms+0x104>)
 80012f6:	7a5a      	ldrb	r2, [r3, #9]
 80012f8:	4b28      	ldr	r3, [pc, #160]	; (800139c <startSerialComms+0x118>)
 80012fa:	701a      	strb	r2, [r3, #0]
				angle_3.bytes[1] = rx_buffer[10];
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <startSerialComms+0x104>)
 80012fe:	7a9a      	ldrb	r2, [r3, #10]
 8001300:	4b26      	ldr	r3, [pc, #152]	; (800139c <startSerialComms+0x118>)
 8001302:	705a      	strb	r2, [r3, #1]
				angle_3.bytes[2] = rx_buffer[11];
 8001304:	4b20      	ldr	r3, [pc, #128]	; (8001388 <startSerialComms+0x104>)
 8001306:	7ada      	ldrb	r2, [r3, #11]
 8001308:	4b24      	ldr	r3, [pc, #144]	; (800139c <startSerialComms+0x118>)
 800130a:	709a      	strb	r2, [r3, #2]
				angle_3.bytes[3] = rx_buffer[12];
 800130c:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <startSerialComms+0x104>)
 800130e:	7b1a      	ldrb	r2, [r3, #12]
 8001310:	4b22      	ldr	r3, [pc, #136]	; (800139c <startSerialComms+0x118>)
 8001312:	70da      	strb	r2, [r3, #3]
				setAngle1(info_handler, angle_1.float_value);
 8001314:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <startSerialComms+0x110>)
 8001316:	edd3 7a00 	vldr	s15, [r3]
 800131a:	eeb0 0a67 	vmov.f32	s0, s15
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff fd0e 	bl	8000d40 <setAngle1>
				setAngle2(info_handler, angle_2.float_value);
 8001324:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <startSerialComms+0x114>)
 8001326:	edd3 7a00 	vldr	s15, [r3]
 800132a:	eeb0 0a67 	vmov.f32	s0, s15
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff fd21 	bl	8000d76 <setAngle2>
				setAngle3(info_handler, angle_3.float_value);
 8001334:	4b19      	ldr	r3, [pc, #100]	; (800139c <startSerialComms+0x118>)
 8001336:	edd3 7a00 	vldr	s15, [r3]
 800133a:	eeb0 0a67 	vmov.f32	s0, s15
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fd34 	bl	8000dac <setAngle3>
			}
		}
		if(data_send == true){
 8001344:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <startSerialComms+0x11c>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d118      	bne.n	800137e <startSerialComms+0xfa>
			//ticks.float_value= info_handler->ticks;
			//HAL_UART_Transmit(&huart2, ticks.bytes, sizeof(ticks.bytes), 1000);

			HAL_UART_Transmit(&huart2, angle_1.bytes, sizeof(angle_1.bytes), 1000);
 800134c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001350:	2204      	movs	r2, #4
 8001352:	4910      	ldr	r1, [pc, #64]	; (8001394 <startSerialComms+0x110>)
 8001354:	480d      	ldr	r0, [pc, #52]	; (800138c <startSerialComms+0x108>)
 8001356:	f003 fd9e 	bl	8004e96 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, angle_2.bytes, sizeof(angle_2.bytes), 1000);
 800135a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135e:	2204      	movs	r2, #4
 8001360:	490d      	ldr	r1, [pc, #52]	; (8001398 <startSerialComms+0x114>)
 8001362:	480a      	ldr	r0, [pc, #40]	; (800138c <startSerialComms+0x108>)
 8001364:	f003 fd97 	bl	8004e96 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, angle_3.bytes, sizeof(angle_3.bytes), 1000);
 8001368:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136c:	2204      	movs	r2, #4
 800136e:	490b      	ldr	r1, [pc, #44]	; (800139c <startSerialComms+0x118>)
 8001370:	4806      	ldr	r0, [pc, #24]	; (800138c <startSerialComms+0x108>)
 8001372:	f003 fd90 	bl	8004e96 <HAL_UART_Transmit>

			osDelay(500);
 8001376:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800137a:	f004 fc24 	bl	8005bc6 <osDelay>
		}
		osDelay(100);
 800137e:	2064      	movs	r0, #100	; 0x64
 8001380:	f004 fc21 	bl	8005bc6 <osDelay>
		if(data_received == true){
 8001384:	e787      	b.n	8001296 <startSerialComms+0x12>
 8001386:	bf00      	nop
 8001388:	2000003c 	.word	0x2000003c
 800138c:	2000424c 	.word	0x2000424c
 8001390:	2000004a 	.word	0x2000004a
 8001394:	20000030 	.word	0x20000030
 8001398:	20000034 	.word	0x20000034
 800139c:	20000038 	.word	0x20000038
 80013a0:	2000004b 	.word	0x2000004b

080013a4 <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a07      	ldr	r2, [pc, #28]	; (80013d0 <HAL_UART_RxCpltCallback+0x2c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d102      	bne.n	80013bc <HAL_UART_RxCpltCallback+0x18>
		data_received = true;
 80013b6:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <HAL_UART_RxCpltCallback+0x30>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t*) rx_buffer, RECEIVED_BYTES);
 80013bc:	220e      	movs	r2, #14
 80013be:	4906      	ldr	r1, [pc, #24]	; (80013d8 <HAL_UART_RxCpltCallback+0x34>)
 80013c0:	4806      	ldr	r0, [pc, #24]	; (80013dc <HAL_UART_RxCpltCallback+0x38>)
 80013c2:	f003 fdfa 	bl	8004fba <HAL_UART_Receive_IT>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40004400 	.word	0x40004400
 80013d4:	2000004a 	.word	0x2000004a
 80013d8:	2000003c 	.word	0x2000003c
 80013dc:	2000424c 	.word	0x2000424c

080013e0 <_ZN3PIDC1Effffff>:
#include "Task/PID/PID.hpp"


PID::PID(float kp, float kd, float ki, float max_output, float min_output, float update_rate){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	61f8      	str	r0, [r7, #28]
 80013e8:	ed87 0a06 	vstr	s0, [r7, #24]
 80013ec:	edc7 0a05 	vstr	s1, [r7, #20]
 80013f0:	ed87 1a04 	vstr	s2, [r7, #16]
 80013f4:	edc7 1a03 	vstr	s3, [r7, #12]
 80013f8:	ed87 2a02 	vstr	s4, [r7, #8]
 80013fc:	edc7 2a01 	vstr	s5, [r7, #4]
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	4a15      	ldr	r2, [pc, #84]	; (8001458 <_ZN3PIDC1Effffff+0x78>)
 8001404:	611a      	str	r2, [r3, #16]
	kp_ = kp;
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	601a      	str	r2, [r3, #0]
	ki_ = ki;
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	609a      	str	r2, [r3, #8]
	kd_ = kd;
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	605a      	str	r2, [r3, #4]
	pid_update_seconds = update_rate;
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	60da      	str	r2, [r3, #12]
	max_pid_output_ = max_output;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	619a      	str	r2, [r3, #24]
	min_pid_output_ = min_output;
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	615a      	str	r2, [r3, #20]
	pid_.Kp = kp_;
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	63da      	str	r2, [r3, #60]	; 0x3c
	pid_.Ki = ki_;
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	641a      	str	r2, [r3, #64]	; 0x40
	pid_.Kd = kd_;
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	645a      	str	r2, [r3, #68]	; 0x44
	arm_pid_init_f32(&pid_, 1);
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3324      	adds	r3, #36	; 0x24
 8001446:	2101      	movs	r1, #1
 8001448:	4618      	mov	r0, r3
 800144a:	f001 faf6 	bl	8002a3a <arm_pid_init_f32>
}
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	4618      	mov	r0, r3
 8001452:	3720      	adds	r7, #32
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40a00000 	.word	0x40a00000

0800145c <_ZN3PID9updatePIDEff>:

float PID::updatePID(float setpoint_position, float current_position){
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	; 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	ed87 0a02 	vstr	s0, [r7, #8]
 8001468:	edc7 0a01 	vstr	s1, [r7, #4]
	error_ = setpoint_position - current_position;
 800146c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001470:	edd7 7a01 	vldr	s15, [r7, #4]
 8001474:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	edc3 7a07 	vstr	s15, [r3, #28]
	output = arm_pid_f32(&pid_, error_);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	61fa      	str	r2, [r7, #28]
 800148a:	61bb      	str	r3, [r7, #24]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	ed93 7a00 	vldr	s14, [r3]
 8001492:	edd7 7a06 	vldr	s15, [r7, #24]
 8001496:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	edd3 6a01 	vldr	s13, [r3, #4]
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80014a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80014aa:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	edd3 6a02 	vldr	s13, [r3, #8]
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80014ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80014c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014cc:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Update state */
    S->state[1] = S->state[0];
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	621a      	str	r2, [r3, #32]
	if(output > max_pid_output_) output = max_pid_output_;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	ed93 7a08 	vldr	s14, [r3, #32]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	edd3 7a06 	vldr	s15, [r3, #24]
 80014f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fe:	dd04      	ble.n	800150a <_ZN3PID9updatePIDEff+0xae>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	699a      	ldr	r2, [r3, #24]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	621a      	str	r2, [r3, #32]
 8001508:	e00e      	b.n	8001528 <_ZN3PID9updatePIDEff+0xcc>
	else if(output < min_pid_output_) output = min_pid_output_;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	edd3 7a05 	vldr	s15, [r3, #20]
 8001516:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800151a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151e:	d503      	bpl.n	8001528 <_ZN3PID9updatePIDEff+0xcc>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	695a      	ldr	r2, [r3, #20]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	621a      	str	r2, [r3, #32]
	if(error_ < 2.0f && error_ > -2.0f) output = 0;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	edd3 7a07 	vldr	s15, [r3, #28]
 800152e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153a:	d50d      	bpl.n	8001558 <_ZN3PID9updatePIDEff+0xfc>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001542:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001546:	eef4 7ac7 	vcmpe.f32	s15, s14
 800154a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154e:	dd03      	ble.n	8001558 <_ZN3PID9updatePIDEff+0xfc>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
	return output;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	ee07 3a90 	vmov	s15, r3
}
 8001560:	eeb0 0a67 	vmov.f32	s0, s15
 8001564:	3724      	adds	r7, #36	; 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <PID1Node>:

float output_pid_1=0;
float current_angle_1 = 0;
int hall_1_flag = 0;

void PID1Node(RobotInfoHandler *robot_info_handler){
 8001570:	b580      	push	{r7, lr}
 8001572:	b0a4      	sub	sp, #144	; 0x90
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

	// Pins definition for motor 1
	Pin motor_1_a{MOTOR_1_L_GPIO_Port, MOTOR_1_L_Pin};
 8001578:	4a5b      	ldr	r2, [pc, #364]	; (80016e8 <PID1Node+0x178>)
 800157a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800157e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001582:	e883 0003 	stmia.w	r3, {r0, r1}
	Pin motor_1_b{MOTOR_1_R_GPIO_Port, MOTOR_1_R_Pin};
 8001586:	4a59      	ldr	r2, [pc, #356]	; (80016ec <PID1Node+0x17c>)
 8001588:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800158c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001590:	e883 0003 	stmia.w	r3, {r0, r1}

	// Timer definition for motor 1
	MotorChannel motor_1_timer{&MOTOR_1_TIMER, MOTOR_1_CHANNEL};
 8001594:	4a56      	ldr	r2, [pc, #344]	; (80016f0 <PID1Node+0x180>)
 8001596:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800159a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800159e:	e883 0003 	stmia.w	r3, {r0, r1}

	// Motor 1 object creation
	Motor motor1(motor_1_timer, motor_1_a, motor_1_b);
 80015a2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015a6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80015aa:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80015ae:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80015b2:	f7ff fca5 	bl	8000f00 <_ZN5MotorC1ER12MotorChannelR3PinS3_>

	// Encoder 1 object creation
	Encoder encoder1(&ENCODER_1_TIMER, ENCODER_1_STEPS);
 80015b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015ba:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80016f4 <PID1Node+0x184>
 80015be:	494e      	ldr	r1, [pc, #312]	; (80016f8 <PID1Node+0x188>)
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fc0f 	bl	8000de4 <_ZN7EncoderC1EP17TIM_HandleTypeDeff>

	// PID 1 object creation
	PID pid1(KP_CONST_1, KD_CONST_1, KI_CONST_1, MAX_PID_OUTPUT, MIN_PID_OUTPUT, PID_UPDATE_TIME_S);
 80015c6:	f107 030c 	add.w	r3, r7, #12
 80015ca:	eddf 2a4c 	vldr	s5, [pc, #304]	; 80016fc <PID1Node+0x18c>
 80015ce:	ed9f 2a4c 	vldr	s4, [pc, #304]	; 8001700 <PID1Node+0x190>
 80015d2:	eddf 1a4c 	vldr	s3, [pc, #304]	; 8001704 <PID1Node+0x194>
 80015d6:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
 80015da:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80015de:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8001708 <PID1Node+0x198>
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fefc 	bl	80013e0 <_ZN3PIDC1Effffff>

	if(robot_info_handler->angle_1 == 0){
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f6:	d11a      	bne.n	800162e <PID1Node+0xbe>
		// Check if the hall is in the initial position
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7) == GPIO_PIN_RESET){		// Cambiar por el pin del hall 1
 80015f8:	2180      	movs	r1, #128	; 0x80
 80015fa:	4844      	ldr	r0, [pc, #272]	; (800170c <PID1Node+0x19c>)
 80015fc:	f001 fda6 	bl	800314c <HAL_GPIO_ReadPin>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	bf0c      	ite	eq
 8001606:	2301      	moveq	r3, #1
 8001608:	2300      	movne	r3, #0
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d009      	beq.n	8001624 <PID1Node+0xb4>
			current_angle_1 = 0;
 8001610:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <PID1Node+0x1a0>)
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
			encoder1.resetTicksCounter();
 8001618:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fc5f 	bl	8000ee0 <_ZN7Encoder17resetTicksCounterEv>
 8001622:	e004      	b.n	800162e <PID1Node+0xbe>
		}
		else	motor1.goHomePosition();
 8001624:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fd39 	bl	80010a0 <_ZN5Motor14goHomePositionEv>
	}

	while(1){
		if(hall_1_flag == 1){
 800162e:	4b39      	ldr	r3, [pc, #228]	; (8001714 <PID1Node+0x1a4>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d10b      	bne.n	800164e <PID1Node+0xde>
			hall_1_flag = 0;
 8001636:	4b37      	ldr	r3, [pc, #220]	; (8001714 <PID1Node+0x1a4>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
			motor1.stopMotor();
 800163c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fdc5 	bl	80011d0 <_ZN5Motor9stopMotorEv>
			current_angle_1 = 0;
 8001646:	4b32      	ldr	r3, [pc, #200]	; (8001710 <PID1Node+0x1a0>)
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
		}
		current_angle_1 = encoder1.getAngle();
 800164e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fbe8 	bl	8000e28 <_ZN7Encoder8getAngleEv>
 8001658:	eef0 7a40 	vmov.f32	s15, s0
 800165c:	4b2c      	ldr	r3, [pc, #176]	; (8001710 <PID1Node+0x1a0>)
 800165e:	edc3 7a00 	vstr	s15, [r3]
		output_pid_1 = pid1.updatePID(robot_info_handler->angle_1, current_angle_1);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	4b29      	ldr	r3, [pc, #164]	; (8001710 <PID1Node+0x1a0>)
 800166a:	ed93 7a00 	vldr	s14, [r3]
 800166e:	f107 030c 	add.w	r3, r7, #12
 8001672:	eef0 0a47 	vmov.f32	s1, s14
 8001676:	eeb0 0a67 	vmov.f32	s0, s15
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff feee 	bl	800145c <_ZN3PID9updatePIDEff>
 8001680:	eef0 7a40 	vmov.f32	s15, s0
 8001684:	4b24      	ldr	r3, [pc, #144]	; (8001718 <PID1Node+0x1a8>)
 8001686:	edc3 7a00 	vstr	s15, [r3]
		if(output_pid_1 > 0) motor1.turnRight(output_pid_1);
 800168a:	4b23      	ldr	r3, [pc, #140]	; (8001718 <PID1Node+0x1a8>)
 800168c:	edd3 7a00 	vldr	s15, [r3]
 8001690:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001698:	dd0c      	ble.n	80016b4 <PID1Node+0x144>
 800169a:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <PID1Node+0x1a8>)
 800169c:	edd3 7a00 	vldr	s15, [r3]
 80016a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016a8:	ee17 1a90 	vmov	r1, s15
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fca5 	bl	8000ffc <_ZN5Motor9turnRightEm>
 80016b2:	e015      	b.n	80016e0 <PID1Node+0x170>
		else if (output_pid_1 < 0) motor1.turnLeft(-output_pid_1);
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <PID1Node+0x1a8>)
 80016b6:	edd3 7a00 	vldr	s15, [r3]
 80016ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c2:	d50d      	bpl.n	80016e0 <PID1Node+0x170>
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <PID1Node+0x1a8>)
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	eef1 7a67 	vneg.f32	s15, s15
 80016ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016d2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016d6:	ee17 1a90 	vmov	r1, s15
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fc3c 	bl	8000f58 <_ZN5Motor8turnLeftEm>
		osDelay(PID_UPDATE_TIME_mS);
 80016e0:	203c      	movs	r0, #60	; 0x3c
 80016e2:	f004 fa70 	bl	8005bc6 <osDelay>
		if(hall_1_flag == 1){
 80016e6:	e7a2      	b.n	800162e <PID1Node+0xbe>
 80016e8:	080082e8 	.word	0x080082e8
 80016ec:	080082f0 	.word	0x080082f0
 80016f0:	080082f8 	.word	0x080082f8
 80016f4:	469d3e00 	.word	0x469d3e00
 80016f8:	20004130 	.word	0x20004130
 80016fc:	3d75c28f 	.word	0x3d75c28f
 8001700:	c47a0000 	.word	0xc47a0000
 8001704:	447a0000 	.word	0x447a0000
 8001708:	44480000 	.word	0x44480000
 800170c:	40020c00 	.word	0x40020c00
 8001710:	20000050 	.word	0x20000050
 8001714:	20000054 	.word	0x20000054
 8001718:	2000004c 	.word	0x2000004c

0800171c <PID2Node>:
float output_pid_2 = 0;
float current_angle_2 = 0;
int hall_2_flag = 0;
float pulses_2;

void PID2Node(RobotInfoHandler *robot_info_handler){
 800171c:	b580      	push	{r7, lr}
 800171e:	b0a4      	sub	sp, #144	; 0x90
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]

	// Pins definition for motor 2
	Pin motor_2_a{MOTOR_2_L_GPIO_Port, MOTOR_2_L_Pin};
 8001724:	4a5f      	ldr	r2, [pc, #380]	; (80018a4 <PID2Node+0x188>)
 8001726:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800172a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800172e:	e883 0003 	stmia.w	r3, {r0, r1}
	Pin motor_2_b{MOTOR_2_R_GPIO_Port, MOTOR_2_R_Pin};
 8001732:	4a5d      	ldr	r2, [pc, #372]	; (80018a8 <PID2Node+0x18c>)
 8001734:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001738:	e892 0003 	ldmia.w	r2, {r0, r1}
 800173c:	e883 0003 	stmia.w	r3, {r0, r1}

	// Timer definition for motor 2
	MotorChannel motor_2_timer{&MOTOR_2_TIMER, MOTOR_2_CHANNEL};
 8001740:	4b5a      	ldr	r3, [pc, #360]	; (80018ac <PID2Node+0x190>)
 8001742:	67bb      	str	r3, [r7, #120]	; 0x78
 8001744:	2300      	movs	r3, #0
 8001746:	67fb      	str	r3, [r7, #124]	; 0x7c

	// Motor 2 object creation
	Motor motor2(motor_2_timer, motor_2_a, motor_2_b);
 8001748:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800174c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001750:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001754:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8001758:	f7ff fbd2 	bl	8000f00 <_ZN5MotorC1ER12MotorChannelR3PinS3_>

	// Encoder 2 object creation
	Encoder encoder2(&ENCODER_2_TIMER, ENCODER_2_STEPS);
 800175c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001760:	ed9f 0a53 	vldr	s0, [pc, #332]	; 80018b0 <PID2Node+0x194>
 8001764:	4953      	ldr	r1, [pc, #332]	; (80018b4 <PID2Node+0x198>)
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fb3c 	bl	8000de4 <_ZN7EncoderC1EP17TIM_HandleTypeDeff>

	// PID 2 object creation
	PID pid2(KP_CONST_2, KD_CONST_2, KI_CONST_2, MAX_PID_OUTPUT, MIN_PID_OUTPUT, PID_UPDATE_TIME_S);
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	eddf 2a51 	vldr	s5, [pc, #324]	; 80018b8 <PID2Node+0x19c>
 8001774:	ed9f 2a51 	vldr	s4, [pc, #324]	; 80018bc <PID2Node+0x1a0>
 8001778:	eddf 1a51 	vldr	s3, [pc, #324]	; 80018c0 <PID2Node+0x1a4>
 800177c:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
 8001780:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001784:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 80018c4 <PID2Node+0x1a8>
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fe29 	bl	80013e0 <_ZN3PIDC1Effffff>

	//float current_angle = 0;
	if(robot_info_handler->angle_2 == 0){
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	edd3 7a01 	vldr	s15, [r3, #4]
 8001794:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179c:	d11a      	bne.n	80017d4 <PID2Node+0xb8>
		// Check if the hall is in the initial position
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6) == GPIO_PIN_RESET){
 800179e:	2140      	movs	r1, #64	; 0x40
 80017a0:	4849      	ldr	r0, [pc, #292]	; (80018c8 <PID2Node+0x1ac>)
 80017a2:	f001 fcd3 	bl	800314c <HAL_GPIO_ReadPin>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	bf0c      	ite	eq
 80017ac:	2301      	moveq	r3, #1
 80017ae:	2300      	movne	r3, #0
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d009      	beq.n	80017ca <PID2Node+0xae>
			current_angle_2 = 0;
 80017b6:	4b45      	ldr	r3, [pc, #276]	; (80018cc <PID2Node+0x1b0>)
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
			encoder2.resetTicksCounter();
 80017be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fb8c 	bl	8000ee0 <_ZN7Encoder17resetTicksCounterEv>
 80017c8:	e004      	b.n	80017d4 <PID2Node+0xb8>
		}
		else	motor2.goHomePosition();
 80017ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fc66 	bl	80010a0 <_ZN5Motor14goHomePositionEv>
	}

	while(1){
		if(hall_2_flag == 1){
 80017d4:	4b3e      	ldr	r3, [pc, #248]	; (80018d0 <PID2Node+0x1b4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d10b      	bne.n	80017f4 <PID2Node+0xd8>
			hall_2_flag = 0;
 80017dc:	4b3c      	ldr	r3, [pc, #240]	; (80018d0 <PID2Node+0x1b4>)
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
			motor2.stopMotor();
 80017e2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fcf2 	bl	80011d0 <_ZN5Motor9stopMotorEv>
			current_angle_2 = 0;
 80017ec:	4b37      	ldr	r3, [pc, #220]	; (80018cc <PID2Node+0x1b0>)
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
		}
		pulses_2 = encoder2.getPulses();
 80017f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fb57 	bl	8000eac <_ZN7Encoder9getPulsesEv>
 80017fe:	eef0 7a40 	vmov.f32	s15, s0
 8001802:	4b34      	ldr	r3, [pc, #208]	; (80018d4 <PID2Node+0x1b8>)
 8001804:	edc3 7a00 	vstr	s15, [r3]
		current_angle_2 = encoder2.getAngle();
 8001808:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fb0b 	bl	8000e28 <_ZN7Encoder8getAngleEv>
 8001812:	eef0 7a40 	vmov.f32	s15, s0
 8001816:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <PID2Node+0x1b0>)
 8001818:	edc3 7a00 	vstr	s15, [r3]
		output_pid_2 = pid2.updatePID(robot_info_handler->angle_2, current_angle_2);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001822:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <PID2Node+0x1b0>)
 8001824:	ed93 7a00 	vldr	s14, [r3]
 8001828:	f107 030c 	add.w	r3, r7, #12
 800182c:	eef0 0a47 	vmov.f32	s1, s14
 8001830:	eeb0 0a67 	vmov.f32	s0, s15
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fe11 	bl	800145c <_ZN3PID9updatePIDEff>
 800183a:	eef0 7a40 	vmov.f32	s15, s0
 800183e:	4b26      	ldr	r3, [pc, #152]	; (80018d8 <PID2Node+0x1bc>)
 8001840:	edc3 7a00 	vstr	s15, [r3]
		if(output_pid_2 > 0) motor2.turnLeft(output_pid_2);
 8001844:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <PID2Node+0x1bc>)
 8001846:	edd3 7a00 	vldr	s15, [r3]
 800184a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800184e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001852:	dd0c      	ble.n	800186e <PID2Node+0x152>
 8001854:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <PID2Node+0x1bc>)
 8001856:	edd3 7a00 	vldr	s15, [r3]
 800185a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800185e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001862:	ee17 1a90 	vmov	r1, s15
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fb76 	bl	8000f58 <_ZN5Motor8turnLeftEm>
 800186c:	e015      	b.n	800189a <PID2Node+0x17e>
		else if (output_pid_2 < 0) motor2.turnRight(-output_pid_2);
 800186e:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <PID2Node+0x1bc>)
 8001870:	edd3 7a00 	vldr	s15, [r3]
 8001874:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187c:	d50d      	bpl.n	800189a <PID2Node+0x17e>
 800187e:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <PID2Node+0x1bc>)
 8001880:	edd3 7a00 	vldr	s15, [r3]
 8001884:	eef1 7a67 	vneg.f32	s15, s15
 8001888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800188c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001890:	ee17 1a90 	vmov	r1, s15
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fbb1 	bl	8000ffc <_ZN5Motor9turnRightEm>
		osDelay(PID_UPDATE_TIME_mS);
 800189a:	203c      	movs	r0, #60	; 0x3c
 800189c:	f004 f993 	bl	8005bc6 <osDelay>
		if(hall_2_flag == 1){
 80018a0:	e798      	b.n	80017d4 <PID2Node+0xb8>
 80018a2:	bf00      	nop
 80018a4:	08008300 	.word	0x08008300
 80018a8:	08008308 	.word	0x08008308
 80018ac:	200041c0 	.word	0x200041c0
 80018b0:	469d3e00 	.word	0x469d3e00
 80018b4:	200040e8 	.word	0x200040e8
 80018b8:	3d75c28f 	.word	0x3d75c28f
 80018bc:	c47a0000 	.word	0xc47a0000
 80018c0:	447a0000 	.word	0x447a0000
 80018c4:	42c80000 	.word	0x42c80000
 80018c8:	40020c00 	.word	0x40020c00
 80018cc:	2000005c 	.word	0x2000005c
 80018d0:	20000060 	.word	0x20000060
 80018d4:	20000064 	.word	0x20000064
 80018d8:	20000058 	.word	0x20000058

080018dc <PID3Node>:

float current_angle_3 = 0, output_pid_3 = 0;
int hall_3_flag = 0;
float pulses_3;

void PID3Node(RobotInfoHandler *robot_info_handler){
 80018dc:	b580      	push	{r7, lr}
 80018de:	b0a4      	sub	sp, #144	; 0x90
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	// Pins definition for motor 3
	Pin motor_3_a{MOTOR_3_L_GPIO_Port, MOTOR_3_L_Pin};
 80018e4:	4a60      	ldr	r2, [pc, #384]	; (8001a68 <PID3Node+0x18c>)
 80018e6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80018ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018ee:	e883 0003 	stmia.w	r3, {r0, r1}
	Pin motor_3_b{MOTOR_3_R_GPIO_Port, MOTOR_3_R_Pin};
 80018f2:	4a5e      	ldr	r2, [pc, #376]	; (8001a6c <PID3Node+0x190>)
 80018f4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018fc:	e883 0003 	stmia.w	r3, {r0, r1}

	// Timer definition for motor 3
	MotorChannel motor_3_timer{&MOTOR_3_TIMER, MOTOR_3_CHANNEL};
 8001900:	4a5b      	ldr	r2, [pc, #364]	; (8001a70 <PID3Node+0x194>)
 8001902:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001906:	e892 0003 	ldmia.w	r2, {r0, r1}
 800190a:	e883 0003 	stmia.w	r3, {r0, r1}

	// Motor 3 object creation
	Motor motor3(motor_3_timer, motor_3_a, motor_3_b);
 800190e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001912:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001916:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800191a:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800191e:	f7ff faef 	bl	8000f00 <_ZN5MotorC1ER12MotorChannelR3PinS3_>

	// Encoder 3 object creation
	Encoder encoder3(&ENCODER_3_TIMER, ENCODER_3_STEPS);
 8001922:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001926:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8001a74 <PID3Node+0x198>
 800192a:	4953      	ldr	r1, [pc, #332]	; (8001a78 <PID3Node+0x19c>)
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fa59 	bl	8000de4 <_ZN7EncoderC1EP17TIM_HandleTypeDeff>

	// PID 3 object creation
	PID pid3(KP_CONST_3, KD_CONST_3, KI_CONST_3, MAX_PID_OUTPUT, MIN_PID_OUTPUT, PID_UPDATE_TIME_S);
 8001932:	f107 030c 	add.w	r3, r7, #12
 8001936:	eddf 2a51 	vldr	s5, [pc, #324]	; 8001a7c <PID3Node+0x1a0>
 800193a:	ed9f 2a51 	vldr	s4, [pc, #324]	; 8001a80 <PID3Node+0x1a4>
 800193e:	eddf 1a51 	vldr	s3, [pc, #324]	; 8001a84 <PID3Node+0x1a8>
 8001942:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8001946:	eddf 0a50 	vldr	s1, [pc, #320]	; 8001a88 <PID3Node+0x1ac>
 800194a:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8001a8c <PID3Node+0x1b0>
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fd46 	bl	80013e0 <_ZN3PIDC1Effffff>

	//float current_angle = 0, output_pid_3 = 0;
	if(robot_info_handler->angle_3 == 0){
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	edd3 7a02 	vldr	s15, [r3, #8]
 800195a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800195e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001962:	d11a      	bne.n	800199a <PID3Node+0xbe>
		// Check if the hall is in the initial position
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5) == GPIO_PIN_RESET){				// Change for PIN for hall 3
 8001964:	2120      	movs	r1, #32
 8001966:	484a      	ldr	r0, [pc, #296]	; (8001a90 <PID3Node+0x1b4>)
 8001968:	f001 fbf0 	bl	800314c <HAL_GPIO_ReadPin>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	bf0c      	ite	eq
 8001972:	2301      	moveq	r3, #1
 8001974:	2300      	movne	r3, #0
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	d009      	beq.n	8001990 <PID3Node+0xb4>
			current_angle_3 = 0;
 800197c:	4b45      	ldr	r3, [pc, #276]	; (8001a94 <PID3Node+0x1b8>)
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
			encoder3.resetTicksCounter();
 8001984:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff faa9 	bl	8000ee0 <_ZN7Encoder17resetTicksCounterEv>
 800198e:	e004      	b.n	800199a <PID3Node+0xbe>
		}
		else	motor3.goHomePosition();
 8001990:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fb83 	bl	80010a0 <_ZN5Motor14goHomePositionEv>
	}

	while(1){
		if(hall_3_flag == 1){
 800199a:	4b3f      	ldr	r3, [pc, #252]	; (8001a98 <PID3Node+0x1bc>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d10b      	bne.n	80019ba <PID3Node+0xde>
			hall_3_flag = 0;
 80019a2:	4b3d      	ldr	r3, [pc, #244]	; (8001a98 <PID3Node+0x1bc>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
			motor3.stopMotor();
 80019a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fc0f 	bl	80011d0 <_ZN5Motor9stopMotorEv>
			current_angle_3 = 0;
 80019b2:	4b38      	ldr	r3, [pc, #224]	; (8001a94 <PID3Node+0x1b8>)
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
		}
		pulses_3 = encoder3.getPulses();
 80019ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fa74 	bl	8000eac <_ZN7Encoder9getPulsesEv>
 80019c4:	eef0 7a40 	vmov.f32	s15, s0
 80019c8:	4b34      	ldr	r3, [pc, #208]	; (8001a9c <PID3Node+0x1c0>)
 80019ca:	edc3 7a00 	vstr	s15, [r3]
		current_angle_3 = encoder3.getAngle();
 80019ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fa28 	bl	8000e28 <_ZN7Encoder8getAngleEv>
 80019d8:	eef0 7a40 	vmov.f32	s15, s0
 80019dc:	4b2d      	ldr	r3, [pc, #180]	; (8001a94 <PID3Node+0x1b8>)
 80019de:	edc3 7a00 	vstr	s15, [r3]
		output_pid_3 = pid3.updatePID(robot_info_handler->angle_3, current_angle_3);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80019e8:	4b2a      	ldr	r3, [pc, #168]	; (8001a94 <PID3Node+0x1b8>)
 80019ea:	ed93 7a00 	vldr	s14, [r3]
 80019ee:	f107 030c 	add.w	r3, r7, #12
 80019f2:	eef0 0a47 	vmov.f32	s1, s14
 80019f6:	eeb0 0a67 	vmov.f32	s0, s15
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fd2e 	bl	800145c <_ZN3PID9updatePIDEff>
 8001a00:	eef0 7a40 	vmov.f32	s15, s0
 8001a04:	4b26      	ldr	r3, [pc, #152]	; (8001aa0 <PID3Node+0x1c4>)
 8001a06:	edc3 7a00 	vstr	s15, [r3]
		if(output_pid_3 > 0) motor3.turnLeft(output_pid_3);
 8001a0a:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <PID3Node+0x1c4>)
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a18:	dd0c      	ble.n	8001a34 <PID3Node+0x158>
 8001a1a:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <PID3Node+0x1c4>)
 8001a1c:	edd3 7a00 	vldr	s15, [r3]
 8001a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a24:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a28:	ee17 1a90 	vmov	r1, s15
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fa93 	bl	8000f58 <_ZN5Motor8turnLeftEm>
 8001a32:	e015      	b.n	8001a60 <PID3Node+0x184>
		else if(output_pid_3 < 0) motor3.turnRight(-output_pid_3);
 8001a34:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <PID3Node+0x1c4>)
 8001a36:	edd3 7a00 	vldr	s15, [r3]
 8001a3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a42:	d50d      	bpl.n	8001a60 <PID3Node+0x184>
 8001a44:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <PID3Node+0x1c4>)
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	eef1 7a67 	vneg.f32	s15, s15
 8001a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a52:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a56:	ee17 1a90 	vmov	r1, s15
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff face 	bl	8000ffc <_ZN5Motor9turnRightEm>
		osDelay(PID_UPDATE_TIME_mS);
 8001a60:	203c      	movs	r0, #60	; 0x3c
 8001a62:	f004 f8b0 	bl	8005bc6 <osDelay>
		if(hall_3_flag == 1){
 8001a66:	e798      	b.n	800199a <PID3Node+0xbe>
 8001a68:	08008310 	.word	0x08008310
 8001a6c:	08008318 	.word	0x08008318
 8001a70:	08008320 	.word	0x08008320
 8001a74:	45872000 	.word	0x45872000
 8001a78:	20004178 	.word	0x20004178
 8001a7c:	3d75c28f 	.word	0x3d75c28f
 8001a80:	c47a0000 	.word	0xc47a0000
 8001a84:	447a0000 	.word	0x447a0000
 8001a88:	3e4ccccd 	.word	0x3e4ccccd
 8001a8c:	428c0000 	.word	0x428c0000
 8001a90:	40020c00 	.word	0x40020c00
 8001a94:	20000068 	.word	0x20000068
 8001a98:	20000070 	.word	0x20000070
 8001a9c:	20000074 	.word	0x20000074
 8001aa0:	2000006c 	.word	0x2000006c

08001aa4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4a07      	ldr	r2, [pc, #28]	; (8001ad0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001ab4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	4a06      	ldr	r2, [pc, #24]	; (8001ad4 <vApplicationGetIdleTaskMemory+0x30>)
 8001aba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2280      	movs	r2, #128	; 0x80
 8001ac0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001ac2:	bf00      	nop
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20000078 	.word	0x20000078
 8001ad4:	200000cc 	.word	0x200000cc

08001ad8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001ad8:	b5b0      	push	{r4, r5, r7, lr}
 8001ada:	b0a6      	sub	sp, #152	; 0x98
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of mutex */
  osMutexDef(mutex);
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  mutexHandle = osMutexCreate(osMutex(mutex));
 8001aea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001aee:	4618      	mov	r0, r3
 8001af0:	f004 f87d 	bl	8005bee <osMutexCreate>
 8001af4:	4603      	mov	r3, r0
 8001af6:	4a31      	ldr	r2, [pc, #196]	; (8001bbc <MX_FREERTOS_Init+0xe4>)
 8001af8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8001afa:	4b31      	ldr	r3, [pc, #196]	; (8001bc0 <MX_FREERTOS_Init+0xe8>)
 8001afc:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001b00:	461d      	mov	r5, r3
 8001b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001b0e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b12:	2100      	movs	r1, #0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f004 f80a 	bl	8005b2e <osThreadCreate>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4a29      	ldr	r2, [pc, #164]	; (8001bc4 <MX_FREERTOS_Init+0xec>)
 8001b1e:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskPID1 */
  osThreadDef(taskPID1, startPID1, osPriorityIdle, 0, 512);
 8001b20:	4b29      	ldr	r3, [pc, #164]	; (8001bc8 <MX_FREERTOS_Init+0xf0>)
 8001b22:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001b26:	461d      	mov	r5, r3
 8001b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskPID1Handle = osThreadCreate(osThread(taskPID1), NULL);
 8001b34:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f003 fff7 	bl	8005b2e <osThreadCreate>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4a22      	ldr	r2, [pc, #136]	; (8001bcc <MX_FREERTOS_Init+0xf4>)
 8001b44:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskPID2 */
  osThreadDef(taskPID2, startPID2, osPriorityIdle, 0, 512);
 8001b46:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <MX_FREERTOS_Init+0xf8>)
 8001b48:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001b4c:	461d      	mov	r5, r3
 8001b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskPID2Handle = osThreadCreate(osThread(taskPID2), NULL);
 8001b5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f003 ffe4 	bl	8005b2e <osThreadCreate>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4a1a      	ldr	r2, [pc, #104]	; (8001bd4 <MX_FREERTOS_Init+0xfc>)
 8001b6a:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskPID3 */
  osThreadDef(taskPID3, startPID3, osPriorityNormal, 0, 512);
 8001b6c:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <MX_FREERTOS_Init+0x100>)
 8001b6e:	f107 0420 	add.w	r4, r7, #32
 8001b72:	461d      	mov	r5, r3
 8001b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskPID3Handle = osThreadCreate(osThread(taskPID3), NULL);
 8001b80:	f107 0320 	add.w	r3, r7, #32
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f003 ffd1 	bl	8005b2e <osThreadCreate>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4a13      	ldr	r2, [pc, #76]	; (8001bdc <MX_FREERTOS_Init+0x104>)
 8001b90:	6013      	str	r3, [r2, #0]

  /* definition and creation of ROSComms */
  osThreadDef(ROSComms, startROSComms, osPriorityNormal, 0, 1024);
 8001b92:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <MX_FREERTOS_Init+0x108>)
 8001b94:	1d3c      	adds	r4, r7, #4
 8001b96:	461d      	mov	r5, r3
 8001b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ba0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ROSCommsHandle = osThreadCreate(osThread(ROSComms), NULL);
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f003 ffc0 	bl	8005b2e <osThreadCreate>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4a0c      	ldr	r2, [pc, #48]	; (8001be4 <MX_FREERTOS_Init+0x10c>)
 8001bb2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001bb4:	bf00      	nop
 8001bb6:	3798      	adds	r7, #152	; 0x98
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bdb0      	pop	{r4, r5, r7, pc}
 8001bbc:	2000402c 	.word	0x2000402c
 8001bc0:	08008364 	.word	0x08008364
 8001bc4:	20004020 	.word	0x20004020
 8001bc8:	08008380 	.word	0x08008380
 8001bcc:	20004028 	.word	0x20004028
 8001bd0:	0800839c 	.word	0x0800839c
 8001bd4:	20004034 	.word	0x20004034
 8001bd8:	080083b8 	.word	0x080083b8
 8001bdc:	20004024 	.word	0x20004024
 8001be0:	080083d4 	.word	0x080083d4
 8001be4:	20004030 	.word	0x20004030

08001be8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8001bf0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bf4:	4803      	ldr	r0, [pc, #12]	; (8001c04 <StartDefaultTask+0x1c>)
 8001bf6:	f001 fada 	bl	80031ae <HAL_GPIO_TogglePin>
    osDelay(2000);
 8001bfa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bfe:	f003 ffe2 	bl	8005bc6 <osDelay>
	HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8001c02:	e7f5      	b.n	8001bf0 <StartDefaultTask+0x8>
 8001c04:	40021000 	.word	0x40021000

08001c08 <startPID1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPID1 */
void startPID1(void const * argument)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPID1 */
	PID1Node(&robot_info_handler);
 8001c10:	4803      	ldr	r0, [pc, #12]	; (8001c20 <startPID1+0x18>)
 8001c12:	f7ff fcad 	bl	8001570 <PID1Node>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8001c16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c1a:	f003 ffd4 	bl	8005bc6 <osDelay>
 8001c1e:	e7fa      	b.n	8001c16 <startPID1+0xe>
 8001c20:	20004038 	.word	0x20004038

08001c24 <startPID2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPID2 */
void startPID2(void const * argument)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPID2 */
	PID2Node(&robot_info_handler);
 8001c2c:	4803      	ldr	r0, [pc, #12]	; (8001c3c <startPID2+0x18>)
 8001c2e:	f7ff fd75 	bl	800171c <PID2Node>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8001c32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c36:	f003 ffc6 	bl	8005bc6 <osDelay>
 8001c3a:	e7fa      	b.n	8001c32 <startPID2+0xe>
 8001c3c:	20004038 	.word	0x20004038

08001c40 <startPID3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPID3 */
void startPID3(void const * argument)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPID3 */
	PID3Node(&robot_info_handler);
 8001c48:	4803      	ldr	r0, [pc, #12]	; (8001c58 <startPID3+0x18>)
 8001c4a:	f7ff fe47 	bl	80018dc <PID3Node>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8001c4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c52:	f003 ffb8 	bl	8005bc6 <osDelay>
 8001c56:	e7fa      	b.n	8001c4e <startPID3+0xe>
 8001c58:	20004038 	.word	0x20004038

08001c5c <startROSComms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startROSComms */
void startROSComms(void const * argument)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startROSComms */
	robotInfoInit(&robot_info_handler, &mutexHandle);
 8001c64:	4905      	ldr	r1, [pc, #20]	; (8001c7c <startROSComms+0x20>)
 8001c66:	4806      	ldr	r0, [pc, #24]	; (8001c80 <startROSComms+0x24>)
 8001c68:	f7ff f84c 	bl	8000d04 <robotInfoInit>
	startSerialComms(&robot_info_handler);
 8001c6c:	4804      	ldr	r0, [pc, #16]	; (8001c80 <startROSComms+0x24>)
 8001c6e:	f7ff fb09 	bl	8001284 <startSerialComms>
  /* Infinite loop */
  for(;;)
  {
	osDelay(1);
 8001c72:	2001      	movs	r0, #1
 8001c74:	f003 ffa7 	bl	8005bc6 <osDelay>
 8001c78:	e7fb      	b.n	8001c72 <startROSComms+0x16>
 8001c7a:	bf00      	nop
 8001c7c:	2000402c 	.word	0x2000402c
 8001c80:	20004038 	.word	0x20004038

08001c84 <HAL_GPIO_EXTI_Callback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
// Callback function for external gpio interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_6){
 8001c8e:	88fb      	ldrh	r3, [r7, #6]
 8001c90:	2b40      	cmp	r3, #64	; 0x40
 8001c92:	d107      	bne.n	8001ca4 <HAL_GPIO_EXTI_Callback+0x20>
		hall_2_flag = 1;
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <HAL_GPIO_EXTI_Callback+0x44>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8001c9a:	2102      	movs	r1, #2
 8001c9c:	480b      	ldr	r0, [pc, #44]	; (8001ccc <HAL_GPIO_EXTI_Callback+0x48>)
 8001c9e:	f001 fa86 	bl	80031ae <HAL_GPIO_TogglePin>
		hall_3_flag = 1;
	}
	else if(GPIO_Pin == GPIO_PIN_7){						// Change PIN for hall 1
		hall_1_flag = 1;
	}
}
 8001ca2:	e00c      	b.n	8001cbe <HAL_GPIO_EXTI_Callback+0x3a>
	else if(GPIO_Pin == GPIO_PIN_5){						// Change for PIN for hall 3
 8001ca4:	88fb      	ldrh	r3, [r7, #6]
 8001ca6:	2b20      	cmp	r3, #32
 8001ca8:	d103      	bne.n	8001cb2 <HAL_GPIO_EXTI_Callback+0x2e>
		hall_3_flag = 1;
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
}
 8001cb0:	e005      	b.n	8001cbe <HAL_GPIO_EXTI_Callback+0x3a>
	else if(GPIO_Pin == GPIO_PIN_7){						// Change PIN for hall 1
 8001cb2:	88fb      	ldrh	r3, [r7, #6]
 8001cb4:	2b80      	cmp	r3, #128	; 0x80
 8001cb6:	d102      	bne.n	8001cbe <HAL_GPIO_EXTI_Callback+0x3a>
		hall_1_flag = 1;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_GPIO_EXTI_Callback+0x50>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000060 	.word	0x20000060
 8001ccc:	40020800 	.word	0x40020800
 8001cd0:	20000070 	.word	0x20000070
 8001cd4:	20000054 	.word	0x20000054

08001cd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08c      	sub	sp, #48	; 0x30
 8001cdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cde:	f107 031c 	add.w	r3, r7, #28
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
 8001cea:	60da      	str	r2, [r3, #12]
 8001cec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61bb      	str	r3, [r7, #24]
 8001cf2:	4b74      	ldr	r3, [pc, #464]	; (8001ec4 <MX_GPIO_Init+0x1ec>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a73      	ldr	r2, [pc, #460]	; (8001ec4 <MX_GPIO_Init+0x1ec>)
 8001cf8:	f043 0310 	orr.w	r3, r3, #16
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b71      	ldr	r3, [pc, #452]	; (8001ec4 <MX_GPIO_Init+0x1ec>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f003 0310 	and.w	r3, r3, #16
 8001d06:	61bb      	str	r3, [r7, #24]
 8001d08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	4b6d      	ldr	r3, [pc, #436]	; (8001ec4 <MX_GPIO_Init+0x1ec>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a6c      	ldr	r2, [pc, #432]	; (8001ec4 <MX_GPIO_Init+0x1ec>)
 8001d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <MX_GPIO_Init+0x1ec>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	4b66      	ldr	r3, [pc, #408]	; (8001ec4 <MX_GPIO_Init+0x1ec>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a65      	ldr	r2, [pc, #404]	; (8001ec4 <MX_GPIO_Init+0x1ec>)
 8001d30:	f043 0304 	orr.w	r3, r3, #4
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b63      	ldr	r3, [pc, #396]	; (8001ec4 <MX_GPIO_Init+0x1ec>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b5f      	ldr	r3, [pc, #380]	; (8001ec4 <MX_GPIO_Init+0x1ec>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a5e      	ldr	r2, [pc, #376]	; (8001ec4 <MX_GPIO_Init+0x1ec>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b5c      	ldr	r3, [pc, #368]	; (8001ec4 <MX_GPIO_Init+0x1ec>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	4b58      	ldr	r3, [pc, #352]	; (8001ec4 <MX_GPIO_Init+0x1ec>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a57      	ldr	r2, [pc, #348]	; (8001ec4 <MX_GPIO_Init+0x1ec>)
 8001d68:	f043 0302 	orr.w	r3, r3, #2
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b55      	ldr	r3, [pc, #340]	; (8001ec4 <MX_GPIO_Init+0x1ec>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	4b51      	ldr	r3, [pc, #324]	; (8001ec4 <MX_GPIO_Init+0x1ec>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a50      	ldr	r2, [pc, #320]	; (8001ec4 <MX_GPIO_Init+0x1ec>)
 8001d84:	f043 0308 	orr.w	r3, r3, #8
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b4e      	ldr	r3, [pc, #312]	; (8001ec4 <MX_GPIO_Init+0x1ec>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MOTOR_2_R_Pin|MOTOR_2_L_Pin|GPIO_PIN_7|LED_2_Pin, GPIO_PIN_RESET);
 8001d96:	2200      	movs	r2, #0
 8001d98:	f248 0194 	movw	r1, #32916	; 0x8094
 8001d9c:	484a      	ldr	r0, [pc, #296]	; (8001ec8 <MX_GPIO_Init+0x1f0>)
 8001d9e:	f001 f9ed 	bl	800317c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|MOTOR_1_R_Pin, GPIO_PIN_RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	210a      	movs	r1, #10
 8001da6:	4849      	ldr	r0, [pc, #292]	; (8001ecc <MX_GPIO_Init+0x1f4>)
 8001da8:	f001 f9e8 	bl	800317c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_1_L_GPIO_Port, MOTOR_1_L_Pin, GPIO_PIN_RESET);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2110      	movs	r1, #16
 8001db0:	4847      	ldr	r0, [pc, #284]	; (8001ed0 <MX_GPIO_Init+0x1f8>)
 8001db2:	f001 f9e3 	bl	800317c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001db6:	2200      	movs	r2, #0
 8001db8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001dbc:	4845      	ldr	r0, [pc, #276]	; (8001ed4 <MX_GPIO_Init+0x1fc>)
 8001dbe:	f001 f9dd 	bl	800317c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR_3_R_Pin|MOTOR_3_L_Pin, GPIO_PIN_RESET);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8001dc8:	4843      	ldr	r0, [pc, #268]	; (8001ed8 <MX_GPIO_Init+0x200>)
 8001dca:	f001 f9d7 	bl	800317c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PE7 PEPin */
  GPIO_InitStruct.Pin = MOTOR_2_R_Pin|MOTOR_2_L_Pin|GPIO_PIN_7|LED_2_Pin;
 8001dce:	f248 0394 	movw	r3, #32916	; 0x8094
 8001dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001de0:	f107 031c 	add.w	r3, r7, #28
 8001de4:	4619      	mov	r1, r3
 8001de6:	4838      	ldr	r0, [pc, #224]	; (8001ec8 <MX_GPIO_Init+0x1f0>)
 8001de8:	f001 f814 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|MOTOR_1_R_Pin;
 8001dec:	230a      	movs	r3, #10
 8001dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df0:	2301      	movs	r3, #1
 8001df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dfc:	f107 031c 	add.w	r3, r7, #28
 8001e00:	4619      	mov	r1, r3
 8001e02:	4832      	ldr	r0, [pc, #200]	; (8001ecc <MX_GPIO_Init+0x1f4>)
 8001e04:	f001 f806 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_1_L_Pin;
 8001e08:	2310      	movs	r3, #16
 8001e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MOTOR_1_L_GPIO_Port, &GPIO_InitStruct);
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	482c      	ldr	r0, [pc, #176]	; (8001ed0 <MX_GPIO_Init+0x1f8>)
 8001e20:	f000 fff8 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001e32:	f107 031c 	add.w	r3, r7, #28
 8001e36:	4619      	mov	r1, r3
 8001e38:	4823      	ldr	r0, [pc, #140]	; (8001ec8 <MX_GPIO_Init+0x1f0>)
 8001e3a:	f000 ffeb 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001e3e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e44:	2301      	movs	r3, #1
 8001e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	4619      	mov	r1, r3
 8001e56:	481f      	ldr	r0, [pc, #124]	; (8001ed4 <MX_GPIO_Init+0x1fc>)
 8001e58:	f000 ffdc 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = MOTOR_3_R_Pin|MOTOR_3_L_Pin;
 8001e5c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e62:	2301      	movs	r3, #1
 8001e64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e6e:	f107 031c 	add.w	r3, r7, #28
 8001e72:	4619      	mov	r1, r3
 8001e74:	4818      	ldr	r0, [pc, #96]	; (8001ed8 <MX_GPIO_Init+0x200>)
 8001e76:	f000 ffcd 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e7a:	23a0      	movs	r3, #160	; 0xa0
 8001e7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e7e:	4b17      	ldr	r3, [pc, #92]	; (8001edc <MX_GPIO_Init+0x204>)
 8001e80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e86:	f107 031c 	add.w	r3, r7, #28
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4812      	ldr	r0, [pc, #72]	; (8001ed8 <MX_GPIO_Init+0x200>)
 8001e8e:	f000 ffc1 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e92:	2340      	movs	r3, #64	; 0x40
 8001e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <MX_GPIO_Init+0x208>)
 8001e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e9e:	f107 031c 	add.w	r3, r7, #28
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	480c      	ldr	r0, [pc, #48]	; (8001ed8 <MX_GPIO_Init+0x200>)
 8001ea6:	f000 ffb5 	bl	8002e14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2105      	movs	r1, #5
 8001eae:	2017      	movs	r0, #23
 8001eb0:	f000 fef4 	bl	8002c9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001eb4:	2017      	movs	r0, #23
 8001eb6:	f000 ff0d 	bl	8002cd4 <HAL_NVIC_EnableIRQ>

}
 8001eba:	bf00      	nop
 8001ebc:	3730      	adds	r7, #48	; 0x30
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40020800 	.word	0x40020800
 8001ed0:	40020000 	.word	0x40020000
 8001ed4:	40020400 	.word	0x40020400
 8001ed8:	40020c00 	.word	0x40020c00
 8001edc:	10110000 	.word	0x10110000
 8001ee0:	10210000 	.word	0x10210000

08001ee4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001eea:	4a13      	ldr	r2, [pc, #76]	; (8001f38 <MX_I2C1_Init+0x54>)
 8001eec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001eee:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001ef0:	4a12      	ldr	r2, [pc, #72]	; (8001f3c <MX_I2C1_Init+0x58>)
 8001ef2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f00:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001f02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f08:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f14:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f20:	4804      	ldr	r0, [pc, #16]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001f22:	f001 f977 	bl	8003214 <HAL_I2C_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f2c:	f000 f8e8 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	2000404c 	.word	0x2000404c
 8001f38:	40005400 	.word	0x40005400
 8001f3c:	000186a0 	.word	0x000186a0

08001f40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a19      	ldr	r2, [pc, #100]	; (8001fc4 <HAL_I2C_MspInit+0x84>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d12b      	bne.n	8001fba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <HAL_I2C_MspInit+0x88>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a17      	ldr	r2, [pc, #92]	; (8001fc8 <HAL_I2C_MspInit+0x88>)
 8001f6c:	f043 0302 	orr.w	r3, r3, #2
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <HAL_I2C_MspInit+0x88>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f7e:	23c0      	movs	r3, #192	; 0xc0
 8001f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f82:	2312      	movs	r3, #18
 8001f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f86:	2301      	movs	r3, #1
 8001f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f8e:	2304      	movs	r3, #4
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f92:	f107 0314 	add.w	r3, r7, #20
 8001f96:	4619      	mov	r1, r3
 8001f98:	480c      	ldr	r0, [pc, #48]	; (8001fcc <HAL_I2C_MspInit+0x8c>)
 8001f9a:	f000 ff3b 	bl	8002e14 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <HAL_I2C_MspInit+0x88>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	4a08      	ldr	r2, [pc, #32]	; (8001fc8 <HAL_I2C_MspInit+0x88>)
 8001fa8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fac:	6413      	str	r3, [r2, #64]	; 0x40
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_I2C_MspInit+0x88>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001fba:	bf00      	nop
 8001fbc:	3728      	adds	r7, #40	; 0x28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40005400 	.word	0x40005400
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40020400 	.word	0x40020400

08001fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fd4:	f000 fd68 	bl	8002aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fd8:	f000 f816 	bl	8002008 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fdc:	f7ff fe7c 	bl	8001cd8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001fe0:	f000 fc32 	bl	8002848 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001fe4:	f000 fa2e 	bl	8002444 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001fe8:	f000 f96a 	bl	80022c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001fec:	f000 f9d6 	bl	800239c <MX_TIM3_Init>
  MX_TIM8_Init();
 8001ff0:	f000 fa7c 	bl	80024ec <MX_TIM8_Init>
  MX_UART5_Init();
 8001ff4:	f000 fbfe 	bl	80027f4 <MX_UART5_Init>
  MX_I2C1_Init();
 8001ff8:	f7ff ff74 	bl	8001ee4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001ffc:	f7ff fd6c 	bl	8001ad8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002000:	f003 fd8e 	bl	8005b20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002004:	e7fe      	b.n	8002004 <main+0x34>
	...

08002008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b094      	sub	sp, #80	; 0x50
 800200c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800200e:	f107 0320 	add.w	r3, r7, #32
 8002012:	2230      	movs	r2, #48	; 0x30
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f006 f952 	bl	80082c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800201c:	f107 030c 	add.w	r3, r7, #12
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800202c:	2300      	movs	r3, #0
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	4b28      	ldr	r3, [pc, #160]	; (80020d4 <SystemClock_Config+0xcc>)
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	4a27      	ldr	r2, [pc, #156]	; (80020d4 <SystemClock_Config+0xcc>)
 8002036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800203a:	6413      	str	r3, [r2, #64]	; 0x40
 800203c:	4b25      	ldr	r3, [pc, #148]	; (80020d4 <SystemClock_Config+0xcc>)
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002048:	2300      	movs	r3, #0
 800204a:	607b      	str	r3, [r7, #4]
 800204c:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <SystemClock_Config+0xd0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a21      	ldr	r2, [pc, #132]	; (80020d8 <SystemClock_Config+0xd0>)
 8002052:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002056:	6013      	str	r3, [r2, #0]
 8002058:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <SystemClock_Config+0xd0>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002060:	607b      	str	r3, [r7, #4]
 8002062:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002064:	2301      	movs	r3, #1
 8002066:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002068:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800206e:	2302      	movs	r3, #2
 8002070:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002072:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002076:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002078:	2304      	movs	r3, #4
 800207a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800207c:	23a8      	movs	r3, #168	; 0xa8
 800207e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002080:	2302      	movs	r3, #2
 8002082:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002084:	2304      	movs	r3, #4
 8002086:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002088:	f107 0320 	add.w	r3, r7, #32
 800208c:	4618      	mov	r0, r3
 800208e:	f001 fa05 	bl	800349c <HAL_RCC_OscConfig>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002098:	f000 f832 	bl	8002100 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800209c:	230f      	movs	r3, #15
 800209e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020a0:	2302      	movs	r3, #2
 80020a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80020a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80020b4:	f107 030c 	add.w	r3, r7, #12
 80020b8:	2105      	movs	r1, #5
 80020ba:	4618      	mov	r0, r3
 80020bc:	f001 fc66 	bl	800398c <HAL_RCC_ClockConfig>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80020c6:	f000 f81b 	bl	8002100 <Error_Handler>
  }
}
 80020ca:	bf00      	nop
 80020cc:	3750      	adds	r7, #80	; 0x50
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40007000 	.word	0x40007000

080020dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a04      	ldr	r2, [pc, #16]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d101      	bne.n	80020f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020ee:	f000 fcfd 	bl	8002aec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40010000 	.word	0x40010000

08002100 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
	...

08002110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	4b12      	ldr	r3, [pc, #72]	; (8002164 <HAL_MspInit+0x54>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	4a11      	ldr	r2, [pc, #68]	; (8002164 <HAL_MspInit+0x54>)
 8002120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002124:	6453      	str	r3, [r2, #68]	; 0x44
 8002126:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <HAL_MspInit+0x54>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	603b      	str	r3, [r7, #0]
 8002136:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_MspInit+0x54>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <HAL_MspInit+0x54>)
 800213c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002140:	6413      	str	r3, [r2, #64]	; 0x40
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <HAL_MspInit+0x54>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214a:	603b      	str	r3, [r7, #0]
 800214c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800214e:	2200      	movs	r2, #0
 8002150:	210f      	movs	r1, #15
 8002152:	f06f 0001 	mvn.w	r0, #1
 8002156:	f000 fda1 	bl	8002c9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40023800 	.word	0x40023800

08002168 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08c      	sub	sp, #48	; 0x30
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002178:	2200      	movs	r2, #0
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	2019      	movs	r0, #25
 800217e:	f000 fd8d 	bl	8002c9c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002182:	2019      	movs	r0, #25
 8002184:	f000 fda6 	bl	8002cd4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	4b1f      	ldr	r3, [pc, #124]	; (800220c <HAL_InitTick+0xa4>)
 800218e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002190:	4a1e      	ldr	r2, [pc, #120]	; (800220c <HAL_InitTick+0xa4>)
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	6453      	str	r3, [r2, #68]	; 0x44
 8002198:	4b1c      	ldr	r3, [pc, #112]	; (800220c <HAL_InitTick+0xa4>)
 800219a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021a4:	f107 0210 	add.w	r2, r7, #16
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	4611      	mov	r1, r2
 80021ae:	4618      	mov	r0, r3
 80021b0:	f001 fde8 	bl	8003d84 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80021b4:	f001 fdd2 	bl	8003d5c <HAL_RCC_GetPCLK2Freq>
 80021b8:	4603      	mov	r3, r0
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c0:	4a13      	ldr	r2, [pc, #76]	; (8002210 <HAL_InitTick+0xa8>)
 80021c2:	fba2 2303 	umull	r2, r3, r2, r3
 80021c6:	0c9b      	lsrs	r3, r3, #18
 80021c8:	3b01      	subs	r3, #1
 80021ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80021cc:	4b11      	ldr	r3, [pc, #68]	; (8002214 <HAL_InitTick+0xac>)
 80021ce:	4a12      	ldr	r2, [pc, #72]	; (8002218 <HAL_InitTick+0xb0>)
 80021d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <HAL_InitTick+0xac>)
 80021d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021d8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80021da:	4a0e      	ldr	r2, [pc, #56]	; (8002214 <HAL_InitTick+0xac>)
 80021dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021de:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <HAL_InitTick+0xac>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_InitTick+0xac>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80021ec:	4809      	ldr	r0, [pc, #36]	; (8002214 <HAL_InitTick+0xac>)
 80021ee:	f001 fdfb 	bl	8003de8 <HAL_TIM_Base_Init>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d104      	bne.n	8002202 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80021f8:	4806      	ldr	r0, [pc, #24]	; (8002214 <HAL_InitTick+0xac>)
 80021fa:	f001 fe4f 	bl	8003e9c <HAL_TIM_Base_Start_IT>
 80021fe:	4603      	mov	r3, r0
 8002200:	e000      	b.n	8002204 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
}
 8002204:	4618      	mov	r0, r3
 8002206:	3730      	adds	r7, #48	; 0x30
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40023800 	.word	0x40023800
 8002210:	431bde83 	.word	0x431bde83
 8002214:	200040a0 	.word	0x200040a0
 8002218:	40010000 	.word	0x40010000

0800221c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800222e:	e7fe      	b.n	800222e <HardFault_Handler+0x4>

08002230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <MemManage_Handler+0x4>

08002236 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223a:	e7fe      	b.n	800223a <BusFault_Handler+0x4>

0800223c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002240:	e7fe      	b.n	8002240 <UsageFault_Handler+0x4>

08002242 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002254:	2020      	movs	r0, #32
 8002256:	f000 ffc5 	bl	80031e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800225a:	2040      	movs	r0, #64	; 0x40
 800225c:	f000 ffc2 	bl	80031e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002260:	2080      	movs	r0, #128	; 0x80
 8002262:	f000 ffbf 	bl	80031e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002272:	f002 f8cf 	bl	8004414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200040a0 	.word	0x200040a0

08002280 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <USART2_IRQHandler+0x10>)
 8002286:	f002 fec9 	bl	800501c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	2000424c 	.word	0x2000424c

08002294 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <SystemInit+0x28>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229e:	4a07      	ldr	r2, [pc, #28]	; (80022bc <SystemInit+0x28>)
 80022a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022a8:	4b04      	ldr	r3, [pc, #16]	; (80022bc <SystemInit+0x28>)
 80022aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022ae:	609a      	str	r2, [r3, #8]
#endif
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c6:	f107 0320 	add.w	r3, r7, #32
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	60da      	str	r2, [r3, #12]
 80022dc:	611a      	str	r2, [r3, #16]
 80022de:	615a      	str	r2, [r3, #20]
 80022e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022e2:	4b2d      	ldr	r3, [pc, #180]	; (8002398 <MX_TIM2_Init+0xd8>)
 80022e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80022ea:	4b2b      	ldr	r3, [pc, #172]	; (8002398 <MX_TIM2_Init+0xd8>)
 80022ec:	2253      	movs	r2, #83	; 0x53
 80022ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f0:	4b29      	ldr	r3, [pc, #164]	; (8002398 <MX_TIM2_Init+0xd8>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80022f6:	4b28      	ldr	r3, [pc, #160]	; (8002398 <MX_TIM2_Init+0xd8>)
 80022f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022fe:	4b26      	ldr	r3, [pc, #152]	; (8002398 <MX_TIM2_Init+0xd8>)
 8002300:	2200      	movs	r2, #0
 8002302:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002304:	4b24      	ldr	r3, [pc, #144]	; (8002398 <MX_TIM2_Init+0xd8>)
 8002306:	2200      	movs	r2, #0
 8002308:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800230a:	4823      	ldr	r0, [pc, #140]	; (8002398 <MX_TIM2_Init+0xd8>)
 800230c:	f001 fe36 	bl	8003f7c <HAL_TIM_PWM_Init>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002316:	f7ff fef3 	bl	8002100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800231a:	2300      	movs	r3, #0
 800231c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800231e:	2300      	movs	r3, #0
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002322:	f107 0320 	add.w	r3, r7, #32
 8002326:	4619      	mov	r1, r3
 8002328:	481b      	ldr	r0, [pc, #108]	; (8002398 <MX_TIM2_Init+0xd8>)
 800232a:	f002 fcd7 	bl	8004cdc <HAL_TIMEx_MasterConfigSynchronization>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002334:	f7ff fee4 	bl	8002100 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002338:	2360      	movs	r3, #96	; 0x60
 800233a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002348:	1d3b      	adds	r3, r7, #4
 800234a:	2200      	movs	r2, #0
 800234c:	4619      	mov	r1, r3
 800234e:	4812      	ldr	r0, [pc, #72]	; (8002398 <MX_TIM2_Init+0xd8>)
 8002350:	f002 f968 	bl	8004624 <HAL_TIM_PWM_ConfigChannel>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800235a:	f7ff fed1 	bl	8002100 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800235e:	1d3b      	adds	r3, r7, #4
 8002360:	2204      	movs	r2, #4
 8002362:	4619      	mov	r1, r3
 8002364:	480c      	ldr	r0, [pc, #48]	; (8002398 <MX_TIM2_Init+0xd8>)
 8002366:	f002 f95d 	bl	8004624 <HAL_TIM_PWM_ConfigChannel>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002370:	f7ff fec6 	bl	8002100 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002374:	1d3b      	adds	r3, r7, #4
 8002376:	2208      	movs	r2, #8
 8002378:	4619      	mov	r1, r3
 800237a:	4807      	ldr	r0, [pc, #28]	; (8002398 <MX_TIM2_Init+0xd8>)
 800237c:	f002 f952 	bl	8004624 <HAL_TIM_PWM_ConfigChannel>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8002386:	f7ff febb 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800238a:	4803      	ldr	r0, [pc, #12]	; (8002398 <MX_TIM2_Init+0xd8>)
 800238c:	f000 f9da 	bl	8002744 <HAL_TIM_MspPostInit>

}
 8002390:	bf00      	nop
 8002392:	3728      	adds	r7, #40	; 0x28
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	200041c0 	.word	0x200041c0

0800239c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08c      	sub	sp, #48	; 0x30
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023a2:	f107 030c 	add.w	r3, r7, #12
 80023a6:	2224      	movs	r2, #36	; 0x24
 80023a8:	2100      	movs	r1, #0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f005 ff88 	bl	80082c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023b8:	4b20      	ldr	r3, [pc, #128]	; (800243c <MX_TIM3_Init+0xa0>)
 80023ba:	4a21      	ldr	r2, [pc, #132]	; (8002440 <MX_TIM3_Init+0xa4>)
 80023bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80023be:	4b1f      	ldr	r3, [pc, #124]	; (800243c <MX_TIM3_Init+0xa0>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c4:	4b1d      	ldr	r3, [pc, #116]	; (800243c <MX_TIM3_Init+0xa0>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80023ca:	4b1c      	ldr	r3, [pc, #112]	; (800243c <MX_TIM3_Init+0xa0>)
 80023cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d2:	4b1a      	ldr	r3, [pc, #104]	; (800243c <MX_TIM3_Init+0xa0>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023d8:	4b18      	ldr	r3, [pc, #96]	; (800243c <MX_TIM3_Init+0xa0>)
 80023da:	2200      	movs	r2, #0
 80023dc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80023de:	2301      	movs	r3, #1
 80023e0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023e6:	2301      	movs	r3, #1
 80023e8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023f2:	2300      	movs	r3, #0
 80023f4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023f6:	2301      	movs	r3, #1
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023fa:	2300      	movs	r3, #0
 80023fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002402:	f107 030c 	add.w	r3, r7, #12
 8002406:	4619      	mov	r1, r3
 8002408:	480c      	ldr	r0, [pc, #48]	; (800243c <MX_TIM3_Init+0xa0>)
 800240a:	f001 fecf 	bl	80041ac <HAL_TIM_Encoder_Init>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002414:	f7ff fe74 	bl	8002100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002418:	2300      	movs	r3, #0
 800241a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800241c:	2300      	movs	r3, #0
 800241e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	4619      	mov	r1, r3
 8002424:	4805      	ldr	r0, [pc, #20]	; (800243c <MX_TIM3_Init+0xa0>)
 8002426:	f002 fc59 	bl	8004cdc <HAL_TIMEx_MasterConfigSynchronization>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002430:	f7ff fe66 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002434:	bf00      	nop
 8002436:	3730      	adds	r7, #48	; 0x30
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20004178 	.word	0x20004178
 8002440:	40000400 	.word	0x40000400

08002444 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08c      	sub	sp, #48	; 0x30
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800244a:	f107 030c 	add.w	r3, r7, #12
 800244e:	2224      	movs	r2, #36	; 0x24
 8002450:	2100      	movs	r1, #0
 8002452:	4618      	mov	r0, r3
 8002454:	f005 ff34 	bl	80082c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <MX_TIM4_Init+0xa0>)
 8002462:	4a21      	ldr	r2, [pc, #132]	; (80024e8 <MX_TIM4_Init+0xa4>)
 8002464:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002466:	4b1f      	ldr	r3, [pc, #124]	; (80024e4 <MX_TIM4_Init+0xa0>)
 8002468:	2200      	movs	r2, #0
 800246a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800246c:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <MX_TIM4_Init+0xa0>)
 800246e:	2200      	movs	r2, #0
 8002470:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20127;
 8002472:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <MX_TIM4_Init+0xa0>)
 8002474:	f644 629f 	movw	r2, #20127	; 0x4e9f
 8002478:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800247a:	4b1a      	ldr	r3, [pc, #104]	; (80024e4 <MX_TIM4_Init+0xa0>)
 800247c:	2200      	movs	r2, #0
 800247e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002480:	4b18      	ldr	r3, [pc, #96]	; (80024e4 <MX_TIM4_Init+0xa0>)
 8002482:	2200      	movs	r2, #0
 8002484:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002486:	2301      	movs	r3, #1
 8002488:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800248e:	2301      	movs	r3, #1
 8002490:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002496:	230f      	movs	r3, #15
 8002498:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800249a:	2300      	movs	r3, #0
 800249c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800249e:	2301      	movs	r3, #1
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024a2:	2300      	movs	r3, #0
 80024a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80024a6:	230f      	movs	r3, #15
 80024a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80024aa:	f107 030c 	add.w	r3, r7, #12
 80024ae:	4619      	mov	r1, r3
 80024b0:	480c      	ldr	r0, [pc, #48]	; (80024e4 <MX_TIM4_Init+0xa0>)
 80024b2:	f001 fe7b 	bl	80041ac <HAL_TIM_Encoder_Init>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80024bc:	f7ff fe20 	bl	8002100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024c0:	2300      	movs	r3, #0
 80024c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024c8:	1d3b      	adds	r3, r7, #4
 80024ca:	4619      	mov	r1, r3
 80024cc:	4805      	ldr	r0, [pc, #20]	; (80024e4 <MX_TIM4_Init+0xa0>)
 80024ce:	f002 fc05 	bl	8004cdc <HAL_TIMEx_MasterConfigSynchronization>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80024d8:	f7ff fe12 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80024dc:	bf00      	nop
 80024de:	3730      	adds	r7, #48	; 0x30
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20004130 	.word	0x20004130
 80024e8:	40000800 	.word	0x40000800

080024ec <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08c      	sub	sp, #48	; 0x30
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024f2:	f107 030c 	add.w	r3, r7, #12
 80024f6:	2224      	movs	r2, #36	; 0x24
 80024f8:	2100      	movs	r1, #0
 80024fa:	4618      	mov	r0, r3
 80024fc:	f005 fee0 	bl	80082c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002500:	1d3b      	adds	r3, r7, #4
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002508:	4b22      	ldr	r3, [pc, #136]	; (8002594 <MX_TIM8_Init+0xa8>)
 800250a:	4a23      	ldr	r2, [pc, #140]	; (8002598 <MX_TIM8_Init+0xac>)
 800250c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800250e:	4b21      	ldr	r3, [pc, #132]	; (8002594 <MX_TIM8_Init+0xa8>)
 8002510:	2200      	movs	r2, #0
 8002512:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002514:	4b1f      	ldr	r3, [pc, #124]	; (8002594 <MX_TIM8_Init+0xa8>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800251a:	4b1e      	ldr	r3, [pc, #120]	; (8002594 <MX_TIM8_Init+0xa8>)
 800251c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002520:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002522:	4b1c      	ldr	r3, [pc, #112]	; (8002594 <MX_TIM8_Init+0xa8>)
 8002524:	2200      	movs	r2, #0
 8002526:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002528:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <MX_TIM8_Init+0xa8>)
 800252a:	2200      	movs	r2, #0
 800252c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800252e:	4b19      	ldr	r3, [pc, #100]	; (8002594 <MX_TIM8_Init+0xa8>)
 8002530:	2200      	movs	r2, #0
 8002532:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002534:	2301      	movs	r3, #1
 8002536:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002538:	2300      	movs	r3, #0
 800253a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800253c:	2301      	movs	r3, #1
 800253e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002540:	2300      	movs	r3, #0
 8002542:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002548:	2300      	movs	r3, #0
 800254a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800254c:	2301      	movs	r3, #1
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002550:	2300      	movs	r3, #0
 8002552:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002558:	f107 030c 	add.w	r3, r7, #12
 800255c:	4619      	mov	r1, r3
 800255e:	480d      	ldr	r0, [pc, #52]	; (8002594 <MX_TIM8_Init+0xa8>)
 8002560:	f001 fe24 	bl	80041ac <HAL_TIM_Encoder_Init>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800256a:	f7ff fdc9 	bl	8002100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800256e:	2300      	movs	r3, #0
 8002570:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002576:	1d3b      	adds	r3, r7, #4
 8002578:	4619      	mov	r1, r3
 800257a:	4806      	ldr	r0, [pc, #24]	; (8002594 <MX_TIM8_Init+0xa8>)
 800257c:	f002 fbae 	bl	8004cdc <HAL_TIMEx_MasterConfigSynchronization>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8002586:	f7ff fdbb 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800258a:	bf00      	nop
 800258c:	3730      	adds	r7, #48	; 0x30
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	200040e8 	.word	0x200040e8
 8002598:	40010400 	.word	0x40010400

0800259c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ac:	d10d      	bne.n	80025ca <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	4a08      	ldr	r2, [pc, #32]	; (80025d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	6413      	str	r3, [r2, #64]	; 0x40
 80025be:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80025ca:	bf00      	nop
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	40023800 	.word	0x40023800

080025dc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08e      	sub	sp, #56	; 0x38
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a4b      	ldr	r2, [pc, #300]	; (8002728 <HAL_TIM_Encoder_MspInit+0x14c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d12c      	bne.n	8002658 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	623b      	str	r3, [r7, #32]
 8002602:	4b4a      	ldr	r3, [pc, #296]	; (800272c <HAL_TIM_Encoder_MspInit+0x150>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	4a49      	ldr	r2, [pc, #292]	; (800272c <HAL_TIM_Encoder_MspInit+0x150>)
 8002608:	f043 0302 	orr.w	r3, r3, #2
 800260c:	6413      	str	r3, [r2, #64]	; 0x40
 800260e:	4b47      	ldr	r3, [pc, #284]	; (800272c <HAL_TIM_Encoder_MspInit+0x150>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	623b      	str	r3, [r7, #32]
 8002618:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	4b43      	ldr	r3, [pc, #268]	; (800272c <HAL_TIM_Encoder_MspInit+0x150>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	4a42      	ldr	r2, [pc, #264]	; (800272c <HAL_TIM_Encoder_MspInit+0x150>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	6313      	str	r3, [r2, #48]	; 0x30
 800262a:	4b40      	ldr	r3, [pc, #256]	; (800272c <HAL_TIM_Encoder_MspInit+0x150>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	61fb      	str	r3, [r7, #28]
 8002634:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002636:	23c0      	movs	r3, #192	; 0xc0
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263a:	2302      	movs	r3, #2
 800263c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002642:	2300      	movs	r3, #0
 8002644:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002646:	2302      	movs	r3, #2
 8002648:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800264a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800264e:	4619      	mov	r1, r3
 8002650:	4837      	ldr	r0, [pc, #220]	; (8002730 <HAL_TIM_Encoder_MspInit+0x154>)
 8002652:	f000 fbdf 	bl	8002e14 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002656:	e063      	b.n	8002720 <HAL_TIM_Encoder_MspInit+0x144>
  else if(tim_encoderHandle->Instance==TIM4)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a35      	ldr	r2, [pc, #212]	; (8002734 <HAL_TIM_Encoder_MspInit+0x158>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d12d      	bne.n	80026be <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	61bb      	str	r3, [r7, #24]
 8002666:	4b31      	ldr	r3, [pc, #196]	; (800272c <HAL_TIM_Encoder_MspInit+0x150>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	4a30      	ldr	r2, [pc, #192]	; (800272c <HAL_TIM_Encoder_MspInit+0x150>)
 800266c:	f043 0304 	orr.w	r3, r3, #4
 8002670:	6413      	str	r3, [r2, #64]	; 0x40
 8002672:	4b2e      	ldr	r3, [pc, #184]	; (800272c <HAL_TIM_Encoder_MspInit+0x150>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	61bb      	str	r3, [r7, #24]
 800267c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	4b2a      	ldr	r3, [pc, #168]	; (800272c <HAL_TIM_Encoder_MspInit+0x150>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	4a29      	ldr	r2, [pc, #164]	; (800272c <HAL_TIM_Encoder_MspInit+0x150>)
 8002688:	f043 0308 	orr.w	r3, r3, #8
 800268c:	6313      	str	r3, [r2, #48]	; 0x30
 800268e:	4b27      	ldr	r3, [pc, #156]	; (800272c <HAL_TIM_Encoder_MspInit+0x150>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800269a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a0:	2302      	movs	r3, #2
 80026a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a8:	2300      	movs	r3, #0
 80026aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026ac:	2302      	movs	r3, #2
 80026ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b4:	4619      	mov	r1, r3
 80026b6:	4820      	ldr	r0, [pc, #128]	; (8002738 <HAL_TIM_Encoder_MspInit+0x15c>)
 80026b8:	f000 fbac 	bl	8002e14 <HAL_GPIO_Init>
}
 80026bc:	e030      	b.n	8002720 <HAL_TIM_Encoder_MspInit+0x144>
  else if(tim_encoderHandle->Instance==TIM8)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a1e      	ldr	r2, [pc, #120]	; (800273c <HAL_TIM_Encoder_MspInit+0x160>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d12b      	bne.n	8002720 <HAL_TIM_Encoder_MspInit+0x144>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80026c8:	2300      	movs	r3, #0
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	4b17      	ldr	r3, [pc, #92]	; (800272c <HAL_TIM_Encoder_MspInit+0x150>)
 80026ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d0:	4a16      	ldr	r2, [pc, #88]	; (800272c <HAL_TIM_Encoder_MspInit+0x150>)
 80026d2:	f043 0302 	orr.w	r3, r3, #2
 80026d6:	6453      	str	r3, [r2, #68]	; 0x44
 80026d8:	4b14      	ldr	r3, [pc, #80]	; (800272c <HAL_TIM_Encoder_MspInit+0x150>)
 80026da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	4b10      	ldr	r3, [pc, #64]	; (800272c <HAL_TIM_Encoder_MspInit+0x150>)
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	4a0f      	ldr	r2, [pc, #60]	; (800272c <HAL_TIM_Encoder_MspInit+0x150>)
 80026ee:	f043 0304 	orr.w	r3, r3, #4
 80026f2:	6313      	str	r3, [r2, #48]	; 0x30
 80026f4:	4b0d      	ldr	r3, [pc, #52]	; (800272c <HAL_TIM_Encoder_MspInit+0x150>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002700:	23c0      	movs	r3, #192	; 0xc0
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002704:	2302      	movs	r3, #2
 8002706:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002708:	2300      	movs	r3, #0
 800270a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270c:	2300      	movs	r3, #0
 800270e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002710:	2303      	movs	r3, #3
 8002712:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002718:	4619      	mov	r1, r3
 800271a:	4809      	ldr	r0, [pc, #36]	; (8002740 <HAL_TIM_Encoder_MspInit+0x164>)
 800271c:	f000 fb7a 	bl	8002e14 <HAL_GPIO_Init>
}
 8002720:	bf00      	nop
 8002722:	3738      	adds	r7, #56	; 0x38
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40000400 	.word	0x40000400
 800272c:	40023800 	.word	0x40023800
 8002730:	40020000 	.word	0x40020000
 8002734:	40000800 	.word	0x40000800
 8002738:	40020c00 	.word	0x40020c00
 800273c:	40010400 	.word	0x40010400
 8002740:	40020800 	.word	0x40020800

08002744 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08a      	sub	sp, #40	; 0x28
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274c:	f107 0314 	add.w	r3, r7, #20
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
 800275a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002764:	d13c      	bne.n	80027e0 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	4b1f      	ldr	r3, [pc, #124]	; (80027e8 <HAL_TIM_MspPostInit+0xa4>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4a1e      	ldr	r2, [pc, #120]	; (80027e8 <HAL_TIM_MspPostInit+0xa4>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	6313      	str	r3, [r2, #48]	; 0x30
 8002776:	4b1c      	ldr	r3, [pc, #112]	; (80027e8 <HAL_TIM_MspPostInit+0xa4>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <HAL_TIM_MspPostInit+0xa4>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	4a17      	ldr	r2, [pc, #92]	; (80027e8 <HAL_TIM_MspPostInit+0xa4>)
 800278c:	f043 0302 	orr.w	r3, r3, #2
 8002790:	6313      	str	r3, [r2, #48]	; 0x30
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <HAL_TIM_MspPostInit+0xa4>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_2_Pin|MOTOR_1_Pin;
 800279e:	2303      	movs	r3, #3
 80027a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a2:	2302      	movs	r3, #2
 80027a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027aa:	2300      	movs	r3, #0
 80027ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027ae:	2301      	movs	r3, #1
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b2:	f107 0314 	add.w	r3, r7, #20
 80027b6:	4619      	mov	r1, r3
 80027b8:	480c      	ldr	r0, [pc, #48]	; (80027ec <HAL_TIM_MspPostInit+0xa8>)
 80027ba:	f000 fb2b 	bl	8002e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_3_Pin;
 80027be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c4:	2302      	movs	r3, #2
 80027c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027cc:	2300      	movs	r3, #0
 80027ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027d0:	2301      	movs	r3, #1
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_3_GPIO_Port, &GPIO_InitStruct);
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	4619      	mov	r1, r3
 80027da:	4805      	ldr	r0, [pc, #20]	; (80027f0 <HAL_TIM_MspPostInit+0xac>)
 80027dc:	f000 fb1a 	bl	8002e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80027e0:	bf00      	nop
 80027e2:	3728      	adds	r7, #40	; 0x28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40020000 	.word	0x40020000
 80027f0:	40020400 	.word	0x40020400

080027f4 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart2;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80027f8:	4b11      	ldr	r3, [pc, #68]	; (8002840 <MX_UART5_Init+0x4c>)
 80027fa:	4a12      	ldr	r2, [pc, #72]	; (8002844 <MX_UART5_Init+0x50>)
 80027fc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80027fe:	4b10      	ldr	r3, [pc, #64]	; (8002840 <MX_UART5_Init+0x4c>)
 8002800:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002804:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002806:	4b0e      	ldr	r3, [pc, #56]	; (8002840 <MX_UART5_Init+0x4c>)
 8002808:	2200      	movs	r2, #0
 800280a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800280c:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <MX_UART5_Init+0x4c>)
 800280e:	2200      	movs	r2, #0
 8002810:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002812:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <MX_UART5_Init+0x4c>)
 8002814:	2200      	movs	r2, #0
 8002816:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002818:	4b09      	ldr	r3, [pc, #36]	; (8002840 <MX_UART5_Init+0x4c>)
 800281a:	220c      	movs	r2, #12
 800281c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800281e:	4b08      	ldr	r3, [pc, #32]	; (8002840 <MX_UART5_Init+0x4c>)
 8002820:	2200      	movs	r2, #0
 8002822:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002824:	4b06      	ldr	r3, [pc, #24]	; (8002840 <MX_UART5_Init+0x4c>)
 8002826:	2200      	movs	r2, #0
 8002828:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800282a:	4805      	ldr	r0, [pc, #20]	; (8002840 <MX_UART5_Init+0x4c>)
 800282c:	f002 fae6 	bl	8004dfc <HAL_UART_Init>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002836:	f7ff fc63 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20004208 	.word	0x20004208
 8002844:	40005000 	.word	0x40005000

08002848 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800284c:	4b11      	ldr	r3, [pc, #68]	; (8002894 <MX_USART2_UART_Init+0x4c>)
 800284e:	4a12      	ldr	r2, [pc, #72]	; (8002898 <MX_USART2_UART_Init+0x50>)
 8002850:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8002852:	4b10      	ldr	r3, [pc, #64]	; (8002894 <MX_USART2_UART_Init+0x4c>)
 8002854:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002858:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800285a:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <MX_USART2_UART_Init+0x4c>)
 800285c:	2200      	movs	r2, #0
 800285e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002860:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <MX_USART2_UART_Init+0x4c>)
 8002862:	2200      	movs	r2, #0
 8002864:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002866:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <MX_USART2_UART_Init+0x4c>)
 8002868:	2200      	movs	r2, #0
 800286a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800286c:	4b09      	ldr	r3, [pc, #36]	; (8002894 <MX_USART2_UART_Init+0x4c>)
 800286e:	220c      	movs	r2, #12
 8002870:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002872:	4b08      	ldr	r3, [pc, #32]	; (8002894 <MX_USART2_UART_Init+0x4c>)
 8002874:	2200      	movs	r2, #0
 8002876:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002878:	4b06      	ldr	r3, [pc, #24]	; (8002894 <MX_USART2_UART_Init+0x4c>)
 800287a:	2200      	movs	r2, #0
 800287c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800287e:	4805      	ldr	r0, [pc, #20]	; (8002894 <MX_USART2_UART_Init+0x4c>)
 8002880:	f002 fabc 	bl	8004dfc <HAL_UART_Init>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800288a:	f7ff fc39 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	2000424c 	.word	0x2000424c
 8002898:	40004400 	.word	0x40004400

0800289c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08c      	sub	sp, #48	; 0x30
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a4:	f107 031c 	add.w	r3, r7, #28
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	60da      	str	r2, [r3, #12]
 80028b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a45      	ldr	r2, [pc, #276]	; (80029d0 <HAL_UART_MspInit+0x134>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d14b      	bne.n	8002956 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	61bb      	str	r3, [r7, #24]
 80028c2:	4b44      	ldr	r3, [pc, #272]	; (80029d4 <HAL_UART_MspInit+0x138>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	4a43      	ldr	r2, [pc, #268]	; (80029d4 <HAL_UART_MspInit+0x138>)
 80028c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028cc:	6413      	str	r3, [r2, #64]	; 0x40
 80028ce:	4b41      	ldr	r3, [pc, #260]	; (80029d4 <HAL_UART_MspInit+0x138>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028d6:	61bb      	str	r3, [r7, #24]
 80028d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	4b3d      	ldr	r3, [pc, #244]	; (80029d4 <HAL_UART_MspInit+0x138>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4a3c      	ldr	r2, [pc, #240]	; (80029d4 <HAL_UART_MspInit+0x138>)
 80028e4:	f043 0304 	orr.w	r3, r3, #4
 80028e8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ea:	4b3a      	ldr	r3, [pc, #232]	; (80029d4 <HAL_UART_MspInit+0x138>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	4b36      	ldr	r3, [pc, #216]	; (80029d4 <HAL_UART_MspInit+0x138>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	4a35      	ldr	r2, [pc, #212]	; (80029d4 <HAL_UART_MspInit+0x138>)
 8002900:	f043 0308 	orr.w	r3, r3, #8
 8002904:	6313      	str	r3, [r2, #48]	; 0x30
 8002906:	4b33      	ldr	r3, [pc, #204]	; (80029d4 <HAL_UART_MspInit+0x138>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002918:	2302      	movs	r3, #2
 800291a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800291c:	2301      	movs	r3, #1
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002920:	2303      	movs	r3, #3
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002924:	2308      	movs	r3, #8
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002928:	f107 031c 	add.w	r3, r7, #28
 800292c:	4619      	mov	r1, r3
 800292e:	482a      	ldr	r0, [pc, #168]	; (80029d8 <HAL_UART_MspInit+0x13c>)
 8002930:	f000 fa70 	bl	8002e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002934:	2304      	movs	r3, #4
 8002936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002938:	2302      	movs	r3, #2
 800293a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800293c:	2301      	movs	r3, #1
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002940:	2303      	movs	r3, #3
 8002942:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002944:	2308      	movs	r3, #8
 8002946:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002948:	f107 031c 	add.w	r3, r7, #28
 800294c:	4619      	mov	r1, r3
 800294e:	4823      	ldr	r0, [pc, #140]	; (80029dc <HAL_UART_MspInit+0x140>)
 8002950:	f000 fa60 	bl	8002e14 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002954:	e038      	b.n	80029c8 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART2)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a21      	ldr	r2, [pc, #132]	; (80029e0 <HAL_UART_MspInit+0x144>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d133      	bne.n	80029c8 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <HAL_UART_MspInit+0x138>)
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	4a1a      	ldr	r2, [pc, #104]	; (80029d4 <HAL_UART_MspInit+0x138>)
 800296a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800296e:	6413      	str	r3, [r2, #64]	; 0x40
 8002970:	4b18      	ldr	r3, [pc, #96]	; (80029d4 <HAL_UART_MspInit+0x138>)
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297c:	2300      	movs	r3, #0
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <HAL_UART_MspInit+0x138>)
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	4a13      	ldr	r2, [pc, #76]	; (80029d4 <HAL_UART_MspInit+0x138>)
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	6313      	str	r3, [r2, #48]	; 0x30
 800298c:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <HAL_UART_MspInit+0x138>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002998:	230c      	movs	r3, #12
 800299a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	2302      	movs	r3, #2
 800299e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a4:	2303      	movs	r3, #3
 80029a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029a8:	2307      	movs	r3, #7
 80029aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ac:	f107 031c 	add.w	r3, r7, #28
 80029b0:	4619      	mov	r1, r3
 80029b2:	480c      	ldr	r0, [pc, #48]	; (80029e4 <HAL_UART_MspInit+0x148>)
 80029b4:	f000 fa2e 	bl	8002e14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80029b8:	2200      	movs	r2, #0
 80029ba:	2105      	movs	r1, #5
 80029bc:	2026      	movs	r0, #38	; 0x26
 80029be:	f000 f96d 	bl	8002c9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029c2:	2026      	movs	r0, #38	; 0x26
 80029c4:	f000 f986 	bl	8002cd4 <HAL_NVIC_EnableIRQ>
}
 80029c8:	bf00      	nop
 80029ca:	3730      	adds	r7, #48	; 0x30
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40005000 	.word	0x40005000
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40020800 	.word	0x40020800
 80029dc:	40020c00 	.word	0x40020c00
 80029e0:	40004400 	.word	0x40004400
 80029e4:	40020000 	.word	0x40020000

080029e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80029e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029ee:	e003      	b.n	80029f8 <LoopCopyDataInit>

080029f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029f0:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029f6:	3104      	adds	r1, #4

080029f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029f8:	480b      	ldr	r0, [pc, #44]	; (8002a28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029fa:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a00:	d3f6      	bcc.n	80029f0 <CopyDataInit>
  ldr  r2, =_sbss
 8002a02:	4a0b      	ldr	r2, [pc, #44]	; (8002a30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a04:	e002      	b.n	8002a0c <LoopFillZerobss>

08002a06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a08:	f842 3b04 	str.w	r3, [r2], #4

08002a0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a0c:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a10:	d3f9      	bcc.n	8002a06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a12:	f7ff fc3f 	bl	8002294 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a16:	f005 fc21 	bl	800825c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a1a:	f7ff fad9 	bl	8001fd0 <main>
  bx  lr    
 8002a1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a20:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002a24:	08008420 	.word	0x08008420
  ldr  r0, =_sdata
 8002a28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a2c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8002a30:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002a34:	20004294 	.word	0x20004294

08002a38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a38:	e7fe      	b.n	8002a38 <ADC_IRQHandler>

08002a3a <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	6039      	str	r1, [r7, #0]

  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	ed93 7a06 	vldr	s14, [r3, #24]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0 * S->Kd);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	edd3 7a06 	vldr	s15, [r3, #24]
 8002a6a:	eeb1 7a67 	vneg.f32	s14, s15
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a74:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1a      	ldr	r2, [r3, #32]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d006      	beq.n	8002a9e <arm_pid_init_f32+0x64>
  {
    /* Clear the state buffer.  The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	330c      	adds	r3, #12
 8002a94:	220c      	movs	r2, #12
 8002a96:	2100      	movs	r1, #0
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f005 fc11 	bl	80082c0 <memset>
  }

}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002aac:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <HAL_Init+0x40>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a0d      	ldr	r2, [pc, #52]	; (8002ae8 <HAL_Init+0x40>)
 8002ab2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ab6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <HAL_Init+0x40>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a0a      	ldr	r2, [pc, #40]	; (8002ae8 <HAL_Init+0x40>)
 8002abe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ac2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ac4:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <HAL_Init+0x40>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a07      	ldr	r2, [pc, #28]	; (8002ae8 <HAL_Init+0x40>)
 8002aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ad0:	2003      	movs	r0, #3
 8002ad2:	f000 f8d8 	bl	8002c86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f7ff fb46 	bl	8002168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002adc:	f7ff fb18 	bl	8002110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40023c00 	.word	0x40023c00

08002aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <HAL_IncTick+0x20>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_IncTick+0x24>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4413      	add	r3, r2
 8002afc:	4a04      	ldr	r2, [pc, #16]	; (8002b10 <HAL_IncTick+0x24>)
 8002afe:	6013      	str	r3, [r2, #0]
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	20000008 	.word	0x20000008
 8002b10:	20004290 	.word	0x20004290

08002b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  return uwTick;
 8002b18:	4b03      	ldr	r3, [pc, #12]	; (8002b28 <HAL_GetTick+0x14>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	20004290 	.word	0x20004290

08002b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <__NVIC_SetPriorityGrouping+0x44>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b48:	4013      	ands	r3, r2
 8002b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b5e:	4a04      	ldr	r2, [pc, #16]	; (8002b70 <__NVIC_SetPriorityGrouping+0x44>)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	60d3      	str	r3, [r2, #12]
}
 8002b64:	bf00      	nop
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b78:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <__NVIC_GetPriorityGrouping+0x18>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	0a1b      	lsrs	r3, r3, #8
 8002b7e:	f003 0307 	and.w	r3, r3, #7
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	db0b      	blt.n	8002bba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	f003 021f 	and.w	r2, r3, #31
 8002ba8:	4907      	ldr	r1, [pc, #28]	; (8002bc8 <__NVIC_EnableIRQ+0x38>)
 8002baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bae:	095b      	lsrs	r3, r3, #5
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	e000e100 	.word	0xe000e100

08002bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	6039      	str	r1, [r7, #0]
 8002bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	db0a      	blt.n	8002bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	490c      	ldr	r1, [pc, #48]	; (8002c18 <__NVIC_SetPriority+0x4c>)
 8002be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bea:	0112      	lsls	r2, r2, #4
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	440b      	add	r3, r1
 8002bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf4:	e00a      	b.n	8002c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	4908      	ldr	r1, [pc, #32]	; (8002c1c <__NVIC_SetPriority+0x50>)
 8002bfc:	79fb      	ldrb	r3, [r7, #7]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	3b04      	subs	r3, #4
 8002c04:	0112      	lsls	r2, r2, #4
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	440b      	add	r3, r1
 8002c0a:	761a      	strb	r2, [r3, #24]
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	e000e100 	.word	0xe000e100
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b089      	sub	sp, #36	; 0x24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f1c3 0307 	rsb	r3, r3, #7
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	bf28      	it	cs
 8002c3e:	2304      	movcs	r3, #4
 8002c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	3304      	adds	r3, #4
 8002c46:	2b06      	cmp	r3, #6
 8002c48:	d902      	bls.n	8002c50 <NVIC_EncodePriority+0x30>
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3b03      	subs	r3, #3
 8002c4e:	e000      	b.n	8002c52 <NVIC_EncodePriority+0x32>
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c54:	f04f 32ff 	mov.w	r2, #4294967295
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43da      	mvns	r2, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	401a      	ands	r2, r3
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c68:	f04f 31ff 	mov.w	r1, #4294967295
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c72:	43d9      	mvns	r1, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c78:	4313      	orrs	r3, r2
         );
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3724      	adds	r7, #36	; 0x24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff ff4c 	bl	8002b2c <__NVIC_SetPriorityGrouping>
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
 8002ca8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cae:	f7ff ff61 	bl	8002b74 <__NVIC_GetPriorityGrouping>
 8002cb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	68b9      	ldr	r1, [r7, #8]
 8002cb8:	6978      	ldr	r0, [r7, #20]
 8002cba:	f7ff ffb1 	bl	8002c20 <NVIC_EncodePriority>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff ff80 	bl	8002bcc <__NVIC_SetPriority>
}
 8002ccc:	bf00      	nop
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff ff54 	bl	8002b90 <__NVIC_EnableIRQ>
}
 8002ce8:	bf00      	nop
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cfe:	f7ff ff09 	bl	8002b14 <HAL_GetTick>
 8002d02:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d008      	beq.n	8002d22 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2280      	movs	r2, #128	; 0x80
 8002d14:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e052      	b.n	8002dc8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0216 	bic.w	r2, r2, #22
 8002d30:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695a      	ldr	r2, [r3, #20]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d40:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d103      	bne.n	8002d52 <HAL_DMA_Abort+0x62>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d007      	beq.n	8002d62 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0208 	bic.w	r2, r2, #8
 8002d60:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0201 	bic.w	r2, r2, #1
 8002d70:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d72:	e013      	b.n	8002d9c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d74:	f7ff fece 	bl	8002b14 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b05      	cmp	r3, #5
 8002d80:	d90c      	bls.n	8002d9c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2220      	movs	r2, #32
 8002d86:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2203      	movs	r2, #3
 8002d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e015      	b.n	8002dc8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1e4      	bne.n	8002d74 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dae:	223f      	movs	r2, #63	; 0x3f
 8002db0:	409a      	lsls	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d004      	beq.n	8002dee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2280      	movs	r2, #128	; 0x80
 8002de8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e00c      	b.n	8002e08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2205      	movs	r2, #5
 8002df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0201 	bic.w	r2, r2, #1
 8002e04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b089      	sub	sp, #36	; 0x24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
 8002e2e:	e16b      	b.n	8003108 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e30:	2201      	movs	r2, #1
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	4013      	ands	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	f040 815a 	bne.w	8003102 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d005      	beq.n	8002e66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d130      	bne.n	8002ec8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	2203      	movs	r2, #3
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	f003 0201 	and.w	r2, r3, #1
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d017      	beq.n	8002f04 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	2203      	movs	r2, #3
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 0303 	and.w	r3, r3, #3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d123      	bne.n	8002f58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	08da      	lsrs	r2, r3, #3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3208      	adds	r2, #8
 8002f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	220f      	movs	r2, #15
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4013      	ands	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	691a      	ldr	r2, [r3, #16]
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	08da      	lsrs	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3208      	adds	r2, #8
 8002f52:	69b9      	ldr	r1, [r7, #24]
 8002f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	2203      	movs	r2, #3
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 0203 	and.w	r2, r3, #3
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 80b4 	beq.w	8003102 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	4b60      	ldr	r3, [pc, #384]	; (8003120 <HAL_GPIO_Init+0x30c>)
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	4a5f      	ldr	r2, [pc, #380]	; (8003120 <HAL_GPIO_Init+0x30c>)
 8002fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8002faa:	4b5d      	ldr	r3, [pc, #372]	; (8003120 <HAL_GPIO_Init+0x30c>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fb6:	4a5b      	ldr	r2, [pc, #364]	; (8003124 <HAL_GPIO_Init+0x310>)
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	089b      	lsrs	r3, r3, #2
 8002fbc:	3302      	adds	r3, #2
 8002fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	220f      	movs	r2, #15
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a52      	ldr	r2, [pc, #328]	; (8003128 <HAL_GPIO_Init+0x314>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d02b      	beq.n	800303a <HAL_GPIO_Init+0x226>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a51      	ldr	r2, [pc, #324]	; (800312c <HAL_GPIO_Init+0x318>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d025      	beq.n	8003036 <HAL_GPIO_Init+0x222>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a50      	ldr	r2, [pc, #320]	; (8003130 <HAL_GPIO_Init+0x31c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d01f      	beq.n	8003032 <HAL_GPIO_Init+0x21e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a4f      	ldr	r2, [pc, #316]	; (8003134 <HAL_GPIO_Init+0x320>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d019      	beq.n	800302e <HAL_GPIO_Init+0x21a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a4e      	ldr	r2, [pc, #312]	; (8003138 <HAL_GPIO_Init+0x324>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d013      	beq.n	800302a <HAL_GPIO_Init+0x216>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a4d      	ldr	r2, [pc, #308]	; (800313c <HAL_GPIO_Init+0x328>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d00d      	beq.n	8003026 <HAL_GPIO_Init+0x212>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a4c      	ldr	r2, [pc, #304]	; (8003140 <HAL_GPIO_Init+0x32c>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d007      	beq.n	8003022 <HAL_GPIO_Init+0x20e>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a4b      	ldr	r2, [pc, #300]	; (8003144 <HAL_GPIO_Init+0x330>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d101      	bne.n	800301e <HAL_GPIO_Init+0x20a>
 800301a:	2307      	movs	r3, #7
 800301c:	e00e      	b.n	800303c <HAL_GPIO_Init+0x228>
 800301e:	2308      	movs	r3, #8
 8003020:	e00c      	b.n	800303c <HAL_GPIO_Init+0x228>
 8003022:	2306      	movs	r3, #6
 8003024:	e00a      	b.n	800303c <HAL_GPIO_Init+0x228>
 8003026:	2305      	movs	r3, #5
 8003028:	e008      	b.n	800303c <HAL_GPIO_Init+0x228>
 800302a:	2304      	movs	r3, #4
 800302c:	e006      	b.n	800303c <HAL_GPIO_Init+0x228>
 800302e:	2303      	movs	r3, #3
 8003030:	e004      	b.n	800303c <HAL_GPIO_Init+0x228>
 8003032:	2302      	movs	r3, #2
 8003034:	e002      	b.n	800303c <HAL_GPIO_Init+0x228>
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <HAL_GPIO_Init+0x228>
 800303a:	2300      	movs	r3, #0
 800303c:	69fa      	ldr	r2, [r7, #28]
 800303e:	f002 0203 	and.w	r2, r2, #3
 8003042:	0092      	lsls	r2, r2, #2
 8003044:	4093      	lsls	r3, r2
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800304c:	4935      	ldr	r1, [pc, #212]	; (8003124 <HAL_GPIO_Init+0x310>)
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	089b      	lsrs	r3, r3, #2
 8003052:	3302      	adds	r3, #2
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800305a:	4b3b      	ldr	r3, [pc, #236]	; (8003148 <HAL_GPIO_Init+0x334>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	43db      	mvns	r3, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4013      	ands	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800307e:	4a32      	ldr	r2, [pc, #200]	; (8003148 <HAL_GPIO_Init+0x334>)
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003084:	4b30      	ldr	r3, [pc, #192]	; (8003148 <HAL_GPIO_Init+0x334>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030a8:	4a27      	ldr	r2, [pc, #156]	; (8003148 <HAL_GPIO_Init+0x334>)
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030ae:	4b26      	ldr	r3, [pc, #152]	; (8003148 <HAL_GPIO_Init+0x334>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	43db      	mvns	r3, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4013      	ands	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030d2:	4a1d      	ldr	r2, [pc, #116]	; (8003148 <HAL_GPIO_Init+0x334>)
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030d8:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <HAL_GPIO_Init+0x334>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	43db      	mvns	r3, r3
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4013      	ands	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030fc:	4a12      	ldr	r2, [pc, #72]	; (8003148 <HAL_GPIO_Init+0x334>)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	3301      	adds	r3, #1
 8003106:	61fb      	str	r3, [r7, #28]
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	2b0f      	cmp	r3, #15
 800310c:	f67f ae90 	bls.w	8002e30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003110:	bf00      	nop
 8003112:	bf00      	nop
 8003114:	3724      	adds	r7, #36	; 0x24
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40023800 	.word	0x40023800
 8003124:	40013800 	.word	0x40013800
 8003128:	40020000 	.word	0x40020000
 800312c:	40020400 	.word	0x40020400
 8003130:	40020800 	.word	0x40020800
 8003134:	40020c00 	.word	0x40020c00
 8003138:	40021000 	.word	0x40021000
 800313c:	40021400 	.word	0x40021400
 8003140:	40021800 	.word	0x40021800
 8003144:	40021c00 	.word	0x40021c00
 8003148:	40013c00 	.word	0x40013c00

0800314c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	887b      	ldrh	r3, [r7, #2]
 800315e:	4013      	ands	r3, r2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003164:	2301      	movs	r3, #1
 8003166:	73fb      	strb	r3, [r7, #15]
 8003168:	e001      	b.n	800316e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800316a:	2300      	movs	r3, #0
 800316c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800316e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	807b      	strh	r3, [r7, #2]
 8003188:	4613      	mov	r3, r2
 800318a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800318c:	787b      	ldrb	r3, [r7, #1]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003192:	887a      	ldrh	r2, [r7, #2]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003198:	e003      	b.n	80031a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800319a:	887b      	ldrh	r3, [r7, #2]
 800319c:	041a      	lsls	r2, r3, #16
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	619a      	str	r2, [r3, #24]
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b085      	sub	sp, #20
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	460b      	mov	r3, r1
 80031b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031c0:	887a      	ldrh	r2, [r7, #2]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4013      	ands	r3, r2
 80031c6:	041a      	lsls	r2, r3, #16
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	43d9      	mvns	r1, r3
 80031cc:	887b      	ldrh	r3, [r7, #2]
 80031ce:	400b      	ands	r3, r1
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	619a      	str	r2, [r3, #24]
}
 80031d6:	bf00      	nop
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
	...

080031e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80031ee:	4b08      	ldr	r3, [pc, #32]	; (8003210 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031f0:	695a      	ldr	r2, [r3, #20]
 80031f2:	88fb      	ldrh	r3, [r7, #6]
 80031f4:	4013      	ands	r3, r2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d006      	beq.n	8003208 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031fa:	4a05      	ldr	r2, [pc, #20]	; (8003210 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031fc:	88fb      	ldrh	r3, [r7, #6]
 80031fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003200:	88fb      	ldrh	r3, [r7, #6]
 8003202:	4618      	mov	r0, r3
 8003204:	f7fe fd3e 	bl	8001c84 <HAL_GPIO_EXTI_Callback>
  }
}
 8003208:	bf00      	nop
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40013c00 	.word	0x40013c00

08003214 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e12b      	b.n	800347e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d106      	bne.n	8003240 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7fe fe80 	bl	8001f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2224      	movs	r2, #36	; 0x24
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0201 	bic.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003266:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003276:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003278:	f000 fd5c 	bl	8003d34 <HAL_RCC_GetPCLK1Freq>
 800327c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	4a81      	ldr	r2, [pc, #516]	; (8003488 <HAL_I2C_Init+0x274>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d807      	bhi.n	8003298 <HAL_I2C_Init+0x84>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4a80      	ldr	r2, [pc, #512]	; (800348c <HAL_I2C_Init+0x278>)
 800328c:	4293      	cmp	r3, r2
 800328e:	bf94      	ite	ls
 8003290:	2301      	movls	r3, #1
 8003292:	2300      	movhi	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	e006      	b.n	80032a6 <HAL_I2C_Init+0x92>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4a7d      	ldr	r2, [pc, #500]	; (8003490 <HAL_I2C_Init+0x27c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	bf94      	ite	ls
 80032a0:	2301      	movls	r3, #1
 80032a2:	2300      	movhi	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e0e7      	b.n	800347e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4a78      	ldr	r2, [pc, #480]	; (8003494 <HAL_I2C_Init+0x280>)
 80032b2:	fba2 2303 	umull	r2, r3, r2, r3
 80032b6:	0c9b      	lsrs	r3, r3, #18
 80032b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	4a6a      	ldr	r2, [pc, #424]	; (8003488 <HAL_I2C_Init+0x274>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d802      	bhi.n	80032e8 <HAL_I2C_Init+0xd4>
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	3301      	adds	r3, #1
 80032e6:	e009      	b.n	80032fc <HAL_I2C_Init+0xe8>
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032ee:	fb02 f303 	mul.w	r3, r2, r3
 80032f2:	4a69      	ldr	r2, [pc, #420]	; (8003498 <HAL_I2C_Init+0x284>)
 80032f4:	fba2 2303 	umull	r2, r3, r2, r3
 80032f8:	099b      	lsrs	r3, r3, #6
 80032fa:	3301      	adds	r3, #1
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6812      	ldr	r2, [r2, #0]
 8003300:	430b      	orrs	r3, r1
 8003302:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800330e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	495c      	ldr	r1, [pc, #368]	; (8003488 <HAL_I2C_Init+0x274>)
 8003318:	428b      	cmp	r3, r1
 800331a:	d819      	bhi.n	8003350 <HAL_I2C_Init+0x13c>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1e59      	subs	r1, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	fbb1 f3f3 	udiv	r3, r1, r3
 800332a:	1c59      	adds	r1, r3, #1
 800332c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003330:	400b      	ands	r3, r1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <HAL_I2C_Init+0x138>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	1e59      	subs	r1, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	fbb1 f3f3 	udiv	r3, r1, r3
 8003344:	3301      	adds	r3, #1
 8003346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800334a:	e051      	b.n	80033f0 <HAL_I2C_Init+0x1dc>
 800334c:	2304      	movs	r3, #4
 800334e:	e04f      	b.n	80033f0 <HAL_I2C_Init+0x1dc>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d111      	bne.n	800337c <HAL_I2C_Init+0x168>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	1e58      	subs	r0, r3, #1
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6859      	ldr	r1, [r3, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	440b      	add	r3, r1
 8003366:	fbb0 f3f3 	udiv	r3, r0, r3
 800336a:	3301      	adds	r3, #1
 800336c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003370:	2b00      	cmp	r3, #0
 8003372:	bf0c      	ite	eq
 8003374:	2301      	moveq	r3, #1
 8003376:	2300      	movne	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	e012      	b.n	80033a2 <HAL_I2C_Init+0x18e>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	1e58      	subs	r0, r3, #1
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6859      	ldr	r1, [r3, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	0099      	lsls	r1, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003392:	3301      	adds	r3, #1
 8003394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003398:	2b00      	cmp	r3, #0
 800339a:	bf0c      	ite	eq
 800339c:	2301      	moveq	r3, #1
 800339e:	2300      	movne	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_I2C_Init+0x196>
 80033a6:	2301      	movs	r3, #1
 80033a8:	e022      	b.n	80033f0 <HAL_I2C_Init+0x1dc>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10e      	bne.n	80033d0 <HAL_I2C_Init+0x1bc>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	1e58      	subs	r0, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6859      	ldr	r1, [r3, #4]
 80033ba:	460b      	mov	r3, r1
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	440b      	add	r3, r1
 80033c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80033c4:	3301      	adds	r3, #1
 80033c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ce:	e00f      	b.n	80033f0 <HAL_I2C_Init+0x1dc>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	1e58      	subs	r0, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6859      	ldr	r1, [r3, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	0099      	lsls	r1, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e6:	3301      	adds	r3, #1
 80033e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	6809      	ldr	r1, [r1, #0]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69da      	ldr	r2, [r3, #28]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800341e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6911      	ldr	r1, [r2, #16]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	68d2      	ldr	r2, [r2, #12]
 800342a:	4311      	orrs	r1, r2
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	430b      	orrs	r3, r1
 8003432:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695a      	ldr	r2, [r3, #20]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0201 	orr.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2220      	movs	r2, #32
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	000186a0 	.word	0x000186a0
 800348c:	001e847f 	.word	0x001e847f
 8003490:	003d08ff 	.word	0x003d08ff
 8003494:	431bde83 	.word	0x431bde83
 8003498:	10624dd3 	.word	0x10624dd3

0800349c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e264      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d075      	beq.n	80035a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ba:	4ba3      	ldr	r3, [pc, #652]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 030c 	and.w	r3, r3, #12
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d00c      	beq.n	80034e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034c6:	4ba0      	ldr	r3, [pc, #640]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d112      	bne.n	80034f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034d2:	4b9d      	ldr	r3, [pc, #628]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034de:	d10b      	bne.n	80034f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e0:	4b99      	ldr	r3, [pc, #612]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d05b      	beq.n	80035a4 <HAL_RCC_OscConfig+0x108>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d157      	bne.n	80035a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e23f      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003500:	d106      	bne.n	8003510 <HAL_RCC_OscConfig+0x74>
 8003502:	4b91      	ldr	r3, [pc, #580]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a90      	ldr	r2, [pc, #576]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 8003508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	e01d      	b.n	800354c <HAL_RCC_OscConfig+0xb0>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003518:	d10c      	bne.n	8003534 <HAL_RCC_OscConfig+0x98>
 800351a:	4b8b      	ldr	r3, [pc, #556]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a8a      	ldr	r2, [pc, #552]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 8003520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	4b88      	ldr	r3, [pc, #544]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a87      	ldr	r2, [pc, #540]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 800352c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	e00b      	b.n	800354c <HAL_RCC_OscConfig+0xb0>
 8003534:	4b84      	ldr	r3, [pc, #528]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a83      	ldr	r2, [pc, #524]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 800353a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	4b81      	ldr	r3, [pc, #516]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a80      	ldr	r2, [pc, #512]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 8003546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800354a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d013      	beq.n	800357c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003554:	f7ff fade 	bl	8002b14 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800355c:	f7ff fada 	bl	8002b14 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b64      	cmp	r3, #100	; 0x64
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e204      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356e:	4b76      	ldr	r3, [pc, #472]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f0      	beq.n	800355c <HAL_RCC_OscConfig+0xc0>
 800357a:	e014      	b.n	80035a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357c:	f7ff faca 	bl	8002b14 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003584:	f7ff fac6 	bl	8002b14 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	; 0x64
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e1f0      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003596:	4b6c      	ldr	r3, [pc, #432]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0xe8>
 80035a2:	e000      	b.n	80035a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d063      	beq.n	800367a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035b2:	4b65      	ldr	r3, [pc, #404]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 030c 	and.w	r3, r3, #12
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00b      	beq.n	80035d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035be:	4b62      	ldr	r3, [pc, #392]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d11c      	bne.n	8003604 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ca:	4b5f      	ldr	r3, [pc, #380]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d116      	bne.n	8003604 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d6:	4b5c      	ldr	r3, [pc, #368]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d005      	beq.n	80035ee <HAL_RCC_OscConfig+0x152>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d001      	beq.n	80035ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e1c4      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ee:	4b56      	ldr	r3, [pc, #344]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4952      	ldr	r1, [pc, #328]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003602:	e03a      	b.n	800367a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d020      	beq.n	800364e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800360c:	4b4f      	ldr	r3, [pc, #316]	; (800374c <HAL_RCC_OscConfig+0x2b0>)
 800360e:	2201      	movs	r2, #1
 8003610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003612:	f7ff fa7f 	bl	8002b14 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800361a:	f7ff fa7b 	bl	8002b14 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e1a5      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362c:	4b46      	ldr	r3, [pc, #280]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f0      	beq.n	800361a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003638:	4b43      	ldr	r3, [pc, #268]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	4940      	ldr	r1, [pc, #256]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 8003648:	4313      	orrs	r3, r2
 800364a:	600b      	str	r3, [r1, #0]
 800364c:	e015      	b.n	800367a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800364e:	4b3f      	ldr	r3, [pc, #252]	; (800374c <HAL_RCC_OscConfig+0x2b0>)
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7ff fa5e 	bl	8002b14 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800365c:	f7ff fa5a 	bl	8002b14 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e184      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366e:	4b36      	ldr	r3, [pc, #216]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d030      	beq.n	80036e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d016      	beq.n	80036bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800368e:	4b30      	ldr	r3, [pc, #192]	; (8003750 <HAL_RCC_OscConfig+0x2b4>)
 8003690:	2201      	movs	r2, #1
 8003692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003694:	f7ff fa3e 	bl	8002b14 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800369c:	f7ff fa3a 	bl	8002b14 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e164      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ae:	4b26      	ldr	r3, [pc, #152]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 80036b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f0      	beq.n	800369c <HAL_RCC_OscConfig+0x200>
 80036ba:	e015      	b.n	80036e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036bc:	4b24      	ldr	r3, [pc, #144]	; (8003750 <HAL_RCC_OscConfig+0x2b4>)
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c2:	f7ff fa27 	bl	8002b14 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036ca:	f7ff fa23 	bl	8002b14 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e14d      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036dc:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 80036de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1f0      	bne.n	80036ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 80a0 	beq.w	8003836 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036f6:	2300      	movs	r3, #0
 80036f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036fa:	4b13      	ldr	r3, [pc, #76]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10f      	bne.n	8003726 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	4b0f      	ldr	r3, [pc, #60]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	4a0e      	ldr	r2, [pc, #56]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 8003710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003714:	6413      	str	r3, [r2, #64]	; 0x40
 8003716:	4b0c      	ldr	r3, [pc, #48]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371e:	60bb      	str	r3, [r7, #8]
 8003720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003722:	2301      	movs	r3, #1
 8003724:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003726:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <HAL_RCC_OscConfig+0x2b8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372e:	2b00      	cmp	r3, #0
 8003730:	d121      	bne.n	8003776 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003732:	4b08      	ldr	r3, [pc, #32]	; (8003754 <HAL_RCC_OscConfig+0x2b8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a07      	ldr	r2, [pc, #28]	; (8003754 <HAL_RCC_OscConfig+0x2b8>)
 8003738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800373c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800373e:	f7ff f9e9 	bl	8002b14 <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003744:	e011      	b.n	800376a <HAL_RCC_OscConfig+0x2ce>
 8003746:	bf00      	nop
 8003748:	40023800 	.word	0x40023800
 800374c:	42470000 	.word	0x42470000
 8003750:	42470e80 	.word	0x42470e80
 8003754:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003758:	f7ff f9dc 	bl	8002b14 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e106      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376a:	4b85      	ldr	r3, [pc, #532]	; (8003980 <HAL_RCC_OscConfig+0x4e4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0f0      	beq.n	8003758 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d106      	bne.n	800378c <HAL_RCC_OscConfig+0x2f0>
 800377e:	4b81      	ldr	r3, [pc, #516]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 8003780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003782:	4a80      	ldr	r2, [pc, #512]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	6713      	str	r3, [r2, #112]	; 0x70
 800378a:	e01c      	b.n	80037c6 <HAL_RCC_OscConfig+0x32a>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	2b05      	cmp	r3, #5
 8003792:	d10c      	bne.n	80037ae <HAL_RCC_OscConfig+0x312>
 8003794:	4b7b      	ldr	r3, [pc, #492]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 8003796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003798:	4a7a      	ldr	r2, [pc, #488]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 800379a:	f043 0304 	orr.w	r3, r3, #4
 800379e:	6713      	str	r3, [r2, #112]	; 0x70
 80037a0:	4b78      	ldr	r3, [pc, #480]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 80037a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a4:	4a77      	ldr	r2, [pc, #476]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 80037a6:	f043 0301 	orr.w	r3, r3, #1
 80037aa:	6713      	str	r3, [r2, #112]	; 0x70
 80037ac:	e00b      	b.n	80037c6 <HAL_RCC_OscConfig+0x32a>
 80037ae:	4b75      	ldr	r3, [pc, #468]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 80037b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b2:	4a74      	ldr	r2, [pc, #464]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 80037b4:	f023 0301 	bic.w	r3, r3, #1
 80037b8:	6713      	str	r3, [r2, #112]	; 0x70
 80037ba:	4b72      	ldr	r3, [pc, #456]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 80037bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037be:	4a71      	ldr	r2, [pc, #452]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 80037c0:	f023 0304 	bic.w	r3, r3, #4
 80037c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d015      	beq.n	80037fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ce:	f7ff f9a1 	bl	8002b14 <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d4:	e00a      	b.n	80037ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037d6:	f7ff f99d 	bl	8002b14 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e0c5      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ec:	4b65      	ldr	r3, [pc, #404]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 80037ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0ee      	beq.n	80037d6 <HAL_RCC_OscConfig+0x33a>
 80037f8:	e014      	b.n	8003824 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037fa:	f7ff f98b 	bl	8002b14 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003800:	e00a      	b.n	8003818 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003802:	f7ff f987 	bl	8002b14 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003810:	4293      	cmp	r3, r2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e0af      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003818:	4b5a      	ldr	r3, [pc, #360]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 800381a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1ee      	bne.n	8003802 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003824:	7dfb      	ldrb	r3, [r7, #23]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d105      	bne.n	8003836 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800382a:	4b56      	ldr	r3, [pc, #344]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	4a55      	ldr	r2, [pc, #340]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 8003830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003834:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 809b 	beq.w	8003976 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003840:	4b50      	ldr	r3, [pc, #320]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 030c 	and.w	r3, r3, #12
 8003848:	2b08      	cmp	r3, #8
 800384a:	d05c      	beq.n	8003906 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	2b02      	cmp	r3, #2
 8003852:	d141      	bne.n	80038d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003854:	4b4c      	ldr	r3, [pc, #304]	; (8003988 <HAL_RCC_OscConfig+0x4ec>)
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385a:	f7ff f95b 	bl	8002b14 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003862:	f7ff f957 	bl	8002b14 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e081      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003874:	4b43      	ldr	r3, [pc, #268]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1f0      	bne.n	8003862 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	69da      	ldr	r2, [r3, #28]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	019b      	lsls	r3, r3, #6
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	085b      	lsrs	r3, r3, #1
 8003898:	3b01      	subs	r3, #1
 800389a:	041b      	lsls	r3, r3, #16
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	061b      	lsls	r3, r3, #24
 80038a4:	4937      	ldr	r1, [pc, #220]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038aa:	4b37      	ldr	r3, [pc, #220]	; (8003988 <HAL_RCC_OscConfig+0x4ec>)
 80038ac:	2201      	movs	r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b0:	f7ff f930 	bl	8002b14 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b8:	f7ff f92c 	bl	8002b14 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e056      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ca:	4b2e      	ldr	r3, [pc, #184]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0x41c>
 80038d6:	e04e      	b.n	8003976 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d8:	4b2b      	ldr	r3, [pc, #172]	; (8003988 <HAL_RCC_OscConfig+0x4ec>)
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038de:	f7ff f919 	bl	8002b14 <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e6:	f7ff f915 	bl	8002b14 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e03f      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f8:	4b22      	ldr	r3, [pc, #136]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1f0      	bne.n	80038e6 <HAL_RCC_OscConfig+0x44a>
 8003904:	e037      	b.n	8003976 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e032      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003912:	4b1c      	ldr	r3, [pc, #112]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d028      	beq.n	8003972 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800392a:	429a      	cmp	r2, r3
 800392c:	d121      	bne.n	8003972 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003938:	429a      	cmp	r2, r3
 800393a:	d11a      	bne.n	8003972 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003942:	4013      	ands	r3, r2
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003948:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800394a:	4293      	cmp	r3, r2
 800394c:	d111      	bne.n	8003972 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003958:	085b      	lsrs	r3, r3, #1
 800395a:	3b01      	subs	r3, #1
 800395c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800395e:	429a      	cmp	r2, r3
 8003960:	d107      	bne.n	8003972 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800396e:	429a      	cmp	r2, r3
 8003970:	d001      	beq.n	8003976 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40007000 	.word	0x40007000
 8003984:	40023800 	.word	0x40023800
 8003988:	42470060 	.word	0x42470060

0800398c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e0cc      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039a0:	4b68      	ldr	r3, [pc, #416]	; (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d90c      	bls.n	80039c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ae:	4b65      	ldr	r3, [pc, #404]	; (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b6:	4b63      	ldr	r3, [pc, #396]	; (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d001      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e0b8      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d020      	beq.n	8003a16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039e0:	4b59      	ldr	r3, [pc, #356]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	4a58      	ldr	r2, [pc, #352]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d005      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039f8:	4b53      	ldr	r3, [pc, #332]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	4a52      	ldr	r2, [pc, #328]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a04:	4b50      	ldr	r3, [pc, #320]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	494d      	ldr	r1, [pc, #308]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d044      	beq.n	8003aac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d107      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2a:	4b47      	ldr	r3, [pc, #284]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d119      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e07f      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d003      	beq.n	8003a4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	d107      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4a:	4b3f      	ldr	r3, [pc, #252]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d109      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e06f      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5a:	4b3b      	ldr	r3, [pc, #236]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e067      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a6a:	4b37      	ldr	r3, [pc, #220]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f023 0203 	bic.w	r2, r3, #3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	4934      	ldr	r1, [pc, #208]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a7c:	f7ff f84a 	bl	8002b14 <HAL_GetTick>
 8003a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a82:	e00a      	b.n	8003a9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a84:	f7ff f846 	bl	8002b14 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e04f      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9a:	4b2b      	ldr	r3, [pc, #172]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 020c 	and.w	r2, r3, #12
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d1eb      	bne.n	8003a84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003aac:	4b25      	ldr	r3, [pc, #148]	; (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d20c      	bcs.n	8003ad4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aba:	4b22      	ldr	r3, [pc, #136]	; (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac2:	4b20      	ldr	r3, [pc, #128]	; (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d001      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e032      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ae0:	4b19      	ldr	r3, [pc, #100]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	4916      	ldr	r1, [pc, #88]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d009      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003afe:	4b12      	ldr	r3, [pc, #72]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	490e      	ldr	r1, [pc, #56]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b12:	f000 f821 	bl	8003b58 <HAL_RCC_GetSysClockFreq>
 8003b16:	4602      	mov	r2, r0
 8003b18:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	091b      	lsrs	r3, r3, #4
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	490a      	ldr	r1, [pc, #40]	; (8003b4c <HAL_RCC_ClockConfig+0x1c0>)
 8003b24:	5ccb      	ldrb	r3, [r1, r3]
 8003b26:	fa22 f303 	lsr.w	r3, r2, r3
 8003b2a:	4a09      	ldr	r2, [pc, #36]	; (8003b50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b2e:	4b09      	ldr	r3, [pc, #36]	; (8003b54 <HAL_RCC_ClockConfig+0x1c8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fe fb18 	bl	8002168 <HAL_InitTick>

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40023c00 	.word	0x40023c00
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	080083f8 	.word	0x080083f8
 8003b50:	20000000 	.word	0x20000000
 8003b54:	20000004 	.word	0x20000004

08003b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	607b      	str	r3, [r7, #4]
 8003b64:	2300      	movs	r3, #0
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b70:	4b67      	ldr	r3, [pc, #412]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 030c 	and.w	r3, r3, #12
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d00d      	beq.n	8003b98 <HAL_RCC_GetSysClockFreq+0x40>
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	f200 80bd 	bhi.w	8003cfc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_RCC_GetSysClockFreq+0x34>
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d003      	beq.n	8003b92 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b8a:	e0b7      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b8c:	4b61      	ldr	r3, [pc, #388]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b8e:	60bb      	str	r3, [r7, #8]
       break;
 8003b90:	e0b7      	b.n	8003d02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b92:	4b61      	ldr	r3, [pc, #388]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003b94:	60bb      	str	r3, [r7, #8]
      break;
 8003b96:	e0b4      	b.n	8003d02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b98:	4b5d      	ldr	r3, [pc, #372]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ba0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ba2:	4b5b      	ldr	r3, [pc, #364]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d04d      	beq.n	8003c4a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bae:	4b58      	ldr	r3, [pc, #352]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	099b      	lsrs	r3, r3, #6
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bbe:	f04f 0100 	mov.w	r1, #0
 8003bc2:	ea02 0800 	and.w	r8, r2, r0
 8003bc6:	ea03 0901 	and.w	r9, r3, r1
 8003bca:	4640      	mov	r0, r8
 8003bcc:	4649      	mov	r1, r9
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	014b      	lsls	r3, r1, #5
 8003bd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bdc:	0142      	lsls	r2, r0, #5
 8003bde:	4610      	mov	r0, r2
 8003be0:	4619      	mov	r1, r3
 8003be2:	ebb0 0008 	subs.w	r0, r0, r8
 8003be6:	eb61 0109 	sbc.w	r1, r1, r9
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	f04f 0300 	mov.w	r3, #0
 8003bf2:	018b      	lsls	r3, r1, #6
 8003bf4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bf8:	0182      	lsls	r2, r0, #6
 8003bfa:	1a12      	subs	r2, r2, r0
 8003bfc:	eb63 0301 	sbc.w	r3, r3, r1
 8003c00:	f04f 0000 	mov.w	r0, #0
 8003c04:	f04f 0100 	mov.w	r1, #0
 8003c08:	00d9      	lsls	r1, r3, #3
 8003c0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c0e:	00d0      	lsls	r0, r2, #3
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	eb12 0208 	adds.w	r2, r2, r8
 8003c18:	eb43 0309 	adc.w	r3, r3, r9
 8003c1c:	f04f 0000 	mov.w	r0, #0
 8003c20:	f04f 0100 	mov.w	r1, #0
 8003c24:	0259      	lsls	r1, r3, #9
 8003c26:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003c2a:	0250      	lsls	r0, r2, #9
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4610      	mov	r0, r2
 8003c32:	4619      	mov	r1, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	461a      	mov	r2, r3
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	f7fc fee6 	bl	8000a0c <__aeabi_uldivmod>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4613      	mov	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	e04a      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c4a:	4b31      	ldr	r3, [pc, #196]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	099b      	lsrs	r3, r3, #6
 8003c50:	461a      	mov	r2, r3
 8003c52:	f04f 0300 	mov.w	r3, #0
 8003c56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c5a:	f04f 0100 	mov.w	r1, #0
 8003c5e:	ea02 0400 	and.w	r4, r2, r0
 8003c62:	ea03 0501 	and.w	r5, r3, r1
 8003c66:	4620      	mov	r0, r4
 8003c68:	4629      	mov	r1, r5
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	f04f 0300 	mov.w	r3, #0
 8003c72:	014b      	lsls	r3, r1, #5
 8003c74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c78:	0142      	lsls	r2, r0, #5
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	1b00      	subs	r0, r0, r4
 8003c80:	eb61 0105 	sbc.w	r1, r1, r5
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	018b      	lsls	r3, r1, #6
 8003c8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c92:	0182      	lsls	r2, r0, #6
 8003c94:	1a12      	subs	r2, r2, r0
 8003c96:	eb63 0301 	sbc.w	r3, r3, r1
 8003c9a:	f04f 0000 	mov.w	r0, #0
 8003c9e:	f04f 0100 	mov.w	r1, #0
 8003ca2:	00d9      	lsls	r1, r3, #3
 8003ca4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ca8:	00d0      	lsls	r0, r2, #3
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	1912      	adds	r2, r2, r4
 8003cb0:	eb45 0303 	adc.w	r3, r5, r3
 8003cb4:	f04f 0000 	mov.w	r0, #0
 8003cb8:	f04f 0100 	mov.w	r1, #0
 8003cbc:	0299      	lsls	r1, r3, #10
 8003cbe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003cc2:	0290      	lsls	r0, r2, #10
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4610      	mov	r0, r2
 8003cca:	4619      	mov	r1, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	f7fc fe9a 	bl	8000a0c <__aeabi_uldivmod>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4613      	mov	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	0c1b      	lsrs	r3, r3, #16
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	3301      	adds	r3, #1
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf8:	60bb      	str	r3, [r7, #8]
      break;
 8003cfa:	e002      	b.n	8003d02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003cfe:	60bb      	str	r3, [r7, #8]
      break;
 8003d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d02:	68bb      	ldr	r3, [r7, #8]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003d0e:	bf00      	nop
 8003d10:	40023800 	.word	0x40023800
 8003d14:	00f42400 	.word	0x00f42400
 8003d18:	007a1200 	.word	0x007a1200

08003d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d20:	4b03      	ldr	r3, [pc, #12]	; (8003d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d22:	681b      	ldr	r3, [r3, #0]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	20000000 	.word	0x20000000

08003d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d38:	f7ff fff0 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	0a9b      	lsrs	r3, r3, #10
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	4903      	ldr	r1, [pc, #12]	; (8003d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d4a:	5ccb      	ldrb	r3, [r1, r3]
 8003d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40023800 	.word	0x40023800
 8003d58:	08008408 	.word	0x08008408

08003d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d60:	f7ff ffdc 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8003d64:	4602      	mov	r2, r0
 8003d66:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	0b5b      	lsrs	r3, r3, #13
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	4903      	ldr	r1, [pc, #12]	; (8003d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d72:	5ccb      	ldrb	r3, [r1, r3]
 8003d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	08008408 	.word	0x08008408

08003d84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	220f      	movs	r2, #15
 8003d92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d94:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <HAL_RCC_GetClockConfig+0x5c>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 0203 	and.w	r2, r3, #3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003da0:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <HAL_RCC_GetClockConfig+0x5c>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003dac:	4b0c      	ldr	r3, [pc, #48]	; (8003de0 <HAL_RCC_GetClockConfig+0x5c>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003db8:	4b09      	ldr	r3, [pc, #36]	; (8003de0 <HAL_RCC_GetClockConfig+0x5c>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	08db      	lsrs	r3, r3, #3
 8003dbe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003dc6:	4b07      	ldr	r3, [pc, #28]	; (8003de4 <HAL_RCC_GetClockConfig+0x60>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0207 	and.w	r2, r3, #7
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	601a      	str	r2, [r3, #0]
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40023800 	.word	0x40023800
 8003de4:	40023c00 	.word	0x40023c00

08003de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e041      	b.n	8003e7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d106      	bne.n	8003e14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f839 	bl	8003e86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3304      	adds	r3, #4
 8003e24:	4619      	mov	r1, r3
 8003e26:	4610      	mov	r0, r2
 8003e28:	f000 fce2 	bl	80047f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
	...

08003e9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d001      	beq.n	8003eb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e04e      	b.n	8003f52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0201 	orr.w	r2, r2, #1
 8003eca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a23      	ldr	r2, [pc, #140]	; (8003f60 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d022      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x80>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ede:	d01d      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x80>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a1f      	ldr	r2, [pc, #124]	; (8003f64 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d018      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x80>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a1e      	ldr	r2, [pc, #120]	; (8003f68 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d013      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x80>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a1c      	ldr	r2, [pc, #112]	; (8003f6c <HAL_TIM_Base_Start_IT+0xd0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00e      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x80>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a1b      	ldr	r2, [pc, #108]	; (8003f70 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d009      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x80>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a19      	ldr	r2, [pc, #100]	; (8003f74 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d004      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x80>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a18      	ldr	r2, [pc, #96]	; (8003f78 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d111      	bne.n	8003f40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b06      	cmp	r3, #6
 8003f2c:	d010      	beq.n	8003f50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0201 	orr.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f3e:	e007      	b.n	8003f50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0201 	orr.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40010000 	.word	0x40010000
 8003f64:	40000400 	.word	0x40000400
 8003f68:	40000800 	.word	0x40000800
 8003f6c:	40000c00 	.word	0x40000c00
 8003f70:	40010400 	.word	0x40010400
 8003f74:	40014000 	.word	0x40014000
 8003f78:	40001800 	.word	0x40001800

08003f7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e041      	b.n	8004012 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fe fafa 	bl	800259c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4610      	mov	r0, r2
 8003fbc:	f000 fc18 	bl	80047f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
	...

0800401c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d109      	bne.n	8004040 <HAL_TIM_PWM_Start+0x24>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b01      	cmp	r3, #1
 8004036:	bf14      	ite	ne
 8004038:	2301      	movne	r3, #1
 800403a:	2300      	moveq	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	e022      	b.n	8004086 <HAL_TIM_PWM_Start+0x6a>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	2b04      	cmp	r3, #4
 8004044:	d109      	bne.n	800405a <HAL_TIM_PWM_Start+0x3e>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b01      	cmp	r3, #1
 8004050:	bf14      	ite	ne
 8004052:	2301      	movne	r3, #1
 8004054:	2300      	moveq	r3, #0
 8004056:	b2db      	uxtb	r3, r3
 8004058:	e015      	b.n	8004086 <HAL_TIM_PWM_Start+0x6a>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b08      	cmp	r3, #8
 800405e:	d109      	bne.n	8004074 <HAL_TIM_PWM_Start+0x58>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b01      	cmp	r3, #1
 800406a:	bf14      	ite	ne
 800406c:	2301      	movne	r3, #1
 800406e:	2300      	moveq	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	e008      	b.n	8004086 <HAL_TIM_PWM_Start+0x6a>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b01      	cmp	r3, #1
 800407e:	bf14      	ite	ne
 8004080:	2301      	movne	r3, #1
 8004082:	2300      	moveq	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e07c      	b.n	8004188 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d104      	bne.n	800409e <HAL_TIM_PWM_Start+0x82>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800409c:	e013      	b.n	80040c6 <HAL_TIM_PWM_Start+0xaa>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b04      	cmp	r3, #4
 80040a2:	d104      	bne.n	80040ae <HAL_TIM_PWM_Start+0x92>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040ac:	e00b      	b.n	80040c6 <HAL_TIM_PWM_Start+0xaa>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d104      	bne.n	80040be <HAL_TIM_PWM_Start+0xa2>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040bc:	e003      	b.n	80040c6 <HAL_TIM_PWM_Start+0xaa>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2202      	movs	r2, #2
 80040c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2201      	movs	r2, #1
 80040cc:	6839      	ldr	r1, [r7, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 fdde 	bl	8004c90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a2d      	ldr	r2, [pc, #180]	; (8004190 <HAL_TIM_PWM_Start+0x174>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d004      	beq.n	80040e8 <HAL_TIM_PWM_Start+0xcc>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a2c      	ldr	r2, [pc, #176]	; (8004194 <HAL_TIM_PWM_Start+0x178>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d101      	bne.n	80040ec <HAL_TIM_PWM_Start+0xd0>
 80040e8:	2301      	movs	r3, #1
 80040ea:	e000      	b.n	80040ee <HAL_TIM_PWM_Start+0xd2>
 80040ec:	2300      	movs	r3, #0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d007      	beq.n	8004102 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004100:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a22      	ldr	r2, [pc, #136]	; (8004190 <HAL_TIM_PWM_Start+0x174>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d022      	beq.n	8004152 <HAL_TIM_PWM_Start+0x136>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004114:	d01d      	beq.n	8004152 <HAL_TIM_PWM_Start+0x136>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a1f      	ldr	r2, [pc, #124]	; (8004198 <HAL_TIM_PWM_Start+0x17c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d018      	beq.n	8004152 <HAL_TIM_PWM_Start+0x136>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a1d      	ldr	r2, [pc, #116]	; (800419c <HAL_TIM_PWM_Start+0x180>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d013      	beq.n	8004152 <HAL_TIM_PWM_Start+0x136>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a1c      	ldr	r2, [pc, #112]	; (80041a0 <HAL_TIM_PWM_Start+0x184>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d00e      	beq.n	8004152 <HAL_TIM_PWM_Start+0x136>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a16      	ldr	r2, [pc, #88]	; (8004194 <HAL_TIM_PWM_Start+0x178>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d009      	beq.n	8004152 <HAL_TIM_PWM_Start+0x136>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a18      	ldr	r2, [pc, #96]	; (80041a4 <HAL_TIM_PWM_Start+0x188>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d004      	beq.n	8004152 <HAL_TIM_PWM_Start+0x136>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a16      	ldr	r2, [pc, #88]	; (80041a8 <HAL_TIM_PWM_Start+0x18c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d111      	bne.n	8004176 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b06      	cmp	r3, #6
 8004162:	d010      	beq.n	8004186 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0201 	orr.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004174:	e007      	b.n	8004186 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f042 0201 	orr.w	r2, r2, #1
 8004184:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40010000 	.word	0x40010000
 8004194:	40010400 	.word	0x40010400
 8004198:	40000400 	.word	0x40000400
 800419c:	40000800 	.word	0x40000800
 80041a0:	40000c00 	.word	0x40000c00
 80041a4:	40014000 	.word	0x40014000
 80041a8:	40001800 	.word	0x40001800

080041ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e097      	b.n	80042f0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d106      	bne.n	80041da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7fe fa01 	bl	80025dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2202      	movs	r2, #2
 80041de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6812      	ldr	r2, [r2, #0]
 80041ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041f0:	f023 0307 	bic.w	r3, r3, #7
 80041f4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3304      	adds	r3, #4
 80041fe:	4619      	mov	r1, r3
 8004200:	4610      	mov	r0, r2
 8004202:	f000 faf5 	bl	80047f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	4313      	orrs	r3, r2
 8004226:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800422e:	f023 0303 	bic.w	r3, r3, #3
 8004232:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	021b      	lsls	r3, r3, #8
 800423e:	4313      	orrs	r3, r2
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800424c:	f023 030c 	bic.w	r3, r3, #12
 8004250:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004258:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800425c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	021b      	lsls	r3, r3, #8
 8004268:	4313      	orrs	r3, r2
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	4313      	orrs	r3, r2
 800426e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	011a      	lsls	r2, r3, #4
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	031b      	lsls	r3, r3, #12
 800427c:	4313      	orrs	r3, r2
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	4313      	orrs	r3, r2
 8004282:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800428a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004292:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	4313      	orrs	r3, r2
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004308:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004310:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004318:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004320:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d110      	bne.n	800434a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004328:	7bfb      	ldrb	r3, [r7, #15]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d102      	bne.n	8004334 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800432e:	7b7b      	ldrb	r3, [r7, #13]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d001      	beq.n	8004338 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e069      	b.n	800440c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004348:	e031      	b.n	80043ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b04      	cmp	r3, #4
 800434e:	d110      	bne.n	8004372 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004350:	7bbb      	ldrb	r3, [r7, #14]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d102      	bne.n	800435c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004356:	7b3b      	ldrb	r3, [r7, #12]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d001      	beq.n	8004360 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e055      	b.n	800440c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004370:	e01d      	b.n	80043ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004372:	7bfb      	ldrb	r3, [r7, #15]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d108      	bne.n	800438a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004378:	7bbb      	ldrb	r3, [r7, #14]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d105      	bne.n	800438a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800437e:	7b7b      	ldrb	r3, [r7, #13]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d102      	bne.n	800438a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004384:	7b3b      	ldrb	r3, [r7, #12]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d001      	beq.n	800438e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e03e      	b.n	800440c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2202      	movs	r2, #2
 8004392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2202      	movs	r2, #2
 800439a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2202      	movs	r2, #2
 80043a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2202      	movs	r2, #2
 80043aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_TIM_Encoder_Start+0xc4>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d008      	beq.n	80043cc <HAL_TIM_Encoder_Start+0xd4>
 80043ba:	e00f      	b.n	80043dc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2201      	movs	r2, #1
 80043c2:	2100      	movs	r1, #0
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 fc63 	bl	8004c90 <TIM_CCxChannelCmd>
      break;
 80043ca:	e016      	b.n	80043fa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2201      	movs	r2, #1
 80043d2:	2104      	movs	r1, #4
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 fc5b 	bl	8004c90 <TIM_CCxChannelCmd>
      break;
 80043da:	e00e      	b.n	80043fa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2201      	movs	r2, #1
 80043e2:	2100      	movs	r1, #0
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fc53 	bl	8004c90 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2201      	movs	r2, #1
 80043f0:	2104      	movs	r1, #4
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fc4c 	bl	8004c90 <TIM_CCxChannelCmd>
      break;
 80043f8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0201 	orr.w	r2, r2, #1
 8004408:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b02      	cmp	r3, #2
 8004428:	d122      	bne.n	8004470 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b02      	cmp	r3, #2
 8004436:	d11b      	bne.n	8004470 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f06f 0202 	mvn.w	r2, #2
 8004440:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f9ac 	bl	80047b4 <HAL_TIM_IC_CaptureCallback>
 800445c:	e005      	b.n	800446a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f99e 	bl	80047a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f9af 	bl	80047c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	2b04      	cmp	r3, #4
 800447c:	d122      	bne.n	80044c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b04      	cmp	r3, #4
 800448a:	d11b      	bne.n	80044c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f06f 0204 	mvn.w	r2, #4
 8004494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2202      	movs	r2, #2
 800449a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f982 	bl	80047b4 <HAL_TIM_IC_CaptureCallback>
 80044b0:	e005      	b.n	80044be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f974 	bl	80047a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f985 	bl	80047c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b08      	cmp	r3, #8
 80044d0:	d122      	bne.n	8004518 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d11b      	bne.n	8004518 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f06f 0208 	mvn.w	r2, #8
 80044e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2204      	movs	r2, #4
 80044ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f958 	bl	80047b4 <HAL_TIM_IC_CaptureCallback>
 8004504:	e005      	b.n	8004512 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f94a 	bl	80047a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f95b 	bl	80047c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	f003 0310 	and.w	r3, r3, #16
 8004522:	2b10      	cmp	r3, #16
 8004524:	d122      	bne.n	800456c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f003 0310 	and.w	r3, r3, #16
 8004530:	2b10      	cmp	r3, #16
 8004532:	d11b      	bne.n	800456c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 0210 	mvn.w	r2, #16
 800453c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2208      	movs	r2, #8
 8004542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f92e 	bl	80047b4 <HAL_TIM_IC_CaptureCallback>
 8004558:	e005      	b.n	8004566 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f920 	bl	80047a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f931 	bl	80047c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b01      	cmp	r3, #1
 8004578:	d10e      	bne.n	8004598 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b01      	cmp	r3, #1
 8004586:	d107      	bne.n	8004598 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f06f 0201 	mvn.w	r2, #1
 8004590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7fd fda2 	bl	80020dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a2:	2b80      	cmp	r3, #128	; 0x80
 80045a4:	d10e      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b0:	2b80      	cmp	r3, #128	; 0x80
 80045b2:	d107      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 fc12 	bl	8004de8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ce:	2b40      	cmp	r3, #64	; 0x40
 80045d0:	d10e      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045dc:	2b40      	cmp	r3, #64	; 0x40
 80045de:	d107      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f8f6 	bl	80047dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b20      	cmp	r3, #32
 80045fc:	d10e      	bne.n	800461c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f003 0320 	and.w	r3, r3, #32
 8004608:	2b20      	cmp	r3, #32
 800460a:	d107      	bne.n	800461c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f06f 0220 	mvn.w	r2, #32
 8004614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fbdc 	bl	8004dd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800461c:	bf00      	nop
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800463a:	2302      	movs	r3, #2
 800463c:	e0ac      	b.n	8004798 <HAL_TIM_PWM_ConfigChannel+0x174>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b0c      	cmp	r3, #12
 800464a:	f200 809f 	bhi.w	800478c <HAL_TIM_PWM_ConfigChannel+0x168>
 800464e:	a201      	add	r2, pc, #4	; (adr r2, 8004654 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004654:	08004689 	.word	0x08004689
 8004658:	0800478d 	.word	0x0800478d
 800465c:	0800478d 	.word	0x0800478d
 8004660:	0800478d 	.word	0x0800478d
 8004664:	080046c9 	.word	0x080046c9
 8004668:	0800478d 	.word	0x0800478d
 800466c:	0800478d 	.word	0x0800478d
 8004670:	0800478d 	.word	0x0800478d
 8004674:	0800470b 	.word	0x0800470b
 8004678:	0800478d 	.word	0x0800478d
 800467c:	0800478d 	.word	0x0800478d
 8004680:	0800478d 	.word	0x0800478d
 8004684:	0800474b 	.word	0x0800474b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68b9      	ldr	r1, [r7, #8]
 800468e:	4618      	mov	r0, r3
 8004690:	f000 f94e 	bl	8004930 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699a      	ldr	r2, [r3, #24]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0208 	orr.w	r2, r2, #8
 80046a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699a      	ldr	r2, [r3, #24]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0204 	bic.w	r2, r2, #4
 80046b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6999      	ldr	r1, [r3, #24]
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	691a      	ldr	r2, [r3, #16]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	619a      	str	r2, [r3, #24]
      break;
 80046c6:	e062      	b.n	800478e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68b9      	ldr	r1, [r7, #8]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 f99e 	bl	8004a10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699a      	ldr	r2, [r3, #24]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699a      	ldr	r2, [r3, #24]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6999      	ldr	r1, [r3, #24]
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	021a      	lsls	r2, r3, #8
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	619a      	str	r2, [r3, #24]
      break;
 8004708:	e041      	b.n	800478e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68b9      	ldr	r1, [r7, #8]
 8004710:	4618      	mov	r0, r3
 8004712:	f000 f9f3 	bl	8004afc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69da      	ldr	r2, [r3, #28]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f042 0208 	orr.w	r2, r2, #8
 8004724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69da      	ldr	r2, [r3, #28]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0204 	bic.w	r2, r2, #4
 8004734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	69d9      	ldr	r1, [r3, #28]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	61da      	str	r2, [r3, #28]
      break;
 8004748:	e021      	b.n	800478e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68b9      	ldr	r1, [r7, #8]
 8004750:	4618      	mov	r0, r3
 8004752:	f000 fa47 	bl	8004be4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69da      	ldr	r2, [r3, #28]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	69da      	ldr	r2, [r3, #28]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69d9      	ldr	r1, [r3, #28]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	021a      	lsls	r2, r3, #8
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	61da      	str	r2, [r3, #28]
      break;
 800478a:	e000      	b.n	800478e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800478c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a40      	ldr	r2, [pc, #256]	; (8004904 <TIM_Base_SetConfig+0x114>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d013      	beq.n	8004830 <TIM_Base_SetConfig+0x40>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800480e:	d00f      	beq.n	8004830 <TIM_Base_SetConfig+0x40>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a3d      	ldr	r2, [pc, #244]	; (8004908 <TIM_Base_SetConfig+0x118>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d00b      	beq.n	8004830 <TIM_Base_SetConfig+0x40>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a3c      	ldr	r2, [pc, #240]	; (800490c <TIM_Base_SetConfig+0x11c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d007      	beq.n	8004830 <TIM_Base_SetConfig+0x40>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a3b      	ldr	r2, [pc, #236]	; (8004910 <TIM_Base_SetConfig+0x120>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d003      	beq.n	8004830 <TIM_Base_SetConfig+0x40>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a3a      	ldr	r2, [pc, #232]	; (8004914 <TIM_Base_SetConfig+0x124>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d108      	bne.n	8004842 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a2f      	ldr	r2, [pc, #188]	; (8004904 <TIM_Base_SetConfig+0x114>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d02b      	beq.n	80048a2 <TIM_Base_SetConfig+0xb2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004850:	d027      	beq.n	80048a2 <TIM_Base_SetConfig+0xb2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a2c      	ldr	r2, [pc, #176]	; (8004908 <TIM_Base_SetConfig+0x118>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d023      	beq.n	80048a2 <TIM_Base_SetConfig+0xb2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a2b      	ldr	r2, [pc, #172]	; (800490c <TIM_Base_SetConfig+0x11c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d01f      	beq.n	80048a2 <TIM_Base_SetConfig+0xb2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a2a      	ldr	r2, [pc, #168]	; (8004910 <TIM_Base_SetConfig+0x120>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d01b      	beq.n	80048a2 <TIM_Base_SetConfig+0xb2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a29      	ldr	r2, [pc, #164]	; (8004914 <TIM_Base_SetConfig+0x124>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d017      	beq.n	80048a2 <TIM_Base_SetConfig+0xb2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a28      	ldr	r2, [pc, #160]	; (8004918 <TIM_Base_SetConfig+0x128>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d013      	beq.n	80048a2 <TIM_Base_SetConfig+0xb2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a27      	ldr	r2, [pc, #156]	; (800491c <TIM_Base_SetConfig+0x12c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00f      	beq.n	80048a2 <TIM_Base_SetConfig+0xb2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a26      	ldr	r2, [pc, #152]	; (8004920 <TIM_Base_SetConfig+0x130>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00b      	beq.n	80048a2 <TIM_Base_SetConfig+0xb2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a25      	ldr	r2, [pc, #148]	; (8004924 <TIM_Base_SetConfig+0x134>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d007      	beq.n	80048a2 <TIM_Base_SetConfig+0xb2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a24      	ldr	r2, [pc, #144]	; (8004928 <TIM_Base_SetConfig+0x138>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d003      	beq.n	80048a2 <TIM_Base_SetConfig+0xb2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a23      	ldr	r2, [pc, #140]	; (800492c <TIM_Base_SetConfig+0x13c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d108      	bne.n	80048b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a0a      	ldr	r2, [pc, #40]	; (8004904 <TIM_Base_SetConfig+0x114>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d003      	beq.n	80048e8 <TIM_Base_SetConfig+0xf8>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a0c      	ldr	r2, [pc, #48]	; (8004914 <TIM_Base_SetConfig+0x124>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d103      	bne.n	80048f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	615a      	str	r2, [r3, #20]
}
 80048f6:	bf00      	nop
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	40010000 	.word	0x40010000
 8004908:	40000400 	.word	0x40000400
 800490c:	40000800 	.word	0x40000800
 8004910:	40000c00 	.word	0x40000c00
 8004914:	40010400 	.word	0x40010400
 8004918:	40014000 	.word	0x40014000
 800491c:	40014400 	.word	0x40014400
 8004920:	40014800 	.word	0x40014800
 8004924:	40001800 	.word	0x40001800
 8004928:	40001c00 	.word	0x40001c00
 800492c:	40002000 	.word	0x40002000

08004930 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	f023 0201 	bic.w	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0303 	bic.w	r3, r3, #3
 8004966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	4313      	orrs	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f023 0302 	bic.w	r3, r3, #2
 8004978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	4313      	orrs	r3, r2
 8004982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a20      	ldr	r2, [pc, #128]	; (8004a08 <TIM_OC1_SetConfig+0xd8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d003      	beq.n	8004994 <TIM_OC1_SetConfig+0x64>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a1f      	ldr	r2, [pc, #124]	; (8004a0c <TIM_OC1_SetConfig+0xdc>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d10c      	bne.n	80049ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f023 0308 	bic.w	r3, r3, #8
 800499a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f023 0304 	bic.w	r3, r3, #4
 80049ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a15      	ldr	r2, [pc, #84]	; (8004a08 <TIM_OC1_SetConfig+0xd8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d003      	beq.n	80049be <TIM_OC1_SetConfig+0x8e>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a14      	ldr	r2, [pc, #80]	; (8004a0c <TIM_OC1_SetConfig+0xdc>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d111      	bne.n	80049e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	4313      	orrs	r3, r2
 80049e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	621a      	str	r2, [r3, #32]
}
 80049fc:	bf00      	nop
 80049fe:	371c      	adds	r7, #28
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	40010000 	.word	0x40010000
 8004a0c:	40010400 	.word	0x40010400

08004a10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	f023 0210 	bic.w	r2, r3, #16
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f023 0320 	bic.w	r3, r3, #32
 8004a5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a22      	ldr	r2, [pc, #136]	; (8004af4 <TIM_OC2_SetConfig+0xe4>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d003      	beq.n	8004a78 <TIM_OC2_SetConfig+0x68>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a21      	ldr	r2, [pc, #132]	; (8004af8 <TIM_OC2_SetConfig+0xe8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d10d      	bne.n	8004a94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	011b      	lsls	r3, r3, #4
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a17      	ldr	r2, [pc, #92]	; (8004af4 <TIM_OC2_SetConfig+0xe4>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d003      	beq.n	8004aa4 <TIM_OC2_SetConfig+0x94>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a16      	ldr	r2, [pc, #88]	; (8004af8 <TIM_OC2_SetConfig+0xe8>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d113      	bne.n	8004acc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004aaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	621a      	str	r2, [r3, #32]
}
 8004ae6:	bf00      	nop
 8004ae8:	371c      	adds	r7, #28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	40010000 	.word	0x40010000
 8004af8:	40010400 	.word	0x40010400

08004afc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f023 0303 	bic.w	r3, r3, #3
 8004b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	021b      	lsls	r3, r3, #8
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a21      	ldr	r2, [pc, #132]	; (8004bdc <TIM_OC3_SetConfig+0xe0>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d003      	beq.n	8004b62 <TIM_OC3_SetConfig+0x66>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a20      	ldr	r2, [pc, #128]	; (8004be0 <TIM_OC3_SetConfig+0xe4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d10d      	bne.n	8004b7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	021b      	lsls	r3, r3, #8
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a16      	ldr	r2, [pc, #88]	; (8004bdc <TIM_OC3_SetConfig+0xe0>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d003      	beq.n	8004b8e <TIM_OC3_SetConfig+0x92>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a15      	ldr	r2, [pc, #84]	; (8004be0 <TIM_OC3_SetConfig+0xe4>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d113      	bne.n	8004bb6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	621a      	str	r2, [r3, #32]
}
 8004bd0:	bf00      	nop
 8004bd2:	371c      	adds	r7, #28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	40010000 	.word	0x40010000
 8004be0:	40010400 	.word	0x40010400

08004be4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	021b      	lsls	r3, r3, #8
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	031b      	lsls	r3, r3, #12
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a12      	ldr	r2, [pc, #72]	; (8004c88 <TIM_OC4_SetConfig+0xa4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d003      	beq.n	8004c4c <TIM_OC4_SetConfig+0x68>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a11      	ldr	r2, [pc, #68]	; (8004c8c <TIM_OC4_SetConfig+0xa8>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d109      	bne.n	8004c60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	019b      	lsls	r3, r3, #6
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	621a      	str	r2, [r3, #32]
}
 8004c7a:	bf00      	nop
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	40010000 	.word	0x40010000
 8004c8c:	40010400 	.word	0x40010400

08004c90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f003 031f 	and.w	r3, r3, #31
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a1a      	ldr	r2, [r3, #32]
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	401a      	ands	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a1a      	ldr	r2, [r3, #32]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f003 031f 	and.w	r3, r3, #31
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	621a      	str	r2, [r3, #32]
}
 8004cce:	bf00      	nop
 8004cd0:	371c      	adds	r7, #28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
	...

08004cdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d101      	bne.n	8004cf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e05a      	b.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a21      	ldr	r2, [pc, #132]	; (8004db8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d022      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d40:	d01d      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a1d      	ldr	r2, [pc, #116]	; (8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d018      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a1b      	ldr	r2, [pc, #108]	; (8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d013      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a1a      	ldr	r2, [pc, #104]	; (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00e      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a18      	ldr	r2, [pc, #96]	; (8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d009      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a17      	ldr	r2, [pc, #92]	; (8004dcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d004      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a15      	ldr	r2, [pc, #84]	; (8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d10c      	bne.n	8004d98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	40010000 	.word	0x40010000
 8004dbc:	40000400 	.word	0x40000400
 8004dc0:	40000800 	.word	0x40000800
 8004dc4:	40000c00 	.word	0x40000c00
 8004dc8:	40010400 	.word	0x40010400
 8004dcc:	40014000 	.word	0x40014000
 8004dd0:	40001800 	.word	0x40001800

08004dd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e03f      	b.n	8004e8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d106      	bne.n	8004e28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fd fd3a 	bl	800289c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2224      	movs	r2, #36	; 0x24
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fc7b 	bl	800573c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695a      	ldr	r2, [r3, #20]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68da      	ldr	r2, [r3, #12]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2220      	movs	r2, #32
 8004e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b08a      	sub	sp, #40	; 0x28
 8004e9a:	af02      	add	r7, sp, #8
 8004e9c:	60f8      	str	r0, [r7, #12]
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	603b      	str	r3, [r7, #0]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b20      	cmp	r3, #32
 8004eb4:	d17c      	bne.n	8004fb0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <HAL_UART_Transmit+0x2c>
 8004ebc:	88fb      	ldrh	r3, [r7, #6]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e075      	b.n	8004fb2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_UART_Transmit+0x3e>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e06e      	b.n	8004fb2 <HAL_UART_Transmit+0x11c>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2221      	movs	r2, #33	; 0x21
 8004ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eea:	f7fd fe13 	bl	8002b14 <HAL_GetTick>
 8004eee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	88fa      	ldrh	r2, [r7, #6]
 8004ef4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	88fa      	ldrh	r2, [r7, #6]
 8004efa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f04:	d108      	bne.n	8004f18 <HAL_UART_Transmit+0x82>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d104      	bne.n	8004f18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	e003      	b.n	8004f20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004f28:	e02a      	b.n	8004f80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2200      	movs	r2, #0
 8004f32:	2180      	movs	r1, #128	; 0x80
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 fa3d 	bl	80053b4 <UART_WaitOnFlagUntilTimeout>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e036      	b.n	8004fb2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10b      	bne.n	8004f62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	3302      	adds	r3, #2
 8004f5e:	61bb      	str	r3, [r7, #24]
 8004f60:	e007      	b.n	8004f72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	781a      	ldrb	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1cf      	bne.n	8004f2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2200      	movs	r2, #0
 8004f92:	2140      	movs	r1, #64	; 0x40
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 fa0d 	bl	80053b4 <UART_WaitOnFlagUntilTimeout>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e006      	b.n	8004fb2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004fac:	2300      	movs	r3, #0
 8004fae:	e000      	b.n	8004fb2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004fb0:	2302      	movs	r3, #2
  }
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3720      	adds	r7, #32
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	60f8      	str	r0, [r7, #12]
 8004fc2:	60b9      	str	r1, [r7, #8]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b20      	cmp	r3, #32
 8004fd2:	d11d      	bne.n	8005010 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <HAL_UART_Receive_IT+0x26>
 8004fda:	88fb      	ldrh	r3, [r7, #6]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e016      	b.n	8005012 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d101      	bne.n	8004ff2 <HAL_UART_Receive_IT+0x38>
 8004fee:	2302      	movs	r3, #2
 8004ff0:	e00f      	b.n	8005012 <HAL_UART_Receive_IT+0x58>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005000:	88fb      	ldrh	r3, [r7, #6]
 8005002:	461a      	mov	r2, r3
 8005004:	68b9      	ldr	r1, [r7, #8]
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 fa1e 	bl	8005448 <UART_Start_Receive_IT>
 800500c:	4603      	mov	r3, r0
 800500e:	e000      	b.n	8005012 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005010:	2302      	movs	r3, #2
  }
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b08a      	sub	sp, #40	; 0x28
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800503c:	2300      	movs	r3, #0
 800503e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005040:	2300      	movs	r3, #0
 8005042:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10d      	bne.n	800506e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	f003 0320 	and.w	r3, r3, #32
 8005058:	2b00      	cmp	r3, #0
 800505a:	d008      	beq.n	800506e <HAL_UART_IRQHandler+0x52>
 800505c:	6a3b      	ldr	r3, [r7, #32]
 800505e:	f003 0320 	and.w	r3, r3, #32
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fad1 	bl	800560e <UART_Receive_IT>
      return;
 800506c:	e17c      	b.n	8005368 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 80b1 	beq.w	80051d8 <HAL_UART_IRQHandler+0x1bc>
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	d105      	bne.n	800508c <HAL_UART_IRQHandler+0x70>
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005086:	2b00      	cmp	r3, #0
 8005088:	f000 80a6 	beq.w	80051d8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <HAL_UART_IRQHandler+0x90>
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509c:	2b00      	cmp	r3, #0
 800509e:	d005      	beq.n	80050ac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a4:	f043 0201 	orr.w	r2, r3, #1
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <HAL_UART_IRQHandler+0xb0>
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d005      	beq.n	80050cc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	f043 0202 	orr.w	r2, r3, #2
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <HAL_UART_IRQHandler+0xd0>
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e4:	f043 0204 	orr.w	r2, r3, #4
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	f003 0308 	and.w	r3, r3, #8
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00f      	beq.n	8005116 <HAL_UART_IRQHandler+0xfa>
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	f003 0320 	and.w	r3, r3, #32
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d104      	bne.n	800510a <HAL_UART_IRQHandler+0xee>
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d005      	beq.n	8005116 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510e:	f043 0208 	orr.w	r2, r3, #8
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 811f 	beq.w	800535e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	f003 0320 	and.w	r3, r3, #32
 8005126:	2b00      	cmp	r3, #0
 8005128:	d007      	beq.n	800513a <HAL_UART_IRQHandler+0x11e>
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	f003 0320 	and.w	r3, r3, #32
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 fa6a 	bl	800560e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005144:	2b40      	cmp	r3, #64	; 0x40
 8005146:	bf0c      	ite	eq
 8005148:	2301      	moveq	r3, #1
 800514a:	2300      	movne	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005154:	f003 0308 	and.w	r3, r3, #8
 8005158:	2b00      	cmp	r3, #0
 800515a:	d102      	bne.n	8005162 <HAL_UART_IRQHandler+0x146>
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d031      	beq.n	80051c6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f9aa 	bl	80054bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005172:	2b40      	cmp	r3, #64	; 0x40
 8005174:	d123      	bne.n	80051be <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695a      	ldr	r2, [r3, #20]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005184:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518a:	2b00      	cmp	r3, #0
 800518c:	d013      	beq.n	80051b6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005192:	4a77      	ldr	r2, [pc, #476]	; (8005370 <HAL_UART_IRQHandler+0x354>)
 8005194:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519a:	4618      	mov	r0, r3
 800519c:	f7fd fe18 	bl	8002dd0 <HAL_DMA_Abort_IT>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d016      	beq.n	80051d4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051b0:	4610      	mov	r0, r2
 80051b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b4:	e00e      	b.n	80051d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f8e6 	bl	8005388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051bc:	e00a      	b.n	80051d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f8e2 	bl	8005388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c4:	e006      	b.n	80051d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f8de 	bl	8005388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80051d2:	e0c4      	b.n	800535e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d4:	bf00      	nop
    return;
 80051d6:	e0c2      	b.n	800535e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051dc:	2b01      	cmp	r3, #1
 80051de:	f040 80a2 	bne.w	8005326 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	f003 0310 	and.w	r3, r3, #16
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 809c 	beq.w	8005326 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	f003 0310 	and.w	r3, r3, #16
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 8096 	beq.w	8005326 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051fa:	2300      	movs	r3, #0
 80051fc:	60fb      	str	r3, [r7, #12]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	60fb      	str	r3, [r7, #12]
 800520e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521a:	2b40      	cmp	r3, #64	; 0x40
 800521c:	d14f      	bne.n	80052be <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005228:	8a3b      	ldrh	r3, [r7, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 8099 	beq.w	8005362 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005234:	8a3a      	ldrh	r2, [r7, #16]
 8005236:	429a      	cmp	r2, r3
 8005238:	f080 8093 	bcs.w	8005362 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	8a3a      	ldrh	r2, [r7, #16]
 8005240:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800524c:	d02b      	beq.n	80052a6 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800525c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	695a      	ldr	r2, [r3, #20]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0201 	bic.w	r2, r2, #1
 800526c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	695a      	ldr	r2, [r3, #20]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800527c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2220      	movs	r2, #32
 8005282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0210 	bic.w	r2, r2, #16
 800529a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7fd fd25 	bl	8002cf0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	4619      	mov	r1, r3
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f870 	bl	800539c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80052bc:	e051      	b.n	8005362 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d047      	beq.n	8005366 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80052d6:	8a7b      	ldrh	r3, [r7, #18]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d044      	beq.n	8005366 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68da      	ldr	r2, [r3, #12]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052ea:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	695a      	ldr	r2, [r3, #20]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f022 0201 	bic.w	r2, r2, #1
 80052fa:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2220      	movs	r2, #32
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 0210 	bic.w	r2, r2, #16
 8005318:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800531a:	8a7b      	ldrh	r3, [r7, #18]
 800531c:	4619      	mov	r1, r3
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f83c 	bl	800539c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005324:	e01f      	b.n	8005366 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532c:	2b00      	cmp	r3, #0
 800532e:	d008      	beq.n	8005342 <HAL_UART_IRQHandler+0x326>
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f8ff 	bl	800553e <UART_Transmit_IT>
    return;
 8005340:	e012      	b.n	8005368 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00d      	beq.n	8005368 <HAL_UART_IRQHandler+0x34c>
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005352:	2b00      	cmp	r3, #0
 8005354:	d008      	beq.n	8005368 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f941 	bl	80055de <UART_EndTransmit_IT>
    return;
 800535c:	e004      	b.n	8005368 <HAL_UART_IRQHandler+0x34c>
    return;
 800535e:	bf00      	nop
 8005360:	e002      	b.n	8005368 <HAL_UART_IRQHandler+0x34c>
      return;
 8005362:	bf00      	nop
 8005364:	e000      	b.n	8005368 <HAL_UART_IRQHandler+0x34c>
      return;
 8005366:	bf00      	nop
  }
}
 8005368:	3728      	adds	r7, #40	; 0x28
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	08005517 	.word	0x08005517

08005374 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	4613      	mov	r3, r2
 80053c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053c4:	e02c      	b.n	8005420 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053cc:	d028      	beq.n	8005420 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d007      	beq.n	80053e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80053d4:	f7fd fb9e 	bl	8002b14 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d21d      	bcs.n	8005420 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68da      	ldr	r2, [r3, #12]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80053f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695a      	ldr	r2, [r3, #20]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 0201 	bic.w	r2, r2, #1
 8005402:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2220      	movs	r2, #32
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e00f      	b.n	8005440 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	4013      	ands	r3, r2
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	429a      	cmp	r2, r3
 800542e:	bf0c      	ite	eq
 8005430:	2301      	moveq	r3, #1
 8005432:	2300      	movne	r3, #0
 8005434:	b2db      	uxtb	r3, r3
 8005436:	461a      	mov	r2, r3
 8005438:	79fb      	ldrb	r3, [r7, #7]
 800543a:	429a      	cmp	r2, r3
 800543c:	d0c3      	beq.n	80053c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	4613      	mov	r3, r2
 8005454:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	88fa      	ldrh	r2, [r7, #6]
 8005460:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	88fa      	ldrh	r2, [r7, #6]
 8005466:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2222      	movs	r2, #34	; 0x22
 8005472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800548c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	695a      	ldr	r2, [r3, #20]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f042 0201 	orr.w	r2, r2, #1
 800549c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68da      	ldr	r2, [r3, #12]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f042 0220 	orr.w	r2, r2, #32
 80054ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80054d2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	695a      	ldr	r2, [r3, #20]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f022 0201 	bic.w	r2, r2, #1
 80054e2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d107      	bne.n	80054fc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f022 0210 	bic.w	r2, r2, #16
 80054fa:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2220      	movs	r2, #32
 8005500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	631a      	str	r2, [r3, #48]	; 0x30
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b084      	sub	sp, #16
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005522:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f7ff ff29 	bl	8005388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005536:	bf00      	nop
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800553e:	b480      	push	{r7}
 8005540:	b085      	sub	sp, #20
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b21      	cmp	r3, #33	; 0x21
 8005550:	d13e      	bne.n	80055d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800555a:	d114      	bne.n	8005586 <UART_Transmit_IT+0x48>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d110      	bne.n	8005586 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005578:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	1c9a      	adds	r2, r3, #2
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	621a      	str	r2, [r3, #32]
 8005584:	e008      	b.n	8005598 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	1c59      	adds	r1, r3, #1
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	6211      	str	r1, [r2, #32]
 8005590:	781a      	ldrb	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800559c:	b29b      	uxth	r3, r3
 800559e:	3b01      	subs	r3, #1
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	4619      	mov	r1, r3
 80055a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10f      	bne.n	80055cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68da      	ldr	r2, [r3, #12]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68da      	ldr	r2, [r3, #12]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	e000      	b.n	80055d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80055d0:	2302      	movs	r3, #2
  }
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b082      	sub	sp, #8
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7ff feb8 	bl	8005374 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b084      	sub	sp, #16
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b22      	cmp	r3, #34	; 0x22
 8005620:	f040 8087 	bne.w	8005732 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800562c:	d117      	bne.n	800565e <UART_Receive_IT+0x50>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d113      	bne.n	800565e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005636:	2300      	movs	r3, #0
 8005638:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	b29b      	uxth	r3, r3
 8005648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800564c:	b29a      	uxth	r2, r3
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005656:	1c9a      	adds	r2, r3, #2
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	629a      	str	r2, [r3, #40]	; 0x28
 800565c:	e026      	b.n	80056ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005662:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005664:	2300      	movs	r3, #0
 8005666:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005670:	d007      	beq.n	8005682 <UART_Receive_IT+0x74>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10a      	bne.n	8005690 <UART_Receive_IT+0x82>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d106      	bne.n	8005690 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	b2da      	uxtb	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	701a      	strb	r2, [r3, #0]
 800568e:	e008      	b.n	80056a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	b2db      	uxtb	r3, r3
 8005698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800569c:	b2da      	uxtb	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	4619      	mov	r1, r3
 80056ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d136      	bne.n	800572e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0220 	bic.w	r2, r2, #32
 80056ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	695a      	ldr	r2, [r3, #20]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0201 	bic.w	r2, r2, #1
 80056ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d10e      	bne.n	800571e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68da      	ldr	r2, [r3, #12]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f022 0210 	bic.w	r2, r2, #16
 800570e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005714:	4619      	mov	r1, r3
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7ff fe40 	bl	800539c <HAL_UARTEx_RxEventCallback>
 800571c:	e002      	b.n	8005724 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7fb fe40 	bl	80013a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800572a:	2300      	movs	r3, #0
 800572c:	e002      	b.n	8005734 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	e000      	b.n	8005734 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005732:	2302      	movs	r3, #2
  }
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800573c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005740:	b09f      	sub	sp, #124	; 0x7c
 8005742:	af00      	add	r7, sp, #0
 8005744:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005752:	68d9      	ldr	r1, [r3, #12]
 8005754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	ea40 0301 	orr.w	r3, r0, r1
 800575c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800575e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005760:	689a      	ldr	r2, [r3, #8]
 8005762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	431a      	orrs	r2, r3
 8005768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	431a      	orrs	r2, r3
 800576e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	4313      	orrs	r3, r2
 8005774:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005780:	f021 010c 	bic.w	r1, r1, #12
 8005784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800578a:	430b      	orrs	r3, r1
 800578c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800578e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800579a:	6999      	ldr	r1, [r3, #24]
 800579c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	ea40 0301 	orr.w	r3, r0, r1
 80057a4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	4bc5      	ldr	r3, [pc, #788]	; (8005ac0 <UART_SetConfig+0x384>)
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d004      	beq.n	80057ba <UART_SetConfig+0x7e>
 80057b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	4bc3      	ldr	r3, [pc, #780]	; (8005ac4 <UART_SetConfig+0x388>)
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d103      	bne.n	80057c2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057ba:	f7fe facf 	bl	8003d5c <HAL_RCC_GetPCLK2Freq>
 80057be:	6778      	str	r0, [r7, #116]	; 0x74
 80057c0:	e002      	b.n	80057c8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057c2:	f7fe fab7 	bl	8003d34 <HAL_RCC_GetPCLK1Freq>
 80057c6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057d0:	f040 80b6 	bne.w	8005940 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057d6:	461c      	mov	r4, r3
 80057d8:	f04f 0500 	mov.w	r5, #0
 80057dc:	4622      	mov	r2, r4
 80057de:	462b      	mov	r3, r5
 80057e0:	1891      	adds	r1, r2, r2
 80057e2:	6439      	str	r1, [r7, #64]	; 0x40
 80057e4:	415b      	adcs	r3, r3
 80057e6:	647b      	str	r3, [r7, #68]	; 0x44
 80057e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057ec:	1912      	adds	r2, r2, r4
 80057ee:	eb45 0303 	adc.w	r3, r5, r3
 80057f2:	f04f 0000 	mov.w	r0, #0
 80057f6:	f04f 0100 	mov.w	r1, #0
 80057fa:	00d9      	lsls	r1, r3, #3
 80057fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005800:	00d0      	lsls	r0, r2, #3
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	1911      	adds	r1, r2, r4
 8005808:	6639      	str	r1, [r7, #96]	; 0x60
 800580a:	416b      	adcs	r3, r5
 800580c:	667b      	str	r3, [r7, #100]	; 0x64
 800580e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	461a      	mov	r2, r3
 8005814:	f04f 0300 	mov.w	r3, #0
 8005818:	1891      	adds	r1, r2, r2
 800581a:	63b9      	str	r1, [r7, #56]	; 0x38
 800581c:	415b      	adcs	r3, r3
 800581e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005820:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005824:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005828:	f7fb f8f0 	bl	8000a0c <__aeabi_uldivmod>
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	4ba5      	ldr	r3, [pc, #660]	; (8005ac8 <UART_SetConfig+0x38c>)
 8005832:	fba3 2302 	umull	r2, r3, r3, r2
 8005836:	095b      	lsrs	r3, r3, #5
 8005838:	011e      	lsls	r6, r3, #4
 800583a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800583c:	461c      	mov	r4, r3
 800583e:	f04f 0500 	mov.w	r5, #0
 8005842:	4622      	mov	r2, r4
 8005844:	462b      	mov	r3, r5
 8005846:	1891      	adds	r1, r2, r2
 8005848:	6339      	str	r1, [r7, #48]	; 0x30
 800584a:	415b      	adcs	r3, r3
 800584c:	637b      	str	r3, [r7, #52]	; 0x34
 800584e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005852:	1912      	adds	r2, r2, r4
 8005854:	eb45 0303 	adc.w	r3, r5, r3
 8005858:	f04f 0000 	mov.w	r0, #0
 800585c:	f04f 0100 	mov.w	r1, #0
 8005860:	00d9      	lsls	r1, r3, #3
 8005862:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005866:	00d0      	lsls	r0, r2, #3
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	1911      	adds	r1, r2, r4
 800586e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005870:	416b      	adcs	r3, r5
 8005872:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	461a      	mov	r2, r3
 800587a:	f04f 0300 	mov.w	r3, #0
 800587e:	1891      	adds	r1, r2, r2
 8005880:	62b9      	str	r1, [r7, #40]	; 0x28
 8005882:	415b      	adcs	r3, r3
 8005884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005886:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800588a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800588e:	f7fb f8bd 	bl	8000a0c <__aeabi_uldivmod>
 8005892:	4602      	mov	r2, r0
 8005894:	460b      	mov	r3, r1
 8005896:	4b8c      	ldr	r3, [pc, #560]	; (8005ac8 <UART_SetConfig+0x38c>)
 8005898:	fba3 1302 	umull	r1, r3, r3, r2
 800589c:	095b      	lsrs	r3, r3, #5
 800589e:	2164      	movs	r1, #100	; 0x64
 80058a0:	fb01 f303 	mul.w	r3, r1, r3
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	3332      	adds	r3, #50	; 0x32
 80058aa:	4a87      	ldr	r2, [pc, #540]	; (8005ac8 <UART_SetConfig+0x38c>)
 80058ac:	fba2 2303 	umull	r2, r3, r2, r3
 80058b0:	095b      	lsrs	r3, r3, #5
 80058b2:	005b      	lsls	r3, r3, #1
 80058b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058b8:	441e      	add	r6, r3
 80058ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058bc:	4618      	mov	r0, r3
 80058be:	f04f 0100 	mov.w	r1, #0
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	1894      	adds	r4, r2, r2
 80058c8:	623c      	str	r4, [r7, #32]
 80058ca:	415b      	adcs	r3, r3
 80058cc:	627b      	str	r3, [r7, #36]	; 0x24
 80058ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058d2:	1812      	adds	r2, r2, r0
 80058d4:	eb41 0303 	adc.w	r3, r1, r3
 80058d8:	f04f 0400 	mov.w	r4, #0
 80058dc:	f04f 0500 	mov.w	r5, #0
 80058e0:	00dd      	lsls	r5, r3, #3
 80058e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058e6:	00d4      	lsls	r4, r2, #3
 80058e8:	4622      	mov	r2, r4
 80058ea:	462b      	mov	r3, r5
 80058ec:	1814      	adds	r4, r2, r0
 80058ee:	653c      	str	r4, [r7, #80]	; 0x50
 80058f0:	414b      	adcs	r3, r1
 80058f2:	657b      	str	r3, [r7, #84]	; 0x54
 80058f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	461a      	mov	r2, r3
 80058fa:	f04f 0300 	mov.w	r3, #0
 80058fe:	1891      	adds	r1, r2, r2
 8005900:	61b9      	str	r1, [r7, #24]
 8005902:	415b      	adcs	r3, r3
 8005904:	61fb      	str	r3, [r7, #28]
 8005906:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800590a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800590e:	f7fb f87d 	bl	8000a0c <__aeabi_uldivmod>
 8005912:	4602      	mov	r2, r0
 8005914:	460b      	mov	r3, r1
 8005916:	4b6c      	ldr	r3, [pc, #432]	; (8005ac8 <UART_SetConfig+0x38c>)
 8005918:	fba3 1302 	umull	r1, r3, r3, r2
 800591c:	095b      	lsrs	r3, r3, #5
 800591e:	2164      	movs	r1, #100	; 0x64
 8005920:	fb01 f303 	mul.w	r3, r1, r3
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	00db      	lsls	r3, r3, #3
 8005928:	3332      	adds	r3, #50	; 0x32
 800592a:	4a67      	ldr	r2, [pc, #412]	; (8005ac8 <UART_SetConfig+0x38c>)
 800592c:	fba2 2303 	umull	r2, r3, r2, r3
 8005930:	095b      	lsrs	r3, r3, #5
 8005932:	f003 0207 	and.w	r2, r3, #7
 8005936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4432      	add	r2, r6
 800593c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800593e:	e0b9      	b.n	8005ab4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005940:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005942:	461c      	mov	r4, r3
 8005944:	f04f 0500 	mov.w	r5, #0
 8005948:	4622      	mov	r2, r4
 800594a:	462b      	mov	r3, r5
 800594c:	1891      	adds	r1, r2, r2
 800594e:	6139      	str	r1, [r7, #16]
 8005950:	415b      	adcs	r3, r3
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005958:	1912      	adds	r2, r2, r4
 800595a:	eb45 0303 	adc.w	r3, r5, r3
 800595e:	f04f 0000 	mov.w	r0, #0
 8005962:	f04f 0100 	mov.w	r1, #0
 8005966:	00d9      	lsls	r1, r3, #3
 8005968:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800596c:	00d0      	lsls	r0, r2, #3
 800596e:	4602      	mov	r2, r0
 8005970:	460b      	mov	r3, r1
 8005972:	eb12 0804 	adds.w	r8, r2, r4
 8005976:	eb43 0905 	adc.w	r9, r3, r5
 800597a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	4618      	mov	r0, r3
 8005980:	f04f 0100 	mov.w	r1, #0
 8005984:	f04f 0200 	mov.w	r2, #0
 8005988:	f04f 0300 	mov.w	r3, #0
 800598c:	008b      	lsls	r3, r1, #2
 800598e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005992:	0082      	lsls	r2, r0, #2
 8005994:	4640      	mov	r0, r8
 8005996:	4649      	mov	r1, r9
 8005998:	f7fb f838 	bl	8000a0c <__aeabi_uldivmod>
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	4b49      	ldr	r3, [pc, #292]	; (8005ac8 <UART_SetConfig+0x38c>)
 80059a2:	fba3 2302 	umull	r2, r3, r3, r2
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	011e      	lsls	r6, r3, #4
 80059aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059ac:	4618      	mov	r0, r3
 80059ae:	f04f 0100 	mov.w	r1, #0
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	1894      	adds	r4, r2, r2
 80059b8:	60bc      	str	r4, [r7, #8]
 80059ba:	415b      	adcs	r3, r3
 80059bc:	60fb      	str	r3, [r7, #12]
 80059be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059c2:	1812      	adds	r2, r2, r0
 80059c4:	eb41 0303 	adc.w	r3, r1, r3
 80059c8:	f04f 0400 	mov.w	r4, #0
 80059cc:	f04f 0500 	mov.w	r5, #0
 80059d0:	00dd      	lsls	r5, r3, #3
 80059d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059d6:	00d4      	lsls	r4, r2, #3
 80059d8:	4622      	mov	r2, r4
 80059da:	462b      	mov	r3, r5
 80059dc:	1814      	adds	r4, r2, r0
 80059de:	64bc      	str	r4, [r7, #72]	; 0x48
 80059e0:	414b      	adcs	r3, r1
 80059e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f04f 0100 	mov.w	r1, #0
 80059ee:	f04f 0200 	mov.w	r2, #0
 80059f2:	f04f 0300 	mov.w	r3, #0
 80059f6:	008b      	lsls	r3, r1, #2
 80059f8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059fc:	0082      	lsls	r2, r0, #2
 80059fe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005a02:	f7fb f803 	bl	8000a0c <__aeabi_uldivmod>
 8005a06:	4602      	mov	r2, r0
 8005a08:	460b      	mov	r3, r1
 8005a0a:	4b2f      	ldr	r3, [pc, #188]	; (8005ac8 <UART_SetConfig+0x38c>)
 8005a0c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a10:	095b      	lsrs	r3, r3, #5
 8005a12:	2164      	movs	r1, #100	; 0x64
 8005a14:	fb01 f303 	mul.w	r3, r1, r3
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	011b      	lsls	r3, r3, #4
 8005a1c:	3332      	adds	r3, #50	; 0x32
 8005a1e:	4a2a      	ldr	r2, [pc, #168]	; (8005ac8 <UART_SetConfig+0x38c>)
 8005a20:	fba2 2303 	umull	r2, r3, r2, r3
 8005a24:	095b      	lsrs	r3, r3, #5
 8005a26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a2a:	441e      	add	r6, r3
 8005a2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f04f 0100 	mov.w	r1, #0
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	1894      	adds	r4, r2, r2
 8005a3a:	603c      	str	r4, [r7, #0]
 8005a3c:	415b      	adcs	r3, r3
 8005a3e:	607b      	str	r3, [r7, #4]
 8005a40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a44:	1812      	adds	r2, r2, r0
 8005a46:	eb41 0303 	adc.w	r3, r1, r3
 8005a4a:	f04f 0400 	mov.w	r4, #0
 8005a4e:	f04f 0500 	mov.w	r5, #0
 8005a52:	00dd      	lsls	r5, r3, #3
 8005a54:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a58:	00d4      	lsls	r4, r2, #3
 8005a5a:	4622      	mov	r2, r4
 8005a5c:	462b      	mov	r3, r5
 8005a5e:	eb12 0a00 	adds.w	sl, r2, r0
 8005a62:	eb43 0b01 	adc.w	fp, r3, r1
 8005a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f04f 0100 	mov.w	r1, #0
 8005a70:	f04f 0200 	mov.w	r2, #0
 8005a74:	f04f 0300 	mov.w	r3, #0
 8005a78:	008b      	lsls	r3, r1, #2
 8005a7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a7e:	0082      	lsls	r2, r0, #2
 8005a80:	4650      	mov	r0, sl
 8005a82:	4659      	mov	r1, fp
 8005a84:	f7fa ffc2 	bl	8000a0c <__aeabi_uldivmod>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	4b0e      	ldr	r3, [pc, #56]	; (8005ac8 <UART_SetConfig+0x38c>)
 8005a8e:	fba3 1302 	umull	r1, r3, r3, r2
 8005a92:	095b      	lsrs	r3, r3, #5
 8005a94:	2164      	movs	r1, #100	; 0x64
 8005a96:	fb01 f303 	mul.w	r3, r1, r3
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	011b      	lsls	r3, r3, #4
 8005a9e:	3332      	adds	r3, #50	; 0x32
 8005aa0:	4a09      	ldr	r2, [pc, #36]	; (8005ac8 <UART_SetConfig+0x38c>)
 8005aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa6:	095b      	lsrs	r3, r3, #5
 8005aa8:	f003 020f 	and.w	r2, r3, #15
 8005aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4432      	add	r2, r6
 8005ab2:	609a      	str	r2, [r3, #8]
}
 8005ab4:	bf00      	nop
 8005ab6:	377c      	adds	r7, #124	; 0x7c
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005abe:	bf00      	nop
 8005ac0:	40011000 	.word	0x40011000
 8005ac4:	40011400 	.word	0x40011400
 8005ac8:	51eb851f 	.word	0x51eb851f

08005acc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ade:	2b84      	cmp	r3, #132	; 0x84
 8005ae0:	d005      	beq.n	8005aee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005ae2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	4413      	add	r3, r2
 8005aea:	3303      	adds	r3, #3
 8005aec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005aee:	68fb      	ldr	r3, [r7, #12]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b02:	f3ef 8305 	mrs	r3, IPSR
 8005b06:	607b      	str	r3, [r7, #4]
  return(result);
 8005b08:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	bf14      	ite	ne
 8005b0e:	2301      	movne	r3, #1
 8005b10:	2300      	moveq	r3, #0
 8005b12:	b2db      	uxtb	r3, r3
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005b24:	f001 f942 	bl	8006dac <vTaskStartScheduler>
  
  return osOK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005b2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b30:	b089      	sub	sp, #36	; 0x24
 8005b32:	af04      	add	r7, sp, #16
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d020      	beq.n	8005b82 <osThreadCreate+0x54>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d01c      	beq.n	8005b82 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685c      	ldr	r4, [r3, #4]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681d      	ldr	r5, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691e      	ldr	r6, [r3, #16]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7ff ffb6 	bl	8005acc <makeFreeRtosPriority>
 8005b60:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b6a:	9202      	str	r2, [sp, #8]
 8005b6c:	9301      	str	r3, [sp, #4]
 8005b6e:	9100      	str	r1, [sp, #0]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	4632      	mov	r2, r6
 8005b74:	4629      	mov	r1, r5
 8005b76:	4620      	mov	r0, r4
 8005b78:	f000 ff50 	bl	8006a1c <xTaskCreateStatic>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	e01c      	b.n	8005bbc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685c      	ldr	r4, [r3, #4]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b8e:	b29e      	uxth	r6, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7ff ff98 	bl	8005acc <makeFreeRtosPriority>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	f107 030c 	add.w	r3, r7, #12
 8005ba2:	9301      	str	r3, [sp, #4]
 8005ba4:	9200      	str	r2, [sp, #0]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	4632      	mov	r2, r6
 8005baa:	4629      	mov	r1, r5
 8005bac:	4620      	mov	r0, r4
 8005bae:	f000 ff92 	bl	8006ad6 <xTaskCreate>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d001      	beq.n	8005bbc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	e000      	b.n	8005bbe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005bc6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b084      	sub	sp, #16
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <osDelay+0x16>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	e000      	b.n	8005bde <osDelay+0x18>
 8005bdc:	2301      	movs	r3, #1
 8005bde:	4618      	mov	r0, r3
 8005be0:	f001 f8b0 	bl	8006d44 <vTaskDelay>
  
  return osOK;
 8005be4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b082      	sub	sp, #8
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d007      	beq.n	8005c0e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	4619      	mov	r1, r3
 8005c04:	2001      	movs	r0, #1
 8005c06:	f000 faae 	bl	8006166 <xQueueCreateMutexStatic>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	e003      	b.n	8005c16 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005c0e:	2001      	movs	r0, #1
 8005c10:	f000 fa91 	bl	8006136 <xQueueCreateMutex>
 8005c14:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
	...

08005c20 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <osMutexWait+0x18>
    return osErrorParameter;
 8005c34:	2380      	movs	r3, #128	; 0x80
 8005c36:	e03a      	b.n	8005cae <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c42:	d103      	bne.n	8005c4c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005c44:	f04f 33ff 	mov.w	r3, #4294967295
 8005c48:	60fb      	str	r3, [r7, #12]
 8005c4a:	e009      	b.n	8005c60 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d006      	beq.n	8005c60 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <osMutexWait+0x40>
      ticks = 1;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005c60:	f7ff ff4c 	bl	8005afc <inHandlerMode>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d017      	beq.n	8005c9a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005c6a:	f107 0308 	add.w	r3, r7, #8
 8005c6e:	461a      	mov	r2, r3
 8005c70:	2100      	movs	r1, #0
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fd2a 	bl	80066cc <xQueueReceiveFromISR>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d001      	beq.n	8005c82 <osMutexWait+0x62>
      return osErrorOS;
 8005c7e:	23ff      	movs	r3, #255	; 0xff
 8005c80:	e015      	b.n	8005cae <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d011      	beq.n	8005cac <osMutexWait+0x8c>
 8005c88:	4b0b      	ldr	r3, [pc, #44]	; (8005cb8 <osMutexWait+0x98>)
 8005c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	e008      	b.n	8005cac <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005c9a:	68f9      	ldr	r1, [r7, #12]
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fc09 	bl	80064b4 <xQueueSemaphoreTake>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d001      	beq.n	8005cac <osMutexWait+0x8c>
    return osErrorOS;
 8005ca8:	23ff      	movs	r3, #255	; 0xff
 8005caa:	e000      	b.n	8005cae <osMutexWait+0x8e>
  }
  
  return osOK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	e000ed04 	.word	0xe000ed04

08005cbc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005ccc:	f7ff ff16 	bl	8005afc <inHandlerMode>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d016      	beq.n	8005d04 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005cd6:	f107 0308 	add.w	r3, r7, #8
 8005cda:	4619      	mov	r1, r3
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 fb5b 	bl	8006398 <xQueueGiveFromISR>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d001      	beq.n	8005cec <osMutexRelease+0x30>
      return osErrorOS;
 8005ce8:	23ff      	movs	r3, #255	; 0xff
 8005cea:	e017      	b.n	8005d1c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d013      	beq.n	8005d1a <osMutexRelease+0x5e>
 8005cf2:	4b0c      	ldr	r3, [pc, #48]	; (8005d24 <osMutexRelease+0x68>)
 8005cf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	e00a      	b.n	8005d1a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005d04:	2300      	movs	r3, #0
 8005d06:	2200      	movs	r2, #0
 8005d08:	2100      	movs	r1, #0
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fa46 	bl	800619c <xQueueGenericSend>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d001      	beq.n	8005d1a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005d16:	23ff      	movs	r3, #255	; 0xff
 8005d18:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	e000ed04 	.word	0xe000ed04

08005d28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f103 0208 	add.w	r2, r3, #8
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f103 0208 	add.w	r2, r3, #8
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f103 0208 	add.w	r2, r3, #8
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d82:	b480      	push	{r7}
 8005d84:	b085      	sub	sp, #20
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	1c5a      	adds	r2, r3, #1
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	601a      	str	r2, [r3, #0]
}
 8005dbe:	bf00      	nop
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b085      	sub	sp, #20
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de0:	d103      	bne.n	8005dea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	e00c      	b.n	8005e04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	3308      	adds	r3, #8
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	e002      	b.n	8005df8 <vListInsert+0x2e>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d2f6      	bcs.n	8005df2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	601a      	str	r2, [r3, #0]
}
 8005e30:	bf00      	nop
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	6892      	ldr	r2, [r2, #8]
 8005e52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6852      	ldr	r2, [r2, #4]
 8005e5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d103      	bne.n	8005e70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	1e5a      	subs	r2, r3, #1
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10a      	bne.n	8005eba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005eb6:	bf00      	nop
 8005eb8:	e7fe      	b.n	8005eb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005eba:	f001 fec3 	bl	8007c44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec6:	68f9      	ldr	r1, [r7, #12]
 8005ec8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005eca:	fb01 f303 	mul.w	r3, r1, r3
 8005ece:	441a      	add	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eea:	3b01      	subs	r3, #1
 8005eec:	68f9      	ldr	r1, [r7, #12]
 8005eee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ef0:	fb01 f303 	mul.w	r3, r1, r3
 8005ef4:	441a      	add	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	22ff      	movs	r2, #255	; 0xff
 8005efe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	22ff      	movs	r2, #255	; 0xff
 8005f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d114      	bne.n	8005f3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d01a      	beq.n	8005f4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	3310      	adds	r3, #16
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f001 f987 	bl	8007230 <xTaskRemoveFromEventList>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d012      	beq.n	8005f4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f28:	4b0c      	ldr	r3, [pc, #48]	; (8005f5c <xQueueGenericReset+0xcc>)
 8005f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	e009      	b.n	8005f4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	3310      	adds	r3, #16
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7ff fef2 	bl	8005d28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	3324      	adds	r3, #36	; 0x24
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7ff feed 	bl	8005d28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f4e:	f001 fea9 	bl	8007ca4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f52:	2301      	movs	r3, #1
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	e000ed04 	.word	0xe000ed04

08005f60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b08e      	sub	sp, #56	; 0x38
 8005f64:	af02      	add	r7, sp, #8
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
 8005f6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10a      	bne.n	8005f8a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f78:	f383 8811 	msr	BASEPRI, r3
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f86:	bf00      	nop
 8005f88:	e7fe      	b.n	8005f88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10a      	bne.n	8005fa6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005fa2:	bf00      	nop
 8005fa4:	e7fe      	b.n	8005fa4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d002      	beq.n	8005fb2 <xQueueGenericCreateStatic+0x52>
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <xQueueGenericCreateStatic+0x56>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e000      	b.n	8005fb8 <xQueueGenericCreateStatic+0x58>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10a      	bne.n	8005fd2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc0:	f383 8811 	msr	BASEPRI, r3
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	623b      	str	r3, [r7, #32]
}
 8005fce:	bf00      	nop
 8005fd0:	e7fe      	b.n	8005fd0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d102      	bne.n	8005fde <xQueueGenericCreateStatic+0x7e>
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <xQueueGenericCreateStatic+0x82>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e000      	b.n	8005fe4 <xQueueGenericCreateStatic+0x84>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10a      	bne.n	8005ffe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	61fb      	str	r3, [r7, #28]
}
 8005ffa:	bf00      	nop
 8005ffc:	e7fe      	b.n	8005ffc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005ffe:	2348      	movs	r3, #72	; 0x48
 8006000:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2b48      	cmp	r3, #72	; 0x48
 8006006:	d00a      	beq.n	800601e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600c:	f383 8811 	msr	BASEPRI, r3
 8006010:	f3bf 8f6f 	isb	sy
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	61bb      	str	r3, [r7, #24]
}
 800601a:	bf00      	nop
 800601c:	e7fe      	b.n	800601c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800601e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00d      	beq.n	8006046 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800602a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006032:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	4613      	mov	r3, r2
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	68b9      	ldr	r1, [r7, #8]
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 f83f 	bl	80060c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006048:	4618      	mov	r0, r3
 800604a:	3730      	adds	r7, #48	; 0x30
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006050:	b580      	push	{r7, lr}
 8006052:	b08a      	sub	sp, #40	; 0x28
 8006054:	af02      	add	r7, sp, #8
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	4613      	mov	r3, r2
 800605c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10a      	bne.n	800607a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006068:	f383 8811 	msr	BASEPRI, r3
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	f3bf 8f4f 	dsb	sy
 8006074:	613b      	str	r3, [r7, #16]
}
 8006076:	bf00      	nop
 8006078:	e7fe      	b.n	8006078 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	fb02 f303 	mul.w	r3, r2, r3
 8006082:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	3348      	adds	r3, #72	; 0x48
 8006088:	4618      	mov	r0, r3
 800608a:	f001 fefd 	bl	8007e88 <pvPortMalloc>
 800608e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d011      	beq.n	80060ba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	3348      	adds	r3, #72	; 0x48
 800609e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060a8:	79fa      	ldrb	r2, [r7, #7]
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	4613      	mov	r3, r2
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	68b9      	ldr	r1, [r7, #8]
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 f805 	bl	80060c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80060ba:	69bb      	ldr	r3, [r7, #24]
	}
 80060bc:	4618      	mov	r0, r3
 80060be:	3720      	adds	r7, #32
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d103      	bne.n	80060e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	69ba      	ldr	r2, [r7, #24]
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	e002      	b.n	80060e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80060f2:	2101      	movs	r1, #1
 80060f4:	69b8      	ldr	r0, [r7, #24]
 80060f6:	f7ff fecb 	bl	8005e90 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80060fa:	bf00      	nop
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006102:	b580      	push	{r7, lr}
 8006104:	b082      	sub	sp, #8
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00e      	beq.n	800612e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006122:	2300      	movs	r3, #0
 8006124:	2200      	movs	r2, #0
 8006126:	2100      	movs	r1, #0
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f837 	bl	800619c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800612e:	bf00      	nop
 8006130:	3708      	adds	r7, #8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006136:	b580      	push	{r7, lr}
 8006138:	b086      	sub	sp, #24
 800613a:	af00      	add	r7, sp, #0
 800613c:	4603      	mov	r3, r0
 800613e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006140:	2301      	movs	r3, #1
 8006142:	617b      	str	r3, [r7, #20]
 8006144:	2300      	movs	r3, #0
 8006146:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006148:	79fb      	ldrb	r3, [r7, #7]
 800614a:	461a      	mov	r2, r3
 800614c:	6939      	ldr	r1, [r7, #16]
 800614e:	6978      	ldr	r0, [r7, #20]
 8006150:	f7ff ff7e 	bl	8006050 <xQueueGenericCreate>
 8006154:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f7ff ffd3 	bl	8006102 <prvInitialiseMutex>

		return xNewQueue;
 800615c:	68fb      	ldr	r3, [r7, #12]
	}
 800615e:	4618      	mov	r0, r3
 8006160:	3718      	adds	r7, #24
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006166:	b580      	push	{r7, lr}
 8006168:	b088      	sub	sp, #32
 800616a:	af02      	add	r7, sp, #8
 800616c:	4603      	mov	r3, r0
 800616e:	6039      	str	r1, [r7, #0]
 8006170:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006172:	2301      	movs	r3, #1
 8006174:	617b      	str	r3, [r7, #20]
 8006176:	2300      	movs	r3, #0
 8006178:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800617a:	79fb      	ldrb	r3, [r7, #7]
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2200      	movs	r2, #0
 8006182:	6939      	ldr	r1, [r7, #16]
 8006184:	6978      	ldr	r0, [r7, #20]
 8006186:	f7ff feeb 	bl	8005f60 <xQueueGenericCreateStatic>
 800618a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f7ff ffb8 	bl	8006102 <prvInitialiseMutex>

		return xNewQueue;
 8006192:	68fb      	ldr	r3, [r7, #12]
	}
 8006194:	4618      	mov	r0, r3
 8006196:	3718      	adds	r7, #24
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b08e      	sub	sp, #56	; 0x38
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80061aa:	2300      	movs	r3, #0
 80061ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80061b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10a      	bne.n	80061ce <xQueueGenericSend+0x32>
	__asm volatile
 80061b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061ca:	bf00      	nop
 80061cc:	e7fe      	b.n	80061cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d103      	bne.n	80061dc <xQueueGenericSend+0x40>
 80061d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <xQueueGenericSend+0x44>
 80061dc:	2301      	movs	r3, #1
 80061de:	e000      	b.n	80061e2 <xQueueGenericSend+0x46>
 80061e0:	2300      	movs	r3, #0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10a      	bne.n	80061fc <xQueueGenericSend+0x60>
	__asm volatile
 80061e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061f8:	bf00      	nop
 80061fa:	e7fe      	b.n	80061fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d103      	bne.n	800620a <xQueueGenericSend+0x6e>
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006206:	2b01      	cmp	r3, #1
 8006208:	d101      	bne.n	800620e <xQueueGenericSend+0x72>
 800620a:	2301      	movs	r3, #1
 800620c:	e000      	b.n	8006210 <xQueueGenericSend+0x74>
 800620e:	2300      	movs	r3, #0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10a      	bne.n	800622a <xQueueGenericSend+0x8e>
	__asm volatile
 8006214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	623b      	str	r3, [r7, #32]
}
 8006226:	bf00      	nop
 8006228:	e7fe      	b.n	8006228 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800622a:	f001 f9bd 	bl	80075a8 <xTaskGetSchedulerState>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d102      	bne.n	800623a <xQueueGenericSend+0x9e>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <xQueueGenericSend+0xa2>
 800623a:	2301      	movs	r3, #1
 800623c:	e000      	b.n	8006240 <xQueueGenericSend+0xa4>
 800623e:	2300      	movs	r3, #0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10a      	bne.n	800625a <xQueueGenericSend+0xbe>
	__asm volatile
 8006244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	61fb      	str	r3, [r7, #28]
}
 8006256:	bf00      	nop
 8006258:	e7fe      	b.n	8006258 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800625a:	f001 fcf3 	bl	8007c44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800625e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006266:	429a      	cmp	r2, r3
 8006268:	d302      	bcc.n	8006270 <xQueueGenericSend+0xd4>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b02      	cmp	r3, #2
 800626e:	d129      	bne.n	80062c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	68b9      	ldr	r1, [r7, #8]
 8006274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006276:	f000 fac1 	bl	80067fc <prvCopyDataToQueue>
 800627a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	2b00      	cmp	r3, #0
 8006282:	d010      	beq.n	80062a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006286:	3324      	adds	r3, #36	; 0x24
 8006288:	4618      	mov	r0, r3
 800628a:	f000 ffd1 	bl	8007230 <xTaskRemoveFromEventList>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d013      	beq.n	80062bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006294:	4b3f      	ldr	r3, [pc, #252]	; (8006394 <xQueueGenericSend+0x1f8>)
 8006296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	e00a      	b.n	80062bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80062a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d007      	beq.n	80062bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80062ac:	4b39      	ldr	r3, [pc, #228]	; (8006394 <xQueueGenericSend+0x1f8>)
 80062ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80062bc:	f001 fcf2 	bl	8007ca4 <vPortExitCritical>
				return pdPASS;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e063      	b.n	800638c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d103      	bne.n	80062d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062ca:	f001 fceb 	bl	8007ca4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80062ce:	2300      	movs	r3, #0
 80062d0:	e05c      	b.n	800638c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d106      	bne.n	80062e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062d8:	f107 0314 	add.w	r3, r7, #20
 80062dc:	4618      	mov	r0, r3
 80062de:	f001 f809 	bl	80072f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062e2:	2301      	movs	r3, #1
 80062e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062e6:	f001 fcdd 	bl	8007ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062ea:	f000 fdbf 	bl	8006e6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062ee:	f001 fca9 	bl	8007c44 <vPortEnterCritical>
 80062f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062f8:	b25b      	sxtb	r3, r3
 80062fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fe:	d103      	bne.n	8006308 <xQueueGenericSend+0x16c>
 8006300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006302:	2200      	movs	r2, #0
 8006304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800630e:	b25b      	sxtb	r3, r3
 8006310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006314:	d103      	bne.n	800631e <xQueueGenericSend+0x182>
 8006316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800631e:	f001 fcc1 	bl	8007ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006322:	1d3a      	adds	r2, r7, #4
 8006324:	f107 0314 	add.w	r3, r7, #20
 8006328:	4611      	mov	r1, r2
 800632a:	4618      	mov	r0, r3
 800632c:	f000 fff8 	bl	8007320 <xTaskCheckForTimeOut>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d124      	bne.n	8006380 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006336:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006338:	f000 fb58 	bl	80069ec <prvIsQueueFull>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d018      	beq.n	8006374 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006344:	3310      	adds	r3, #16
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	4611      	mov	r1, r2
 800634a:	4618      	mov	r0, r3
 800634c:	f000 ff4c 	bl	80071e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006352:	f000 fae3 	bl	800691c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006356:	f000 fd97 	bl	8006e88 <xTaskResumeAll>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	f47f af7c 	bne.w	800625a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006362:	4b0c      	ldr	r3, [pc, #48]	; (8006394 <xQueueGenericSend+0x1f8>)
 8006364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	e772      	b.n	800625a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006376:	f000 fad1 	bl	800691c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800637a:	f000 fd85 	bl	8006e88 <xTaskResumeAll>
 800637e:	e76c      	b.n	800625a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006382:	f000 facb 	bl	800691c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006386:	f000 fd7f 	bl	8006e88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800638a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800638c:	4618      	mov	r0, r3
 800638e:	3738      	adds	r7, #56	; 0x38
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	e000ed04 	.word	0xe000ed04

08006398 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b08e      	sub	sp, #56	; 0x38
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80063a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10a      	bne.n	80063c2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80063ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	623b      	str	r3, [r7, #32]
}
 80063be:	bf00      	nop
 80063c0:	e7fe      	b.n	80063c0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80063c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <xQueueGiveFromISR+0x48>
	__asm volatile
 80063ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ce:	f383 8811 	msr	BASEPRI, r3
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	61fb      	str	r3, [r7, #28]
}
 80063dc:	bf00      	nop
 80063de:	e7fe      	b.n	80063de <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80063e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d103      	bne.n	80063f0 <xQueueGiveFromISR+0x58>
 80063e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <xQueueGiveFromISR+0x5c>
 80063f0:	2301      	movs	r3, #1
 80063f2:	e000      	b.n	80063f6 <xQueueGiveFromISR+0x5e>
 80063f4:	2300      	movs	r3, #0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10a      	bne.n	8006410 <xQueueGiveFromISR+0x78>
	__asm volatile
 80063fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	61bb      	str	r3, [r7, #24]
}
 800640c:	bf00      	nop
 800640e:	e7fe      	b.n	800640e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006410:	f001 fcfa 	bl	8007e08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006414:	f3ef 8211 	mrs	r2, BASEPRI
 8006418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641c:	f383 8811 	msr	BASEPRI, r3
 8006420:	f3bf 8f6f 	isb	sy
 8006424:	f3bf 8f4f 	dsb	sy
 8006428:	617a      	str	r2, [r7, #20]
 800642a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800642c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800642e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006434:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800643a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800643c:	429a      	cmp	r2, r3
 800643e:	d22b      	bcs.n	8006498 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006442:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006452:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645a:	d112      	bne.n	8006482 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800645c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	2b00      	cmp	r3, #0
 8006462:	d016      	beq.n	8006492 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006466:	3324      	adds	r3, #36	; 0x24
 8006468:	4618      	mov	r0, r3
 800646a:	f000 fee1 	bl	8007230 <xTaskRemoveFromEventList>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00e      	beq.n	8006492 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00b      	beq.n	8006492 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2201      	movs	r2, #1
 800647e:	601a      	str	r2, [r3, #0]
 8006480:	e007      	b.n	8006492 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006482:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006486:	3301      	adds	r3, #1
 8006488:	b2db      	uxtb	r3, r3
 800648a:	b25a      	sxtb	r2, r3
 800648c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006492:	2301      	movs	r3, #1
 8006494:	637b      	str	r3, [r7, #52]	; 0x34
 8006496:	e001      	b.n	800649c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006498:	2300      	movs	r3, #0
 800649a:	637b      	str	r3, [r7, #52]	; 0x34
 800649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3738      	adds	r7, #56	; 0x38
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
	...

080064b4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b08e      	sub	sp, #56	; 0x38
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80064be:	2300      	movs	r3, #0
 80064c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80064c6:	2300      	movs	r3, #0
 80064c8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80064ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10a      	bne.n	80064e6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80064d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d4:	f383 8811 	msr	BASEPRI, r3
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	623b      	str	r3, [r7, #32]
}
 80064e2:	bf00      	nop
 80064e4:	e7fe      	b.n	80064e4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80064e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80064ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	61fb      	str	r3, [r7, #28]
}
 8006500:	bf00      	nop
 8006502:	e7fe      	b.n	8006502 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006504:	f001 f850 	bl	80075a8 <xTaskGetSchedulerState>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d102      	bne.n	8006514 <xQueueSemaphoreTake+0x60>
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <xQueueSemaphoreTake+0x64>
 8006514:	2301      	movs	r3, #1
 8006516:	e000      	b.n	800651a <xQueueSemaphoreTake+0x66>
 8006518:	2300      	movs	r3, #0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10a      	bne.n	8006534 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	61bb      	str	r3, [r7, #24]
}
 8006530:	bf00      	nop
 8006532:	e7fe      	b.n	8006532 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006534:	f001 fb86 	bl	8007c44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006540:	2b00      	cmp	r3, #0
 8006542:	d024      	beq.n	800658e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006546:	1e5a      	subs	r2, r3, #1
 8006548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800654c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d104      	bne.n	800655e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006554:	f001 f9d0 	bl	80078f8 <pvTaskIncrementMutexHeldCount>
 8006558:	4602      	mov	r2, r0
 800655a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800655e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00f      	beq.n	8006586 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006568:	3310      	adds	r3, #16
 800656a:	4618      	mov	r0, r3
 800656c:	f000 fe60 	bl	8007230 <xTaskRemoveFromEventList>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d007      	beq.n	8006586 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006576:	4b54      	ldr	r3, [pc, #336]	; (80066c8 <xQueueSemaphoreTake+0x214>)
 8006578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006586:	f001 fb8d 	bl	8007ca4 <vPortExitCritical>
				return pdPASS;
 800658a:	2301      	movs	r3, #1
 800658c:	e097      	b.n	80066be <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d111      	bne.n	80065b8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00a      	beq.n	80065b0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	617b      	str	r3, [r7, #20]
}
 80065ac:	bf00      	nop
 80065ae:	e7fe      	b.n	80065ae <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80065b0:	f001 fb78 	bl	8007ca4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80065b4:	2300      	movs	r3, #0
 80065b6:	e082      	b.n	80066be <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d106      	bne.n	80065cc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065be:	f107 030c 	add.w	r3, r7, #12
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 fe96 	bl	80072f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065c8:	2301      	movs	r3, #1
 80065ca:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065cc:	f001 fb6a 	bl	8007ca4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065d0:	f000 fc4c 	bl	8006e6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065d4:	f001 fb36 	bl	8007c44 <vPortEnterCritical>
 80065d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065de:	b25b      	sxtb	r3, r3
 80065e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e4:	d103      	bne.n	80065ee <xQueueSemaphoreTake+0x13a>
 80065e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065f4:	b25b      	sxtb	r3, r3
 80065f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fa:	d103      	bne.n	8006604 <xQueueSemaphoreTake+0x150>
 80065fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006604:	f001 fb4e 	bl	8007ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006608:	463a      	mov	r2, r7
 800660a:	f107 030c 	add.w	r3, r7, #12
 800660e:	4611      	mov	r1, r2
 8006610:	4618      	mov	r0, r3
 8006612:	f000 fe85 	bl	8007320 <xTaskCheckForTimeOut>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d132      	bne.n	8006682 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800661c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800661e:	f000 f9cf 	bl	80069c0 <prvIsQueueEmpty>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d026      	beq.n	8006676 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d109      	bne.n	8006644 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006630:	f001 fb08 	bl	8007c44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	4618      	mov	r0, r3
 800663a:	f000 ffd3 	bl	80075e4 <xTaskPriorityInherit>
 800663e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006640:	f001 fb30 	bl	8007ca4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006646:	3324      	adds	r3, #36	; 0x24
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	4611      	mov	r1, r2
 800664c:	4618      	mov	r0, r3
 800664e:	f000 fdcb 	bl	80071e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006652:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006654:	f000 f962 	bl	800691c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006658:	f000 fc16 	bl	8006e88 <xTaskResumeAll>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	f47f af68 	bne.w	8006534 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006664:	4b18      	ldr	r3, [pc, #96]	; (80066c8 <xQueueSemaphoreTake+0x214>)
 8006666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800666a:	601a      	str	r2, [r3, #0]
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	f3bf 8f6f 	isb	sy
 8006674:	e75e      	b.n	8006534 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006676:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006678:	f000 f950 	bl	800691c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800667c:	f000 fc04 	bl	8006e88 <xTaskResumeAll>
 8006680:	e758      	b.n	8006534 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006682:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006684:	f000 f94a 	bl	800691c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006688:	f000 fbfe 	bl	8006e88 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800668c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800668e:	f000 f997 	bl	80069c0 <prvIsQueueEmpty>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	f43f af4d 	beq.w	8006534 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800669a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00d      	beq.n	80066bc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80066a0:	f001 fad0 	bl	8007c44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80066a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066a6:	f000 f891 	bl	80067cc <prvGetDisinheritPriorityAfterTimeout>
 80066aa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80066ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066b2:	4618      	mov	r0, r3
 80066b4:	f001 f892 	bl	80077dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80066b8:	f001 faf4 	bl	8007ca4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80066bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3738      	adds	r7, #56	; 0x38
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	e000ed04 	.word	0xe000ed04

080066cc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b08e      	sub	sp, #56	; 0x38
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80066dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10a      	bne.n	80066f8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	623b      	str	r3, [r7, #32]
}
 80066f4:	bf00      	nop
 80066f6:	e7fe      	b.n	80066f6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d103      	bne.n	8006706 <xQueueReceiveFromISR+0x3a>
 80066fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <xQueueReceiveFromISR+0x3e>
 8006706:	2301      	movs	r3, #1
 8006708:	e000      	b.n	800670c <xQueueReceiveFromISR+0x40>
 800670a:	2300      	movs	r3, #0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10a      	bne.n	8006726 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	61fb      	str	r3, [r7, #28]
}
 8006722:	bf00      	nop
 8006724:	e7fe      	b.n	8006724 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006726:	f001 fb6f 	bl	8007e08 <vPortValidateInterruptPriority>
	__asm volatile
 800672a:	f3ef 8211 	mrs	r2, BASEPRI
 800672e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	61ba      	str	r2, [r7, #24]
 8006740:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006742:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006744:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800674c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674e:	2b00      	cmp	r3, #0
 8006750:	d02f      	beq.n	80067b2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006754:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800675c:	68b9      	ldr	r1, [r7, #8]
 800675e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006760:	f000 f8b6 	bl	80068d0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006766:	1e5a      	subs	r2, r3, #1
 8006768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800676c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006774:	d112      	bne.n	800679c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d016      	beq.n	80067ac <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800677e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006780:	3310      	adds	r3, #16
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fd54 	bl	8007230 <xTaskRemoveFromEventList>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00e      	beq.n	80067ac <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00b      	beq.n	80067ac <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	e007      	b.n	80067ac <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800679c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067a0:	3301      	adds	r3, #1
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	b25a      	sxtb	r2, r3
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80067ac:	2301      	movs	r3, #1
 80067ae:	637b      	str	r3, [r7, #52]	; 0x34
 80067b0:	e001      	b.n	80067b6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80067b2:	2300      	movs	r3, #0
 80067b4:	637b      	str	r3, [r7, #52]	; 0x34
 80067b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f383 8811 	msr	BASEPRI, r3
}
 80067c0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3738      	adds	r7, #56	; 0x38
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d006      	beq.n	80067ea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f1c3 0307 	rsb	r3, r3, #7
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	e001      	b.n	80067ee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80067ea:	2300      	movs	r3, #0
 80067ec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80067ee:	68fb      	ldr	r3, [r7, #12]
	}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3714      	adds	r7, #20
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006808:	2300      	movs	r3, #0
 800680a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006810:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10d      	bne.n	8006836 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d14d      	bne.n	80068be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	4618      	mov	r0, r3
 8006828:	f000 ff52 	bl	80076d0 <xTaskPriorityDisinherit>
 800682c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	609a      	str	r2, [r3, #8]
 8006834:	e043      	b.n	80068be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d119      	bne.n	8006870 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6858      	ldr	r0, [r3, #4]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006844:	461a      	mov	r2, r3
 8006846:	68b9      	ldr	r1, [r7, #8]
 8006848:	f001 fd2c 	bl	80082a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006854:	441a      	add	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	429a      	cmp	r2, r3
 8006864:	d32b      	bcc.n	80068be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	605a      	str	r2, [r3, #4]
 800686e:	e026      	b.n	80068be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	68d8      	ldr	r0, [r3, #12]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006878:	461a      	mov	r2, r3
 800687a:	68b9      	ldr	r1, [r7, #8]
 800687c:	f001 fd12 	bl	80082a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	68da      	ldr	r2, [r3, #12]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006888:	425b      	negs	r3, r3
 800688a:	441a      	add	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	68da      	ldr	r2, [r3, #12]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	429a      	cmp	r2, r3
 800689a:	d207      	bcs.n	80068ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	689a      	ldr	r2, [r3, #8]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a4:	425b      	negs	r3, r3
 80068a6:	441a      	add	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d105      	bne.n	80068be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d002      	beq.n	80068be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	3b01      	subs	r3, #1
 80068bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80068c6:	697b      	ldr	r3, [r7, #20]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3718      	adds	r7, #24
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d018      	beq.n	8006914 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	441a      	add	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	68da      	ldr	r2, [r3, #12]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d303      	bcc.n	8006904 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68d9      	ldr	r1, [r3, #12]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690c:	461a      	mov	r2, r3
 800690e:	6838      	ldr	r0, [r7, #0]
 8006910:	f001 fcc8 	bl	80082a4 <memcpy>
	}
}
 8006914:	bf00      	nop
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006924:	f001 f98e 	bl	8007c44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800692e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006930:	e011      	b.n	8006956 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006936:	2b00      	cmp	r3, #0
 8006938:	d012      	beq.n	8006960 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	3324      	adds	r3, #36	; 0x24
 800693e:	4618      	mov	r0, r3
 8006940:	f000 fc76 	bl	8007230 <xTaskRemoveFromEventList>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800694a:	f000 fd4b 	bl	80073e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800694e:	7bfb      	ldrb	r3, [r7, #15]
 8006950:	3b01      	subs	r3, #1
 8006952:	b2db      	uxtb	r3, r3
 8006954:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800695a:	2b00      	cmp	r3, #0
 800695c:	dce9      	bgt.n	8006932 <prvUnlockQueue+0x16>
 800695e:	e000      	b.n	8006962 <prvUnlockQueue+0x46>
					break;
 8006960:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	22ff      	movs	r2, #255	; 0xff
 8006966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800696a:	f001 f99b 	bl	8007ca4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800696e:	f001 f969 	bl	8007c44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006978:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800697a:	e011      	b.n	80069a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d012      	beq.n	80069aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	3310      	adds	r3, #16
 8006988:	4618      	mov	r0, r3
 800698a:	f000 fc51 	bl	8007230 <xTaskRemoveFromEventList>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d001      	beq.n	8006998 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006994:	f000 fd26 	bl	80073e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006998:	7bbb      	ldrb	r3, [r7, #14]
 800699a:	3b01      	subs	r3, #1
 800699c:	b2db      	uxtb	r3, r3
 800699e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	dce9      	bgt.n	800697c <prvUnlockQueue+0x60>
 80069a8:	e000      	b.n	80069ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80069aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	22ff      	movs	r2, #255	; 0xff
 80069b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80069b4:	f001 f976 	bl	8007ca4 <vPortExitCritical>
}
 80069b8:	bf00      	nop
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069c8:	f001 f93c 	bl	8007c44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d102      	bne.n	80069da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80069d4:	2301      	movs	r3, #1
 80069d6:	60fb      	str	r3, [r7, #12]
 80069d8:	e001      	b.n	80069de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80069da:	2300      	movs	r3, #0
 80069dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80069de:	f001 f961 	bl	8007ca4 <vPortExitCritical>

	return xReturn;
 80069e2:	68fb      	ldr	r3, [r7, #12]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069f4:	f001 f926 	bl	8007c44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d102      	bne.n	8006a0a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a04:	2301      	movs	r3, #1
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	e001      	b.n	8006a0e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a0e:	f001 f949 	bl	8007ca4 <vPortExitCritical>

	return xReturn;
 8006a12:	68fb      	ldr	r3, [r7, #12]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b08e      	sub	sp, #56	; 0x38
 8006a20:	af04      	add	r7, sp, #16
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
 8006a28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10a      	bne.n	8006a46 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	623b      	str	r3, [r7, #32]
}
 8006a42:	bf00      	nop
 8006a44:	e7fe      	b.n	8006a44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10a      	bne.n	8006a62 <xTaskCreateStatic+0x46>
	__asm volatile
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	61fb      	str	r3, [r7, #28]
}
 8006a5e:	bf00      	nop
 8006a60:	e7fe      	b.n	8006a60 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a62:	2354      	movs	r3, #84	; 0x54
 8006a64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	2b54      	cmp	r3, #84	; 0x54
 8006a6a:	d00a      	beq.n	8006a82 <xTaskCreateStatic+0x66>
	__asm volatile
 8006a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a70:	f383 8811 	msr	BASEPRI, r3
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	61bb      	str	r3, [r7, #24]
}
 8006a7e:	bf00      	nop
 8006a80:	e7fe      	b.n	8006a80 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a82:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d01e      	beq.n	8006ac8 <xTaskCreateStatic+0xac>
 8006a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d01b      	beq.n	8006ac8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a92:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a98:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	9303      	str	r3, [sp, #12]
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa8:	9302      	str	r3, [sp, #8]
 8006aaa:	f107 0314 	add.w	r3, r7, #20
 8006aae:	9301      	str	r3, [sp, #4]
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	68b9      	ldr	r1, [r7, #8]
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f000 f850 	bl	8006b60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ac2:	f000 f8d5 	bl	8006c70 <prvAddNewTaskToReadyList>
 8006ac6:	e001      	b.n	8006acc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006acc:	697b      	ldr	r3, [r7, #20]
	}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3728      	adds	r7, #40	; 0x28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b08c      	sub	sp, #48	; 0x30
 8006ada:	af04      	add	r7, sp, #16
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	603b      	str	r3, [r7, #0]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ae6:	88fb      	ldrh	r3, [r7, #6]
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4618      	mov	r0, r3
 8006aec:	f001 f9cc 	bl	8007e88 <pvPortMalloc>
 8006af0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00e      	beq.n	8006b16 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006af8:	2054      	movs	r0, #84	; 0x54
 8006afa:	f001 f9c5 	bl	8007e88 <pvPortMalloc>
 8006afe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d003      	beq.n	8006b0e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	631a      	str	r2, [r3, #48]	; 0x30
 8006b0c:	e005      	b.n	8006b1a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b0e:	6978      	ldr	r0, [r7, #20]
 8006b10:	f001 fa86 	bl	8008020 <vPortFree>
 8006b14:	e001      	b.n	8006b1a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b16:	2300      	movs	r3, #0
 8006b18:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d017      	beq.n	8006b50 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b28:	88fa      	ldrh	r2, [r7, #6]
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	9303      	str	r3, [sp, #12]
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	9302      	str	r3, [sp, #8]
 8006b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b34:	9301      	str	r3, [sp, #4]
 8006b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68b9      	ldr	r1, [r7, #8]
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 f80e 	bl	8006b60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b44:	69f8      	ldr	r0, [r7, #28]
 8006b46:	f000 f893 	bl	8006c70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	61bb      	str	r3, [r7, #24]
 8006b4e:	e002      	b.n	8006b56 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b50:	f04f 33ff 	mov.w	r3, #4294967295
 8006b54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b56:	69bb      	ldr	r3, [r7, #24]
	}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3720      	adds	r7, #32
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b088      	sub	sp, #32
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4413      	add	r3, r2
 8006b7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	f023 0307 	bic.w	r3, r3, #7
 8006b86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	f003 0307 	and.w	r3, r3, #7
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00a      	beq.n	8006ba8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	617b      	str	r3, [r7, #20]
}
 8006ba4:	bf00      	nop
 8006ba6:	e7fe      	b.n	8006ba6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d01f      	beq.n	8006bee <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bae:	2300      	movs	r3, #0
 8006bb0:	61fb      	str	r3, [r7, #28]
 8006bb2:	e012      	b.n	8006bda <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	4413      	add	r3, r2
 8006bba:	7819      	ldrb	r1, [r3, #0]
 8006bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	3334      	adds	r3, #52	; 0x34
 8006bc4:	460a      	mov	r2, r1
 8006bc6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	4413      	add	r3, r2
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d006      	beq.n	8006be2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	61fb      	str	r3, [r7, #28]
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	2b0f      	cmp	r3, #15
 8006bde:	d9e9      	bls.n	8006bb4 <prvInitialiseNewTask+0x54>
 8006be0:	e000      	b.n	8006be4 <prvInitialiseNewTask+0x84>
			{
				break;
 8006be2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bec:	e003      	b.n	8006bf6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf8:	2b06      	cmp	r3, #6
 8006bfa:	d901      	bls.n	8006c00 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006bfc:	2306      	movs	r3, #6
 8006bfe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c0a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0e:	2200      	movs	r2, #0
 8006c10:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	3304      	adds	r3, #4
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7ff f8a6 	bl	8005d68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1e:	3318      	adds	r3, #24
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7ff f8a1 	bl	8005d68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2e:	f1c3 0207 	rsb	r2, r3, #7
 8006c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3e:	2200      	movs	r2, #0
 8006c40:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	68f9      	ldr	r1, [r7, #12]
 8006c4e:	69b8      	ldr	r0, [r7, #24]
 8006c50:	f000 fecc 	bl	80079ec <pxPortInitialiseStack>
 8006c54:	4602      	mov	r2, r0
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d002      	beq.n	8006c66 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c66:	bf00      	nop
 8006c68:	3720      	adds	r7, #32
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
	...

08006c70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c78:	f000 ffe4 	bl	8007c44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c7c:	4b2a      	ldr	r3, [pc, #168]	; (8006d28 <prvAddNewTaskToReadyList+0xb8>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	3301      	adds	r3, #1
 8006c82:	4a29      	ldr	r2, [pc, #164]	; (8006d28 <prvAddNewTaskToReadyList+0xb8>)
 8006c84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c86:	4b29      	ldr	r3, [pc, #164]	; (8006d2c <prvAddNewTaskToReadyList+0xbc>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d109      	bne.n	8006ca2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c8e:	4a27      	ldr	r2, [pc, #156]	; (8006d2c <prvAddNewTaskToReadyList+0xbc>)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c94:	4b24      	ldr	r3, [pc, #144]	; (8006d28 <prvAddNewTaskToReadyList+0xb8>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d110      	bne.n	8006cbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c9c:	f000 fbc6 	bl	800742c <prvInitialiseTaskLists>
 8006ca0:	e00d      	b.n	8006cbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ca2:	4b23      	ldr	r3, [pc, #140]	; (8006d30 <prvAddNewTaskToReadyList+0xc0>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d109      	bne.n	8006cbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006caa:	4b20      	ldr	r3, [pc, #128]	; (8006d2c <prvAddNewTaskToReadyList+0xbc>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d802      	bhi.n	8006cbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006cb8:	4a1c      	ldr	r2, [pc, #112]	; (8006d2c <prvAddNewTaskToReadyList+0xbc>)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006cbe:	4b1d      	ldr	r3, [pc, #116]	; (8006d34 <prvAddNewTaskToReadyList+0xc4>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	4a1b      	ldr	r2, [pc, #108]	; (8006d34 <prvAddNewTaskToReadyList+0xc4>)
 8006cc6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ccc:	2201      	movs	r2, #1
 8006cce:	409a      	lsls	r2, r3
 8006cd0:	4b19      	ldr	r3, [pc, #100]	; (8006d38 <prvAddNewTaskToReadyList+0xc8>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	4a18      	ldr	r2, [pc, #96]	; (8006d38 <prvAddNewTaskToReadyList+0xc8>)
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cde:	4613      	mov	r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4a15      	ldr	r2, [pc, #84]	; (8006d3c <prvAddNewTaskToReadyList+0xcc>)
 8006ce8:	441a      	add	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	3304      	adds	r3, #4
 8006cee:	4619      	mov	r1, r3
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	f7ff f846 	bl	8005d82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006cf6:	f000 ffd5 	bl	8007ca4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006cfa:	4b0d      	ldr	r3, [pc, #52]	; (8006d30 <prvAddNewTaskToReadyList+0xc0>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00e      	beq.n	8006d20 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d02:	4b0a      	ldr	r3, [pc, #40]	; (8006d2c <prvAddNewTaskToReadyList+0xbc>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d207      	bcs.n	8006d20 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d10:	4b0b      	ldr	r3, [pc, #44]	; (8006d40 <prvAddNewTaskToReadyList+0xd0>)
 8006d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d16:	601a      	str	r2, [r3, #0]
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d20:	bf00      	nop
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	200003cc 	.word	0x200003cc
 8006d2c:	200002cc 	.word	0x200002cc
 8006d30:	200003d8 	.word	0x200003d8
 8006d34:	200003e8 	.word	0x200003e8
 8006d38:	200003d4 	.word	0x200003d4
 8006d3c:	200002d0 	.word	0x200002d0
 8006d40:	e000ed04 	.word	0xe000ed04

08006d44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d017      	beq.n	8006d86 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d56:	4b13      	ldr	r3, [pc, #76]	; (8006da4 <vTaskDelay+0x60>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00a      	beq.n	8006d74 <vTaskDelay+0x30>
	__asm volatile
 8006d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d62:	f383 8811 	msr	BASEPRI, r3
 8006d66:	f3bf 8f6f 	isb	sy
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	60bb      	str	r3, [r7, #8]
}
 8006d70:	bf00      	nop
 8006d72:	e7fe      	b.n	8006d72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d74:	f000 f87a 	bl	8006e6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d78:	2100      	movs	r1, #0
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fdd0 	bl	8007920 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d80:	f000 f882 	bl	8006e88 <xTaskResumeAll>
 8006d84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d107      	bne.n	8006d9c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006d8c:	4b06      	ldr	r3, [pc, #24]	; (8006da8 <vTaskDelay+0x64>)
 8006d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d9c:	bf00      	nop
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	200003f4 	.word	0x200003f4
 8006da8:	e000ed04 	.word	0xe000ed04

08006dac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b08a      	sub	sp, #40	; 0x28
 8006db0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006db2:	2300      	movs	r3, #0
 8006db4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006db6:	2300      	movs	r3, #0
 8006db8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006dba:	463a      	mov	r2, r7
 8006dbc:	1d39      	adds	r1, r7, #4
 8006dbe:	f107 0308 	add.w	r3, r7, #8
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fa fe6e 	bl	8001aa4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006dc8:	6839      	ldr	r1, [r7, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	9202      	str	r2, [sp, #8]
 8006dd0:	9301      	str	r3, [sp, #4]
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	460a      	mov	r2, r1
 8006dda:	491e      	ldr	r1, [pc, #120]	; (8006e54 <vTaskStartScheduler+0xa8>)
 8006ddc:	481e      	ldr	r0, [pc, #120]	; (8006e58 <vTaskStartScheduler+0xac>)
 8006dde:	f7ff fe1d 	bl	8006a1c <xTaskCreateStatic>
 8006de2:	4603      	mov	r3, r0
 8006de4:	4a1d      	ldr	r2, [pc, #116]	; (8006e5c <vTaskStartScheduler+0xb0>)
 8006de6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006de8:	4b1c      	ldr	r3, [pc, #112]	; (8006e5c <vTaskStartScheduler+0xb0>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d002      	beq.n	8006df6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006df0:	2301      	movs	r3, #1
 8006df2:	617b      	str	r3, [r7, #20]
 8006df4:	e001      	b.n	8006dfa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006df6:	2300      	movs	r3, #0
 8006df8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d116      	bne.n	8006e2e <vTaskStartScheduler+0x82>
	__asm volatile
 8006e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	613b      	str	r3, [r7, #16]
}
 8006e12:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e14:	4b12      	ldr	r3, [pc, #72]	; (8006e60 <vTaskStartScheduler+0xb4>)
 8006e16:	f04f 32ff 	mov.w	r2, #4294967295
 8006e1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e1c:	4b11      	ldr	r3, [pc, #68]	; (8006e64 <vTaskStartScheduler+0xb8>)
 8006e1e:	2201      	movs	r2, #1
 8006e20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e22:	4b11      	ldr	r3, [pc, #68]	; (8006e68 <vTaskStartScheduler+0xbc>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e28:	f000 fe6a 	bl	8007b00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e2c:	e00e      	b.n	8006e4c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e34:	d10a      	bne.n	8006e4c <vTaskStartScheduler+0xa0>
	__asm volatile
 8006e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3a:	f383 8811 	msr	BASEPRI, r3
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f3bf 8f4f 	dsb	sy
 8006e46:	60fb      	str	r3, [r7, #12]
}
 8006e48:	bf00      	nop
 8006e4a:	e7fe      	b.n	8006e4a <vTaskStartScheduler+0x9e>
}
 8006e4c:	bf00      	nop
 8006e4e:	3718      	adds	r7, #24
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	080083f0 	.word	0x080083f0
 8006e58:	080073fd 	.word	0x080073fd
 8006e5c:	200003f0 	.word	0x200003f0
 8006e60:	200003ec 	.word	0x200003ec
 8006e64:	200003d8 	.word	0x200003d8
 8006e68:	200003d0 	.word	0x200003d0

08006e6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e70:	4b04      	ldr	r3, [pc, #16]	; (8006e84 <vTaskSuspendAll+0x18>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3301      	adds	r3, #1
 8006e76:	4a03      	ldr	r2, [pc, #12]	; (8006e84 <vTaskSuspendAll+0x18>)
 8006e78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e7a:	bf00      	nop
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr
 8006e84:	200003f4 	.word	0x200003f4

08006e88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e92:	2300      	movs	r3, #0
 8006e94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e96:	4b41      	ldr	r3, [pc, #260]	; (8006f9c <xTaskResumeAll+0x114>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10a      	bne.n	8006eb4 <xTaskResumeAll+0x2c>
	__asm volatile
 8006e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	603b      	str	r3, [r7, #0]
}
 8006eb0:	bf00      	nop
 8006eb2:	e7fe      	b.n	8006eb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006eb4:	f000 fec6 	bl	8007c44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006eb8:	4b38      	ldr	r3, [pc, #224]	; (8006f9c <xTaskResumeAll+0x114>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	4a37      	ldr	r2, [pc, #220]	; (8006f9c <xTaskResumeAll+0x114>)
 8006ec0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ec2:	4b36      	ldr	r3, [pc, #216]	; (8006f9c <xTaskResumeAll+0x114>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d161      	bne.n	8006f8e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006eca:	4b35      	ldr	r3, [pc, #212]	; (8006fa0 <xTaskResumeAll+0x118>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d05d      	beq.n	8006f8e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ed2:	e02e      	b.n	8006f32 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ed4:	4b33      	ldr	r3, [pc, #204]	; (8006fa4 <xTaskResumeAll+0x11c>)
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3318      	adds	r3, #24
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7fe ffab 	bl	8005e3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3304      	adds	r3, #4
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7fe ffa6 	bl	8005e3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	409a      	lsls	r2, r3
 8006ef8:	4b2b      	ldr	r3, [pc, #172]	; (8006fa8 <xTaskResumeAll+0x120>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	4a2a      	ldr	r2, [pc, #168]	; (8006fa8 <xTaskResumeAll+0x120>)
 8006f00:	6013      	str	r3, [r2, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f06:	4613      	mov	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4a27      	ldr	r2, [pc, #156]	; (8006fac <xTaskResumeAll+0x124>)
 8006f10:	441a      	add	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3304      	adds	r3, #4
 8006f16:	4619      	mov	r1, r3
 8006f18:	4610      	mov	r0, r2
 8006f1a:	f7fe ff32 	bl	8005d82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f22:	4b23      	ldr	r3, [pc, #140]	; (8006fb0 <xTaskResumeAll+0x128>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d302      	bcc.n	8006f32 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006f2c:	4b21      	ldr	r3, [pc, #132]	; (8006fb4 <xTaskResumeAll+0x12c>)
 8006f2e:	2201      	movs	r2, #1
 8006f30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f32:	4b1c      	ldr	r3, [pc, #112]	; (8006fa4 <xTaskResumeAll+0x11c>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1cc      	bne.n	8006ed4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d001      	beq.n	8006f44 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f40:	f000 fb12 	bl	8007568 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f44:	4b1c      	ldr	r3, [pc, #112]	; (8006fb8 <xTaskResumeAll+0x130>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d010      	beq.n	8006f72 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f50:	f000 f836 	bl	8006fc0 <xTaskIncrementTick>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d002      	beq.n	8006f60 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006f5a:	4b16      	ldr	r3, [pc, #88]	; (8006fb4 <xTaskResumeAll+0x12c>)
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	3b01      	subs	r3, #1
 8006f64:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1f1      	bne.n	8006f50 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006f6c:	4b12      	ldr	r3, [pc, #72]	; (8006fb8 <xTaskResumeAll+0x130>)
 8006f6e:	2200      	movs	r2, #0
 8006f70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f72:	4b10      	ldr	r3, [pc, #64]	; (8006fb4 <xTaskResumeAll+0x12c>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d009      	beq.n	8006f8e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f7e:	4b0f      	ldr	r3, [pc, #60]	; (8006fbc <xTaskResumeAll+0x134>)
 8006f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f84:	601a      	str	r2, [r3, #0]
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f8e:	f000 fe89 	bl	8007ca4 <vPortExitCritical>

	return xAlreadyYielded;
 8006f92:	68bb      	ldr	r3, [r7, #8]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	200003f4 	.word	0x200003f4
 8006fa0:	200003cc 	.word	0x200003cc
 8006fa4:	2000038c 	.word	0x2000038c
 8006fa8:	200003d4 	.word	0x200003d4
 8006fac:	200002d0 	.word	0x200002d0
 8006fb0:	200002cc 	.word	0x200002cc
 8006fb4:	200003e0 	.word	0x200003e0
 8006fb8:	200003dc 	.word	0x200003dc
 8006fbc:	e000ed04 	.word	0xe000ed04

08006fc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fca:	4b4e      	ldr	r3, [pc, #312]	; (8007104 <xTaskIncrementTick+0x144>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f040 808e 	bne.w	80070f0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006fd4:	4b4c      	ldr	r3, [pc, #304]	; (8007108 <xTaskIncrementTick+0x148>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006fdc:	4a4a      	ldr	r2, [pc, #296]	; (8007108 <xTaskIncrementTick+0x148>)
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d120      	bne.n	800702a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006fe8:	4b48      	ldr	r3, [pc, #288]	; (800710c <xTaskIncrementTick+0x14c>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00a      	beq.n	8007008 <xTaskIncrementTick+0x48>
	__asm volatile
 8006ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff6:	f383 8811 	msr	BASEPRI, r3
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	603b      	str	r3, [r7, #0]
}
 8007004:	bf00      	nop
 8007006:	e7fe      	b.n	8007006 <xTaskIncrementTick+0x46>
 8007008:	4b40      	ldr	r3, [pc, #256]	; (800710c <xTaskIncrementTick+0x14c>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	60fb      	str	r3, [r7, #12]
 800700e:	4b40      	ldr	r3, [pc, #256]	; (8007110 <xTaskIncrementTick+0x150>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a3e      	ldr	r2, [pc, #248]	; (800710c <xTaskIncrementTick+0x14c>)
 8007014:	6013      	str	r3, [r2, #0]
 8007016:	4a3e      	ldr	r2, [pc, #248]	; (8007110 <xTaskIncrementTick+0x150>)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6013      	str	r3, [r2, #0]
 800701c:	4b3d      	ldr	r3, [pc, #244]	; (8007114 <xTaskIncrementTick+0x154>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	3301      	adds	r3, #1
 8007022:	4a3c      	ldr	r2, [pc, #240]	; (8007114 <xTaskIncrementTick+0x154>)
 8007024:	6013      	str	r3, [r2, #0]
 8007026:	f000 fa9f 	bl	8007568 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800702a:	4b3b      	ldr	r3, [pc, #236]	; (8007118 <xTaskIncrementTick+0x158>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	429a      	cmp	r2, r3
 8007032:	d348      	bcc.n	80070c6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007034:	4b35      	ldr	r3, [pc, #212]	; (800710c <xTaskIncrementTick+0x14c>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d104      	bne.n	8007048 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800703e:	4b36      	ldr	r3, [pc, #216]	; (8007118 <xTaskIncrementTick+0x158>)
 8007040:	f04f 32ff 	mov.w	r2, #4294967295
 8007044:	601a      	str	r2, [r3, #0]
					break;
 8007046:	e03e      	b.n	80070c6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007048:	4b30      	ldr	r3, [pc, #192]	; (800710c <xTaskIncrementTick+0x14c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	429a      	cmp	r2, r3
 800705e:	d203      	bcs.n	8007068 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007060:	4a2d      	ldr	r2, [pc, #180]	; (8007118 <xTaskIncrementTick+0x158>)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007066:	e02e      	b.n	80070c6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	3304      	adds	r3, #4
 800706c:	4618      	mov	r0, r3
 800706e:	f7fe fee5 	bl	8005e3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007076:	2b00      	cmp	r3, #0
 8007078:	d004      	beq.n	8007084 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	3318      	adds	r3, #24
 800707e:	4618      	mov	r0, r3
 8007080:	f7fe fedc 	bl	8005e3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007088:	2201      	movs	r2, #1
 800708a:	409a      	lsls	r2, r3
 800708c:	4b23      	ldr	r3, [pc, #140]	; (800711c <xTaskIncrementTick+0x15c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4313      	orrs	r3, r2
 8007092:	4a22      	ldr	r2, [pc, #136]	; (800711c <xTaskIncrementTick+0x15c>)
 8007094:	6013      	str	r3, [r2, #0]
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800709a:	4613      	mov	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4413      	add	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4a1f      	ldr	r2, [pc, #124]	; (8007120 <xTaskIncrementTick+0x160>)
 80070a4:	441a      	add	r2, r3
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	3304      	adds	r3, #4
 80070aa:	4619      	mov	r1, r3
 80070ac:	4610      	mov	r0, r2
 80070ae:	f7fe fe68 	bl	8005d82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b6:	4b1b      	ldr	r3, [pc, #108]	; (8007124 <xTaskIncrementTick+0x164>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070bc:	429a      	cmp	r2, r3
 80070be:	d3b9      	bcc.n	8007034 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80070c0:	2301      	movs	r3, #1
 80070c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070c4:	e7b6      	b.n	8007034 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070c6:	4b17      	ldr	r3, [pc, #92]	; (8007124 <xTaskIncrementTick+0x164>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070cc:	4914      	ldr	r1, [pc, #80]	; (8007120 <xTaskIncrementTick+0x160>)
 80070ce:	4613      	mov	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	4413      	add	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	440b      	add	r3, r1
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d901      	bls.n	80070e2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80070de:	2301      	movs	r3, #1
 80070e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80070e2:	4b11      	ldr	r3, [pc, #68]	; (8007128 <xTaskIncrementTick+0x168>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d007      	beq.n	80070fa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80070ea:	2301      	movs	r3, #1
 80070ec:	617b      	str	r3, [r7, #20]
 80070ee:	e004      	b.n	80070fa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80070f0:	4b0e      	ldr	r3, [pc, #56]	; (800712c <xTaskIncrementTick+0x16c>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	3301      	adds	r3, #1
 80070f6:	4a0d      	ldr	r2, [pc, #52]	; (800712c <xTaskIncrementTick+0x16c>)
 80070f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80070fa:	697b      	ldr	r3, [r7, #20]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	200003f4 	.word	0x200003f4
 8007108:	200003d0 	.word	0x200003d0
 800710c:	20000384 	.word	0x20000384
 8007110:	20000388 	.word	0x20000388
 8007114:	200003e4 	.word	0x200003e4
 8007118:	200003ec 	.word	0x200003ec
 800711c:	200003d4 	.word	0x200003d4
 8007120:	200002d0 	.word	0x200002d0
 8007124:	200002cc 	.word	0x200002cc
 8007128:	200003e0 	.word	0x200003e0
 800712c:	200003dc 	.word	0x200003dc

08007130 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007130:	b480      	push	{r7}
 8007132:	b087      	sub	sp, #28
 8007134:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007136:	4b27      	ldr	r3, [pc, #156]	; (80071d4 <vTaskSwitchContext+0xa4>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d003      	beq.n	8007146 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800713e:	4b26      	ldr	r3, [pc, #152]	; (80071d8 <vTaskSwitchContext+0xa8>)
 8007140:	2201      	movs	r2, #1
 8007142:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007144:	e03f      	b.n	80071c6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007146:	4b24      	ldr	r3, [pc, #144]	; (80071d8 <vTaskSwitchContext+0xa8>)
 8007148:	2200      	movs	r2, #0
 800714a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800714c:	4b23      	ldr	r3, [pc, #140]	; (80071dc <vTaskSwitchContext+0xac>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	fab3 f383 	clz	r3, r3
 8007158:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800715a:	7afb      	ldrb	r3, [r7, #11]
 800715c:	f1c3 031f 	rsb	r3, r3, #31
 8007160:	617b      	str	r3, [r7, #20]
 8007162:	491f      	ldr	r1, [pc, #124]	; (80071e0 <vTaskSwitchContext+0xb0>)
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	4613      	mov	r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4413      	add	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	440b      	add	r3, r1
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d10a      	bne.n	800718c <vTaskSwitchContext+0x5c>
	__asm volatile
 8007176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	607b      	str	r3, [r7, #4]
}
 8007188:	bf00      	nop
 800718a:	e7fe      	b.n	800718a <vTaskSwitchContext+0x5a>
 800718c:	697a      	ldr	r2, [r7, #20]
 800718e:	4613      	mov	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	4413      	add	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4a12      	ldr	r2, [pc, #72]	; (80071e0 <vTaskSwitchContext+0xb0>)
 8007198:	4413      	add	r3, r2
 800719a:	613b      	str	r3, [r7, #16]
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	605a      	str	r2, [r3, #4]
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	685a      	ldr	r2, [r3, #4]
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	3308      	adds	r3, #8
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d104      	bne.n	80071bc <vTaskSwitchContext+0x8c>
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	685a      	ldr	r2, [r3, #4]
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	605a      	str	r2, [r3, #4]
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	4a08      	ldr	r2, [pc, #32]	; (80071e4 <vTaskSwitchContext+0xb4>)
 80071c4:	6013      	str	r3, [r2, #0]
}
 80071c6:	bf00      	nop
 80071c8:	371c      	adds	r7, #28
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	200003f4 	.word	0x200003f4
 80071d8:	200003e0 	.word	0x200003e0
 80071dc:	200003d4 	.word	0x200003d4
 80071e0:	200002d0 	.word	0x200002d0
 80071e4:	200002cc 	.word	0x200002cc

080071e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10a      	bne.n	800720e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	60fb      	str	r3, [r7, #12]
}
 800720a:	bf00      	nop
 800720c:	e7fe      	b.n	800720c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800720e:	4b07      	ldr	r3, [pc, #28]	; (800722c <vTaskPlaceOnEventList+0x44>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	3318      	adds	r3, #24
 8007214:	4619      	mov	r1, r3
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7fe fdd7 	bl	8005dca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800721c:	2101      	movs	r1, #1
 800721e:	6838      	ldr	r0, [r7, #0]
 8007220:	f000 fb7e 	bl	8007920 <prvAddCurrentTaskToDelayedList>
}
 8007224:	bf00      	nop
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	200002cc 	.word	0x200002cc

08007230 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10a      	bne.n	800725c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724a:	f383 8811 	msr	BASEPRI, r3
 800724e:	f3bf 8f6f 	isb	sy
 8007252:	f3bf 8f4f 	dsb	sy
 8007256:	60fb      	str	r3, [r7, #12]
}
 8007258:	bf00      	nop
 800725a:	e7fe      	b.n	800725a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	3318      	adds	r3, #24
 8007260:	4618      	mov	r0, r3
 8007262:	f7fe fdeb 	bl	8005e3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007266:	4b1d      	ldr	r3, [pc, #116]	; (80072dc <xTaskRemoveFromEventList+0xac>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d11c      	bne.n	80072a8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	3304      	adds	r3, #4
 8007272:	4618      	mov	r0, r3
 8007274:	f7fe fde2 	bl	8005e3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727c:	2201      	movs	r2, #1
 800727e:	409a      	lsls	r2, r3
 8007280:	4b17      	ldr	r3, [pc, #92]	; (80072e0 <xTaskRemoveFromEventList+0xb0>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4313      	orrs	r3, r2
 8007286:	4a16      	ldr	r2, [pc, #88]	; (80072e0 <xTaskRemoveFromEventList+0xb0>)
 8007288:	6013      	str	r3, [r2, #0]
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800728e:	4613      	mov	r3, r2
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	4413      	add	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4a13      	ldr	r2, [pc, #76]	; (80072e4 <xTaskRemoveFromEventList+0xb4>)
 8007298:	441a      	add	r2, r3
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	3304      	adds	r3, #4
 800729e:	4619      	mov	r1, r3
 80072a0:	4610      	mov	r0, r2
 80072a2:	f7fe fd6e 	bl	8005d82 <vListInsertEnd>
 80072a6:	e005      	b.n	80072b4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	3318      	adds	r3, #24
 80072ac:	4619      	mov	r1, r3
 80072ae:	480e      	ldr	r0, [pc, #56]	; (80072e8 <xTaskRemoveFromEventList+0xb8>)
 80072b0:	f7fe fd67 	bl	8005d82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b8:	4b0c      	ldr	r3, [pc, #48]	; (80072ec <xTaskRemoveFromEventList+0xbc>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072be:	429a      	cmp	r2, r3
 80072c0:	d905      	bls.n	80072ce <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80072c2:	2301      	movs	r3, #1
 80072c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80072c6:	4b0a      	ldr	r3, [pc, #40]	; (80072f0 <xTaskRemoveFromEventList+0xc0>)
 80072c8:	2201      	movs	r2, #1
 80072ca:	601a      	str	r2, [r3, #0]
 80072cc:	e001      	b.n	80072d2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80072ce:	2300      	movs	r3, #0
 80072d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80072d2:	697b      	ldr	r3, [r7, #20]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3718      	adds	r7, #24
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	200003f4 	.word	0x200003f4
 80072e0:	200003d4 	.word	0x200003d4
 80072e4:	200002d0 	.word	0x200002d0
 80072e8:	2000038c 	.word	0x2000038c
 80072ec:	200002cc 	.word	0x200002cc
 80072f0:	200003e0 	.word	0x200003e0

080072f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80072fc:	4b06      	ldr	r3, [pc, #24]	; (8007318 <vTaskInternalSetTimeOutState+0x24>)
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007304:	4b05      	ldr	r3, [pc, #20]	; (800731c <vTaskInternalSetTimeOutState+0x28>)
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	605a      	str	r2, [r3, #4]
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr
 8007318:	200003e4 	.word	0x200003e4
 800731c:	200003d0 	.word	0x200003d0

08007320 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b088      	sub	sp, #32
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10a      	bne.n	8007346 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	613b      	str	r3, [r7, #16]
}
 8007342:	bf00      	nop
 8007344:	e7fe      	b.n	8007344 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10a      	bne.n	8007362 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800734c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	60fb      	str	r3, [r7, #12]
}
 800735e:	bf00      	nop
 8007360:	e7fe      	b.n	8007360 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007362:	f000 fc6f 	bl	8007c44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007366:	4b1d      	ldr	r3, [pc, #116]	; (80073dc <xTaskCheckForTimeOut+0xbc>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737e:	d102      	bne.n	8007386 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007380:	2300      	movs	r3, #0
 8007382:	61fb      	str	r3, [r7, #28]
 8007384:	e023      	b.n	80073ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	4b15      	ldr	r3, [pc, #84]	; (80073e0 <xTaskCheckForTimeOut+0xc0>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	429a      	cmp	r2, r3
 8007390:	d007      	beq.n	80073a2 <xTaskCheckForTimeOut+0x82>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	69ba      	ldr	r2, [r7, #24]
 8007398:	429a      	cmp	r2, r3
 800739a:	d302      	bcc.n	80073a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800739c:	2301      	movs	r3, #1
 800739e:	61fb      	str	r3, [r7, #28]
 80073a0:	e015      	b.n	80073ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d20b      	bcs.n	80073c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	1ad2      	subs	r2, r2, r3
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7ff ff9b 	bl	80072f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80073be:	2300      	movs	r3, #0
 80073c0:	61fb      	str	r3, [r7, #28]
 80073c2:	e004      	b.n	80073ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	2200      	movs	r2, #0
 80073c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80073ca:	2301      	movs	r3, #1
 80073cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80073ce:	f000 fc69 	bl	8007ca4 <vPortExitCritical>

	return xReturn;
 80073d2:	69fb      	ldr	r3, [r7, #28]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3720      	adds	r7, #32
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	200003d0 	.word	0x200003d0
 80073e0:	200003e4 	.word	0x200003e4

080073e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80073e4:	b480      	push	{r7}
 80073e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80073e8:	4b03      	ldr	r3, [pc, #12]	; (80073f8 <vTaskMissedYield+0x14>)
 80073ea:	2201      	movs	r2, #1
 80073ec:	601a      	str	r2, [r3, #0]
}
 80073ee:	bf00      	nop
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr
 80073f8:	200003e0 	.word	0x200003e0

080073fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007404:	f000 f852 	bl	80074ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007408:	4b06      	ldr	r3, [pc, #24]	; (8007424 <prvIdleTask+0x28>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d9f9      	bls.n	8007404 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007410:	4b05      	ldr	r3, [pc, #20]	; (8007428 <prvIdleTask+0x2c>)
 8007412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007416:	601a      	str	r2, [r3, #0]
 8007418:	f3bf 8f4f 	dsb	sy
 800741c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007420:	e7f0      	b.n	8007404 <prvIdleTask+0x8>
 8007422:	bf00      	nop
 8007424:	200002d0 	.word	0x200002d0
 8007428:	e000ed04 	.word	0xe000ed04

0800742c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007432:	2300      	movs	r3, #0
 8007434:	607b      	str	r3, [r7, #4]
 8007436:	e00c      	b.n	8007452 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	4613      	mov	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4a12      	ldr	r2, [pc, #72]	; (800748c <prvInitialiseTaskLists+0x60>)
 8007444:	4413      	add	r3, r2
 8007446:	4618      	mov	r0, r3
 8007448:	f7fe fc6e 	bl	8005d28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	3301      	adds	r3, #1
 8007450:	607b      	str	r3, [r7, #4]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2b06      	cmp	r3, #6
 8007456:	d9ef      	bls.n	8007438 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007458:	480d      	ldr	r0, [pc, #52]	; (8007490 <prvInitialiseTaskLists+0x64>)
 800745a:	f7fe fc65 	bl	8005d28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800745e:	480d      	ldr	r0, [pc, #52]	; (8007494 <prvInitialiseTaskLists+0x68>)
 8007460:	f7fe fc62 	bl	8005d28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007464:	480c      	ldr	r0, [pc, #48]	; (8007498 <prvInitialiseTaskLists+0x6c>)
 8007466:	f7fe fc5f 	bl	8005d28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800746a:	480c      	ldr	r0, [pc, #48]	; (800749c <prvInitialiseTaskLists+0x70>)
 800746c:	f7fe fc5c 	bl	8005d28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007470:	480b      	ldr	r0, [pc, #44]	; (80074a0 <prvInitialiseTaskLists+0x74>)
 8007472:	f7fe fc59 	bl	8005d28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007476:	4b0b      	ldr	r3, [pc, #44]	; (80074a4 <prvInitialiseTaskLists+0x78>)
 8007478:	4a05      	ldr	r2, [pc, #20]	; (8007490 <prvInitialiseTaskLists+0x64>)
 800747a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800747c:	4b0a      	ldr	r3, [pc, #40]	; (80074a8 <prvInitialiseTaskLists+0x7c>)
 800747e:	4a05      	ldr	r2, [pc, #20]	; (8007494 <prvInitialiseTaskLists+0x68>)
 8007480:	601a      	str	r2, [r3, #0]
}
 8007482:	bf00      	nop
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	200002d0 	.word	0x200002d0
 8007490:	2000035c 	.word	0x2000035c
 8007494:	20000370 	.word	0x20000370
 8007498:	2000038c 	.word	0x2000038c
 800749c:	200003a0 	.word	0x200003a0
 80074a0:	200003b8 	.word	0x200003b8
 80074a4:	20000384 	.word	0x20000384
 80074a8:	20000388 	.word	0x20000388

080074ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074b2:	e019      	b.n	80074e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074b4:	f000 fbc6 	bl	8007c44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074b8:	4b10      	ldr	r3, [pc, #64]	; (80074fc <prvCheckTasksWaitingTermination+0x50>)
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	3304      	adds	r3, #4
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7fe fcb9 	bl	8005e3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80074ca:	4b0d      	ldr	r3, [pc, #52]	; (8007500 <prvCheckTasksWaitingTermination+0x54>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	3b01      	subs	r3, #1
 80074d0:	4a0b      	ldr	r2, [pc, #44]	; (8007500 <prvCheckTasksWaitingTermination+0x54>)
 80074d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80074d4:	4b0b      	ldr	r3, [pc, #44]	; (8007504 <prvCheckTasksWaitingTermination+0x58>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	3b01      	subs	r3, #1
 80074da:	4a0a      	ldr	r2, [pc, #40]	; (8007504 <prvCheckTasksWaitingTermination+0x58>)
 80074dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80074de:	f000 fbe1 	bl	8007ca4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f810 	bl	8007508 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074e8:	4b06      	ldr	r3, [pc, #24]	; (8007504 <prvCheckTasksWaitingTermination+0x58>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1e1      	bne.n	80074b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80074f0:	bf00      	nop
 80074f2:	bf00      	nop
 80074f4:	3708      	adds	r7, #8
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	200003a0 	.word	0x200003a0
 8007500:	200003cc 	.word	0x200003cc
 8007504:	200003b4 	.word	0x200003b4

08007508 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007516:	2b00      	cmp	r3, #0
 8007518:	d108      	bne.n	800752c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751e:	4618      	mov	r0, r3
 8007520:	f000 fd7e 	bl	8008020 <vPortFree>
				vPortFree( pxTCB );
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fd7b 	bl	8008020 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800752a:	e018      	b.n	800755e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007532:	2b01      	cmp	r3, #1
 8007534:	d103      	bne.n	800753e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fd72 	bl	8008020 <vPortFree>
	}
 800753c:	e00f      	b.n	800755e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007544:	2b02      	cmp	r3, #2
 8007546:	d00a      	beq.n	800755e <prvDeleteTCB+0x56>
	__asm volatile
 8007548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754c:	f383 8811 	msr	BASEPRI, r3
 8007550:	f3bf 8f6f 	isb	sy
 8007554:	f3bf 8f4f 	dsb	sy
 8007558:	60fb      	str	r3, [r7, #12]
}
 800755a:	bf00      	nop
 800755c:	e7fe      	b.n	800755c <prvDeleteTCB+0x54>
	}
 800755e:	bf00      	nop
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
	...

08007568 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800756e:	4b0c      	ldr	r3, [pc, #48]	; (80075a0 <prvResetNextTaskUnblockTime+0x38>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d104      	bne.n	8007582 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007578:	4b0a      	ldr	r3, [pc, #40]	; (80075a4 <prvResetNextTaskUnblockTime+0x3c>)
 800757a:	f04f 32ff 	mov.w	r2, #4294967295
 800757e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007580:	e008      	b.n	8007594 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007582:	4b07      	ldr	r3, [pc, #28]	; (80075a0 <prvResetNextTaskUnblockTime+0x38>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	4a04      	ldr	r2, [pc, #16]	; (80075a4 <prvResetNextTaskUnblockTime+0x3c>)
 8007592:	6013      	str	r3, [r2, #0]
}
 8007594:	bf00      	nop
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	20000384 	.word	0x20000384
 80075a4:	200003ec 	.word	0x200003ec

080075a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80075ae:	4b0b      	ldr	r3, [pc, #44]	; (80075dc <xTaskGetSchedulerState+0x34>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d102      	bne.n	80075bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80075b6:	2301      	movs	r3, #1
 80075b8:	607b      	str	r3, [r7, #4]
 80075ba:	e008      	b.n	80075ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075bc:	4b08      	ldr	r3, [pc, #32]	; (80075e0 <xTaskGetSchedulerState+0x38>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d102      	bne.n	80075ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80075c4:	2302      	movs	r3, #2
 80075c6:	607b      	str	r3, [r7, #4]
 80075c8:	e001      	b.n	80075ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80075ca:	2300      	movs	r3, #0
 80075cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80075ce:	687b      	ldr	r3, [r7, #4]
	}
 80075d0:	4618      	mov	r0, r3
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr
 80075dc:	200003d8 	.word	0x200003d8
 80075e0:	200003f4 	.word	0x200003f4

080075e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80075f0:	2300      	movs	r3, #0
 80075f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d05e      	beq.n	80076b8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075fe:	4b31      	ldr	r3, [pc, #196]	; (80076c4 <xTaskPriorityInherit+0xe0>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007604:	429a      	cmp	r2, r3
 8007606:	d24e      	bcs.n	80076a6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	2b00      	cmp	r3, #0
 800760e:	db06      	blt.n	800761e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007610:	4b2c      	ldr	r3, [pc, #176]	; (80076c4 <xTaskPriorityInherit+0xe0>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007616:	f1c3 0207 	rsb	r2, r3, #7
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	6959      	ldr	r1, [r3, #20]
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007626:	4613      	mov	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	4a26      	ldr	r2, [pc, #152]	; (80076c8 <xTaskPriorityInherit+0xe4>)
 8007630:	4413      	add	r3, r2
 8007632:	4299      	cmp	r1, r3
 8007634:	d12f      	bne.n	8007696 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	3304      	adds	r3, #4
 800763a:	4618      	mov	r0, r3
 800763c:	f7fe fbfe 	bl	8005e3c <uxListRemove>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d10a      	bne.n	800765c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764a:	2201      	movs	r2, #1
 800764c:	fa02 f303 	lsl.w	r3, r2, r3
 8007650:	43da      	mvns	r2, r3
 8007652:	4b1e      	ldr	r3, [pc, #120]	; (80076cc <xTaskPriorityInherit+0xe8>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4013      	ands	r3, r2
 8007658:	4a1c      	ldr	r2, [pc, #112]	; (80076cc <xTaskPriorityInherit+0xe8>)
 800765a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800765c:	4b19      	ldr	r3, [pc, #100]	; (80076c4 <xTaskPriorityInherit+0xe0>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766a:	2201      	movs	r2, #1
 800766c:	409a      	lsls	r2, r3
 800766e:	4b17      	ldr	r3, [pc, #92]	; (80076cc <xTaskPriorityInherit+0xe8>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4313      	orrs	r3, r2
 8007674:	4a15      	ldr	r2, [pc, #84]	; (80076cc <xTaskPriorityInherit+0xe8>)
 8007676:	6013      	str	r3, [r2, #0]
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800767c:	4613      	mov	r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4413      	add	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4a10      	ldr	r2, [pc, #64]	; (80076c8 <xTaskPriorityInherit+0xe4>)
 8007686:	441a      	add	r2, r3
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	3304      	adds	r3, #4
 800768c:	4619      	mov	r1, r3
 800768e:	4610      	mov	r0, r2
 8007690:	f7fe fb77 	bl	8005d82 <vListInsertEnd>
 8007694:	e004      	b.n	80076a0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007696:	4b0b      	ldr	r3, [pc, #44]	; (80076c4 <xTaskPriorityInherit+0xe0>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80076a0:	2301      	movs	r3, #1
 80076a2:	60fb      	str	r3, [r7, #12]
 80076a4:	e008      	b.n	80076b8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076aa:	4b06      	ldr	r3, [pc, #24]	; (80076c4 <xTaskPriorityInherit+0xe0>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d201      	bcs.n	80076b8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80076b4:	2301      	movs	r3, #1
 80076b6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076b8:	68fb      	ldr	r3, [r7, #12]
	}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	200002cc 	.word	0x200002cc
 80076c8:	200002d0 	.word	0x200002d0
 80076cc:	200003d4 	.word	0x200003d4

080076d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80076dc:	2300      	movs	r3, #0
 80076de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d06e      	beq.n	80077c4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076e6:	4b3a      	ldr	r3, [pc, #232]	; (80077d0 <xTaskPriorityDisinherit+0x100>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d00a      	beq.n	8007706 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	60fb      	str	r3, [r7, #12]
}
 8007702:	bf00      	nop
 8007704:	e7fe      	b.n	8007704 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10a      	bne.n	8007724 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800770e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	60bb      	str	r3, [r7, #8]
}
 8007720:	bf00      	nop
 8007722:	e7fe      	b.n	8007722 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007728:	1e5a      	subs	r2, r3, #1
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007736:	429a      	cmp	r2, r3
 8007738:	d044      	beq.n	80077c4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800773e:	2b00      	cmp	r3, #0
 8007740:	d140      	bne.n	80077c4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	3304      	adds	r3, #4
 8007746:	4618      	mov	r0, r3
 8007748:	f7fe fb78 	bl	8005e3c <uxListRemove>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d115      	bne.n	800777e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007756:	491f      	ldr	r1, [pc, #124]	; (80077d4 <xTaskPriorityDisinherit+0x104>)
 8007758:	4613      	mov	r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4413      	add	r3, r2
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	440b      	add	r3, r1
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10a      	bne.n	800777e <xTaskPriorityDisinherit+0xae>
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776c:	2201      	movs	r2, #1
 800776e:	fa02 f303 	lsl.w	r3, r2, r3
 8007772:	43da      	mvns	r2, r3
 8007774:	4b18      	ldr	r3, [pc, #96]	; (80077d8 <xTaskPriorityDisinherit+0x108>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4013      	ands	r3, r2
 800777a:	4a17      	ldr	r2, [pc, #92]	; (80077d8 <xTaskPriorityDisinherit+0x108>)
 800777c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778a:	f1c3 0207 	rsb	r2, r3, #7
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007796:	2201      	movs	r2, #1
 8007798:	409a      	lsls	r2, r3
 800779a:	4b0f      	ldr	r3, [pc, #60]	; (80077d8 <xTaskPriorityDisinherit+0x108>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4313      	orrs	r3, r2
 80077a0:	4a0d      	ldr	r2, [pc, #52]	; (80077d8 <xTaskPriorityDisinherit+0x108>)
 80077a2:	6013      	str	r3, [r2, #0]
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a8:	4613      	mov	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4413      	add	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4a08      	ldr	r2, [pc, #32]	; (80077d4 <xTaskPriorityDisinherit+0x104>)
 80077b2:	441a      	add	r2, r3
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	3304      	adds	r3, #4
 80077b8:	4619      	mov	r1, r3
 80077ba:	4610      	mov	r0, r2
 80077bc:	f7fe fae1 	bl	8005d82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077c0:	2301      	movs	r3, #1
 80077c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077c4:	697b      	ldr	r3, [r7, #20]
	}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3718      	adds	r7, #24
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	200002cc 	.word	0x200002cc
 80077d4:	200002d0 	.word	0x200002d0
 80077d8:	200003d4 	.word	0x200003d4

080077dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b088      	sub	sp, #32
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80077ea:	2301      	movs	r3, #1
 80077ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d077      	beq.n	80078e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10a      	bne.n	8007812 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80077fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007800:	f383 8811 	msr	BASEPRI, r3
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	60fb      	str	r3, [r7, #12]
}
 800780e:	bf00      	nop
 8007810:	e7fe      	b.n	8007810 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	429a      	cmp	r2, r3
 800781a:	d902      	bls.n	8007822 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	61fb      	str	r3, [r7, #28]
 8007820:	e002      	b.n	8007828 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007826:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782c:	69fa      	ldr	r2, [r7, #28]
 800782e:	429a      	cmp	r2, r3
 8007830:	d058      	beq.n	80078e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	429a      	cmp	r2, r3
 800783a:	d153      	bne.n	80078e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800783c:	4b2b      	ldr	r3, [pc, #172]	; (80078ec <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	429a      	cmp	r2, r3
 8007844:	d10a      	bne.n	800785c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	60bb      	str	r3, [r7, #8]
}
 8007858:	bf00      	nop
 800785a:	e7fe      	b.n	800785a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007860:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	69fa      	ldr	r2, [r7, #28]
 8007866:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	2b00      	cmp	r3, #0
 800786e:	db04      	blt.n	800787a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	f1c3 0207 	rsb	r2, r3, #7
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	6959      	ldr	r1, [r3, #20]
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	4613      	mov	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4413      	add	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4a19      	ldr	r2, [pc, #100]	; (80078f0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800788a:	4413      	add	r3, r2
 800788c:	4299      	cmp	r1, r3
 800788e:	d129      	bne.n	80078e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	3304      	adds	r3, #4
 8007894:	4618      	mov	r0, r3
 8007896:	f7fe fad1 	bl	8005e3c <uxListRemove>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10a      	bne.n	80078b6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a4:	2201      	movs	r2, #1
 80078a6:	fa02 f303 	lsl.w	r3, r2, r3
 80078aa:	43da      	mvns	r2, r3
 80078ac:	4b11      	ldr	r3, [pc, #68]	; (80078f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4013      	ands	r3, r2
 80078b2:	4a10      	ldr	r2, [pc, #64]	; (80078f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80078b4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ba:	2201      	movs	r2, #1
 80078bc:	409a      	lsls	r2, r3
 80078be:	4b0d      	ldr	r3, [pc, #52]	; (80078f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	4a0b      	ldr	r2, [pc, #44]	; (80078f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80078c6:	6013      	str	r3, [r2, #0]
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078cc:	4613      	mov	r3, r2
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	4413      	add	r3, r2
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	4a06      	ldr	r2, [pc, #24]	; (80078f0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80078d6:	441a      	add	r2, r3
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	3304      	adds	r3, #4
 80078dc:	4619      	mov	r1, r3
 80078de:	4610      	mov	r0, r2
 80078e0:	f7fe fa4f 	bl	8005d82 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078e4:	bf00      	nop
 80078e6:	3720      	adds	r7, #32
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	200002cc 	.word	0x200002cc
 80078f0:	200002d0 	.word	0x200002d0
 80078f4:	200003d4 	.word	0x200003d4

080078f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80078f8:	b480      	push	{r7}
 80078fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80078fc:	4b07      	ldr	r3, [pc, #28]	; (800791c <pvTaskIncrementMutexHeldCount+0x24>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d004      	beq.n	800790e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007904:	4b05      	ldr	r3, [pc, #20]	; (800791c <pvTaskIncrementMutexHeldCount+0x24>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800790a:	3201      	adds	r2, #1
 800790c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800790e:	4b03      	ldr	r3, [pc, #12]	; (800791c <pvTaskIncrementMutexHeldCount+0x24>)
 8007910:	681b      	ldr	r3, [r3, #0]
	}
 8007912:	4618      	mov	r0, r3
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	200002cc 	.word	0x200002cc

08007920 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800792a:	4b29      	ldr	r3, [pc, #164]	; (80079d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007930:	4b28      	ldr	r3, [pc, #160]	; (80079d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	3304      	adds	r3, #4
 8007936:	4618      	mov	r0, r3
 8007938:	f7fe fa80 	bl	8005e3c <uxListRemove>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10b      	bne.n	800795a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007942:	4b24      	ldr	r3, [pc, #144]	; (80079d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007948:	2201      	movs	r2, #1
 800794a:	fa02 f303 	lsl.w	r3, r2, r3
 800794e:	43da      	mvns	r2, r3
 8007950:	4b21      	ldr	r3, [pc, #132]	; (80079d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4013      	ands	r3, r2
 8007956:	4a20      	ldr	r2, [pc, #128]	; (80079d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007958:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007960:	d10a      	bne.n	8007978 <prvAddCurrentTaskToDelayedList+0x58>
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d007      	beq.n	8007978 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007968:	4b1a      	ldr	r3, [pc, #104]	; (80079d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	3304      	adds	r3, #4
 800796e:	4619      	mov	r1, r3
 8007970:	481a      	ldr	r0, [pc, #104]	; (80079dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8007972:	f7fe fa06 	bl	8005d82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007976:	e026      	b.n	80079c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4413      	add	r3, r2
 800797e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007980:	4b14      	ldr	r3, [pc, #80]	; (80079d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	429a      	cmp	r2, r3
 800798e:	d209      	bcs.n	80079a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007990:	4b13      	ldr	r3, [pc, #76]	; (80079e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	4b0f      	ldr	r3, [pc, #60]	; (80079d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	3304      	adds	r3, #4
 800799a:	4619      	mov	r1, r3
 800799c:	4610      	mov	r0, r2
 800799e:	f7fe fa14 	bl	8005dca <vListInsert>
}
 80079a2:	e010      	b.n	80079c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079a4:	4b0f      	ldr	r3, [pc, #60]	; (80079e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	4b0a      	ldr	r3, [pc, #40]	; (80079d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	3304      	adds	r3, #4
 80079ae:	4619      	mov	r1, r3
 80079b0:	4610      	mov	r0, r2
 80079b2:	f7fe fa0a 	bl	8005dca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80079b6:	4b0c      	ldr	r3, [pc, #48]	; (80079e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d202      	bcs.n	80079c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80079c0:	4a09      	ldr	r2, [pc, #36]	; (80079e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	6013      	str	r3, [r2, #0]
}
 80079c6:	bf00      	nop
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	200003d0 	.word	0x200003d0
 80079d4:	200002cc 	.word	0x200002cc
 80079d8:	200003d4 	.word	0x200003d4
 80079dc:	200003b8 	.word	0x200003b8
 80079e0:	20000388 	.word	0x20000388
 80079e4:	20000384 	.word	0x20000384
 80079e8:	200003ec 	.word	0x200003ec

080079ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	3b04      	subs	r3, #4
 80079fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	3b04      	subs	r3, #4
 8007a0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	f023 0201 	bic.w	r2, r3, #1
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	3b04      	subs	r3, #4
 8007a1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a1c:	4a0c      	ldr	r2, [pc, #48]	; (8007a50 <pxPortInitialiseStack+0x64>)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	3b14      	subs	r3, #20
 8007a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	3b04      	subs	r3, #4
 8007a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f06f 0202 	mvn.w	r2, #2
 8007a3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	3b20      	subs	r3, #32
 8007a40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a42:	68fb      	ldr	r3, [r7, #12]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3714      	adds	r7, #20
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr
 8007a50:	08007a55 	.word	0x08007a55

08007a54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a5e:	4b12      	ldr	r3, [pc, #72]	; (8007aa8 <prvTaskExitError+0x54>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a66:	d00a      	beq.n	8007a7e <prvTaskExitError+0x2a>
	__asm volatile
 8007a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6c:	f383 8811 	msr	BASEPRI, r3
 8007a70:	f3bf 8f6f 	isb	sy
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	60fb      	str	r3, [r7, #12]
}
 8007a7a:	bf00      	nop
 8007a7c:	e7fe      	b.n	8007a7c <prvTaskExitError+0x28>
	__asm volatile
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	60bb      	str	r3, [r7, #8]
}
 8007a90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a92:	bf00      	nop
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d0fc      	beq.n	8007a94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a9a:	bf00      	nop
 8007a9c:	bf00      	nop
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	2000000c 	.word	0x2000000c
 8007aac:	00000000 	.word	0x00000000

08007ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ab0:	4b07      	ldr	r3, [pc, #28]	; (8007ad0 <pxCurrentTCBConst2>)
 8007ab2:	6819      	ldr	r1, [r3, #0]
 8007ab4:	6808      	ldr	r0, [r1, #0]
 8007ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aba:	f380 8809 	msr	PSP, r0
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f04f 0000 	mov.w	r0, #0
 8007ac6:	f380 8811 	msr	BASEPRI, r0
 8007aca:	4770      	bx	lr
 8007acc:	f3af 8000 	nop.w

08007ad0 <pxCurrentTCBConst2>:
 8007ad0:	200002cc 	.word	0x200002cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ad4:	bf00      	nop
 8007ad6:	bf00      	nop

08007ad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ad8:	4808      	ldr	r0, [pc, #32]	; (8007afc <prvPortStartFirstTask+0x24>)
 8007ada:	6800      	ldr	r0, [r0, #0]
 8007adc:	6800      	ldr	r0, [r0, #0]
 8007ade:	f380 8808 	msr	MSP, r0
 8007ae2:	f04f 0000 	mov.w	r0, #0
 8007ae6:	f380 8814 	msr	CONTROL, r0
 8007aea:	b662      	cpsie	i
 8007aec:	b661      	cpsie	f
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	f3bf 8f6f 	isb	sy
 8007af6:	df00      	svc	0
 8007af8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007afa:	bf00      	nop
 8007afc:	e000ed08 	.word	0xe000ed08

08007b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007b06:	4b46      	ldr	r3, [pc, #280]	; (8007c20 <xPortStartScheduler+0x120>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a46      	ldr	r2, [pc, #280]	; (8007c24 <xPortStartScheduler+0x124>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d10a      	bne.n	8007b26 <xPortStartScheduler+0x26>
	__asm volatile
 8007b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b14:	f383 8811 	msr	BASEPRI, r3
 8007b18:	f3bf 8f6f 	isb	sy
 8007b1c:	f3bf 8f4f 	dsb	sy
 8007b20:	613b      	str	r3, [r7, #16]
}
 8007b22:	bf00      	nop
 8007b24:	e7fe      	b.n	8007b24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007b26:	4b3e      	ldr	r3, [pc, #248]	; (8007c20 <xPortStartScheduler+0x120>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a3f      	ldr	r2, [pc, #252]	; (8007c28 <xPortStartScheduler+0x128>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d10a      	bne.n	8007b46 <xPortStartScheduler+0x46>
	__asm volatile
 8007b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	60fb      	str	r3, [r7, #12]
}
 8007b42:	bf00      	nop
 8007b44:	e7fe      	b.n	8007b44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b46:	4b39      	ldr	r3, [pc, #228]	; (8007c2c <xPortStartScheduler+0x12c>)
 8007b48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	22ff      	movs	r2, #255	; 0xff
 8007b56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b60:	78fb      	ldrb	r3, [r7, #3]
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	4b31      	ldr	r3, [pc, #196]	; (8007c30 <xPortStartScheduler+0x130>)
 8007b6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b6e:	4b31      	ldr	r3, [pc, #196]	; (8007c34 <xPortStartScheduler+0x134>)
 8007b70:	2207      	movs	r2, #7
 8007b72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b74:	e009      	b.n	8007b8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007b76:	4b2f      	ldr	r3, [pc, #188]	; (8007c34 <xPortStartScheduler+0x134>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	4a2d      	ldr	r2, [pc, #180]	; (8007c34 <xPortStartScheduler+0x134>)
 8007b7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b80:	78fb      	ldrb	r3, [r7, #3]
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	005b      	lsls	r3, r3, #1
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b8a:	78fb      	ldrb	r3, [r7, #3]
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b92:	2b80      	cmp	r3, #128	; 0x80
 8007b94:	d0ef      	beq.n	8007b76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b96:	4b27      	ldr	r3, [pc, #156]	; (8007c34 <xPortStartScheduler+0x134>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f1c3 0307 	rsb	r3, r3, #7
 8007b9e:	2b04      	cmp	r3, #4
 8007ba0:	d00a      	beq.n	8007bb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba6:	f383 8811 	msr	BASEPRI, r3
 8007baa:	f3bf 8f6f 	isb	sy
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	60bb      	str	r3, [r7, #8]
}
 8007bb4:	bf00      	nop
 8007bb6:	e7fe      	b.n	8007bb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007bb8:	4b1e      	ldr	r3, [pc, #120]	; (8007c34 <xPortStartScheduler+0x134>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	021b      	lsls	r3, r3, #8
 8007bbe:	4a1d      	ldr	r2, [pc, #116]	; (8007c34 <xPortStartScheduler+0x134>)
 8007bc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007bc2:	4b1c      	ldr	r3, [pc, #112]	; (8007c34 <xPortStartScheduler+0x134>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007bca:	4a1a      	ldr	r2, [pc, #104]	; (8007c34 <xPortStartScheduler+0x134>)
 8007bcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007bd6:	4b18      	ldr	r3, [pc, #96]	; (8007c38 <xPortStartScheduler+0x138>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a17      	ldr	r2, [pc, #92]	; (8007c38 <xPortStartScheduler+0x138>)
 8007bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007be0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007be2:	4b15      	ldr	r3, [pc, #84]	; (8007c38 <xPortStartScheduler+0x138>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a14      	ldr	r2, [pc, #80]	; (8007c38 <xPortStartScheduler+0x138>)
 8007be8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007bec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007bee:	f000 f8dd 	bl	8007dac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007bf2:	4b12      	ldr	r3, [pc, #72]	; (8007c3c <xPortStartScheduler+0x13c>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007bf8:	f000 f8fc 	bl	8007df4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007bfc:	4b10      	ldr	r3, [pc, #64]	; (8007c40 <xPortStartScheduler+0x140>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a0f      	ldr	r2, [pc, #60]	; (8007c40 <xPortStartScheduler+0x140>)
 8007c02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007c06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c08:	f7ff ff66 	bl	8007ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c0c:	f7ff fa90 	bl	8007130 <vTaskSwitchContext>
	prvTaskExitError();
 8007c10:	f7ff ff20 	bl	8007a54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3718      	adds	r7, #24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	e000ed00 	.word	0xe000ed00
 8007c24:	410fc271 	.word	0x410fc271
 8007c28:	410fc270 	.word	0x410fc270
 8007c2c:	e000e400 	.word	0xe000e400
 8007c30:	200003f8 	.word	0x200003f8
 8007c34:	200003fc 	.word	0x200003fc
 8007c38:	e000ed20 	.word	0xe000ed20
 8007c3c:	2000000c 	.word	0x2000000c
 8007c40:	e000ef34 	.word	0xe000ef34

08007c44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
	__asm volatile
 8007c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4e:	f383 8811 	msr	BASEPRI, r3
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	607b      	str	r3, [r7, #4]
}
 8007c5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c5e:	4b0f      	ldr	r3, [pc, #60]	; (8007c9c <vPortEnterCritical+0x58>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	3301      	adds	r3, #1
 8007c64:	4a0d      	ldr	r2, [pc, #52]	; (8007c9c <vPortEnterCritical+0x58>)
 8007c66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c68:	4b0c      	ldr	r3, [pc, #48]	; (8007c9c <vPortEnterCritical+0x58>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d10f      	bne.n	8007c90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c70:	4b0b      	ldr	r3, [pc, #44]	; (8007ca0 <vPortEnterCritical+0x5c>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00a      	beq.n	8007c90 <vPortEnterCritical+0x4c>
	__asm volatile
 8007c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7e:	f383 8811 	msr	BASEPRI, r3
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	603b      	str	r3, [r7, #0]
}
 8007c8c:	bf00      	nop
 8007c8e:	e7fe      	b.n	8007c8e <vPortEnterCritical+0x4a>
	}
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr
 8007c9c:	2000000c 	.word	0x2000000c
 8007ca0:	e000ed04 	.word	0xe000ed04

08007ca4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007caa:	4b12      	ldr	r3, [pc, #72]	; (8007cf4 <vPortExitCritical+0x50>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10a      	bne.n	8007cc8 <vPortExitCritical+0x24>
	__asm volatile
 8007cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb6:	f383 8811 	msr	BASEPRI, r3
 8007cba:	f3bf 8f6f 	isb	sy
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	607b      	str	r3, [r7, #4]
}
 8007cc4:	bf00      	nop
 8007cc6:	e7fe      	b.n	8007cc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007cc8:	4b0a      	ldr	r3, [pc, #40]	; (8007cf4 <vPortExitCritical+0x50>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	4a09      	ldr	r2, [pc, #36]	; (8007cf4 <vPortExitCritical+0x50>)
 8007cd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007cd2:	4b08      	ldr	r3, [pc, #32]	; (8007cf4 <vPortExitCritical+0x50>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d105      	bne.n	8007ce6 <vPortExitCritical+0x42>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	f383 8811 	msr	BASEPRI, r3
}
 8007ce4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ce6:	bf00      	nop
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	2000000c 	.word	0x2000000c
	...

08007d00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d00:	f3ef 8009 	mrs	r0, PSP
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	4b15      	ldr	r3, [pc, #84]	; (8007d60 <pxCurrentTCBConst>)
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	f01e 0f10 	tst.w	lr, #16
 8007d10:	bf08      	it	eq
 8007d12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d1a:	6010      	str	r0, [r2, #0]
 8007d1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d24:	f380 8811 	msr	BASEPRI, r0
 8007d28:	f3bf 8f4f 	dsb	sy
 8007d2c:	f3bf 8f6f 	isb	sy
 8007d30:	f7ff f9fe 	bl	8007130 <vTaskSwitchContext>
 8007d34:	f04f 0000 	mov.w	r0, #0
 8007d38:	f380 8811 	msr	BASEPRI, r0
 8007d3c:	bc09      	pop	{r0, r3}
 8007d3e:	6819      	ldr	r1, [r3, #0]
 8007d40:	6808      	ldr	r0, [r1, #0]
 8007d42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d46:	f01e 0f10 	tst.w	lr, #16
 8007d4a:	bf08      	it	eq
 8007d4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d50:	f380 8809 	msr	PSP, r0
 8007d54:	f3bf 8f6f 	isb	sy
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	f3af 8000 	nop.w

08007d60 <pxCurrentTCBConst>:
 8007d60:	200002cc 	.word	0x200002cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d64:	bf00      	nop
 8007d66:	bf00      	nop

08007d68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	607b      	str	r3, [r7, #4]
}
 8007d80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d82:	f7ff f91d 	bl	8006fc0 <xTaskIncrementTick>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d003      	beq.n	8007d94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d8c:	4b06      	ldr	r3, [pc, #24]	; (8007da8 <SysTick_Handler+0x40>)
 8007d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	2300      	movs	r3, #0
 8007d96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	f383 8811 	msr	BASEPRI, r3
}
 8007d9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007da0:	bf00      	nop
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	e000ed04 	.word	0xe000ed04

08007dac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007dac:	b480      	push	{r7}
 8007dae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007db0:	4b0b      	ldr	r3, [pc, #44]	; (8007de0 <vPortSetupTimerInterrupt+0x34>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007db6:	4b0b      	ldr	r3, [pc, #44]	; (8007de4 <vPortSetupTimerInterrupt+0x38>)
 8007db8:	2200      	movs	r2, #0
 8007dba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007dbc:	4b0a      	ldr	r3, [pc, #40]	; (8007de8 <vPortSetupTimerInterrupt+0x3c>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a0a      	ldr	r2, [pc, #40]	; (8007dec <vPortSetupTimerInterrupt+0x40>)
 8007dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc6:	099b      	lsrs	r3, r3, #6
 8007dc8:	4a09      	ldr	r2, [pc, #36]	; (8007df0 <vPortSetupTimerInterrupt+0x44>)
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007dce:	4b04      	ldr	r3, [pc, #16]	; (8007de0 <vPortSetupTimerInterrupt+0x34>)
 8007dd0:	2207      	movs	r2, #7
 8007dd2:	601a      	str	r2, [r3, #0]
}
 8007dd4:	bf00      	nop
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	e000e010 	.word	0xe000e010
 8007de4:	e000e018 	.word	0xe000e018
 8007de8:	20000000 	.word	0x20000000
 8007dec:	10624dd3 	.word	0x10624dd3
 8007df0:	e000e014 	.word	0xe000e014

08007df4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007df4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007e04 <vPortEnableVFP+0x10>
 8007df8:	6801      	ldr	r1, [r0, #0]
 8007dfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007dfe:	6001      	str	r1, [r0, #0]
 8007e00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e02:	bf00      	nop
 8007e04:	e000ed88 	.word	0xe000ed88

08007e08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e0e:	f3ef 8305 	mrs	r3, IPSR
 8007e12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2b0f      	cmp	r3, #15
 8007e18:	d914      	bls.n	8007e44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e1a:	4a17      	ldr	r2, [pc, #92]	; (8007e78 <vPortValidateInterruptPriority+0x70>)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	4413      	add	r3, r2
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e24:	4b15      	ldr	r3, [pc, #84]	; (8007e7c <vPortValidateInterruptPriority+0x74>)
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	7afa      	ldrb	r2, [r7, #11]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d20a      	bcs.n	8007e44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e32:	f383 8811 	msr	BASEPRI, r3
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	607b      	str	r3, [r7, #4]
}
 8007e40:	bf00      	nop
 8007e42:	e7fe      	b.n	8007e42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e44:	4b0e      	ldr	r3, [pc, #56]	; (8007e80 <vPortValidateInterruptPriority+0x78>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007e4c:	4b0d      	ldr	r3, [pc, #52]	; (8007e84 <vPortValidateInterruptPriority+0x7c>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d90a      	bls.n	8007e6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e58:	f383 8811 	msr	BASEPRI, r3
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	603b      	str	r3, [r7, #0]
}
 8007e66:	bf00      	nop
 8007e68:	e7fe      	b.n	8007e68 <vPortValidateInterruptPriority+0x60>
	}
 8007e6a:	bf00      	nop
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	e000e3f0 	.word	0xe000e3f0
 8007e7c:	200003f8 	.word	0x200003f8
 8007e80:	e000ed0c 	.word	0xe000ed0c
 8007e84:	200003fc 	.word	0x200003fc

08007e88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b08a      	sub	sp, #40	; 0x28
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e90:	2300      	movs	r3, #0
 8007e92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e94:	f7fe ffea 	bl	8006e6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e98:	4b5b      	ldr	r3, [pc, #364]	; (8008008 <pvPortMalloc+0x180>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d101      	bne.n	8007ea4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ea0:	f000 f920 	bl	80080e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ea4:	4b59      	ldr	r3, [pc, #356]	; (800800c <pvPortMalloc+0x184>)
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4013      	ands	r3, r2
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f040 8093 	bne.w	8007fd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d01d      	beq.n	8007ef4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007eb8:	2208      	movs	r2, #8
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f003 0307 	and.w	r3, r3, #7
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d014      	beq.n	8007ef4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f023 0307 	bic.w	r3, r3, #7
 8007ed0:	3308      	adds	r3, #8
 8007ed2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f003 0307 	and.w	r3, r3, #7
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00a      	beq.n	8007ef4 <pvPortMalloc+0x6c>
	__asm volatile
 8007ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee2:	f383 8811 	msr	BASEPRI, r3
 8007ee6:	f3bf 8f6f 	isb	sy
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	617b      	str	r3, [r7, #20]
}
 8007ef0:	bf00      	nop
 8007ef2:	e7fe      	b.n	8007ef2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d06e      	beq.n	8007fd8 <pvPortMalloc+0x150>
 8007efa:	4b45      	ldr	r3, [pc, #276]	; (8008010 <pvPortMalloc+0x188>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d869      	bhi.n	8007fd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f04:	4b43      	ldr	r3, [pc, #268]	; (8008014 <pvPortMalloc+0x18c>)
 8007f06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f08:	4b42      	ldr	r3, [pc, #264]	; (8008014 <pvPortMalloc+0x18c>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f0e:	e004      	b.n	8007f1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d903      	bls.n	8007f2c <pvPortMalloc+0xa4>
 8007f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1f1      	bne.n	8007f10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f2c:	4b36      	ldr	r3, [pc, #216]	; (8008008 <pvPortMalloc+0x180>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d050      	beq.n	8007fd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f36:	6a3b      	ldr	r3, [r7, #32]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2208      	movs	r2, #8
 8007f3c:	4413      	add	r3, r2
 8007f3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	6a3b      	ldr	r3, [r7, #32]
 8007f46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	1ad2      	subs	r2, r2, r3
 8007f50:	2308      	movs	r3, #8
 8007f52:	005b      	lsls	r3, r3, #1
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d91f      	bls.n	8007f98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	f003 0307 	and.w	r3, r3, #7
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00a      	beq.n	8007f80 <pvPortMalloc+0xf8>
	__asm volatile
 8007f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6e:	f383 8811 	msr	BASEPRI, r3
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	613b      	str	r3, [r7, #16]
}
 8007f7c:	bf00      	nop
 8007f7e:	e7fe      	b.n	8007f7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f82:	685a      	ldr	r2, [r3, #4]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	1ad2      	subs	r2, r2, r3
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f92:	69b8      	ldr	r0, [r7, #24]
 8007f94:	f000 f908 	bl	80081a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f98:	4b1d      	ldr	r3, [pc, #116]	; (8008010 <pvPortMalloc+0x188>)
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	1ad3      	subs	r3, r2, r3
 8007fa2:	4a1b      	ldr	r2, [pc, #108]	; (8008010 <pvPortMalloc+0x188>)
 8007fa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007fa6:	4b1a      	ldr	r3, [pc, #104]	; (8008010 <pvPortMalloc+0x188>)
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	4b1b      	ldr	r3, [pc, #108]	; (8008018 <pvPortMalloc+0x190>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d203      	bcs.n	8007fba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007fb2:	4b17      	ldr	r3, [pc, #92]	; (8008010 <pvPortMalloc+0x188>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a18      	ldr	r2, [pc, #96]	; (8008018 <pvPortMalloc+0x190>)
 8007fb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	4b13      	ldr	r3, [pc, #76]	; (800800c <pvPortMalloc+0x184>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	431a      	orrs	r2, r3
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fca:	2200      	movs	r2, #0
 8007fcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007fce:	4b13      	ldr	r3, [pc, #76]	; (800801c <pvPortMalloc+0x194>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	4a11      	ldr	r2, [pc, #68]	; (800801c <pvPortMalloc+0x194>)
 8007fd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007fd8:	f7fe ff56 	bl	8006e88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	f003 0307 	and.w	r3, r3, #7
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00a      	beq.n	8007ffc <pvPortMalloc+0x174>
	__asm volatile
 8007fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fea:	f383 8811 	msr	BASEPRI, r3
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	f3bf 8f4f 	dsb	sy
 8007ff6:	60fb      	str	r3, [r7, #12]
}
 8007ff8:	bf00      	nop
 8007ffa:	e7fe      	b.n	8007ffa <pvPortMalloc+0x172>
	return pvReturn;
 8007ffc:	69fb      	ldr	r3, [r7, #28]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3728      	adds	r7, #40	; 0x28
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	20004008 	.word	0x20004008
 800800c:	2000401c 	.word	0x2000401c
 8008010:	2000400c 	.word	0x2000400c
 8008014:	20004000 	.word	0x20004000
 8008018:	20004010 	.word	0x20004010
 800801c:	20004014 	.word	0x20004014

08008020 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d04d      	beq.n	80080ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008032:	2308      	movs	r3, #8
 8008034:	425b      	negs	r3, r3
 8008036:	697a      	ldr	r2, [r7, #20]
 8008038:	4413      	add	r3, r2
 800803a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	685a      	ldr	r2, [r3, #4]
 8008044:	4b24      	ldr	r3, [pc, #144]	; (80080d8 <vPortFree+0xb8>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4013      	ands	r3, r2
 800804a:	2b00      	cmp	r3, #0
 800804c:	d10a      	bne.n	8008064 <vPortFree+0x44>
	__asm volatile
 800804e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	60fb      	str	r3, [r7, #12]
}
 8008060:	bf00      	nop
 8008062:	e7fe      	b.n	8008062 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00a      	beq.n	8008082 <vPortFree+0x62>
	__asm volatile
 800806c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008070:	f383 8811 	msr	BASEPRI, r3
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	60bb      	str	r3, [r7, #8]
}
 800807e:	bf00      	nop
 8008080:	e7fe      	b.n	8008080 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	685a      	ldr	r2, [r3, #4]
 8008086:	4b14      	ldr	r3, [pc, #80]	; (80080d8 <vPortFree+0xb8>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4013      	ands	r3, r2
 800808c:	2b00      	cmp	r3, #0
 800808e:	d01e      	beq.n	80080ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d11a      	bne.n	80080ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	685a      	ldr	r2, [r3, #4]
 800809c:	4b0e      	ldr	r3, [pc, #56]	; (80080d8 <vPortFree+0xb8>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	43db      	mvns	r3, r3
 80080a2:	401a      	ands	r2, r3
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80080a8:	f7fe fee0 	bl	8006e6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	685a      	ldr	r2, [r3, #4]
 80080b0:	4b0a      	ldr	r3, [pc, #40]	; (80080dc <vPortFree+0xbc>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4413      	add	r3, r2
 80080b6:	4a09      	ldr	r2, [pc, #36]	; (80080dc <vPortFree+0xbc>)
 80080b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80080ba:	6938      	ldr	r0, [r7, #16]
 80080bc:	f000 f874 	bl	80081a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80080c0:	4b07      	ldr	r3, [pc, #28]	; (80080e0 <vPortFree+0xc0>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	3301      	adds	r3, #1
 80080c6:	4a06      	ldr	r2, [pc, #24]	; (80080e0 <vPortFree+0xc0>)
 80080c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80080ca:	f7fe fedd 	bl	8006e88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80080ce:	bf00      	nop
 80080d0:	3718      	adds	r7, #24
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	2000401c 	.word	0x2000401c
 80080dc:	2000400c 	.word	0x2000400c
 80080e0:	20004018 	.word	0x20004018

080080e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80080ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80080ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80080f0:	4b27      	ldr	r3, [pc, #156]	; (8008190 <prvHeapInit+0xac>)
 80080f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f003 0307 	and.w	r3, r3, #7
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00c      	beq.n	8008118 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3307      	adds	r3, #7
 8008102:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f023 0307 	bic.w	r3, r3, #7
 800810a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	4a1f      	ldr	r2, [pc, #124]	; (8008190 <prvHeapInit+0xac>)
 8008114:	4413      	add	r3, r2
 8008116:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800811c:	4a1d      	ldr	r2, [pc, #116]	; (8008194 <prvHeapInit+0xb0>)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008122:	4b1c      	ldr	r3, [pc, #112]	; (8008194 <prvHeapInit+0xb0>)
 8008124:	2200      	movs	r2, #0
 8008126:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	68ba      	ldr	r2, [r7, #8]
 800812c:	4413      	add	r3, r2
 800812e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008130:	2208      	movs	r2, #8
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	1a9b      	subs	r3, r3, r2
 8008136:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f023 0307 	bic.w	r3, r3, #7
 800813e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	4a15      	ldr	r2, [pc, #84]	; (8008198 <prvHeapInit+0xb4>)
 8008144:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008146:	4b14      	ldr	r3, [pc, #80]	; (8008198 <prvHeapInit+0xb4>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2200      	movs	r2, #0
 800814c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800814e:	4b12      	ldr	r3, [pc, #72]	; (8008198 <prvHeapInit+0xb4>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2200      	movs	r2, #0
 8008154:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	1ad2      	subs	r2, r2, r3
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008164:	4b0c      	ldr	r3, [pc, #48]	; (8008198 <prvHeapInit+0xb4>)
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	4a0a      	ldr	r2, [pc, #40]	; (800819c <prvHeapInit+0xb8>)
 8008172:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	4a09      	ldr	r2, [pc, #36]	; (80081a0 <prvHeapInit+0xbc>)
 800817a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800817c:	4b09      	ldr	r3, [pc, #36]	; (80081a4 <prvHeapInit+0xc0>)
 800817e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008182:	601a      	str	r2, [r3, #0]
}
 8008184:	bf00      	nop
 8008186:	3714      	adds	r7, #20
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr
 8008190:	20000400 	.word	0x20000400
 8008194:	20004000 	.word	0x20004000
 8008198:	20004008 	.word	0x20004008
 800819c:	20004010 	.word	0x20004010
 80081a0:	2000400c 	.word	0x2000400c
 80081a4:	2000401c 	.word	0x2000401c

080081a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80081b0:	4b28      	ldr	r3, [pc, #160]	; (8008254 <prvInsertBlockIntoFreeList+0xac>)
 80081b2:	60fb      	str	r3, [r7, #12]
 80081b4:	e002      	b.n	80081bc <prvInsertBlockIntoFreeList+0x14>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	60fb      	str	r3, [r7, #12]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d8f7      	bhi.n	80081b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	4413      	add	r3, r2
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d108      	bne.n	80081ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	685a      	ldr	r2, [r3, #4]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	441a      	add	r2, r3
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	68ba      	ldr	r2, [r7, #8]
 80081f4:	441a      	add	r2, r3
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d118      	bne.n	8008230 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	4b15      	ldr	r3, [pc, #84]	; (8008258 <prvInsertBlockIntoFreeList+0xb0>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	429a      	cmp	r2, r3
 8008208:	d00d      	beq.n	8008226 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	685a      	ldr	r2, [r3, #4]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	441a      	add	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	601a      	str	r2, [r3, #0]
 8008224:	e008      	b.n	8008238 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008226:	4b0c      	ldr	r3, [pc, #48]	; (8008258 <prvInsertBlockIntoFreeList+0xb0>)
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	601a      	str	r2, [r3, #0]
 800822e:	e003      	b.n	8008238 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	429a      	cmp	r2, r3
 800823e:	d002      	beq.n	8008246 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008246:	bf00      	nop
 8008248:	3714      	adds	r7, #20
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	20004000 	.word	0x20004000
 8008258:	20004008 	.word	0x20004008

0800825c <__libc_init_array>:
 800825c:	b570      	push	{r4, r5, r6, lr}
 800825e:	4d0d      	ldr	r5, [pc, #52]	; (8008294 <__libc_init_array+0x38>)
 8008260:	4c0d      	ldr	r4, [pc, #52]	; (8008298 <__libc_init_array+0x3c>)
 8008262:	1b64      	subs	r4, r4, r5
 8008264:	10a4      	asrs	r4, r4, #2
 8008266:	2600      	movs	r6, #0
 8008268:	42a6      	cmp	r6, r4
 800826a:	d109      	bne.n	8008280 <__libc_init_array+0x24>
 800826c:	4d0b      	ldr	r5, [pc, #44]	; (800829c <__libc_init_array+0x40>)
 800826e:	4c0c      	ldr	r4, [pc, #48]	; (80082a0 <__libc_init_array+0x44>)
 8008270:	f000 f82e 	bl	80082d0 <_init>
 8008274:	1b64      	subs	r4, r4, r5
 8008276:	10a4      	asrs	r4, r4, #2
 8008278:	2600      	movs	r6, #0
 800827a:	42a6      	cmp	r6, r4
 800827c:	d105      	bne.n	800828a <__libc_init_array+0x2e>
 800827e:	bd70      	pop	{r4, r5, r6, pc}
 8008280:	f855 3b04 	ldr.w	r3, [r5], #4
 8008284:	4798      	blx	r3
 8008286:	3601      	adds	r6, #1
 8008288:	e7ee      	b.n	8008268 <__libc_init_array+0xc>
 800828a:	f855 3b04 	ldr.w	r3, [r5], #4
 800828e:	4798      	blx	r3
 8008290:	3601      	adds	r6, #1
 8008292:	e7f2      	b.n	800827a <__libc_init_array+0x1e>
 8008294:	08008418 	.word	0x08008418
 8008298:	08008418 	.word	0x08008418
 800829c:	08008418 	.word	0x08008418
 80082a0:	0800841c 	.word	0x0800841c

080082a4 <memcpy>:
 80082a4:	440a      	add	r2, r1
 80082a6:	4291      	cmp	r1, r2
 80082a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80082ac:	d100      	bne.n	80082b0 <memcpy+0xc>
 80082ae:	4770      	bx	lr
 80082b0:	b510      	push	{r4, lr}
 80082b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082ba:	4291      	cmp	r1, r2
 80082bc:	d1f9      	bne.n	80082b2 <memcpy+0xe>
 80082be:	bd10      	pop	{r4, pc}

080082c0 <memset>:
 80082c0:	4402      	add	r2, r0
 80082c2:	4603      	mov	r3, r0
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d100      	bne.n	80082ca <memset+0xa>
 80082c8:	4770      	bx	lr
 80082ca:	f803 1b01 	strb.w	r1, [r3], #1
 80082ce:	e7f9      	b.n	80082c4 <memset+0x4>

080082d0 <_init>:
 80082d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d2:	bf00      	nop
 80082d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082d6:	bc08      	pop	{r3}
 80082d8:	469e      	mov	lr, r3
 80082da:	4770      	bx	lr

080082dc <_fini>:
 80082dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082de:	bf00      	nop
 80082e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082e2:	bc08      	pop	{r3}
 80082e4:	469e      	mov	lr, r3
 80082e6:	4770      	bx	lr
