
3ARA-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  08008344  08008344  00018344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008684  08008684  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008684  08008684  00018684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800868c  0800868c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800868c  0800868c  0001868c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008690  08008690  00018690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041bc  20000078  0800870c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004234  0800870c  00024234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dee3  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000462e  00000000  00000000  0003df8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015f8  00000000  00000000  000425c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001408  00000000  00000000  00043bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025cea  00000000  00000000  00044fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013b44  00000000  00000000  0006acaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8bd1  00000000  00000000  0007e7ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001573bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cfc  00000000  00000000  0015743c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800832c 	.word	0x0800832c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800832c 	.word	0x0800832c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	0a5a      	lsrs	r2, r3, #9
 80004f0:	490f      	ldr	r1, [pc, #60]	; (8000530 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80004f2:	fba1 1202 	umull	r1, r2, r1, r2
 80004f6:	09d2      	lsrs	r2, r2, #7
 80004f8:	490e      	ldr	r1, [pc, #56]	; (8000534 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80004fa:	fb01 f202 	mul.w	r2, r1, r2
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	0a5b      	lsrs	r3, r3, #9
 8000508:	4a09      	ldr	r2, [pc, #36]	; (8000530 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800050a:	fba2 2303 	umull	r2, r3, r2, r3
 800050e:	09db      	lsrs	r3, r3, #7
 8000510:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	441a      	add	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	68fa      	ldr	r2, [r7, #12]
 8000522:	601a      	str	r2, [r3, #0]
}
 8000524:	bf00      	nop
 8000526:	3714      	adds	r7, #20
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	00044b83 	.word	0x00044b83
 8000534:	3b9aca00 	.word	0x3b9aca00

08000538 <robotInfoInit>:
 *      Author: Ignacio
 */

#include "3ARAInfo.h"

void robotInfoInit(RobotInfoHandler *info_handler, osMutexId *mutex){
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
	info_handler->mutexHandler = mutex;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	683a      	ldr	r2, [r7, #0]
 8000546:	60da      	str	r2, [r3, #12]
	info_handler->angle_1 = 0;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f04f 0200 	mov.w	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
	info_handler->angle_2 = 0;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	f04f 0200 	mov.w	r2, #0
 8000556:	605a      	str	r2, [r3, #4]
	info_handler->angle_3 = 0;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f04f 0200 	mov.w	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <_ZN7EncoderC1EP17TIM_HandleTypeDeff>:
#include "Encoder.hpp"

Encoder::Encoder(TIM_HandleTypeDef* encoder_timer, float count_per_turn){
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	ed87 0a01 	vstr	s0, [r7, #4]
	timer = encoder_timer;
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	68ba      	ldr	r2, [r7, #8]
 800057e:	601a      	str	r2, [r3, #0]
	encoder_resolution = 360.0f / count_per_turn;
 8000580:	eddf 6a09 	vldr	s13, [pc, #36]	; 80005a8 <_ZN7EncoderC1EP17TIM_HandleTypeDeff+0x3c>
 8000584:	ed97 7a01 	vldr	s14, [r7, #4]
 8000588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	edc3 7a02 	vstr	s15, [r3, #8]
	HAL_TIM_Encoder_Start(timer, TIM_CHANNEL_ALL);
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	213c      	movs	r1, #60	; 0x3c
 8000598:	4618      	mov	r0, r3
 800059a:	f004 f8e9 	bl	8004770 <HAL_TIM_Encoder_Start>
}
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	4618      	mov	r0, r3
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	43b40000 	.word	0x43b40000

080005ac <_ZN5MotorC1ER12MotorChannelR3PinS3_>:
#include "Motor.hpp"
#include "tim.h"
#include "stm32f4xx_hal_gpio.h"

Motor::Motor(MotorChannel &motor_timer, Pin &motor_1, Pin &motor_2){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
 80005b8:	603b      	str	r3, [r7, #0]
	gpio_pin_1 = motor_1.pin;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	889a      	ldrh	r2, [r3, #4]
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	801a      	strh	r2, [r3, #0]
	gpio_pin_2 = motor_2.pin;
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	889a      	ldrh	r2, [r3, #4]
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	805a      	strh	r2, [r3, #2]
	gpio_port_1 = motor_1.port;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	605a      	str	r2, [r3, #4]
	gpio_port_2 = motor_2.port;
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	609a      	str	r2, [r3, #8]
	channel = motor_timer.channel;
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	685a      	ldr	r2, [r3, #4]
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	611a      	str	r2, [r3, #16]
	timer = motor_timer.timer;
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Start(motor_timer.timer, motor_timer.channel);
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	4619      	mov	r1, r3
 80005f4:	4610      	mov	r0, r2
 80005f6:	f003 ffeb 	bl	80045d0 <HAL_TIM_PWM_Start>
}
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	4618      	mov	r0, r3
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <_ZN5Motor8turnLeftEm>:

void Motor::turnLeft(uint32_t duty){
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(gpio_port_1, gpio_pin_1, GPIO_PIN_SET);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6858      	ldr	r0, [r3, #4]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	2201      	movs	r2, #1
 8000618:	4619      	mov	r1, r3
 800061a:	f003 fa8d 	bl	8003b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio_port_2, gpio_pin_2, GPIO_PIN_RESET);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6898      	ldr	r0, [r3, #8]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	885b      	ldrh	r3, [r3, #2]
 8000626:	2200      	movs	r2, #0
 8000628:	4619      	mov	r1, r3
 800062a:	f003 fa85 	bl	8003b38 <HAL_GPIO_WritePin>
	switch(channel){
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	691b      	ldr	r3, [r3, #16]
 8000632:	2b0c      	cmp	r3, #12
 8000634:	d834      	bhi.n	80006a0 <_ZN5Motor8turnLeftEm+0x9c>
 8000636:	a201      	add	r2, pc, #4	; (adr r2, 800063c <_ZN5Motor8turnLeftEm+0x38>)
 8000638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800063c:	08000671 	.word	0x08000671
 8000640:	080006a1 	.word	0x080006a1
 8000644:	080006a1 	.word	0x080006a1
 8000648:	080006a1 	.word	0x080006a1
 800064c:	0800067d 	.word	0x0800067d
 8000650:	080006a1 	.word	0x080006a1
 8000654:	080006a1 	.word	0x080006a1
 8000658:	080006a1 	.word	0x080006a1
 800065c:	08000689 	.word	0x08000689
 8000660:	080006a1 	.word	0x080006a1
 8000664:	080006a1 	.word	0x080006a1
 8000668:	080006a1 	.word	0x080006a1
 800066c:	08000695 	.word	0x08000695
		case TIM_CHANNEL_1:
			timer->Instance -> CCR1 = duty;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	683a      	ldr	r2, [r7, #0]
 8000678:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800067a:	e011      	b.n	80006a0 <_ZN5Motor8turnLeftEm+0x9c>
		case TIM_CHANNEL_2:
			timer->Instance -> CCR2 = duty;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	683a      	ldr	r2, [r7, #0]
 8000684:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8000686:	e00b      	b.n	80006a0 <_ZN5Motor8turnLeftEm+0x9c>
		case TIM_CHANNEL_3:
			timer->Instance -> CCR3 = duty;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	683a      	ldr	r2, [r7, #0]
 8000690:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000692:	e005      	b.n	80006a0 <_ZN5Motor8turnLeftEm+0x9c>
		case TIM_CHANNEL_4:
			timer->Instance -> CCR4 = duty;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	683a      	ldr	r2, [r7, #0]
 800069c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800069e:	bf00      	nop
	}
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <PID1Node>:
#include "Task/PID/PID.hpp"
#include "Motor.hpp"
#include "Encoder.hpp"
#include "Settings.h"

void PID1Node(RobotInfoHandler *robot_info_handler){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b090      	sub	sp, #64	; 0x40
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]

	// Pin definition for motor 1
	Pin motor_1_a{MOTOR_1_L_GPIO_Port, MOTOR_1_L_Pin};
 80006b0:	4a21      	ldr	r2, [pc, #132]	; (8000738 <PID1Node+0x90>)
 80006b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ba:	e883 0003 	stmia.w	r3, {r0, r1}
	Pin motor_1_b{MOTOR_1_R_GPIO_Port, MOTOR_1_R_Pin};
 80006be:	4a1f      	ldr	r2, [pc, #124]	; (800073c <PID1Node+0x94>)
 80006c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006c8:	e883 0003 	stmia.w	r3, {r0, r1}

	// Timer definition for motor 1
	MotorChannel motor_1_timer{&MOTOR_1_TIMER, MOTOR_1_CHANNEL};
 80006cc:	4a1c      	ldr	r2, [pc, #112]	; (8000740 <PID1Node+0x98>)
 80006ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006d6:	e883 0003 	stmia.w	r3, {r0, r1}

	// Motor 1 object definition
	Motor motor1(motor_1_timer, motor_1_a, motor_1_b);
 80006da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006de:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80006e2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80006e6:	f107 0014 	add.w	r0, r7, #20
 80006ea:	f7ff ff5f 	bl	80005ac <_ZN5MotorC1ER12MotorChannelR3PinS3_>

	// Encoder 1 object definition
	Encoder encoder1(&ENCODER_1_TIMER, ENCODER_STEPS);
 80006ee:	f107 0308 	add.w	r3, r7, #8
 80006f2:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8000744 <PID1Node+0x9c>
 80006f6:	4914      	ldr	r1, [pc, #80]	; (8000748 <PID1Node+0xa0>)
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ff37 	bl	800056c <_ZN7EncoderC1EP17TIM_HandleTypeDeff>

	while(1){
		if(robot_info_handler->angle_1 == 1) motor1.turnLeft(1000);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	edd3 7a00 	vldr	s15, [r3]
 8000704:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000708:	eef4 7a47 	vcmp.f32	s15, s14
 800070c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000710:	d107      	bne.n	8000722 <PID1Node+0x7a>
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff72 	bl	8000604 <_ZN5Motor8turnLeftEm>
 8000720:	e005      	b.n	800072e <PID1Node+0x86>
		else motor1.turnLeft(0);
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ff6b 	bl	8000604 <_ZN5Motor8turnLeftEm>
		osDelay(50);
 800072e:	2032      	movs	r0, #50	; 0x32
 8000730:	f005 fd9f 	bl	8006272 <osDelay>
		if(robot_info_handler->angle_1 == 1) motor1.turnLeft(1000);
 8000734:	e7e3      	b.n	80006fe <PID1Node+0x56>
 8000736:	bf00      	nop
 8000738:	08008344 	.word	0x08008344
 800073c:	0800834c 	.word	0x0800834c
 8000740:	08008354 	.word	0x08008354
 8000744:	447a0000 	.word	0x447a0000
 8000748:	200040ac 	.word	0x200040ac

0800074c <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2200      	movs	r2, #0
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4618      	mov	r0, r3
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
	...

08000770 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <_ZN3ros3MsgC1Ev+0x1c>)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4618      	mov	r0, r3
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	08008654 	.word	0x08008654

08000790 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
      data()
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ffe8 	bl	8000770 <_ZN3ros3MsgC1Ev>
 80007a0:	4a06      	ldr	r2, [pc, #24]	; (80007bc <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	3304      	adds	r3, #4
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ffce 	bl	800074c <_ZN3ros4TimeC1Ev>
    {
    }
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	0800863c 	.word	0x0800863c

080007c0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6859      	ldr	r1, [r3, #4]
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	683a      	ldr	r2, [r7, #0]
 80007d6:	4413      	add	r3, r2
 80007d8:	b2ca      	uxtb	r2, r1
 80007da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	0a19      	lsrs	r1, r3, #8
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	3301      	adds	r3, #1
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	4413      	add	r3, r2
 80007ea:	b2ca      	uxtb	r2, r1
 80007ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	0c19      	lsrs	r1, r3, #16
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	3302      	adds	r3, #2
 80007f8:	683a      	ldr	r2, [r7, #0]
 80007fa:	4413      	add	r3, r2
 80007fc:	b2ca      	uxtb	r2, r1
 80007fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	0e19      	lsrs	r1, r3, #24
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	3303      	adds	r3, #3
 800080a:	683a      	ldr	r2, [r7, #0]
 800080c:	4413      	add	r3, r2
 800080e:	b2ca      	uxtb	r2, r1
 8000810:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	3304      	adds	r3, #4
 8000816:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6899      	ldr	r1, [r3, #8]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	4413      	add	r3, r2
 8000822:	b2ca      	uxtb	r2, r1
 8000824:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	0a19      	lsrs	r1, r3, #8
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	3301      	adds	r3, #1
 8000830:	683a      	ldr	r2, [r7, #0]
 8000832:	4413      	add	r3, r2
 8000834:	b2ca      	uxtb	r2, r1
 8000836:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	0c19      	lsrs	r1, r3, #16
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	3302      	adds	r3, #2
 8000842:	683a      	ldr	r2, [r7, #0]
 8000844:	4413      	add	r3, r2
 8000846:	b2ca      	uxtb	r2, r1
 8000848:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	0e19      	lsrs	r1, r3, #24
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	3303      	adds	r3, #3
 8000854:	683a      	ldr	r2, [r7, #0]
 8000856:	4413      	add	r3, r2
 8000858:	b2ca      	uxtb	r2, r1
 800085a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	3304      	adds	r3, #4
 8000860:	60fb      	str	r3, [r7, #12]
      return offset;
 8000862:	68fb      	ldr	r3, [r7, #12]
    }
 8000864:	4618      	mov	r0, r3
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	683a      	ldr	r2, [r7, #0]
 8000882:	4413      	add	r3, r2
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	461a      	mov	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	685a      	ldr	r2, [r3, #4]
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	3301      	adds	r3, #1
 8000894:	6839      	ldr	r1, [r7, #0]
 8000896:	440b      	add	r3, r1
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	021b      	lsls	r3, r3, #8
 800089c:	431a      	orrs	r2, r3
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	685a      	ldr	r2, [r3, #4]
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	3302      	adds	r3, #2
 80008aa:	6839      	ldr	r1, [r7, #0]
 80008ac:	440b      	add	r3, r1
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	041b      	lsls	r3, r3, #16
 80008b2:	431a      	orrs	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	685a      	ldr	r2, [r3, #4]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	3303      	adds	r3, #3
 80008c0:	6839      	ldr	r1, [r7, #0]
 80008c2:	440b      	add	r3, r1
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	061b      	lsls	r3, r3, #24
 80008c8:	431a      	orrs	r2, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	3304      	adds	r3, #4
 80008d2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	683a      	ldr	r2, [r7, #0]
 80008d8:	4413      	add	r3, r2
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	461a      	mov	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	689a      	ldr	r2, [r3, #8]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	3301      	adds	r3, #1
 80008ea:	6839      	ldr	r1, [r7, #0]
 80008ec:	440b      	add	r3, r1
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	021b      	lsls	r3, r3, #8
 80008f2:	431a      	orrs	r2, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689a      	ldr	r2, [r3, #8]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	3302      	adds	r3, #2
 8000900:	6839      	ldr	r1, [r7, #0]
 8000902:	440b      	add	r3, r1
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	041b      	lsls	r3, r3, #16
 8000908:	431a      	orrs	r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	689a      	ldr	r2, [r3, #8]
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	3303      	adds	r3, #3
 8000916:	6839      	ldr	r1, [r7, #0]
 8000918:	440b      	add	r3, r1
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	061b      	lsls	r3, r3, #24
 800091e:	431a      	orrs	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	3304      	adds	r3, #4
 8000928:	60fb      	str	r3, [r7, #12]
     return offset;
 800092a:	68fb      	ldr	r3, [r7, #12]
    }
 800092c:	4618      	mov	r0, r3
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000942:	4618      	mov	r0, r3
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	0800835c 	.word	0x0800835c

08000954 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800095e:	4618      	mov	r0, r3
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	0800836c 	.word	0x0800836c

08000970 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff fef8 	bl	8000770 <_ZN3ros3MsgC1Ev>
 8000980:	4a0b      	ldr	r2, [pc, #44]	; (80009b0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2200      	movs	r2, #0
 800098a:	809a      	strh	r2, [r3, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a09      	ldr	r2, [pc, #36]	; (80009b4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a07      	ldr	r2, [pc, #28]	; (80009b4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a06      	ldr	r2, [pc, #24]	; (80009b4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800099c:	611a      	str	r2, [r3, #16]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
    {
    }
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4618      	mov	r0, r3
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	08008624 	.word	0x08008624
 80009b4:	08008390 	.word	0x08008390

080009b8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	8899      	ldrh	r1, [r3, #4]
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	683a      	ldr	r2, [r7, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	b2ca      	uxtb	r2, r1
 80009d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	889b      	ldrh	r3, [r3, #4]
 80009d8:	0a1b      	lsrs	r3, r3, #8
 80009da:	b299      	uxth	r1, r3
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	3301      	adds	r3, #1
 80009e0:	683a      	ldr	r2, [r7, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	b2ca      	uxtb	r2, r1
 80009e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	3302      	adds	r3, #2
 80009ec:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fbec 	bl	80001d0 <strlen>
 80009f8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	683a      	ldr	r2, [r7, #0]
 80009fe:	4413      	add	r3, r2
 8000a00:	69b9      	ldr	r1, [r7, #24]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 ffc4 	bl	8001990 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	3304      	adds	r3, #4
 8000a0c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	683a      	ldr	r2, [r7, #0]
 8000a12:	18d0      	adds	r0, r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f007 fb3e 	bl	800809c <memcpy>
      offset += length_topic_name;
 8000a20:	69fa      	ldr	r2, [r7, #28]
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	4413      	add	r3, r2
 8000a26:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fbcf 	bl	80001d0 <strlen>
 8000a32:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	683a      	ldr	r2, [r7, #0]
 8000a38:	4413      	add	r3, r2
 8000a3a:	6979      	ldr	r1, [r7, #20]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 ffa7 	bl	8001990 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3304      	adds	r3, #4
 8000a46:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	683a      	ldr	r2, [r7, #0]
 8000a4c:	18d0      	adds	r0, r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	68db      	ldr	r3, [r3, #12]
 8000a52:	697a      	ldr	r2, [r7, #20]
 8000a54:	4619      	mov	r1, r3
 8000a56:	f007 fb21 	bl	800809c <memcpy>
      offset += length_message_type;
 8000a5a:	69fa      	ldr	r2, [r7, #28]
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	4413      	add	r3, r2
 8000a60:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	691b      	ldr	r3, [r3, #16]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fbb2 	bl	80001d0 <strlen>
 8000a6c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	683a      	ldr	r2, [r7, #0]
 8000a72:	4413      	add	r3, r2
 8000a74:	6939      	ldr	r1, [r7, #16]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 ff8a 	bl	8001990 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	3304      	adds	r3, #4
 8000a80:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	683a      	ldr	r2, [r7, #0]
 8000a86:	18d0      	adds	r0, r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	691b      	ldr	r3, [r3, #16]
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f007 fb04 	bl	800809c <memcpy>
      offset += length_md5sum;
 8000a94:	69fa      	ldr	r2, [r7, #28]
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	4413      	add	r3, r2
 8000a9a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000aa2:	68f9      	ldr	r1, [r7, #12]
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	683a      	ldr	r2, [r7, #0]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	b2ca      	uxtb	r2, r1
 8000aac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	0a19      	lsrs	r1, r3, #8
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	683a      	ldr	r2, [r7, #0]
 8000ab8:	4413      	add	r3, r2
 8000aba:	b2ca      	uxtb	r2, r1
 8000abc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	0c19      	lsrs	r1, r3, #16
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3302      	adds	r3, #2
 8000ac6:	683a      	ldr	r2, [r7, #0]
 8000ac8:	4413      	add	r3, r2
 8000aca:	b2ca      	uxtb	r2, r1
 8000acc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	0e19      	lsrs	r1, r3, #24
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3303      	adds	r3, #3
 8000ad6:	683a      	ldr	r2, [r7, #0]
 8000ad8:	4413      	add	r3, r2
 8000ada:	b2ca      	uxtb	r2, r1
 8000adc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	61fb      	str	r3, [r7, #28]
      return offset;
 8000ae4:	69fb      	ldr	r3, [r7, #28]
    }
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3720      	adds	r7, #32
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b08a      	sub	sp, #40	; 0x28
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
 8000af6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	683a      	ldr	r2, [r7, #0]
 8000b00:	4413      	add	r3, r2
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	889b      	ldrh	r3, [r3, #4]
 8000b0e:	b21a      	sxth	r2, r3
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	3301      	adds	r3, #1
 8000b14:	6839      	ldr	r1, [r7, #0]
 8000b16:	440b      	add	r3, r1
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	021b      	lsls	r3, r3, #8
 8000b1c:	b21b      	sxth	r3, r3
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	b21b      	sxth	r3, r3
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	3302      	adds	r3, #2
 8000b2c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	683a      	ldr	r2, [r7, #0]
 8000b32:	441a      	add	r2, r3
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4611      	mov	r1, r2
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 ff46 	bl	80019cc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	3304      	adds	r3, #4
 8000b44:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
 8000b4a:	69ba      	ldr	r2, [r7, #24]
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	4413      	add	r3, r2
 8000b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d20c      	bcs.n	8000b70 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000b56:	683a      	ldr	r2, [r7, #0]
 8000b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5a:	441a      	add	r2, r3
 8000b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	6839      	ldr	r1, [r7, #0]
 8000b62:	440b      	add	r3, r1
 8000b64:	7812      	ldrb	r2, [r2, #0]
 8000b66:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b6e:	e7ec      	b.n	8000b4a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	4413      	add	r3, r2
 8000b76:	3b01      	subs	r3, #1
 8000b78:	683a      	ldr	r2, [r7, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	683a      	ldr	r2, [r7, #0]
 8000b86:	441a      	add	r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	4413      	add	r3, r2
 8000b92:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	683a      	ldr	r2, [r7, #0]
 8000b98:	441a      	add	r2, r3
 8000b9a:	f107 0310 	add.w	r3, r7, #16
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 ff13 	bl	80019cc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	3304      	adds	r3, #4
 8000baa:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	623b      	str	r3, [r7, #32]
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	6a3a      	ldr	r2, [r7, #32]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d20c      	bcs.n	8000bd6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000bbc:	683a      	ldr	r2, [r7, #0]
 8000bbe:	6a3b      	ldr	r3, [r7, #32]
 8000bc0:	441a      	add	r2, r3
 8000bc2:	6a3b      	ldr	r3, [r7, #32]
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	6839      	ldr	r1, [r7, #0]
 8000bc8:	440b      	add	r3, r1
 8000bca:	7812      	ldrb	r2, [r2, #0]
 8000bcc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000bce:	6a3b      	ldr	r3, [r7, #32]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	623b      	str	r3, [r7, #32]
 8000bd4:	e7ec      	b.n	8000bb0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000bd6:	69ba      	ldr	r2, [r7, #24]
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	4413      	add	r3, r2
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	683a      	ldr	r2, [r7, #0]
 8000be0:	4413      	add	r3, r2
 8000be2:	2200      	movs	r2, #0
 8000be4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	3b01      	subs	r3, #1
 8000bea:	683a      	ldr	r2, [r7, #0]
 8000bec:	441a      	add	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000bf2:	69ba      	ldr	r2, [r7, #24]
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	683a      	ldr	r2, [r7, #0]
 8000bfe:	441a      	add	r2, r3
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	4611      	mov	r1, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 fee0 	bl	80019cc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	3304      	adds	r3, #4
 8000c10:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	61fb      	str	r3, [r7, #28]
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	69fa      	ldr	r2, [r7, #28]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d20c      	bcs.n	8000c3c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000c22:	683a      	ldr	r2, [r7, #0]
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	441a      	add	r2, r3
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	6839      	ldr	r1, [r7, #0]
 8000c2e:	440b      	add	r3, r1
 8000c30:	7812      	ldrb	r2, [r2, #0]
 8000c32:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	3301      	adds	r3, #1
 8000c38:	61fb      	str	r3, [r7, #28]
 8000c3a:	e7ec      	b.n	8000c16 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4413      	add	r3, r2
 8000c42:	3b01      	subs	r3, #1
 8000c44:	683a      	ldr	r2, [r7, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	683a      	ldr	r2, [r7, #0]
 8000c52:	441a      	add	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	6839      	ldr	r1, [r7, #0]
 8000c6a:	440a      	add	r2, r1
 8000c6c:	7812      	ldrb	r2, [r2, #0]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	3301      	adds	r3, #1
 8000c78:	6839      	ldr	r1, [r7, #0]
 8000c7a:	440b      	add	r3, r1
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	021b      	lsls	r3, r3, #8
 8000c80:	4313      	orrs	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000c84:	68ba      	ldr	r2, [r7, #8]
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	3302      	adds	r3, #2
 8000c8a:	6839      	ldr	r1, [r7, #0]
 8000c8c:	440b      	add	r3, r1
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	041b      	lsls	r3, r3, #16
 8000c92:	4313      	orrs	r3, r2
 8000c94:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	3303      	adds	r3, #3
 8000c9c:	6839      	ldr	r1, [r7, #0]
 8000c9e:	440b      	add	r3, r1
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	061b      	lsls	r3, r3, #24
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000ca8:	68ba      	ldr	r2, [r7, #8]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	61bb      	str	r3, [r7, #24]
     return offset;
 8000cb4:	69bb      	ldr	r3, [r7, #24]
    }
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3728      	adds	r7, #40	; 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000cca:	4618      	mov	r0, r3
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	08008394 	.word	0x08008394

08000cdc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	080083b0 	.word	0x080083b0

08000cf8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fd34 	bl	8000770 <_ZN3ros3MsgC1Ev>
 8000d08:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	711a      	strb	r2, [r3, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000d18:	609a      	str	r2, [r3, #8]
    {
    }
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	0800860c 	.word	0x0800860c
 8000d28:	08008390 	.word	0x08008390

08000d2c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	683a      	ldr	r2, [r7, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	7912      	ldrb	r2, [r2, #4]
 8000d44:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fa3d 	bl	80001d0 <strlen>
 8000d56:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	683a      	ldr	r2, [r7, #0]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	68b9      	ldr	r1, [r7, #8]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 fe15 	bl	8001990 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	683a      	ldr	r2, [r7, #0]
 8000d70:	18d0      	adds	r0, r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f007 f98f 	bl	800809c <memcpy>
      offset += length_msg;
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	4413      	add	r3, r2
 8000d84:	60fb      	str	r3, [r7, #12]
      return offset;
 8000d86:	68fb      	ldr	r3, [r7, #12]
    }
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	683a      	ldr	r2, [r7, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	781a      	ldrb	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	3301      	adds	r3, #1
 8000dae:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	683a      	ldr	r2, [r7, #0]
 8000db4:	441a      	add	r2, r3
 8000db6:	f107 030c 	add.w	r3, r7, #12
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 fe05 	bl	80019cc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d20c      	bcs.n	8000df2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	441a      	add	r2, r3
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	3b01      	subs	r3, #1
 8000de2:	6839      	ldr	r1, [r7, #0]
 8000de4:	440b      	add	r3, r1
 8000de6:	7812      	ldrb	r2, [r2, #0]
 8000de8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	3301      	adds	r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	e7ec      	b.n	8000dcc <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4413      	add	r3, r2
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	683a      	ldr	r2, [r7, #0]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	3b01      	subs	r3, #1
 8000e06:	683a      	ldr	r2, [r7, #0]
 8000e08:	441a      	add	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4413      	add	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
     return offset;
 8000e16:	693b      	ldr	r3, [r7, #16]
    }
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	080083d4 	.word	0x080083d4

08000e3c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000e46:	4618      	mov	r0, r3
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	080083e8 	.word	0x080083e8

08000e58 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fc84 	bl	8000770 <_ZN3ros3MsgC1Ev>
 8000e68:	4a11      	ldr	r2, [pc, #68]	; (8000eb0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	60da      	str	r2, [r3, #12]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f04f 0200 	mov.w	r2, #0
 8000e8c:	615a      	str	r2, [r3, #20]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	621a      	str	r2, [r3, #32]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	080085f4 	.word	0x080085f4

08000eb4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6859      	ldr	r1, [r3, #4]
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	b2ca      	uxtb	r2, r1
 8000ece:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	0a19      	lsrs	r1, r3, #8
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed8:	3301      	adds	r3, #1
 8000eda:	683a      	ldr	r2, [r7, #0]
 8000edc:	4413      	add	r3, r2
 8000ede:	b2ca      	uxtb	r2, r1
 8000ee0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	0c19      	lsrs	r1, r3, #16
 8000ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eea:	3302      	adds	r3, #2
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	b2ca      	uxtb	r2, r1
 8000ef2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	0e19      	lsrs	r1, r3, #24
 8000efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efc:	3303      	adds	r3, #3
 8000efe:	683a      	ldr	r2, [r7, #0]
 8000f00:	4413      	add	r3, r2
 8000f02:	b2ca      	uxtb	r2, r1
 8000f04:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f08:	3304      	adds	r3, #4
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	6a3a      	ldr	r2, [r7, #32]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d22b      	bcs.n	8000f72 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	68da      	ldr	r2, [r3, #12]
 8000f1e:	6a3b      	ldr	r3, [r7, #32]
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000f28:	6939      	ldr	r1, [r7, #16]
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	683a      	ldr	r2, [r7, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	b2ca      	uxtb	r2, r1
 8000f32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	0a19      	lsrs	r1, r3, #8
 8000f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	b2ca      	uxtb	r2, r1
 8000f42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	0c19      	lsrs	r1, r3, #16
 8000f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	683a      	ldr	r2, [r7, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	b2ca      	uxtb	r2, r1
 8000f52:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	0e19      	lsrs	r1, r3, #24
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	3303      	adds	r3, #3
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	b2ca      	uxtb	r2, r1
 8000f62:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f66:	3304      	adds	r3, #4
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000f6a:	6a3b      	ldr	r3, [r7, #32]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	623b      	str	r3, [r7, #32]
 8000f70:	e7ce      	b.n	8000f10 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6919      	ldr	r1, [r3, #16]
 8000f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	b2ca      	uxtb	r2, r1
 8000f7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	691b      	ldr	r3, [r3, #16]
 8000f84:	0a19      	lsrs	r1, r3, #8
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	3301      	adds	r3, #1
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	b2ca      	uxtb	r2, r1
 8000f90:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	691b      	ldr	r3, [r3, #16]
 8000f96:	0c19      	lsrs	r1, r3, #16
 8000f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	b2ca      	uxtb	r2, r1
 8000fa2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	691b      	ldr	r3, [r3, #16]
 8000fa8:	0e19      	lsrs	r1, r3, #24
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	3303      	adds	r3, #3
 8000fae:	683a      	ldr	r2, [r7, #0]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	b2ca      	uxtb	r2, r1
 8000fb4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	3304      	adds	r3, #4
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	691b      	ldr	r3, [r3, #16]
 8000fc4:	69fa      	ldr	r2, [r7, #28]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d22b      	bcs.n	8001022 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	699a      	ldr	r2, [r3, #24]
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4413      	add	r3, r2
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000fd8:	68f9      	ldr	r1, [r7, #12]
 8000fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	b2ca      	uxtb	r2, r1
 8000fe2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	0a19      	lsrs	r1, r3, #8
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fea:	3301      	adds	r3, #1
 8000fec:	683a      	ldr	r2, [r7, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	b2ca      	uxtb	r2, r1
 8000ff2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	0c19      	lsrs	r1, r3, #16
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	683a      	ldr	r2, [r7, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	b2ca      	uxtb	r2, r1
 8001002:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	0e19      	lsrs	r1, r3, #24
 8001008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100a:	3303      	adds	r3, #3
 800100c:	683a      	ldr	r2, [r7, #0]
 800100e:	4413      	add	r3, r2
 8001010:	b2ca      	uxtb	r2, r1
 8001012:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001016:	3304      	adds	r3, #4
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3301      	adds	r3, #1
 800101e:	61fb      	str	r3, [r7, #28]
 8001020:	e7ce      	b.n	8000fc0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	69d9      	ldr	r1, [r3, #28]
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	4413      	add	r3, r2
 800102c:	b2ca      	uxtb	r2, r1
 800102e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	69db      	ldr	r3, [r3, #28]
 8001034:	0a19      	lsrs	r1, r3, #8
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	3301      	adds	r3, #1
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	4413      	add	r3, r2
 800103e:	b2ca      	uxtb	r2, r1
 8001040:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	0c19      	lsrs	r1, r3, #16
 8001048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104a:	3302      	adds	r3, #2
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	4413      	add	r3, r2
 8001050:	b2ca      	uxtb	r2, r1
 8001052:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	69db      	ldr	r3, [r3, #28]
 8001058:	0e19      	lsrs	r1, r3, #24
 800105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105c:	3303      	adds	r3, #3
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	4413      	add	r3, r2
 8001062:	b2ca      	uxtb	r2, r1
 8001064:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	3304      	adds	r3, #4
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800106c:	2300      	movs	r3, #0
 800106e:	61bb      	str	r3, [r7, #24]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	429a      	cmp	r2, r3
 8001078:	d228      	bcs.n	80010cc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff f8a2 	bl	80001d0 <strlen>
 800108c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	4413      	add	r3, r2
 8001094:	6979      	ldr	r1, [r7, #20]
 8001096:	4618      	mov	r0, r3
 8001098:	f000 fc7a 	bl	8001990 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109e:	3304      	adds	r3, #4
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80010a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	18d0      	adds	r0, r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	4413      	add	r3, r2
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	4619      	mov	r1, r3
 80010b8:	f006 fff0 	bl	800809c <memcpy>
      offset += length_stringsi;
 80010bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	4413      	add	r3, r2
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	3301      	adds	r3, #1
 80010c8:	61bb      	str	r3, [r7, #24]
 80010ca:	e7d1      	b.n	8001070 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80010ce:	4618      	mov	r0, r3
 80010d0:	3728      	adds	r7, #40	; 0x28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b08e      	sub	sp, #56	; 0x38
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80010e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	4413      	add	r3, r2
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80010ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010f0:	3301      	adds	r3, #1
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	4413      	add	r3, r2
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	6a3a      	ldr	r2, [r7, #32]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001102:	3302      	adds	r3, #2
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	4413      	add	r3, r2
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	041b      	lsls	r3, r3, #16
 800110c:	6a3a      	ldr	r2, [r7, #32]
 800110e:	4313      	orrs	r3, r2
 8001110:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001114:	3303      	adds	r3, #3
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	4413      	add	r3, r2
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	061b      	lsls	r3, r3, #24
 800111e:	6a3a      	ldr	r2, [r7, #32]
 8001120:	4313      	orrs	r3, r2
 8001122:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001126:	3304      	adds	r3, #4
 8001128:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	6a3a      	ldr	r2, [r7, #32]
 8001130:	429a      	cmp	r2, r3
 8001132:	d90a      	bls.n	800114a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68da      	ldr	r2, [r3, #12]
 8001138:	6a3b      	ldr	r3, [r7, #32]
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4619      	mov	r1, r3
 800113e:	4610      	mov	r0, r2
 8001140:	f006 ffc0 	bl	80080c4 <realloc>
 8001144:	4602      	mov	r2, r0
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a3a      	ldr	r2, [r7, #32]
 800114e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001150:	2300      	movs	r3, #0
 8001152:	633b      	str	r3, [r7, #48]	; 0x30
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800115a:	429a      	cmp	r2, r3
 800115c:	d236      	bcs.n	80011cc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001166:	6839      	ldr	r1, [r7, #0]
 8001168:	440a      	add	r2, r1
 800116a:	7812      	ldrb	r2, [r2, #0]
 800116c:	4313      	orrs	r3, r2
 800116e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001174:	3301      	adds	r3, #1
 8001176:	6839      	ldr	r1, [r7, #0]
 8001178:	440b      	add	r3, r1
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	021b      	lsls	r3, r3, #8
 800117e:	4313      	orrs	r3, r2
 8001180:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001186:	3302      	adds	r3, #2
 8001188:	6839      	ldr	r1, [r7, #0]
 800118a:	440b      	add	r3, r1
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	041b      	lsls	r3, r3, #16
 8001190:	4313      	orrs	r3, r2
 8001192:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001198:	3303      	adds	r3, #3
 800119a:	6839      	ldr	r1, [r7, #0]
 800119c:	440b      	add	r3, r1
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	061b      	lsls	r3, r3, #24
 80011a2:	4313      	orrs	r3, r2
 80011a4:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80011ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ae:	3304      	adds	r3, #4
 80011b0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68da      	ldr	r2, [r3, #12]
 80011b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	3208      	adds	r2, #8
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80011c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011c6:	3301      	adds	r3, #1
 80011c8:	633b      	str	r3, [r7, #48]	; 0x30
 80011ca:	e7c3      	b.n	8001154 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80011cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	4413      	add	r3, r2
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80011d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011d8:	3301      	adds	r3, #1
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	4413      	add	r3, r2
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	69fa      	ldr	r2, [r7, #28]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80011e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ea:	3302      	adds	r3, #2
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	041b      	lsls	r3, r3, #16
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80011fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011fc:	3303      	adds	r3, #3
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	4413      	add	r3, r2
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	061b      	lsls	r3, r3, #24
 8001206:	69fa      	ldr	r2, [r7, #28]
 8001208:	4313      	orrs	r3, r2
 800120a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800120c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800120e:	3304      	adds	r3, #4
 8001210:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	69fa      	ldr	r2, [r7, #28]
 8001218:	429a      	cmp	r2, r3
 800121a:	d90a      	bls.n	8001232 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	699a      	ldr	r2, [r3, #24]
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4619      	mov	r1, r3
 8001226:	4610      	mov	r0, r2
 8001228:	f006 ff4c 	bl	80080c4 <realloc>
 800122c:	4602      	mov	r2, r0
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001238:	2300      	movs	r3, #0
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001242:	429a      	cmp	r2, r3
 8001244:	d236      	bcs.n	80012b4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800124e:	6839      	ldr	r1, [r7, #0]
 8001250:	440a      	add	r2, r1
 8001252:	7812      	ldrb	r2, [r2, #0]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800125c:	3301      	adds	r3, #1
 800125e:	6839      	ldr	r1, [r7, #0]
 8001260:	440b      	add	r3, r1
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800126e:	3302      	adds	r3, #2
 8001270:	6839      	ldr	r1, [r7, #0]
 8001272:	440b      	add	r3, r1
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	041b      	lsls	r3, r3, #16
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001280:	3303      	adds	r3, #3
 8001282:	6839      	ldr	r1, [r7, #0]
 8001284:	440b      	add	r3, r1
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	061b      	lsls	r3, r3, #24
 800128a:	4313      	orrs	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001296:	3304      	adds	r3, #4
 8001298:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	699a      	ldr	r2, [r3, #24]
 800129e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	3214      	adds	r2, #20
 80012a8:	6812      	ldr	r2, [r2, #0]
 80012aa:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80012ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ae:	3301      	adds	r3, #1
 80012b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012b2:	e7c3      	b.n	800123c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80012b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	4413      	add	r3, r2
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80012be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012c0:	3301      	adds	r3, #1
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	4413      	add	r3, r2
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80012d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012d2:	3302      	adds	r3, #2
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	041b      	lsls	r3, r3, #16
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80012e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e4:	3303      	adds	r3, #3
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	4413      	add	r3, r2
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	061b      	lsls	r3, r3, #24
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80012f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f6:	3304      	adds	r3, #4
 80012f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	429a      	cmp	r2, r3
 8001302:	d90a      	bls.n	800131a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4619      	mov	r1, r3
 800130e:	4610      	mov	r0, r2
 8001310:	f006 fed8 	bl	80080c4 <realloc>
 8001314:	4602      	mov	r2, r0
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001320:	2300      	movs	r3, #0
 8001322:	62bb      	str	r3, [r7, #40]	; 0x28
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800132a:	429a      	cmp	r2, r3
 800132c:	d23f      	bcs.n	80013ae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800132e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	441a      	add	r2, r3
 8001334:	f107 030c 	add.w	r3, r7, #12
 8001338:	4611      	mov	r1, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f000 fb46 	bl	80019cc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001342:	3304      	adds	r3, #4
 8001344:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
 800134a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4413      	add	r3, r2
 8001350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001352:	429a      	cmp	r2, r3
 8001354:	d20c      	bcs.n	8001370 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	441a      	add	r2, r3
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135e:	3b01      	subs	r3, #1
 8001360:	6839      	ldr	r1, [r7, #0]
 8001362:	440b      	add	r3, r1
 8001364:	7812      	ldrb	r2, [r2, #0]
 8001366:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	3301      	adds	r3, #1
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
 800136e:	e7ec      	b.n	800134a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001370:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4413      	add	r3, r2
 8001376:	3b01      	subs	r3, #1
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	4413      	add	r3, r2
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001382:	3b01      	subs	r3, #1
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	441a      	add	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800138c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4413      	add	r3, r2
 8001392:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	3220      	adds	r2, #32
 80013a2:	6812      	ldr	r2, [r2, #0]
 80013a4:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80013a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a8:	3301      	adds	r3, #1
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ac:	e7ba      	b.n	8001324 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80013ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80013b0:	4618      	mov	r0, r3
 80013b2:	3738      	adds	r7, #56	; 0x38
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80013c2:	4618      	mov	r0, r3
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	08008590 	.word	0x08008590

080013d4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	0800840c 	.word	0x0800840c

080013f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	68ba      	ldr	r2, [r7, #8]
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	611a      	str	r2, [r3, #16]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4618      	mov	r0, r3
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68d8      	ldr	r0, [r3, #12]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	6891      	ldr	r1, [r2, #8]
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	4798      	blx	r3
 800143c:	4603      	mov	r3, r0
  };
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
  }
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	425b      	negs	r3, r3
 8001472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001476:	4618      	mov	r0, r3
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <_ZN13STM32HardwareC1Ev+0x34>)
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4618      	mov	r0, r3
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	200041ec 	.word	0x200041ec

080014bc <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 f804 	bl	80014d2 <_ZN13STM32Hardware10reset_rbufEv>
    }
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6818      	ldr	r0, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3304      	adds	r3, #4
 80014e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e6:	4619      	mov	r1, r3
 80014e8:	f003 ff30 	bl	800534c <HAL_UART_Receive_DMA>
    }
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <_ZN13STM32Hardware4readEv>:

    int read(){
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
      int c = -1;
 80014fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001500:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff ffa8 	bl	800145e <_ZN13STM32Hardware10getRdmaIndEv>
 800150e:	4603      	mov	r3, r0
 8001510:	429c      	cmp	r4, r3
 8001512:	bf14      	ite	ne
 8001514:	2301      	movne	r3, #1
 8001516:	2300      	moveq	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d012      	beq.n	8001544 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001524:	1c59      	adds	r1, r3, #1
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	4413      	add	r3, r2
 8001530:	791b      	ldrb	r3, [r3, #4]
 8001532:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800153a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001544:	68fb      	ldr	r3, [r7, #12]
    }
 8001546:	4618      	mov	r0, r3
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	bd90      	pop	{r4, r7, pc}
	...

08001550 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b20      	cmp	r3, #32
 8001564:	d108      	bne.n	8001578 <_ZN13STM32Hardware5flushEv+0x28>
 8001566:	4b28      	ldr	r3, [pc, #160]	; (8001608 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	f083 0301 	eor.w	r3, r3, #1
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <_ZN13STM32Hardware5flushEv+0x28>
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <_ZN13STM32Hardware5flushEv+0x2a>
 8001578:	2300      	movs	r3, #0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d03f      	beq.n	80015fe <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 800157e:	4b22      	ldr	r3, [pc, #136]	; (8001608 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001580:	2201      	movs	r2, #1
 8001582:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001590:	429a      	cmp	r2, r3
 8001592:	d031      	beq.n	80015f8 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d20a      	bcs.n	80015ba <_ZN13STM32Hardware5flushEv+0x6a>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	e006      	b.n	80015c8 <_ZN13STM32Hardware5flushEv+0x78>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6818      	ldr	r0, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80015d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	4413      	add	r3, r2
 80015dc:	89fa      	ldrh	r2, [r7, #14]
 80015de:	4619      	mov	r1, r3
 80015e0:	f003 fe48 	bl	8005274 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80015ea:	89fb      	ldrh	r3, [r7, #14]
 80015ec:	4413      	add	r3, r2
 80015ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <_ZN13STM32Hardware5flushEv+0xb8>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]
      }
    }
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000094 	.word	0x20000094

0800160c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
      int n = length;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001622:	bfa8      	it	ge
 8001624:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001628:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001630:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	4293      	cmp	r3, r2
 8001638:	bf28      	it	cs
 800163a:	4613      	movcs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001644:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	4413      	add	r3, r2
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	68b9      	ldr	r1, [r7, #8]
 8001650:	4618      	mov	r0, r3
 8001652:	f006 fd23 	bl	800809c <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	4413      	add	r3, r2
 8001660:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	429a      	cmp	r2, r3
 8001670:	d00b      	beq.n	800168a <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	18d1      	adds	r1, r2, r3
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	461a      	mov	r2, r3
 8001686:	f006 fd09 	bl	800809c <memcpy>
      }

      flush();
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f7ff ff60 	bl	8001550 <_ZN13STM32Hardware5flushEv>
    }
 8001690:	bf00      	nop
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	f001 fc32 	bl	8002f08 <HAL_GetTick>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
      data("")
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff f858 	bl	8000770 <_ZN3ros3MsgC1Ev>
 80016c0:	4a05      	ldr	r2, [pc, #20]	; (80016d8 <_ZN8std_msgs6StringC1Ev+0x28>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a04      	ldr	r2, [pc, #16]	; (80016dc <_ZN8std_msgs6StringC1Ev+0x2c>)
 80016ca:	605a      	str	r2, [r3, #4]
    {
    }
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	080085c8 	.word	0x080085c8
 80016dc:	08008390 	.word	0x08008390

080016e0 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe fd6c 	bl	80001d0 <strlen>
 80016f8:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	68b9      	ldr	r1, [r7, #8]
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f944 	bl	8001990 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	3304      	adds	r3, #4
 800170c:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	18d0      	adds	r0, r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	68ba      	ldr	r2, [r7, #8]
 800171a:	4619      	mov	r1, r3
 800171c:	f006 fcbe 	bl	800809c <memcpy>
      offset += length_data;
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	4413      	add	r3, r2
 8001726:	60fb      	str	r3, [r7, #12]
      return offset;
 8001728:	68fb      	ldr	r3, [r7, #12]
    }
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	441a      	add	r2, r3
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f000 f93d 	bl	80019cc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	3304      	adds	r3, #4
 8001756:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4413      	add	r3, r2
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	429a      	cmp	r2, r3
 8001766:	d20c      	bcs.n	8001782 <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	441a      	add	r2, r3
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	3b01      	subs	r3, #1
 8001772:	6839      	ldr	r1, [r7, #0]
 8001774:	440b      	add	r3, r1
 8001776:	7812      	ldrb	r2, [r2, #0]
 8001778:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	3301      	adds	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	e7ec      	b.n	800175c <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4413      	add	r3, r2
 8001788:	3b01      	subs	r3, #1
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	4413      	add	r3, r2
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	3b01      	subs	r3, #1
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	441a      	add	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	605a      	str	r2, [r3, #4]
      offset += length_data;
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
     return offset;
 80017a6:	693b      	ldr	r3, [r7, #16]
    }
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <_ZN8std_msgs6String7getTypeEv+0x18>)
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	08008430 	.word	0x08008430

080017cc <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	08008440 	.word	0x08008440

080017e8 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ROSSerial/ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	4a04      	ldr	r2, [pc, #16]	; (8001804 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	080085e0 	.word	0x080085e0

08001808 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ffe8 	bl	80017e8 <_ZN3ros15NodeHandleBase_C1Ev>
 8001818:	4a36      	ldr	r2, [pc, #216]	; (80018f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3304      	adds	r3, #4
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fe2e 	bl	8001484 <_ZN13STM32HardwareC1Ev>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800184e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f006 fc2c 	bl	80080b2 <memset>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f006 fc23 	bl	80080b2 <memset>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8001872:	2264      	movs	r2, #100	; 0x64
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f006 fc1b 	bl	80080b2 <memset>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8001882:	2264      	movs	r2, #100	; 0x64
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f006 fc13 	bl	80080b2 <memset>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fab8 	bl	8000e58 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	080085b4 	.word	0x080085b4

080018f8 <startROSSerialComms>:
}

extern RobotInfoHandler robot_info_handler;

void positionCallBack(const std_msgs::Float32 &position_msg);
void startROSSerialComms(RobotInfoHandler *info_handler){
 80018f8:	b5b0      	push	{r4, r5, r7, lr}
 80018fa:	f6ad 1d78 	subw	sp, sp, #2424	; 0x978
 80018fe:	af00      	add	r7, sp, #0
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	6018      	str	r0, [r3, #0]

	ros::NodeHandle nh;
 8001904:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff7d 	bl	8001808 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
	std_msgs::String str_msg;
 800190e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fecc 	bl	80016b0 <_ZN8std_msgs6StringC1Ev>


	// Publishers
	ros::Publisher chatter("chatter", &str_msg);
 8001918:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800191c:	f107 0020 	add.w	r0, r7, #32
 8001920:	2300      	movs	r3, #0
 8001922:	4919      	ldr	r1, [pc, #100]	; (8001988 <startROSSerialComms+0x90>)
 8001924:	f7ff fd64 	bl	80013f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>

	// Subscribers
	//ros::Subscriber<std_msgs::Float32> positionTopic("positionTopic", &positionCallBack, 10);

	char hello[] = "Hello world from STM32!";
 8001928:	f107 0308 	add.w	r3, r7, #8
 800192c:	4a17      	ldr	r2, [pc, #92]	; (800198c <startROSSerialComms+0x94>)
 800192e:	461c      	mov	r4, r3
 8001930:	4615      	mov	r5, r2
 8001932:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001934:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001936:	e895 0003 	ldmia.w	r5, {r0, r1}
 800193a:	e884 0003 	stmia.w	r4, {r0, r1}

	nh.initNode();
 800193e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001942:	4618      	mov	r0, r3
 8001944:	f000 f867 	bl	8001a16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.advertise(chatter);
 8001948:	f107 0220 	add.w	r2, r7, #32
 800194c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001950:	4611      	mov	r1, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f000 f87c 	bl	8001a50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    //nh.subscribe(positionTopic);

    while(1){

    	str_msg.data = hello;
 8001958:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800195c:	f107 0208 	add.w	r2, r7, #8
 8001960:	605a      	str	r2, [r3, #4]
    	chatter.publish(&str_msg);
 8001962:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001966:	f107 0320 	add.w	r3, r7, #32
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fd56 	bl	800141e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		nh.spinOnce();
 8001972:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001976:	4618      	mov	r0, r3
 8001978:	f000 f89a 	bl	8001ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
		osDelay(2000);
 800197c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001980:	f004 fc77 	bl	8006272 <osDelay>
    	str_msg.data = hello;
 8001984:	e7e8      	b.n	8001958 <startROSSerialComms+0x60>
 8001986:	bf00      	nop
 8001988:	08008464 	.word	0x08008464
 800198c:	0800846c 	.word	0x0800846c

08001990 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	d80d      	bhi.n	80019c0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	fa22 f103 	lsr.w	r1, r2, r3
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4413      	add	r3, r2
 80019b4:	b2ca      	uxtb	r2, r1
 80019b6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3301      	adds	r3, #1
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	e7ee      	b.n	800199e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d811      	bhi.n	8001a0a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6839      	ldr	r1, [r7, #0]
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	440a      	add	r2, r1
 80019f0:	7812      	ldrb	r2, [r2, #0]
 80019f2:	4611      	mov	r1, r2
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	00d2      	lsls	r2, r2, #3
 80019f8:	fa01 f202 	lsl.w	r2, r1, r2
 80019fc:	431a      	orrs	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	3301      	adds	r3, #1
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	e7ea      	b.n	80019e0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8001a0a:	bf00      	nop
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3304      	adds	r3, #4
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fd4a 	bl	80014bc <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2b18      	cmp	r3, #24
 8001a62:	dc1e      	bgt.n	8001aa2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d111      	bne.n	8001a9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	60da      	str	r2, [r3, #12]
        return true;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e004      	b.n	8001aa4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	e7dd      	b.n	8001a5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8001aa2:	2300      	movs	r3, #0
  }
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3304      	adds	r3, #4
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fdeb 	bl	8001698 <_ZN13STM32Hardware4timeEv>
 8001ac2:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d903      	bls.n	8001ade <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d009      	beq.n	8001afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d903      	bls.n	8001afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d014      	beq.n	8001b30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fdc4 	bl	8001698 <_ZN13STM32Hardware4timeEv>
 8001b10:	4602      	mov	r2, r0
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1ad2      	subs	r2, r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	bf8c      	ite	hi
 8001b20:	2301      	movhi	r3, #1
 8001b22:	2300      	movls	r3, #0
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8001b2a:	f06f 0301 	mvn.w	r3, #1
 8001b2e:	e197      	b.n	8001e60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      int data = hardware_.read();
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3304      	adds	r3, #4
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fcdd 	bl	80014f4 <_ZN13STM32Hardware4readEv>
 8001b3a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f2c0 8177 	blt.w	8001e32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
      checksum_ += data;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	441a      	add	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b5a:	2b07      	cmp	r3, #7
 8001b5c:	d11e      	bne.n	8001b9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001b64:	1c59      	adds	r1, r3, #1
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8001b6c:	68ba      	ldr	r2, [r7, #8]
 8001b6e:	b2d1      	uxtb	r1, r2
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	4413      	add	r3, r2
 8001b74:	460a      	mov	r2, r1
 8001b76:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001b80:	1e5a      	subs	r2, r3, #1
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1b4      	bne.n	8001afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2208      	movs	r2, #8
 8001b96:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001b9a:	e7af      	b.n	8001afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d128      	bne.n	8001bf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	2bff      	cmp	r3, #255	; 0xff
 8001baa:	d10d      	bne.n	8001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f103 0214 	add.w	r2, r3, #20
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001bc6:	e799      	b.n	8001afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3304      	adds	r3, #4
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fd63 	bl	8001698 <_ZN13STM32Hardware4timeEv>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	bf8c      	ite	hi
 8001be0:	2301      	movhi	r3, #1
 8001be2:	2300      	movls	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d088      	beq.n	8001afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8001bf2:	f06f 0301 	mvn.w	r3, #1
 8001bf6:	e133      	b.n	8001e60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d11b      	bne.n	8001c3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
        if (data == PROTOCOL_VER)
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2bfe      	cmp	r3, #254	; 0xfe
 8001c06:	d107      	bne.n	8001c18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001c16:	e771      	b.n	8001afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001c26:	f083 0301 	eor.w	r3, r3, #1
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f43f af65 	beq.w	8001afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f918 	bl	8001e68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001c38:	e760      	b.n	8001afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d113      	bne.n	8001c6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
        bytes_ = data;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001c6a:	e747      	b.n	8001afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	d110      	bne.n	8001c98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        bytes_ += data << 8;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	021b      	lsls	r3, r3, #8
 8001c80:	441a      	add	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001c96:	e731      	b.n	8001afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d116      	bne.n	8001cd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
        if ((checksum_ % 256) == 255)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001ca8:	425a      	negs	r2, r3
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	bf58      	it	pl
 8001cb0:	4253      	negpl	r3, r2
 8001cb2:	2bff      	cmp	r3, #255	; 0xff
 8001cb4:	d107      	bne.n	8001cc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001cc4:	e71a      	b.n	8001afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001cce:	e715      	b.n	8001afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001cd6:	2b05      	cmp	r3, #5
 8001cd8:	d10f      	bne.n	8001cfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
        topic_ = data;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001cf8:	e700      	b.n	8001afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d00:	2b06      	cmp	r3, #6
 8001d02:	d117      	bne.n	8001d34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
        topic_ += data << 8;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	021b      	lsls	r3, r3, #8
 8001d0e:	441a      	add	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2207      	movs	r2, #7
 8001d1a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f47f aee9 	bne.w	8001afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2208      	movs	r2, #8
 8001d2e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001d32:	e6e3      	b.n	8001afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	f47f aede 	bne.w	8001afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001d4e:	425a      	negs	r2, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	bf58      	it	pl
 8001d56:	4253      	negpl	r3, r2
 8001d58:	2bff      	cmp	r3, #255	; 0xff
 8001d5a:	f47f aecf 	bne.w	8001afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d110      	bne.n	8001d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
            requestSyncTime();
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f87d 	bl	8001e68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f898 	bl	8001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8001d84:	f04f 33ff 	mov.w	r3, #4294967295
 8001d88:	e06a      	b.n	8001e60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          else if (topic_ == TopicInfo::ID_TIME)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001d90:	2b0a      	cmp	r3, #10
 8001d92:	d107      	bne.n	8001da4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
            syncTime(message_in);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f961 	bl	8002064 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001da2:	e6ab      	b.n	8001afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001daa:	2b06      	cmp	r3, #6
 8001dac:	d10e      	bne.n	8001dcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
            req_param_resp.deserialize(message_in);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	f7ff f98a 	bl	80010d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001dca:	e697      	b.n	8001afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001dd2:	2b0b      	cmp	r3, #11
 8001dd4:	d104      	bne.n	8001de0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
            configured_ = false;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001dde:	e68d      	b.n	8001afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001de6:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f43f ae81 	beq.w	8001afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001e00:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e0a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001e14:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4798      	blx	r3
    while (true)
 8001e30:	e664      	b.n	8001afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8001e32:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00f      	beq.n	8001e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d906      	bls.n	8001e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
      requestSyncTime();
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f809 	bl	8001e68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8001e5e:	2300      	movs	r3, #0
  }
 8001e60:	4618      	mov	r0, r3
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001e70:	f107 030c 	add.w	r3, r7, #12
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fc8b 	bl	8000790 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f107 020c 	add.w	r2, r7, #12
 8001e84:	210a      	movs	r1, #10
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	4798      	blx	r3
    rt_time = hardware_.time();
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff fc02 	bl	8001698 <_ZN13STM32Hardware4timeEv>
 8001e94:	4602      	mov	r2, r0
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8001e9c:	bf00      	nop
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8001ea4:	b590      	push	{r4, r7, lr}
 8001ea6:	b08b      	sub	sp, #44	; 0x2c
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001eac:	f107 030c 	add.w	r3, r7, #12
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fd5d 	bl	8000970 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	2b18      	cmp	r3, #24
 8001ebe:	dc63      	bgt.n	8001f88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d056      	beq.n	8001f80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	6859      	ldr	r1, [r3, #4]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	3308      	adds	r3, #8
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4608      	mov	r0, r1
 8001f20:	4798      	blx	r3
 8001f22:	4603      	mov	r3, r0
 8001f24:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	6859      	ldr	r1, [r3, #4]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	330c      	adds	r3, #12
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4608      	mov	r0, r1
 8001f4e:	4798      	blx	r3
 8001f50:	4603      	mov	r3, r0
 8001f52:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8001f54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f58:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681c      	ldr	r4, [r3, #0]
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fa69 	bl	8001446 <_ZN3ros9Publisher15getEndpointTypeEv>
 8001f74:	4601      	mov	r1, r0
 8001f76:	f107 030c 	add.w	r3, r7, #12
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	3301      	adds	r3, #1
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
 8001f86:	e798      	b.n	8001eba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001f88:	2300      	movs	r3, #0
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	2b18      	cmp	r3, #24
 8001f90:	dc5f      	bgt.n	8002052 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f96:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d053      	beq.n	800204a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001fcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	3308      	adds	r3, #8
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4608      	mov	r0, r1
 8001fe4:	4798      	blx	r3
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fee:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001ff2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffa:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	330c      	adds	r3, #12
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4608      	mov	r0, r1
 800200a:	4798      	blx	r3
 800200c:	4603      	mov	r3, r0
 800200e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8002010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002014:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681c      	ldr	r4, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002020:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002024:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800202c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	3304      	adds	r3, #4
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4608      	mov	r0, r1
 800203c:	4798      	blx	r3
 800203e:	4601      	mov	r1, r0
 8002040:	f107 030c 	add.w	r3, r7, #12
 8002044:	461a      	mov	r2, r3
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	3301      	adds	r3, #1
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
 8002050:	e79c      	b.n	8001f8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 800205a:	bf00      	nop
 800205c:	372c      	adds	r7, #44	; 0x2c
 800205e:	46bd      	mov	sp, r7
 8002060:	bd90      	pop	{r4, r7, pc}
	...

08002064 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800206e:	f107 0308 	add.w	r3, r7, #8
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe fb8c 	bl	8000790 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3304      	adds	r3, #4
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fb0b 	bl	8001698 <_ZN13STM32Hardware4timeEv>
 8002082:	4602      	mov	r2, r0
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800208e:	f107 0308 	add.w	r3, r7, #8
 8002092:	6839      	ldr	r1, [r7, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fbeb 	bl	8000870 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	4915      	ldr	r1, [pc, #84]	; (80020f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80020a0:	fba1 1303 	umull	r1, r3, r1, r3
 80020a4:	099b      	lsrs	r3, r3, #6
 80020a6:	4413      	add	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80020aa:	6939      	ldr	r1, [r7, #16]
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80020b0:	fba3 0302 	umull	r0, r3, r3, r2
 80020b4:	099b      	lsrs	r3, r3, #6
 80020b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020ba:	fb00 f303 	mul.w	r3, r0, r3
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	4a0d      	ldr	r2, [pc, #52]	; (80020f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80020c2:	fb02 f303 	mul.w	r3, r2, r3
 80020c6:	440b      	add	r3, r1
 80020c8:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80020ca:	f107 0308 	add.w	r3, r7, #8
 80020ce:	3304      	adds	r3, #4
 80020d0:	4619      	mov	r1, r3
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f8a4 	bl	8002220 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3304      	adds	r3, #4
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fadb 	bl	8001698 <_ZN13STM32Hardware4timeEv>
 80020e2:	4602      	mov	r2, r0
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 80020ea:	bf00      	nop
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	10624dd3 	.word	0x10624dd3
 80020f8:	000f4240 	.word	0x000f4240

080020fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2b63      	cmp	r3, #99	; 0x63
 800210c:	dd09      	ble.n	8002122 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002114:	f083 0301 	eor.w	r3, r3, #1
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800211e:	2300      	movs	r3, #0
 8002120:	e077      	b.n	8002212 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	f202 6224 	addw	r2, r2, #1572	; 0x624
 800212e:	3207      	adds	r2, #7
 8002130:	4611      	mov	r1, r2
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	4798      	blx	r3
 8002136:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	22ff      	movs	r2, #255	; 0xff
 800213c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	22fe      	movs	r2, #254	; 0xfe
 8002144:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	b2da      	uxtb	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	b29b      	uxth	r3, r3
 8002156:	121b      	asrs	r3, r3, #8
 8002158:	b2da      	uxtb	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 800216c:	4413      	add	r3, r2
 800216e:	b2db      	uxtb	r3, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	b2da      	uxtb	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	b21b      	sxth	r3, r3
 8002188:	121b      	asrs	r3, r3, #8
 800218a:	b2da      	uxtb	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002196:	2305      	movs	r3, #5
 8002198:	61bb      	str	r3, [r7, #24]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	3307      	adds	r3, #7
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	da0d      	bge.n	80021c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	4413      	add	r3, r2
 80021aa:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	4413      	add	r3, r2
 80021b6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	3301      	adds	r3, #1
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	e7ec      	b.n	800219a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	3307      	adds	r3, #7
 80021c4:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	425a      	negs	r2, r3
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	bf58      	it	pl
 80021d0:	4253      	negpl	r3, r2
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	1c59      	adds	r1, r3, #1
 80021d8:	6179      	str	r1, [r7, #20]
 80021da:	43d2      	mvns	r2, r2
 80021dc:	b2d1      	uxtb	r1, r2
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4413      	add	r3, r2
 80021e2:	460a      	mov	r2, r1
 80021e4:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021ee:	dc0a      	bgt.n	8002206 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	1d18      	adds	r0, r3, #4
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	4619      	mov	r1, r3
 80021fe:	f7ff fa05 	bl	800160c <_ZN13STM32Hardware5writeEPhi>
      return l;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	e005      	b.n	8002212 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8002206:	4905      	ldr	r1, [pc, #20]	; (800221c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 f849 	bl	80022a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800220e:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8002212:	4618      	mov	r0, r3
 8002214:	3720      	adds	r7, #32
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	08008484 	.word	0x08008484

08002220 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3304      	adds	r3, #4
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff fa32 	bl	8001698 <_ZN13STM32Hardware4timeEv>
 8002234:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4915      	ldr	r1, [pc, #84]	; (8002294 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 800223e:	fba1 1303 	umull	r1, r3, r1, r3
 8002242:	099b      	lsrs	r3, r3, #6
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	1e5a      	subs	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	6859      	ldr	r1, [r3, #4]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8002256:	fba3 0302 	umull	r0, r3, r3, r2
 800225a:	099b      	lsrs	r3, r3, #6
 800225c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002260:	fb00 f303 	mul.w	r3, r0, r3
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	4a0c      	ldr	r2, [pc, #48]	; (8002298 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8002268:	fb02 f303 	mul.w	r3, r2, r3
 800226c:	1aca      	subs	r2, r1, r3
 800226e:	4b0b      	ldr	r3, [pc, #44]	; (800229c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8002270:	4413      	add	r3, r2
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8002284:	4619      	mov	r1, r3
 8002286:	4610      	mov	r0, r2
 8002288:	f7fe f92a 	bl	80004e0 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800228c:	bf00      	nop
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	10624dd3 	.word	0x10624dd3
 8002298:	000f4240 	.word	0x000f4240
 800229c:	3b9aca00 	.word	0x3b9aca00

080022a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	2103      	movs	r1, #3
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f804 	bl	80022bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	460b      	mov	r3, r1
 80022c6:	607a      	str	r2, [r7, #4]
 80022c8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe fd12 	bl	8000cf8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80022d4:	7afb      	ldrb	r3, [r7, #11]
 80022d6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f107 0214 	add.w	r2, r7, #20
 80022e6:	2107      	movs	r1, #7
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	4798      	blx	r3
  }
 80022ec:	bf00      	nop
 80022ee:	3720      	adds	r7, #32
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
    return configured_;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	607b      	str	r3, [r7, #4]
 800231a:	4b10      	ldr	r3, [pc, #64]	; (800235c <MX_DMA_Init+0x4c>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a0f      	ldr	r2, [pc, #60]	; (800235c <MX_DMA_Init+0x4c>)
 8002320:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b0d      	ldr	r3, [pc, #52]	; (800235c <MX_DMA_Init+0x4c>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002332:	2200      	movs	r2, #0
 8002334:	2100      	movs	r1, #0
 8002336:	2010      	movs	r0, #16
 8002338:	f000 feaa 	bl	8003090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800233c:	2010      	movs	r0, #16
 800233e:	f000 fec3 	bl	80030c8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002342:	2200      	movs	r2, #0
 8002344:	2100      	movs	r1, #0
 8002346:	2011      	movs	r0, #17
 8002348:	f000 fea2 	bl	8003090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800234c:	2011      	movs	r0, #17
 800234e:	f000 febb 	bl	80030c8 <HAL_NVIC_EnableIRQ>

}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800

08002360 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4a07      	ldr	r2, [pc, #28]	; (800238c <vApplicationGetIdleTaskMemory+0x2c>)
 8002370:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	4a06      	ldr	r2, [pc, #24]	; (8002390 <vApplicationGetIdleTaskMemory+0x30>)
 8002376:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2280      	movs	r2, #128	; 0x80
 800237c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800237e:	bf00      	nop
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000098 	.word	0x20000098
 8002390:	200000ec 	.word	0x200000ec

08002394 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002394:	b5b0      	push	{r4, r5, r7, lr}
 8002396:	b0a6      	sub	sp, #152	; 0x98
 8002398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of mutex */
  osMutexDef(mutex);
 800239a:	2300      	movs	r3, #0
 800239c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023a0:	2300      	movs	r3, #0
 80023a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  mutexHandle = osMutexCreate(osMutex(mutex));
 80023a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80023aa:	4618      	mov	r0, r3
 80023ac:	f003 ff75 	bl	800629a <osMutexCreate>
 80023b0:	4602      	mov	r2, r0
 80023b2:	4b31      	ldr	r3, [pc, #196]	; (8002478 <MX_FREERTOS_Init+0xe4>)
 80023b4:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80023b6:	4b31      	ldr	r3, [pc, #196]	; (800247c <MX_FREERTOS_Init+0xe8>)
 80023b8:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80023bc:	461d      	mov	r5, r3
 80023be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80023ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80023ce:	2100      	movs	r1, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f003 ff02 	bl	80061da <osThreadCreate>
 80023d6:	4602      	mov	r2, r0
 80023d8:	4b29      	ldr	r3, [pc, #164]	; (8002480 <MX_FREERTOS_Init+0xec>)
 80023da:	601a      	str	r2, [r3, #0]

  /* definition and creation of taskPID1 */
  osThreadDef(taskPID1, startPID1, osPriorityIdle, 0, 512);
 80023dc:	4b29      	ldr	r3, [pc, #164]	; (8002484 <MX_FREERTOS_Init+0xf0>)
 80023de:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80023e2:	461d      	mov	r5, r3
 80023e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskPID1Handle = osThreadCreate(osThread(taskPID1), NULL);
 80023f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023f4:	2100      	movs	r1, #0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f003 feef 	bl	80061da <osThreadCreate>
 80023fc:	4602      	mov	r2, r0
 80023fe:	4b22      	ldr	r3, [pc, #136]	; (8002488 <MX_FREERTOS_Init+0xf4>)
 8002400:	601a      	str	r2, [r3, #0]

  /* definition and creation of taskPID2 */
  osThreadDef(taskPID2, startPID2, osPriorityIdle, 0, 512);
 8002402:	4b22      	ldr	r3, [pc, #136]	; (800248c <MX_FREERTOS_Init+0xf8>)
 8002404:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002408:	461d      	mov	r5, r3
 800240a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800240c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800240e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002412:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskPID2Handle = osThreadCreate(osThread(taskPID2), NULL);
 8002416:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800241a:	2100      	movs	r1, #0
 800241c:	4618      	mov	r0, r3
 800241e:	f003 fedc 	bl	80061da <osThreadCreate>
 8002422:	4602      	mov	r2, r0
 8002424:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <MX_FREERTOS_Init+0xfc>)
 8002426:	601a      	str	r2, [r3, #0]

  /* definition and creation of taskPID3 */
  osThreadDef(taskPID3, startPID3, osPriorityIdle, 0, 512);
 8002428:	4b1a      	ldr	r3, [pc, #104]	; (8002494 <MX_FREERTOS_Init+0x100>)
 800242a:	f107 0420 	add.w	r4, r7, #32
 800242e:	461d      	mov	r5, r3
 8002430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002434:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002438:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskPID3Handle = osThreadCreate(osThread(taskPID3), NULL);
 800243c:	f107 0320 	add.w	r3, r7, #32
 8002440:	2100      	movs	r1, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f003 fec9 	bl	80061da <osThreadCreate>
 8002448:	4602      	mov	r2, r0
 800244a:	4b13      	ldr	r3, [pc, #76]	; (8002498 <MX_FREERTOS_Init+0x104>)
 800244c:	601a      	str	r2, [r3, #0]

  /* definition and creation of ROSComms */
  osThreadDef(ROSComms, startROSComms, osPriorityIdle, 0, 1024);
 800244e:	4b13      	ldr	r3, [pc, #76]	; (800249c <MX_FREERTOS_Init+0x108>)
 8002450:	1d3c      	adds	r4, r7, #4
 8002452:	461d      	mov	r5, r3
 8002454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002458:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800245c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ROSCommsHandle = osThreadCreate(osThread(ROSComms), NULL);
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	2100      	movs	r1, #0
 8002464:	4618      	mov	r0, r3
 8002466:	f003 feb8 	bl	80061da <osThreadCreate>
 800246a:	4602      	mov	r2, r0
 800246c:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <MX_FREERTOS_Init+0x10c>)
 800246e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002470:	bf00      	nop
 8002472:	3798      	adds	r7, #152	; 0x98
 8002474:	46bd      	mov	sp, r7
 8002476:	bdb0      	pop	{r4, r5, r7, pc}
 8002478:	20004050 	.word	0x20004050
 800247c:	080084cc 	.word	0x080084cc
 8002480:	20004044 	.word	0x20004044
 8002484:	080084f4 	.word	0x080084f4
 8002488:	2000404c 	.word	0x2000404c
 800248c:	0800851c 	.word	0x0800851c
 8002490:	20004058 	.word	0x20004058
 8002494:	08008544 	.word	0x08008544
 8002498:	20004048 	.word	0x20004048
 800249c:	0800856c 	.word	0x0800856c
 80024a0:	20004054 	.word	0x20004054

080024a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 80024ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024b0:	4803      	ldr	r0, [pc, #12]	; (80024c0 <StartDefaultTask+0x1c>)
 80024b2:	f001 fb5a 	bl	8003b6a <HAL_GPIO_TogglePin>
    osDelay(2500);
 80024b6:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80024ba:	f003 feda 	bl	8006272 <osDelay>
	HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 80024be:	e7f5      	b.n	80024ac <StartDefaultTask+0x8>
 80024c0:	40021000 	.word	0x40021000

080024c4 <startPID1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPID1 */
void startPID1(void const * argument)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPID1 */
	PID1Node(&robot_info_handler);
 80024cc:	4803      	ldr	r0, [pc, #12]	; (80024dc <startPID1+0x18>)
 80024ce:	f7fe f8eb 	bl	80006a8 <PID1Node>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80024d2:	2001      	movs	r0, #1
 80024d4:	f003 fecd 	bl	8006272 <osDelay>
 80024d8:	e7fb      	b.n	80024d2 <startPID1+0xe>
 80024da:	bf00      	nop
 80024dc:	2000405c 	.word	0x2000405c

080024e0 <startPID2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPID2 */
void startPID2(void const * argument)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPID2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80024e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024ec:	f003 fec1 	bl	8006272 <osDelay>
 80024f0:	e7fa      	b.n	80024e8 <startPID2+0x8>

080024f2 <startPID3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPID3 */
void startPID3(void const * argument)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPID3 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80024fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024fe:	f003 feb8 	bl	8006272 <osDelay>
 8002502:	e7fa      	b.n	80024fa <startPID3+0x8>

08002504 <startROSComms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startROSComms */
void startROSComms(void const * argument)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startROSComms */
	robotInfoInit(&robot_info_handler, &mutexHandle);
 800250c:	4905      	ldr	r1, [pc, #20]	; (8002524 <startROSComms+0x20>)
 800250e:	4806      	ldr	r0, [pc, #24]	; (8002528 <startROSComms+0x24>)
 8002510:	f7fe f812 	bl	8000538 <robotInfoInit>
	startROSSerialComms(&robot_info_handler);
 8002514:	4804      	ldr	r0, [pc, #16]	; (8002528 <startROSComms+0x24>)
 8002516:	f7ff f9ef 	bl	80018f8 <startROSSerialComms>
  /* Infinite loop */
  for(;;)
  {
	osDelay(1);
 800251a:	2001      	movs	r0, #1
 800251c:	f003 fea9 	bl	8006272 <osDelay>
 8002520:	e7fb      	b.n	800251a <startROSComms+0x16>
 8002522:	bf00      	nop
 8002524:	20004050 	.word	0x20004050
 8002528:	2000405c 	.word	0x2000405c

0800252c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08a      	sub	sp, #40	; 0x28
 8002530:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002532:	f107 0314 	add.w	r3, r7, #20
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	605a      	str	r2, [r3, #4]
 800253c:	609a      	str	r2, [r3, #8]
 800253e:	60da      	str	r2, [r3, #12]
 8002540:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	4b41      	ldr	r3, [pc, #260]	; (800264c <MX_GPIO_Init+0x120>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	4a40      	ldr	r2, [pc, #256]	; (800264c <MX_GPIO_Init+0x120>)
 800254c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002550:	6313      	str	r3, [r2, #48]	; 0x30
 8002552:	4b3e      	ldr	r3, [pc, #248]	; (800264c <MX_GPIO_Init+0x120>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	4b3a      	ldr	r3, [pc, #232]	; (800264c <MX_GPIO_Init+0x120>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	4a39      	ldr	r2, [pc, #228]	; (800264c <MX_GPIO_Init+0x120>)
 8002568:	f043 0304 	orr.w	r3, r3, #4
 800256c:	6313      	str	r3, [r2, #48]	; 0x30
 800256e:	4b37      	ldr	r3, [pc, #220]	; (800264c <MX_GPIO_Init+0x120>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	4b33      	ldr	r3, [pc, #204]	; (800264c <MX_GPIO_Init+0x120>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a32      	ldr	r2, [pc, #200]	; (800264c <MX_GPIO_Init+0x120>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b30      	ldr	r3, [pc, #192]	; (800264c <MX_GPIO_Init+0x120>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	607b      	str	r3, [r7, #4]
 800259a:	4b2c      	ldr	r3, [pc, #176]	; (800264c <MX_GPIO_Init+0x120>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4a2b      	ldr	r2, [pc, #172]	; (800264c <MX_GPIO_Init+0x120>)
 80025a0:	f043 0310 	orr.w	r3, r3, #16
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4b29      	ldr	r3, [pc, #164]	; (800264c <MX_GPIO_Init+0x120>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f003 0310 	and.w	r3, r3, #16
 80025ae:	607b      	str	r3, [r7, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	603b      	str	r3, [r7, #0]
 80025b6:	4b25      	ldr	r3, [pc, #148]	; (800264c <MX_GPIO_Init+0x120>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	4a24      	ldr	r2, [pc, #144]	; (800264c <MX_GPIO_Init+0x120>)
 80025bc:	f043 0308 	orr.w	r3, r3, #8
 80025c0:	6313      	str	r3, [r2, #48]	; 0x30
 80025c2:	4b22      	ldr	r3, [pc, #136]	; (800264c <MX_GPIO_Init+0x120>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	603b      	str	r3, [r7, #0]
 80025cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_1_L_GPIO_Port, MOTOR_1_L_Pin, GPIO_PIN_RESET);
 80025ce:	2200      	movs	r2, #0
 80025d0:	2108      	movs	r1, #8
 80025d2:	481f      	ldr	r0, [pc, #124]	; (8002650 <MX_GPIO_Init+0x124>)
 80025d4:	f001 fab0 	bl	8003b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_1_R_GPIO_Port, MOTOR_1_R_Pin, GPIO_PIN_RESET);
 80025d8:	2200      	movs	r2, #0
 80025da:	2110      	movs	r1, #16
 80025dc:	481d      	ldr	r0, [pc, #116]	; (8002654 <MX_GPIO_Init+0x128>)
 80025de:	f001 faab 	bl	8003b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 80025e2:	2200      	movs	r2, #0
 80025e4:	f248 0101 	movw	r1, #32769	; 0x8001
 80025e8:	481b      	ldr	r0, [pc, #108]	; (8002658 <MX_GPIO_Init+0x12c>)
 80025ea:	f001 faa5 	bl	8003b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_1_L_Pin;
 80025ee:	2308      	movs	r3, #8
 80025f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f2:	2301      	movs	r3, #1
 80025f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fa:	2300      	movs	r3, #0
 80025fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_1_L_GPIO_Port, &GPIO_InitStruct);
 80025fe:	f107 0314 	add.w	r3, r7, #20
 8002602:	4619      	mov	r1, r3
 8002604:	4812      	ldr	r0, [pc, #72]	; (8002650 <MX_GPIO_Init+0x124>)
 8002606:	f001 f8fd 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_1_R_Pin;
 800260a:	2310      	movs	r3, #16
 800260c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800260e:	2301      	movs	r3, #1
 8002610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002616:	2300      	movs	r3, #0
 8002618:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_1_R_GPIO_Port, &GPIO_InitStruct);
 800261a:	f107 0314 	add.w	r3, r7, #20
 800261e:	4619      	mov	r1, r3
 8002620:	480c      	ldr	r0, [pc, #48]	; (8002654 <MX_GPIO_Init+0x128>)
 8002622:	f001 f8ef 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_1_Pin;
 8002626:	f248 0301 	movw	r3, #32769	; 0x8001
 800262a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800262c:	2301      	movs	r3, #1
 800262e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002630:	2300      	movs	r3, #0
 8002632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002634:	2300      	movs	r3, #0
 8002636:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	4619      	mov	r1, r3
 800263e:	4806      	ldr	r0, [pc, #24]	; (8002658 <MX_GPIO_Init+0x12c>)
 8002640:	f001 f8e0 	bl	8003804 <HAL_GPIO_Init>

}
 8002644:	bf00      	nop
 8002646:	3728      	adds	r7, #40	; 0x28
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40023800 	.word	0x40023800
 8002650:	40020800 	.word	0x40020800
 8002654:	40020000 	.word	0x40020000
 8002658:	40021000 	.word	0x40021000

0800265c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002660:	f000 fc1c 	bl	8002e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002664:	f000 f810 	bl	8002688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002668:	f7ff ff60 	bl	800252c <MX_GPIO_Init>
  MX_DMA_Init();
 800266c:	f7ff fe50 	bl	8002310 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002670:	f000 fb0c 	bl	8002c8c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8002674:	f000 fa16 	bl	8002aa4 <MX_TIM4_Init>
  MX_TIM2_Init();
 8002678:	f000 f9bc 	bl	80029f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800267c:	f7ff fe8a 	bl	8002394 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002680:	f003 fda4 	bl	80061cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002684:	e7fe      	b.n	8002684 <main+0x28>
	...

08002688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b094      	sub	sp, #80	; 0x50
 800268c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800268e:	f107 0320 	add.w	r3, r7, #32
 8002692:	2230      	movs	r2, #48	; 0x30
 8002694:	2100      	movs	r1, #0
 8002696:	4618      	mov	r0, r3
 8002698:	f005 fd0b 	bl	80080b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800269c:	f107 030c 	add.w	r3, r7, #12
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ac:	2300      	movs	r3, #0
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	4b28      	ldr	r3, [pc, #160]	; (8002754 <SystemClock_Config+0xcc>)
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	4a27      	ldr	r2, [pc, #156]	; (8002754 <SystemClock_Config+0xcc>)
 80026b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ba:	6413      	str	r3, [r2, #64]	; 0x40
 80026bc:	4b25      	ldr	r3, [pc, #148]	; (8002754 <SystemClock_Config+0xcc>)
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026c8:	2300      	movs	r3, #0
 80026ca:	607b      	str	r3, [r7, #4]
 80026cc:	4b22      	ldr	r3, [pc, #136]	; (8002758 <SystemClock_Config+0xd0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a21      	ldr	r2, [pc, #132]	; (8002758 <SystemClock_Config+0xd0>)
 80026d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d6:	6013      	str	r3, [r2, #0]
 80026d8:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <SystemClock_Config+0xd0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e0:	607b      	str	r3, [r7, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026e4:	2301      	movs	r3, #1
 80026e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026ee:	2302      	movs	r3, #2
 80026f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80026f8:	2304      	movs	r3, #4
 80026fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80026fc:	23a8      	movs	r3, #168	; 0xa8
 80026fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002700:	2302      	movs	r3, #2
 8002702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002704:	2304      	movs	r3, #4
 8002706:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002708:	f107 0320 	add.w	r3, r7, #32
 800270c:	4618      	mov	r0, r3
 800270e:	f001 fa47 	bl	8003ba0 <HAL_RCC_OscConfig>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002718:	f000 f832 	bl	8002780 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800271c:	230f      	movs	r3, #15
 800271e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002720:	2302      	movs	r3, #2
 8002722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002728:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800272c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800272e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002732:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002734:	f107 030c 	add.w	r3, r7, #12
 8002738:	2105      	movs	r1, #5
 800273a:	4618      	mov	r0, r3
 800273c:	f001 fca0 	bl	8004080 <HAL_RCC_ClockConfig>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002746:	f000 f81b 	bl	8002780 <Error_Handler>
  }
}
 800274a:	bf00      	nop
 800274c:	3750      	adds	r7, #80	; 0x50
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800
 8002758:	40007000 	.word	0x40007000

0800275c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a04      	ldr	r2, [pc, #16]	; (800277c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d101      	bne.n	8002772 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800276e:	f000 fbb7 	bl	8002ee0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40010000 	.word	0x40010000

08002780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
	...

08002790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	607b      	str	r3, [r7, #4]
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <HAL_MspInit+0x4c>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	4a0f      	ldr	r2, [pc, #60]	; (80027dc <HAL_MspInit+0x4c>)
 80027a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a4:	6453      	str	r3, [r2, #68]	; 0x44
 80027a6:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <HAL_MspInit+0x4c>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ae:	607b      	str	r3, [r7, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	603b      	str	r3, [r7, #0]
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <HAL_MspInit+0x4c>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	4a08      	ldr	r2, [pc, #32]	; (80027dc <HAL_MspInit+0x4c>)
 80027bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c0:	6413      	str	r3, [r2, #64]	; 0x40
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_MspInit+0x4c>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40023800 	.word	0x40023800

080027e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08c      	sub	sp, #48	; 0x30
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80027f0:	2200      	movs	r2, #0
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	2019      	movs	r0, #25
 80027f6:	f000 fc4b 	bl	8003090 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80027fa:	2019      	movs	r0, #25
 80027fc:	f000 fc64 	bl	80030c8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002800:	2300      	movs	r3, #0
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	4b1f      	ldr	r3, [pc, #124]	; (8002884 <HAL_InitTick+0xa4>)
 8002806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002808:	4a1e      	ldr	r2, [pc, #120]	; (8002884 <HAL_InitTick+0xa4>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	6453      	str	r3, [r2, #68]	; 0x44
 8002810:	4b1c      	ldr	r3, [pc, #112]	; (8002884 <HAL_InitTick+0xa4>)
 8002812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800281c:	f107 0210 	add.w	r2, r7, #16
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	4611      	mov	r1, r2
 8002826:	4618      	mov	r0, r3
 8002828:	f001 fe1c 	bl	8004464 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800282c:	f001 fe06 	bl	800443c <HAL_RCC_GetPCLK2Freq>
 8002830:	4603      	mov	r3, r0
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002838:	4a13      	ldr	r2, [pc, #76]	; (8002888 <HAL_InitTick+0xa8>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	0c9b      	lsrs	r3, r3, #18
 8002840:	3b01      	subs	r3, #1
 8002842:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002844:	4b11      	ldr	r3, [pc, #68]	; (800288c <HAL_InitTick+0xac>)
 8002846:	4a12      	ldr	r2, [pc, #72]	; (8002890 <HAL_InitTick+0xb0>)
 8002848:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800284a:	4b10      	ldr	r3, [pc, #64]	; (800288c <HAL_InitTick+0xac>)
 800284c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002850:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002852:	4a0e      	ldr	r2, [pc, #56]	; (800288c <HAL_InitTick+0xac>)
 8002854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002856:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <HAL_InitTick+0xac>)
 800285a:	2200      	movs	r2, #0
 800285c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800285e:	4b0b      	ldr	r3, [pc, #44]	; (800288c <HAL_InitTick+0xac>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002864:	4809      	ldr	r0, [pc, #36]	; (800288c <HAL_InitTick+0xac>)
 8002866:	f001 fe2f 	bl	80044c8 <HAL_TIM_Base_Init>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d104      	bne.n	800287a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002870:	4806      	ldr	r0, [pc, #24]	; (800288c <HAL_InitTick+0xac>)
 8002872:	f001 fe5e 	bl	8004532 <HAL_TIM_Base_Start_IT>
 8002876:	4603      	mov	r3, r0
 8002878:	e000      	b.n	800287c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
}
 800287c:	4618      	mov	r0, r3
 800287e:	3730      	adds	r7, #48	; 0x30
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40023800 	.word	0x40023800
 8002888:	431bde83 	.word	0x431bde83
 800288c:	2000406c 	.word	0x2000406c
 8002890:	40010000 	.word	0x40010000

08002894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028a2:	b480      	push	{r7}
 80028a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028a6:	e7fe      	b.n	80028a6 <HardFault_Handler+0x4>

080028a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028ac:	e7fe      	b.n	80028ac <MemManage_Handler+0x4>

080028ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ae:	b480      	push	{r7}
 80028b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028b2:	e7fe      	b.n	80028b2 <BusFault_Handler+0x4>

080028b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028b8:	e7fe      	b.n	80028b8 <UsageFault_Handler+0x4>

080028ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ba:	b480      	push	{r7}
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80028cc:	4802      	ldr	r0, [pc, #8]	; (80028d8 <DMA1_Stream5_IRQHandler+0x10>)
 80028ce:	f000 fd31 	bl	8003334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	2000412c 	.word	0x2000412c

080028dc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80028e0:	4802      	ldr	r0, [pc, #8]	; (80028ec <DMA1_Stream6_IRQHandler+0x10>)
 80028e2:	f000 fd27 	bl	8003334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	2000418c 	.word	0x2000418c

080028f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028f4:	4802      	ldr	r0, [pc, #8]	; (8002900 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80028f6:	f001 ff72 	bl	80047de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	2000406c 	.word	0x2000406c

08002904 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002908:	4802      	ldr	r0, [pc, #8]	; (8002914 <USART2_IRQHandler+0x10>)
 800290a:	f002 fd9f 	bl	800544c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	200041ec 	.word	0x200041ec

08002918 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
	return 1;
 800291c:	2301      	movs	r3, #1
}
 800291e:	4618      	mov	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <_kill>:

int _kill(int pid, int sig)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002932:	f005 fb89 	bl	8008048 <__errno>
 8002936:	4602      	mov	r2, r0
 8002938:	2316      	movs	r3, #22
 800293a:	6013      	str	r3, [r2, #0]
	return -1;
 800293c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002940:	4618      	mov	r0, r3
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <_exit>:

void _exit (int status)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002950:	f04f 31ff 	mov.w	r1, #4294967295
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7ff ffe7 	bl	8002928 <_kill>
	while (1) {}		/* Make sure we hang here */
 800295a:	e7fe      	b.n	800295a <_exit+0x12>

0800295c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002964:	4a14      	ldr	r2, [pc, #80]	; (80029b8 <_sbrk+0x5c>)
 8002966:	4b15      	ldr	r3, [pc, #84]	; (80029bc <_sbrk+0x60>)
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002970:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <_sbrk+0x64>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d102      	bne.n	800297e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002978:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <_sbrk+0x64>)
 800297a:	4a12      	ldr	r2, [pc, #72]	; (80029c4 <_sbrk+0x68>)
 800297c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800297e:	4b10      	ldr	r3, [pc, #64]	; (80029c0 <_sbrk+0x64>)
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4413      	add	r3, r2
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	429a      	cmp	r2, r3
 800298a:	d207      	bcs.n	800299c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800298c:	f005 fb5c 	bl	8008048 <__errno>
 8002990:	4602      	mov	r2, r0
 8002992:	230c      	movs	r3, #12
 8002994:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002996:	f04f 33ff 	mov.w	r3, #4294967295
 800299a:	e009      	b.n	80029b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800299c:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <_sbrk+0x64>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029a2:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <_sbrk+0x64>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4413      	add	r3, r2
 80029aa:	4a05      	ldr	r2, [pc, #20]	; (80029c0 <_sbrk+0x64>)
 80029ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ae:	68fb      	ldr	r3, [r7, #12]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20020000 	.word	0x20020000
 80029bc:	00000400 	.word	0x00000400
 80029c0:	200002ec 	.word	0x200002ec
 80029c4:	20004238 	.word	0x20004238

080029c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029cc:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <SystemInit+0x28>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d2:	4a07      	ldr	r2, [pc, #28]	; (80029f0 <SystemInit+0x28>)
 80029d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029dc:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <SystemInit+0x28>)
 80029de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029e2:	609a      	str	r2, [r3, #8]
#endif
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08a      	sub	sp, #40	; 0x28
 80029f8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029fa:	f107 0320 	add.w	r3, r7, #32
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a04:	1d3b      	adds	r3, r7, #4
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	605a      	str	r2, [r3, #4]
 8002a0c:	609a      	str	r2, [r3, #8]
 8002a0e:	60da      	str	r2, [r3, #12]
 8002a10:	611a      	str	r2, [r3, #16]
 8002a12:	615a      	str	r2, [r3, #20]
 8002a14:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8002a16:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <MX_TIM2_Init+0xac>)
 8002a18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a1c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8002a1e:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <MX_TIM2_Init+0xac>)
 8002a20:	2253      	movs	r2, #83	; 0x53
 8002a22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a24:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <MX_TIM2_Init+0xac>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002a2a:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <MX_TIM2_Init+0xac>)
 8002a2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a32:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <MX_TIM2_Init+0xac>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a38:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <MX_TIM2_Init+0xac>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a3e:	4818      	ldr	r0, [pc, #96]	; (8002aa0 <MX_TIM2_Init+0xac>)
 8002a40:	f001 fd9b 	bl	800457a <HAL_TIM_PWM_Init>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002a4a:	f7ff fe99 	bl	8002780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a52:	2300      	movs	r3, #0
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a56:	f107 0320 	add.w	r3, r7, #32
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4810      	ldr	r0, [pc, #64]	; (8002aa0 <MX_TIM2_Init+0xac>)
 8002a5e:	f002 fb2b 	bl	80050b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002a68:	f7ff fe8a 	bl	8002780 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a6c:	2360      	movs	r3, #96	; 0x60
 8002a6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a7c:	1d3b      	adds	r3, r7, #4
 8002a7e:	2204      	movs	r2, #4
 8002a80:	4619      	mov	r1, r3
 8002a82:	4807      	ldr	r0, [pc, #28]	; (8002aa0 <MX_TIM2_Init+0xac>)
 8002a84:	f001 ffb4 	bl	80049f0 <HAL_TIM_PWM_ConfigChannel>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002a8e:	f7ff fe77 	bl	8002780 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8002a92:	4803      	ldr	r0, [pc, #12]	; (8002aa0 <MX_TIM2_Init+0xac>)
 8002a94:	f000 f8c2 	bl	8002c1c <HAL_TIM_MspPostInit>

}
 8002a98:	bf00      	nop
 8002a9a:	3728      	adds	r7, #40	; 0x28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	200040ec 	.word	0x200040ec

08002aa4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08c      	sub	sp, #48	; 0x30
 8002aa8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002aaa:	f107 030c 	add.w	r3, r7, #12
 8002aae:	2224      	movs	r2, #36	; 0x24
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f005 fafd 	bl	80080b2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ab8:	1d3b      	adds	r3, r7, #4
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8002ac0:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <MX_TIM4_Init+0xa0>)
 8002ac2:	4a21      	ldr	r2, [pc, #132]	; (8002b48 <MX_TIM4_Init+0xa4>)
 8002ac4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002ac6:	4b1f      	ldr	r3, [pc, #124]	; (8002b44 <MX_TIM4_Init+0xa0>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002acc:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <MX_TIM4_Init+0xa0>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002ad2:	4b1c      	ldr	r3, [pc, #112]	; (8002b44 <MX_TIM4_Init+0xa0>)
 8002ad4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ad8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ada:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <MX_TIM4_Init+0xa0>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ae0:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <MX_TIM4_Init+0xa0>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002aee:	2301      	movs	r3, #1
 8002af0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002afa:	2300      	movs	r3, #0
 8002afc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002afe:	2301      	movs	r3, #1
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b02:	2300      	movs	r3, #0
 8002b04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002b0a:	f107 030c 	add.w	r3, r7, #12
 8002b0e:	4619      	mov	r1, r3
 8002b10:	480c      	ldr	r0, [pc, #48]	; (8002b44 <MX_TIM4_Init+0xa0>)
 8002b12:	f001 fd9b 	bl	800464c <HAL_TIM_Encoder_Init>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002b1c:	f7ff fe30 	bl	8002780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b20:	2300      	movs	r3, #0
 8002b22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b28:	1d3b      	adds	r3, r7, #4
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4805      	ldr	r0, [pc, #20]	; (8002b44 <MX_TIM4_Init+0xa0>)
 8002b2e:	f002 fac3 	bl	80050b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002b38:	f7ff fe22 	bl	8002780 <Error_Handler>
  }

}
 8002b3c:	bf00      	nop
 8002b3e:	3730      	adds	r7, #48	; 0x30
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	200040ac 	.word	0x200040ac
 8002b48:	40000800 	.word	0x40000800

08002b4c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b5c:	d10d      	bne.n	8002b7a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <HAL_TIM_PWM_MspInit+0x3c>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	4a08      	ldr	r2, [pc, #32]	; (8002b88 <HAL_TIM_PWM_MspInit+0x3c>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b6e:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <HAL_TIM_PWM_MspInit+0x3c>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002b7a:	bf00      	nop
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40023800 	.word	0x40023800

08002b8c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08a      	sub	sp, #40	; 0x28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b94:	f107 0314 	add.w	r3, r7, #20
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a19      	ldr	r2, [pc, #100]	; (8002c10 <HAL_TIM_Encoder_MspInit+0x84>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d12c      	bne.n	8002c08 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	4b18      	ldr	r3, [pc, #96]	; (8002c14 <HAL_TIM_Encoder_MspInit+0x88>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	4a17      	ldr	r2, [pc, #92]	; (8002c14 <HAL_TIM_Encoder_MspInit+0x88>)
 8002bb8:	f043 0304 	orr.w	r3, r3, #4
 8002bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bbe:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <HAL_TIM_Encoder_MspInit+0x88>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <HAL_TIM_Encoder_MspInit+0x88>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	4a10      	ldr	r2, [pc, #64]	; (8002c14 <HAL_TIM_Encoder_MspInit+0x88>)
 8002bd4:	f043 0308 	orr.w	r3, r3, #8
 8002bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bda:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <HAL_TIM_Encoder_MspInit+0x88>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002be6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bec:	2302      	movs	r3, #2
 8002bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bfc:	f107 0314 	add.w	r3, r7, #20
 8002c00:	4619      	mov	r1, r3
 8002c02:	4805      	ldr	r0, [pc, #20]	; (8002c18 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002c04:	f000 fdfe 	bl	8003804 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002c08:	bf00      	nop
 8002c0a:	3728      	adds	r7, #40	; 0x28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40000800 	.word	0x40000800
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40020c00 	.word	0x40020c00

08002c1c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c24:	f107 030c 	add.w	r3, r7, #12
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3c:	d11d      	bne.n	8002c7a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <HAL_TIM_MspPostInit+0x68>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	4a0f      	ldr	r2, [pc, #60]	; (8002c84 <HAL_TIM_MspPostInit+0x68>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4e:	4b0d      	ldr	r3, [pc, #52]	; (8002c84 <HAL_TIM_MspPostInit+0x68>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6e:	f107 030c 	add.w	r3, r7, #12
 8002c72:	4619      	mov	r1, r3
 8002c74:	4804      	ldr	r0, [pc, #16]	; (8002c88 <HAL_TIM_MspPostInit+0x6c>)
 8002c76:	f000 fdc5 	bl	8003804 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002c7a:	bf00      	nop
 8002c7c:	3720      	adds	r7, #32
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40020000 	.word	0x40020000

08002c8c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002c90:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <MX_USART2_UART_Init+0x4c>)
 8002c92:	4a12      	ldr	r2, [pc, #72]	; (8002cdc <MX_USART2_UART_Init+0x50>)
 8002c94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002c96:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <MX_USART2_UART_Init+0x4c>)
 8002c98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002c9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c9e:	4b0e      	ldr	r3, [pc, #56]	; (8002cd8 <MX_USART2_UART_Init+0x4c>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ca4:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <MX_USART2_UART_Init+0x4c>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002caa:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <MX_USART2_UART_Init+0x4c>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cb0:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <MX_USART2_UART_Init+0x4c>)
 8002cb2:	220c      	movs	r2, #12
 8002cb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cb6:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <MX_USART2_UART_Init+0x4c>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <MX_USART2_UART_Init+0x4c>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cc2:	4805      	ldr	r0, [pc, #20]	; (8002cd8 <MX_USART2_UART_Init+0x4c>)
 8002cc4:	f002 fa88 	bl	80051d8 <HAL_UART_Init>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002cce:	f7ff fd57 	bl	8002780 <Error_Handler>
  }

}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	200041ec 	.word	0x200041ec
 8002cdc:	40004400 	.word	0x40004400

08002ce0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08a      	sub	sp, #40	; 0x28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce8:	f107 0314 	add.w	r3, r7, #20
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	60da      	str	r2, [r3, #12]
 8002cf6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a4b      	ldr	r2, [pc, #300]	; (8002e2c <HAL_UART_MspInit+0x14c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	f040 8090 	bne.w	8002e24 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d04:	2300      	movs	r3, #0
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	4b49      	ldr	r3, [pc, #292]	; (8002e30 <HAL_UART_MspInit+0x150>)
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	4a48      	ldr	r2, [pc, #288]	; (8002e30 <HAL_UART_MspInit+0x150>)
 8002d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d12:	6413      	str	r3, [r2, #64]	; 0x40
 8002d14:	4b46      	ldr	r3, [pc, #280]	; (8002e30 <HAL_UART_MspInit+0x150>)
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	4b42      	ldr	r3, [pc, #264]	; (8002e30 <HAL_UART_MspInit+0x150>)
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	4a41      	ldr	r2, [pc, #260]	; (8002e30 <HAL_UART_MspInit+0x150>)
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d30:	4b3f      	ldr	r3, [pc, #252]	; (8002e30 <HAL_UART_MspInit+0x150>)
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d3c:	230c      	movs	r3, #12
 8002d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d40:	2302      	movs	r3, #2
 8002d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d4c:	2307      	movs	r3, #7
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d50:	f107 0314 	add.w	r3, r7, #20
 8002d54:	4619      	mov	r1, r3
 8002d56:	4837      	ldr	r0, [pc, #220]	; (8002e34 <HAL_UART_MspInit+0x154>)
 8002d58:	f000 fd54 	bl	8003804 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002d5c:	4b36      	ldr	r3, [pc, #216]	; (8002e38 <HAL_UART_MspInit+0x158>)
 8002d5e:	4a37      	ldr	r2, [pc, #220]	; (8002e3c <HAL_UART_MspInit+0x15c>)
 8002d60:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002d62:	4b35      	ldr	r3, [pc, #212]	; (8002e38 <HAL_UART_MspInit+0x158>)
 8002d64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d68:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d6a:	4b33      	ldr	r3, [pc, #204]	; (8002e38 <HAL_UART_MspInit+0x158>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d70:	4b31      	ldr	r3, [pc, #196]	; (8002e38 <HAL_UART_MspInit+0x158>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d76:	4b30      	ldr	r3, [pc, #192]	; (8002e38 <HAL_UART_MspInit+0x158>)
 8002d78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d7c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d7e:	4b2e      	ldr	r3, [pc, #184]	; (8002e38 <HAL_UART_MspInit+0x158>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d84:	4b2c      	ldr	r3, [pc, #176]	; (8002e38 <HAL_UART_MspInit+0x158>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002d8a:	4b2b      	ldr	r3, [pc, #172]	; (8002e38 <HAL_UART_MspInit+0x158>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d90:	4b29      	ldr	r3, [pc, #164]	; (8002e38 <HAL_UART_MspInit+0x158>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d96:	4b28      	ldr	r3, [pc, #160]	; (8002e38 <HAL_UART_MspInit+0x158>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002d9c:	4826      	ldr	r0, [pc, #152]	; (8002e38 <HAL_UART_MspInit+0x158>)
 8002d9e:	f000 f9a1 	bl	80030e4 <HAL_DMA_Init>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002da8:	f7ff fcea 	bl	8002780 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a22      	ldr	r2, [pc, #136]	; (8002e38 <HAL_UART_MspInit+0x158>)
 8002db0:	635a      	str	r2, [r3, #52]	; 0x34
 8002db2:	4a21      	ldr	r2, [pc, #132]	; (8002e38 <HAL_UART_MspInit+0x158>)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002db8:	4b21      	ldr	r3, [pc, #132]	; (8002e40 <HAL_UART_MspInit+0x160>)
 8002dba:	4a22      	ldr	r2, [pc, #136]	; (8002e44 <HAL_UART_MspInit+0x164>)
 8002dbc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002dbe:	4b20      	ldr	r3, [pc, #128]	; (8002e40 <HAL_UART_MspInit+0x160>)
 8002dc0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002dc4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dc6:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <HAL_UART_MspInit+0x160>)
 8002dc8:	2240      	movs	r2, #64	; 0x40
 8002dca:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dcc:	4b1c      	ldr	r3, [pc, #112]	; (8002e40 <HAL_UART_MspInit+0x160>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002dd2:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <HAL_UART_MspInit+0x160>)
 8002dd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dd8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dda:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <HAL_UART_MspInit+0x160>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002de0:	4b17      	ldr	r3, [pc, #92]	; (8002e40 <HAL_UART_MspInit+0x160>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002de6:	4b16      	ldr	r3, [pc, #88]	; (8002e40 <HAL_UART_MspInit+0x160>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002dec:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <HAL_UART_MspInit+0x160>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002df2:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <HAL_UART_MspInit+0x160>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002df8:	4811      	ldr	r0, [pc, #68]	; (8002e40 <HAL_UART_MspInit+0x160>)
 8002dfa:	f000 f973 	bl	80030e4 <HAL_DMA_Init>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002e04:	f7ff fcbc 	bl	8002780 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a0d      	ldr	r2, [pc, #52]	; (8002e40 <HAL_UART_MspInit+0x160>)
 8002e0c:	631a      	str	r2, [r3, #48]	; 0x30
 8002e0e:	4a0c      	ldr	r2, [pc, #48]	; (8002e40 <HAL_UART_MspInit+0x160>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e14:	2200      	movs	r2, #0
 8002e16:	2100      	movs	r1, #0
 8002e18:	2026      	movs	r0, #38	; 0x26
 8002e1a:	f000 f939 	bl	8003090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e1e:	2026      	movs	r0, #38	; 0x26
 8002e20:	f000 f952 	bl	80030c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002e24:	bf00      	nop
 8002e26:	3728      	adds	r7, #40	; 0x28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40004400 	.word	0x40004400
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40020000 	.word	0x40020000
 8002e38:	2000412c 	.word	0x2000412c
 8002e3c:	40026088 	.word	0x40026088
 8002e40:	2000418c 	.word	0x2000418c
 8002e44:	400260a0 	.word	0x400260a0

08002e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e4e:	e003      	b.n	8002e58 <LoopCopyDataInit>

08002e50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e50:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e56:	3104      	adds	r1, #4

08002e58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e58:	480b      	ldr	r0, [pc, #44]	; (8002e88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e5a:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e60:	d3f6      	bcc.n	8002e50 <CopyDataInit>
  ldr  r2, =_sbss
 8002e62:	4a0b      	ldr	r2, [pc, #44]	; (8002e90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e64:	e002      	b.n	8002e6c <LoopFillZerobss>

08002e66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e68:	f842 3b04 	str.w	r3, [r2], #4

08002e6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e6c:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e70:	d3f9      	bcc.n	8002e66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e72:	f7ff fda9 	bl	80029c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e76:	f005 f8ed 	bl	8008054 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e7a:	f7ff fbef 	bl	800265c <main>
  bx  lr    
 8002e7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e80:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002e84:	08008694 	.word	0x08008694
  ldr  r0, =_sdata
 8002e88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e8c:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8002e90:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002e94:	20004234 	.word	0x20004234

08002e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e98:	e7fe      	b.n	8002e98 <ADC_IRQHandler>
	...

08002e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ea0:	4b0e      	ldr	r3, [pc, #56]	; (8002edc <HAL_Init+0x40>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a0d      	ldr	r2, [pc, #52]	; (8002edc <HAL_Init+0x40>)
 8002ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002eac:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <HAL_Init+0x40>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a0a      	ldr	r2, [pc, #40]	; (8002edc <HAL_Init+0x40>)
 8002eb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eb8:	4b08      	ldr	r3, [pc, #32]	; (8002edc <HAL_Init+0x40>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a07      	ldr	r2, [pc, #28]	; (8002edc <HAL_Init+0x40>)
 8002ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ec4:	2003      	movs	r0, #3
 8002ec6:	f000 f8d8 	bl	800307a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eca:	2000      	movs	r0, #0
 8002ecc:	f7ff fc88 	bl	80027e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ed0:	f7ff fc5e 	bl	8002790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40023c00 	.word	0x40023c00

08002ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ee4:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <HAL_IncTick+0x20>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <HAL_IncTick+0x24>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4413      	add	r3, r2
 8002ef0:	4a04      	ldr	r2, [pc, #16]	; (8002f04 <HAL_IncTick+0x24>)
 8002ef2:	6013      	str	r3, [r2, #0]
}
 8002ef4:	bf00      	nop
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	20000008 	.word	0x20000008
 8002f04:	2000422c 	.word	0x2000422c

08002f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f0c:	4b03      	ldr	r3, [pc, #12]	; (8002f1c <HAL_GetTick+0x14>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	2000422c 	.word	0x2000422c

08002f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <__NVIC_SetPriorityGrouping+0x44>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f52:	4a04      	ldr	r2, [pc, #16]	; (8002f64 <__NVIC_SetPriorityGrouping+0x44>)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	60d3      	str	r3, [r2, #12]
}
 8002f58:	bf00      	nop
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f6c:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <__NVIC_GetPriorityGrouping+0x18>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	0a1b      	lsrs	r3, r3, #8
 8002f72:	f003 0307 	and.w	r3, r3, #7
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	e000ed00 	.word	0xe000ed00

08002f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	db0b      	blt.n	8002fae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	f003 021f 	and.w	r2, r3, #31
 8002f9c:	4907      	ldr	r1, [pc, #28]	; (8002fbc <__NVIC_EnableIRQ+0x38>)
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8002faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	e000e100 	.word	0xe000e100

08002fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	6039      	str	r1, [r7, #0]
 8002fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	db0a      	blt.n	8002fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	490c      	ldr	r1, [pc, #48]	; (800300c <__NVIC_SetPriority+0x4c>)
 8002fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fde:	0112      	lsls	r2, r2, #4
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fe8:	e00a      	b.n	8003000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	4908      	ldr	r1, [pc, #32]	; (8003010 <__NVIC_SetPriority+0x50>)
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	3b04      	subs	r3, #4
 8002ff8:	0112      	lsls	r2, r2, #4
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	761a      	strb	r2, [r3, #24]
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	e000e100 	.word	0xe000e100
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003014:	b480      	push	{r7}
 8003016:	b089      	sub	sp, #36	; 0x24
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f1c3 0307 	rsb	r3, r3, #7
 800302e:	2b04      	cmp	r3, #4
 8003030:	bf28      	it	cs
 8003032:	2304      	movcs	r3, #4
 8003034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3304      	adds	r3, #4
 800303a:	2b06      	cmp	r3, #6
 800303c:	d902      	bls.n	8003044 <NVIC_EncodePriority+0x30>
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3b03      	subs	r3, #3
 8003042:	e000      	b.n	8003046 <NVIC_EncodePriority+0x32>
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003048:	f04f 32ff 	mov.w	r2, #4294967295
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43da      	mvns	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	401a      	ands	r2, r3
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800305c:	f04f 31ff 	mov.w	r1, #4294967295
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	fa01 f303 	lsl.w	r3, r1, r3
 8003066:	43d9      	mvns	r1, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800306c:	4313      	orrs	r3, r2
         );
}
 800306e:	4618      	mov	r0, r3
 8003070:	3724      	adds	r7, #36	; 0x24
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff ff4c 	bl	8002f20 <__NVIC_SetPriorityGrouping>
}
 8003088:	bf00      	nop
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
 800309c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800309e:	2300      	movs	r3, #0
 80030a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030a2:	f7ff ff61 	bl	8002f68 <__NVIC_GetPriorityGrouping>
 80030a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	68b9      	ldr	r1, [r7, #8]
 80030ac:	6978      	ldr	r0, [r7, #20]
 80030ae:	f7ff ffb1 	bl	8003014 <NVIC_EncodePriority>
 80030b2:	4602      	mov	r2, r0
 80030b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030b8:	4611      	mov	r1, r2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff ff80 	bl	8002fc0 <__NVIC_SetPriority>
}
 80030c0:	bf00      	nop
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff ff54 	bl	8002f84 <__NVIC_EnableIRQ>
}
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030f0:	f7ff ff0a 	bl	8002f08 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e099      	b.n	8003234 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0201 	bic.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003120:	e00f      	b.n	8003142 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003122:	f7ff fef1 	bl	8002f08 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b05      	cmp	r3, #5
 800312e:	d908      	bls.n	8003142 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2220      	movs	r2, #32
 8003134:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2203      	movs	r2, #3
 800313a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e078      	b.n	8003234 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1e8      	bne.n	8003122 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	4b38      	ldr	r3, [pc, #224]	; (800323c <HAL_DMA_Init+0x158>)
 800315c:	4013      	ands	r3, r2
 800315e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800316e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800317a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003186:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	2b04      	cmp	r3, #4
 800319a:	d107      	bne.n	80031ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	4313      	orrs	r3, r2
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f023 0307 	bic.w	r3, r3, #7
 80031c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d117      	bne.n	8003206 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4313      	orrs	r3, r2
 80031de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00e      	beq.n	8003206 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 fa91 	bl	8003710 <DMA_CheckFifoParam>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2240      	movs	r2, #64	; 0x40
 80031f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003202:	2301      	movs	r3, #1
 8003204:	e016      	b.n	8003234 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fa48 	bl	80036a4 <DMA_CalcBaseAndBitshift>
 8003214:	4603      	mov	r3, r0
 8003216:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321c:	223f      	movs	r2, #63	; 0x3f
 800321e:	409a      	lsls	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	f010803f 	.word	0xf010803f

08003240 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
 800324c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003256:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_DMA_Start_IT+0x26>
 8003262:	2302      	movs	r3, #2
 8003264:	e040      	b.n	80032e8 <HAL_DMA_Start_IT+0xa8>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b01      	cmp	r3, #1
 8003278:	d12f      	bne.n	80032da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2202      	movs	r2, #2
 800327e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	68b9      	ldr	r1, [r7, #8]
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f9da 	bl	8003648 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003298:	223f      	movs	r2, #63	; 0x3f
 800329a:	409a      	lsls	r2, r3
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0216 	orr.w	r2, r2, #22
 80032ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d007      	beq.n	80032c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0208 	orr.w	r2, r2, #8
 80032c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	e005      	b.n	80032e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80032e2:	2302      	movs	r3, #2
 80032e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80032e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d004      	beq.n	800330e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2280      	movs	r2, #128	; 0x80
 8003308:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e00c      	b.n	8003328 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2205      	movs	r2, #5
 8003312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0201 	bic.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003340:	4b92      	ldr	r3, [pc, #584]	; (800358c <HAL_DMA_IRQHandler+0x258>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a92      	ldr	r2, [pc, #584]	; (8003590 <HAL_DMA_IRQHandler+0x25c>)
 8003346:	fba2 2303 	umull	r2, r3, r2, r3
 800334a:	0a9b      	lsrs	r3, r3, #10
 800334c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003352:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335e:	2208      	movs	r2, #8
 8003360:	409a      	lsls	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d01a      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d013      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0204 	bic.w	r2, r2, #4
 8003386:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338c:	2208      	movs	r2, #8
 800338e:	409a      	lsls	r2, r3
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003398:	f043 0201 	orr.w	r2, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a4:	2201      	movs	r2, #1
 80033a6:	409a      	lsls	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d012      	beq.n	80033d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00b      	beq.n	80033d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c2:	2201      	movs	r2, #1
 80033c4:	409a      	lsls	r2, r3
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ce:	f043 0202 	orr.w	r2, r3, #2
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033da:	2204      	movs	r2, #4
 80033dc:	409a      	lsls	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d012      	beq.n	800340c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00b      	beq.n	800340c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f8:	2204      	movs	r2, #4
 80033fa:	409a      	lsls	r2, r3
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003404:	f043 0204 	orr.w	r2, r3, #4
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003410:	2210      	movs	r2, #16
 8003412:	409a      	lsls	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4013      	ands	r3, r2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d043      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d03c      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342e:	2210      	movs	r2, #16
 8003430:	409a      	lsls	r2, r3
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d018      	beq.n	8003476 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d108      	bne.n	8003464 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d024      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	4798      	blx	r3
 8003462:	e01f      	b.n	80034a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01b      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
 8003474:	e016      	b.n	80034a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003480:	2b00      	cmp	r3, #0
 8003482:	d107      	bne.n	8003494 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0208 	bic.w	r2, r2, #8
 8003492:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a8:	2220      	movs	r2, #32
 80034aa:	409a      	lsls	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 808e 	beq.w	80035d2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0310 	and.w	r3, r3, #16
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 8086 	beq.w	80035d2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ca:	2220      	movs	r2, #32
 80034cc:	409a      	lsls	r2, r3
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b05      	cmp	r3, #5
 80034dc:	d136      	bne.n	800354c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0216 	bic.w	r2, r2, #22
 80034ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695a      	ldr	r2, [r3, #20]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	2b00      	cmp	r3, #0
 8003504:	d103      	bne.n	800350e <HAL_DMA_IRQHandler+0x1da>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350a:	2b00      	cmp	r3, #0
 800350c:	d007      	beq.n	800351e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0208 	bic.w	r2, r2, #8
 800351c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003522:	223f      	movs	r2, #63	; 0x3f
 8003524:	409a      	lsls	r2, r3
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353e:	2b00      	cmp	r3, #0
 8003540:	d07d      	beq.n	800363e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	4798      	blx	r3
        }
        return;
 800354a:	e078      	b.n	800363e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d01c      	beq.n	8003594 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d108      	bne.n	800357a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356c:	2b00      	cmp	r3, #0
 800356e:	d030      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	4798      	blx	r3
 8003578:	e02b      	b.n	80035d2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357e:	2b00      	cmp	r3, #0
 8003580:	d027      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	4798      	blx	r3
 800358a:	e022      	b.n	80035d2 <HAL_DMA_IRQHandler+0x29e>
 800358c:	20000000 	.word	0x20000000
 8003590:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10f      	bne.n	80035c2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0210 	bic.w	r2, r2, #16
 80035b0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d032      	beq.n	8003640 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d022      	beq.n	800362c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2205      	movs	r2, #5
 80035ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0201 	bic.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	3301      	adds	r3, #1
 8003602:	60bb      	str	r3, [r7, #8]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	429a      	cmp	r2, r3
 8003608:	d307      	bcc.n	800361a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1f2      	bne.n	80035fe <HAL_DMA_IRQHandler+0x2ca>
 8003618:	e000      	b.n	800361c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800361a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	4798      	blx	r3
 800363c:	e000      	b.n	8003640 <HAL_DMA_IRQHandler+0x30c>
        return;
 800363e:	bf00      	nop
    }
  }
}
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop

08003648 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
 8003654:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003664:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b40      	cmp	r3, #64	; 0x40
 8003674:	d108      	bne.n	8003688 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003686:	e007      	b.n	8003698 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	60da      	str	r2, [r3, #12]
}
 8003698:	bf00      	nop
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	3b10      	subs	r3, #16
 80036b4:	4a14      	ldr	r2, [pc, #80]	; (8003708 <DMA_CalcBaseAndBitshift+0x64>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	091b      	lsrs	r3, r3, #4
 80036bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036be:	4a13      	ldr	r2, [pc, #76]	; (800370c <DMA_CalcBaseAndBitshift+0x68>)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4413      	add	r3, r2
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	d909      	bls.n	80036e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036da:	f023 0303 	bic.w	r3, r3, #3
 80036de:	1d1a      	adds	r2, r3, #4
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	659a      	str	r2, [r3, #88]	; 0x58
 80036e4:	e007      	b.n	80036f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036ee:	f023 0303 	bic.w	r3, r3, #3
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	aaaaaaab 	.word	0xaaaaaaab
 800370c:	0800867c 	.word	0x0800867c

08003710 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d11f      	bne.n	800376a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b03      	cmp	r3, #3
 800372e:	d855      	bhi.n	80037dc <DMA_CheckFifoParam+0xcc>
 8003730:	a201      	add	r2, pc, #4	; (adr r2, 8003738 <DMA_CheckFifoParam+0x28>)
 8003732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003736:	bf00      	nop
 8003738:	08003749 	.word	0x08003749
 800373c:	0800375b 	.word	0x0800375b
 8003740:	08003749 	.word	0x08003749
 8003744:	080037dd 	.word	0x080037dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d045      	beq.n	80037e0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003758:	e042      	b.n	80037e0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003762:	d13f      	bne.n	80037e4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003768:	e03c      	b.n	80037e4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003772:	d121      	bne.n	80037b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b03      	cmp	r3, #3
 8003778:	d836      	bhi.n	80037e8 <DMA_CheckFifoParam+0xd8>
 800377a:	a201      	add	r2, pc, #4	; (adr r2, 8003780 <DMA_CheckFifoParam+0x70>)
 800377c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003780:	08003791 	.word	0x08003791
 8003784:	08003797 	.word	0x08003797
 8003788:	08003791 	.word	0x08003791
 800378c:	080037a9 	.word	0x080037a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	73fb      	strb	r3, [r7, #15]
      break;
 8003794:	e02f      	b.n	80037f6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d024      	beq.n	80037ec <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a6:	e021      	b.n	80037ec <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037b0:	d11e      	bne.n	80037f0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037b6:	e01b      	b.n	80037f0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d902      	bls.n	80037c4 <DMA_CheckFifoParam+0xb4>
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d003      	beq.n	80037ca <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037c2:	e018      	b.n	80037f6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
      break;
 80037c8:	e015      	b.n	80037f6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00e      	beq.n	80037f4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	73fb      	strb	r3, [r7, #15]
      break;
 80037da:	e00b      	b.n	80037f4 <DMA_CheckFifoParam+0xe4>
      break;
 80037dc:	bf00      	nop
 80037de:	e00a      	b.n	80037f6 <DMA_CheckFifoParam+0xe6>
      break;
 80037e0:	bf00      	nop
 80037e2:	e008      	b.n	80037f6 <DMA_CheckFifoParam+0xe6>
      break;
 80037e4:	bf00      	nop
 80037e6:	e006      	b.n	80037f6 <DMA_CheckFifoParam+0xe6>
      break;
 80037e8:	bf00      	nop
 80037ea:	e004      	b.n	80037f6 <DMA_CheckFifoParam+0xe6>
      break;
 80037ec:	bf00      	nop
 80037ee:	e002      	b.n	80037f6 <DMA_CheckFifoParam+0xe6>
      break;   
 80037f0:	bf00      	nop
 80037f2:	e000      	b.n	80037f6 <DMA_CheckFifoParam+0xe6>
      break;
 80037f4:	bf00      	nop
    }
  } 
  
  return status; 
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003804:	b480      	push	{r7}
 8003806:	b089      	sub	sp, #36	; 0x24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003812:	2300      	movs	r3, #0
 8003814:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003816:	2300      	movs	r3, #0
 8003818:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800381a:	2300      	movs	r3, #0
 800381c:	61fb      	str	r3, [r7, #28]
 800381e:	e16b      	b.n	8003af8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003820:	2201      	movs	r2, #1
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	4013      	ands	r3, r2
 8003832:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	429a      	cmp	r2, r3
 800383a:	f040 815a 	bne.w	8003af2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d00b      	beq.n	800385e <HAL_GPIO_Init+0x5a>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b02      	cmp	r3, #2
 800384c:	d007      	beq.n	800385e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003852:	2b11      	cmp	r3, #17
 8003854:	d003      	beq.n	800385e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b12      	cmp	r3, #18
 800385c:	d130      	bne.n	80038c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	2203      	movs	r2, #3
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43db      	mvns	r3, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4013      	ands	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4313      	orrs	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003894:	2201      	movs	r2, #1
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	43db      	mvns	r3, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4013      	ands	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	091b      	lsrs	r3, r3, #4
 80038aa:	f003 0201 	and.w	r2, r3, #1
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	2203      	movs	r2, #3
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	43db      	mvns	r3, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4013      	ands	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d003      	beq.n	8003900 <HAL_GPIO_Init+0xfc>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b12      	cmp	r3, #18
 80038fe:	d123      	bne.n	8003948 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	08da      	lsrs	r2, r3, #3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3208      	adds	r2, #8
 8003908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800390c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	220f      	movs	r2, #15
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4013      	ands	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4313      	orrs	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	08da      	lsrs	r2, r3, #3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3208      	adds	r2, #8
 8003942:	69b9      	ldr	r1, [r7, #24]
 8003944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	2203      	movs	r2, #3
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 0203 	and.w	r2, r3, #3
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4313      	orrs	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 80b4 	beq.w	8003af2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	4b5f      	ldr	r3, [pc, #380]	; (8003b0c <HAL_GPIO_Init+0x308>)
 8003990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003992:	4a5e      	ldr	r2, [pc, #376]	; (8003b0c <HAL_GPIO_Init+0x308>)
 8003994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003998:	6453      	str	r3, [r2, #68]	; 0x44
 800399a:	4b5c      	ldr	r3, [pc, #368]	; (8003b0c <HAL_GPIO_Init+0x308>)
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039a6:	4a5a      	ldr	r2, [pc, #360]	; (8003b10 <HAL_GPIO_Init+0x30c>)
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	089b      	lsrs	r3, r3, #2
 80039ac:	3302      	adds	r3, #2
 80039ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	220f      	movs	r2, #15
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43db      	mvns	r3, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4013      	ands	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a51      	ldr	r2, [pc, #324]	; (8003b14 <HAL_GPIO_Init+0x310>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d02b      	beq.n	8003a2a <HAL_GPIO_Init+0x226>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a50      	ldr	r2, [pc, #320]	; (8003b18 <HAL_GPIO_Init+0x314>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d025      	beq.n	8003a26 <HAL_GPIO_Init+0x222>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a4f      	ldr	r2, [pc, #316]	; (8003b1c <HAL_GPIO_Init+0x318>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d01f      	beq.n	8003a22 <HAL_GPIO_Init+0x21e>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a4e      	ldr	r2, [pc, #312]	; (8003b20 <HAL_GPIO_Init+0x31c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d019      	beq.n	8003a1e <HAL_GPIO_Init+0x21a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a4d      	ldr	r2, [pc, #308]	; (8003b24 <HAL_GPIO_Init+0x320>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d013      	beq.n	8003a1a <HAL_GPIO_Init+0x216>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a4c      	ldr	r2, [pc, #304]	; (8003b28 <HAL_GPIO_Init+0x324>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00d      	beq.n	8003a16 <HAL_GPIO_Init+0x212>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a4b      	ldr	r2, [pc, #300]	; (8003b2c <HAL_GPIO_Init+0x328>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d007      	beq.n	8003a12 <HAL_GPIO_Init+0x20e>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a4a      	ldr	r2, [pc, #296]	; (8003b30 <HAL_GPIO_Init+0x32c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d101      	bne.n	8003a0e <HAL_GPIO_Init+0x20a>
 8003a0a:	2307      	movs	r3, #7
 8003a0c:	e00e      	b.n	8003a2c <HAL_GPIO_Init+0x228>
 8003a0e:	2308      	movs	r3, #8
 8003a10:	e00c      	b.n	8003a2c <HAL_GPIO_Init+0x228>
 8003a12:	2306      	movs	r3, #6
 8003a14:	e00a      	b.n	8003a2c <HAL_GPIO_Init+0x228>
 8003a16:	2305      	movs	r3, #5
 8003a18:	e008      	b.n	8003a2c <HAL_GPIO_Init+0x228>
 8003a1a:	2304      	movs	r3, #4
 8003a1c:	e006      	b.n	8003a2c <HAL_GPIO_Init+0x228>
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e004      	b.n	8003a2c <HAL_GPIO_Init+0x228>
 8003a22:	2302      	movs	r3, #2
 8003a24:	e002      	b.n	8003a2c <HAL_GPIO_Init+0x228>
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <HAL_GPIO_Init+0x228>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	69fa      	ldr	r2, [r7, #28]
 8003a2e:	f002 0203 	and.w	r2, r2, #3
 8003a32:	0092      	lsls	r2, r2, #2
 8003a34:	4093      	lsls	r3, r2
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a3c:	4934      	ldr	r1, [pc, #208]	; (8003b10 <HAL_GPIO_Init+0x30c>)
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	089b      	lsrs	r3, r3, #2
 8003a42:	3302      	adds	r3, #2
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a4a:	4b3a      	ldr	r3, [pc, #232]	; (8003b34 <HAL_GPIO_Init+0x330>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	43db      	mvns	r3, r3
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4013      	ands	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a6e:	4a31      	ldr	r2, [pc, #196]	; (8003b34 <HAL_GPIO_Init+0x330>)
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a74:	4b2f      	ldr	r3, [pc, #188]	; (8003b34 <HAL_GPIO_Init+0x330>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	4013      	ands	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a98:	4a26      	ldr	r2, [pc, #152]	; (8003b34 <HAL_GPIO_Init+0x330>)
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a9e:	4b25      	ldr	r3, [pc, #148]	; (8003b34 <HAL_GPIO_Init+0x330>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ac2:	4a1c      	ldr	r2, [pc, #112]	; (8003b34 <HAL_GPIO_Init+0x330>)
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ac8:	4b1a      	ldr	r3, [pc, #104]	; (8003b34 <HAL_GPIO_Init+0x330>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003aec:	4a11      	ldr	r2, [pc, #68]	; (8003b34 <HAL_GPIO_Init+0x330>)
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	3301      	adds	r3, #1
 8003af6:	61fb      	str	r3, [r7, #28]
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	2b0f      	cmp	r3, #15
 8003afc:	f67f ae90 	bls.w	8003820 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b00:	bf00      	nop
 8003b02:	3724      	adds	r7, #36	; 0x24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	40013800 	.word	0x40013800
 8003b14:	40020000 	.word	0x40020000
 8003b18:	40020400 	.word	0x40020400
 8003b1c:	40020800 	.word	0x40020800
 8003b20:	40020c00 	.word	0x40020c00
 8003b24:	40021000 	.word	0x40021000
 8003b28:	40021400 	.word	0x40021400
 8003b2c:	40021800 	.word	0x40021800
 8003b30:	40021c00 	.word	0x40021c00
 8003b34:	40013c00 	.word	0x40013c00

08003b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	807b      	strh	r3, [r7, #2]
 8003b44:	4613      	mov	r3, r2
 8003b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b48:	787b      	ldrb	r3, [r7, #1]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b4e:	887a      	ldrh	r2, [r7, #2]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b54:	e003      	b.n	8003b5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b56:	887b      	ldrh	r3, [r7, #2]
 8003b58:	041a      	lsls	r2, r3, #16
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	619a      	str	r2, [r3, #24]
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
 8003b72:	460b      	mov	r3, r1
 8003b74:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695a      	ldr	r2, [r3, #20]
 8003b7a:	887b      	ldrh	r3, [r7, #2]
 8003b7c:	401a      	ands	r2, r3
 8003b7e:	887b      	ldrh	r3, [r7, #2]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d104      	bne.n	8003b8e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003b84:	887b      	ldrh	r3, [r7, #2]
 8003b86:	041a      	lsls	r2, r3, #16
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003b8c:	e002      	b.n	8003b94 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003b8e:	887a      	ldrh	r2, [r7, #2]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	619a      	str	r2, [r3, #24]
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e25b      	b.n	800406a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d075      	beq.n	8003caa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bbe:	4ba3      	ldr	r3, [pc, #652]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d00c      	beq.n	8003be4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bca:	4ba0      	ldr	r3, [pc, #640]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d112      	bne.n	8003bfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bd6:	4b9d      	ldr	r3, [pc, #628]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003be2:	d10b      	bne.n	8003bfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be4:	4b99      	ldr	r3, [pc, #612]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d05b      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x108>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d157      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e236      	b.n	800406a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c04:	d106      	bne.n	8003c14 <HAL_RCC_OscConfig+0x74>
 8003c06:	4b91      	ldr	r3, [pc, #580]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a90      	ldr	r2, [pc, #576]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	e01d      	b.n	8003c50 <HAL_RCC_OscConfig+0xb0>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c1c:	d10c      	bne.n	8003c38 <HAL_RCC_OscConfig+0x98>
 8003c1e:	4b8b      	ldr	r3, [pc, #556]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a8a      	ldr	r2, [pc, #552]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	4b88      	ldr	r3, [pc, #544]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a87      	ldr	r2, [pc, #540]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	e00b      	b.n	8003c50 <HAL_RCC_OscConfig+0xb0>
 8003c38:	4b84      	ldr	r3, [pc, #528]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a83      	ldr	r2, [pc, #524]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	4b81      	ldr	r3, [pc, #516]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a80      	ldr	r2, [pc, #512]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d013      	beq.n	8003c80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c58:	f7ff f956 	bl	8002f08 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c60:	f7ff f952 	bl	8002f08 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b64      	cmp	r3, #100	; 0x64
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e1fb      	b.n	800406a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c72:	4b76      	ldr	r3, [pc, #472]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0f0      	beq.n	8003c60 <HAL_RCC_OscConfig+0xc0>
 8003c7e:	e014      	b.n	8003caa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c80:	f7ff f942 	bl	8002f08 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c88:	f7ff f93e 	bl	8002f08 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b64      	cmp	r3, #100	; 0x64
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e1e7      	b.n	800406a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c9a:	4b6c      	ldr	r3, [pc, #432]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0xe8>
 8003ca6:	e000      	b.n	8003caa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d063      	beq.n	8003d7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cb6:	4b65      	ldr	r3, [pc, #404]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00b      	beq.n	8003cda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cc2:	4b62      	ldr	r3, [pc, #392]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d11c      	bne.n	8003d08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cce:	4b5f      	ldr	r3, [pc, #380]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d116      	bne.n	8003d08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cda:	4b5c      	ldr	r3, [pc, #368]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d005      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x152>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d001      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e1bb      	b.n	800406a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf2:	4b56      	ldr	r3, [pc, #344]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	4952      	ldr	r1, [pc, #328]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d06:	e03a      	b.n	8003d7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d020      	beq.n	8003d52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d10:	4b4f      	ldr	r3, [pc, #316]	; (8003e50 <HAL_RCC_OscConfig+0x2b0>)
 8003d12:	2201      	movs	r2, #1
 8003d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d16:	f7ff f8f7 	bl	8002f08 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d1e:	f7ff f8f3 	bl	8002f08 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e19c      	b.n	800406a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d30:	4b46      	ldr	r3, [pc, #280]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d3c:	4b43      	ldr	r3, [pc, #268]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	4940      	ldr	r1, [pc, #256]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	600b      	str	r3, [r1, #0]
 8003d50:	e015      	b.n	8003d7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d52:	4b3f      	ldr	r3, [pc, #252]	; (8003e50 <HAL_RCC_OscConfig+0x2b0>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d58:	f7ff f8d6 	bl	8002f08 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d60:	f7ff f8d2 	bl	8002f08 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e17b      	b.n	800406a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d72:	4b36      	ldr	r3, [pc, #216]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d030      	beq.n	8003dec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d016      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d92:	4b30      	ldr	r3, [pc, #192]	; (8003e54 <HAL_RCC_OscConfig+0x2b4>)
 8003d94:	2201      	movs	r2, #1
 8003d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d98:	f7ff f8b6 	bl	8002f08 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003da0:	f7ff f8b2 	bl	8002f08 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e15b      	b.n	800406a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db2:	4b26      	ldr	r3, [pc, #152]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0f0      	beq.n	8003da0 <HAL_RCC_OscConfig+0x200>
 8003dbe:	e015      	b.n	8003dec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dc0:	4b24      	ldr	r3, [pc, #144]	; (8003e54 <HAL_RCC_OscConfig+0x2b4>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc6:	f7ff f89f 	bl	8002f08 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dce:	f7ff f89b 	bl	8002f08 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e144      	b.n	800406a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de0:	4b1a      	ldr	r3, [pc, #104]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1f0      	bne.n	8003dce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 80a0 	beq.w	8003f3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dfe:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10f      	bne.n	8003e2a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	4b0f      	ldr	r3, [pc, #60]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	4a0e      	ldr	r2, [pc, #56]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e18:	6413      	str	r3, [r2, #64]	; 0x40
 8003e1a:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e22:	60bb      	str	r3, [r7, #8]
 8003e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e26:	2301      	movs	r3, #1
 8003e28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2a:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <HAL_RCC_OscConfig+0x2b8>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d121      	bne.n	8003e7a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e36:	4b08      	ldr	r3, [pc, #32]	; (8003e58 <HAL_RCC_OscConfig+0x2b8>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a07      	ldr	r2, [pc, #28]	; (8003e58 <HAL_RCC_OscConfig+0x2b8>)
 8003e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e42:	f7ff f861 	bl	8002f08 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e48:	e011      	b.n	8003e6e <HAL_RCC_OscConfig+0x2ce>
 8003e4a:	bf00      	nop
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	42470000 	.word	0x42470000
 8003e54:	42470e80 	.word	0x42470e80
 8003e58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e5c:	f7ff f854 	bl	8002f08 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e0fd      	b.n	800406a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6e:	4b81      	ldr	r3, [pc, #516]	; (8004074 <HAL_RCC_OscConfig+0x4d4>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d106      	bne.n	8003e90 <HAL_RCC_OscConfig+0x2f0>
 8003e82:	4b7d      	ldr	r3, [pc, #500]	; (8004078 <HAL_RCC_OscConfig+0x4d8>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e86:	4a7c      	ldr	r2, [pc, #496]	; (8004078 <HAL_RCC_OscConfig+0x4d8>)
 8003e88:	f043 0301 	orr.w	r3, r3, #1
 8003e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8e:	e01c      	b.n	8003eca <HAL_RCC_OscConfig+0x32a>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2b05      	cmp	r3, #5
 8003e96:	d10c      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x312>
 8003e98:	4b77      	ldr	r3, [pc, #476]	; (8004078 <HAL_RCC_OscConfig+0x4d8>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	4a76      	ldr	r2, [pc, #472]	; (8004078 <HAL_RCC_OscConfig+0x4d8>)
 8003e9e:	f043 0304 	orr.w	r3, r3, #4
 8003ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea4:	4b74      	ldr	r3, [pc, #464]	; (8004078 <HAL_RCC_OscConfig+0x4d8>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea8:	4a73      	ldr	r2, [pc, #460]	; (8004078 <HAL_RCC_OscConfig+0x4d8>)
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb0:	e00b      	b.n	8003eca <HAL_RCC_OscConfig+0x32a>
 8003eb2:	4b71      	ldr	r3, [pc, #452]	; (8004078 <HAL_RCC_OscConfig+0x4d8>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	4a70      	ldr	r2, [pc, #448]	; (8004078 <HAL_RCC_OscConfig+0x4d8>)
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ebe:	4b6e      	ldr	r3, [pc, #440]	; (8004078 <HAL_RCC_OscConfig+0x4d8>)
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec2:	4a6d      	ldr	r2, [pc, #436]	; (8004078 <HAL_RCC_OscConfig+0x4d8>)
 8003ec4:	f023 0304 	bic.w	r3, r3, #4
 8003ec8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d015      	beq.n	8003efe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed2:	f7ff f819 	bl	8002f08 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed8:	e00a      	b.n	8003ef0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eda:	f7ff f815 	bl	8002f08 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e0bc      	b.n	800406a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef0:	4b61      	ldr	r3, [pc, #388]	; (8004078 <HAL_RCC_OscConfig+0x4d8>)
 8003ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0ee      	beq.n	8003eda <HAL_RCC_OscConfig+0x33a>
 8003efc:	e014      	b.n	8003f28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003efe:	f7ff f803 	bl	8002f08 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f04:	e00a      	b.n	8003f1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f06:	f7fe ffff 	bl	8002f08 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e0a6      	b.n	800406a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f1c:	4b56      	ldr	r3, [pc, #344]	; (8004078 <HAL_RCC_OscConfig+0x4d8>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1ee      	bne.n	8003f06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f28:	7dfb      	ldrb	r3, [r7, #23]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d105      	bne.n	8003f3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f2e:	4b52      	ldr	r3, [pc, #328]	; (8004078 <HAL_RCC_OscConfig+0x4d8>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	4a51      	ldr	r2, [pc, #324]	; (8004078 <HAL_RCC_OscConfig+0x4d8>)
 8003f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 8092 	beq.w	8004068 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f44:	4b4c      	ldr	r3, [pc, #304]	; (8004078 <HAL_RCC_OscConfig+0x4d8>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 030c 	and.w	r3, r3, #12
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d05c      	beq.n	800400a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d141      	bne.n	8003fdc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f58:	4b48      	ldr	r3, [pc, #288]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5e:	f7fe ffd3 	bl	8002f08 <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f66:	f7fe ffcf 	bl	8002f08 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e078      	b.n	800406a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f78:	4b3f      	ldr	r3, [pc, #252]	; (8004078 <HAL_RCC_OscConfig+0x4d8>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1f0      	bne.n	8003f66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	69da      	ldr	r2, [r3, #28]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	019b      	lsls	r3, r3, #6
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9a:	085b      	lsrs	r3, r3, #1
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	041b      	lsls	r3, r3, #16
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa6:	061b      	lsls	r3, r3, #24
 8003fa8:	4933      	ldr	r1, [pc, #204]	; (8004078 <HAL_RCC_OscConfig+0x4d8>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fae:	4b33      	ldr	r3, [pc, #204]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb4:	f7fe ffa8 	bl	8002f08 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fbc:	f7fe ffa4 	bl	8002f08 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e04d      	b.n	800406a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fce:	4b2a      	ldr	r3, [pc, #168]	; (8004078 <HAL_RCC_OscConfig+0x4d8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0x41c>
 8003fda:	e045      	b.n	8004068 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fdc:	4b27      	ldr	r3, [pc, #156]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe2:	f7fe ff91 	bl	8002f08 <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fea:	f7fe ff8d 	bl	8002f08 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e036      	b.n	800406a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffc:	4b1e      	ldr	r3, [pc, #120]	; (8004078 <HAL_RCC_OscConfig+0x4d8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1f0      	bne.n	8003fea <HAL_RCC_OscConfig+0x44a>
 8004008:	e02e      	b.n	8004068 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e029      	b.n	800406a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004016:	4b18      	ldr	r3, [pc, #96]	; (8004078 <HAL_RCC_OscConfig+0x4d8>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	429a      	cmp	r2, r3
 8004028:	d11c      	bne.n	8004064 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004034:	429a      	cmp	r2, r3
 8004036:	d115      	bne.n	8004064 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800403e:	4013      	ands	r3, r2
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004044:	4293      	cmp	r3, r2
 8004046:	d10d      	bne.n	8004064 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004052:	429a      	cmp	r2, r3
 8004054:	d106      	bne.n	8004064 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004060:	429a      	cmp	r2, r3
 8004062:	d001      	beq.n	8004068 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e000      	b.n	800406a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40007000 	.word	0x40007000
 8004078:	40023800 	.word	0x40023800
 800407c:	42470060 	.word	0x42470060

08004080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0cc      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004094:	4b68      	ldr	r3, [pc, #416]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 030f 	and.w	r3, r3, #15
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d90c      	bls.n	80040bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a2:	4b65      	ldr	r3, [pc, #404]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040aa:	4b63      	ldr	r3, [pc, #396]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d001      	beq.n	80040bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e0b8      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d020      	beq.n	800410a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040d4:	4b59      	ldr	r3, [pc, #356]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	4a58      	ldr	r2, [pc, #352]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d005      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040ec:	4b53      	ldr	r3, [pc, #332]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	4a52      	ldr	r2, [pc, #328]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f8:	4b50      	ldr	r3, [pc, #320]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	494d      	ldr	r1, [pc, #308]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d044      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d107      	bne.n	800412e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411e:	4b47      	ldr	r3, [pc, #284]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d119      	bne.n	800415e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e07f      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d003      	beq.n	800413e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800413a:	2b03      	cmp	r3, #3
 800413c:	d107      	bne.n	800414e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800413e:	4b3f      	ldr	r3, [pc, #252]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e06f      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800414e:	4b3b      	ldr	r3, [pc, #236]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e067      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800415e:	4b37      	ldr	r3, [pc, #220]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f023 0203 	bic.w	r2, r3, #3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	4934      	ldr	r1, [pc, #208]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	4313      	orrs	r3, r2
 800416e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004170:	f7fe feca 	bl	8002f08 <HAL_GetTick>
 8004174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004176:	e00a      	b.n	800418e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004178:	f7fe fec6 	bl	8002f08 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	f241 3288 	movw	r2, #5000	; 0x1388
 8004186:	4293      	cmp	r3, r2
 8004188:	d901      	bls.n	800418e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e04f      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800418e:	4b2b      	ldr	r3, [pc, #172]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 020c 	and.w	r2, r3, #12
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	429a      	cmp	r2, r3
 800419e:	d1eb      	bne.n	8004178 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041a0:	4b25      	ldr	r3, [pc, #148]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 030f 	and.w	r3, r3, #15
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d20c      	bcs.n	80041c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ae:	4b22      	ldr	r3, [pc, #136]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b6:	4b20      	ldr	r3, [pc, #128]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d001      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e032      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d008      	beq.n	80041e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041d4:	4b19      	ldr	r3, [pc, #100]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	4916      	ldr	r1, [pc, #88]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d009      	beq.n	8004206 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041f2:	4b12      	ldr	r3, [pc, #72]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	490e      	ldr	r1, [pc, #56]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	4313      	orrs	r3, r2
 8004204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004206:	f000 f821 	bl	800424c <HAL_RCC_GetSysClockFreq>
 800420a:	4601      	mov	r1, r0
 800420c:	4b0b      	ldr	r3, [pc, #44]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	091b      	lsrs	r3, r3, #4
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	4a0a      	ldr	r2, [pc, #40]	; (8004240 <HAL_RCC_ClockConfig+0x1c0>)
 8004218:	5cd3      	ldrb	r3, [r2, r3]
 800421a:	fa21 f303 	lsr.w	r3, r1, r3
 800421e:	4a09      	ldr	r2, [pc, #36]	; (8004244 <HAL_RCC_ClockConfig+0x1c4>)
 8004220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004222:	4b09      	ldr	r3, [pc, #36]	; (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f7fe fada 	bl	80027e0 <HAL_InitTick>

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40023c00 	.word	0x40023c00
 800423c:	40023800 	.word	0x40023800
 8004240:	08008664 	.word	0x08008664
 8004244:	20000000 	.word	0x20000000
 8004248:	20000004 	.word	0x20000004

0800424c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800424c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	607b      	str	r3, [r7, #4]
 8004256:	2300      	movs	r3, #0
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	2300      	movs	r3, #0
 800425c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004262:	4b63      	ldr	r3, [pc, #396]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 030c 	and.w	r3, r3, #12
 800426a:	2b04      	cmp	r3, #4
 800426c:	d007      	beq.n	800427e <HAL_RCC_GetSysClockFreq+0x32>
 800426e:	2b08      	cmp	r3, #8
 8004270:	d008      	beq.n	8004284 <HAL_RCC_GetSysClockFreq+0x38>
 8004272:	2b00      	cmp	r3, #0
 8004274:	f040 80b4 	bne.w	80043e0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004278:	4b5e      	ldr	r3, [pc, #376]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800427a:	60bb      	str	r3, [r7, #8]
       break;
 800427c:	e0b3      	b.n	80043e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800427e:	4b5e      	ldr	r3, [pc, #376]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004280:	60bb      	str	r3, [r7, #8]
      break;
 8004282:	e0b0      	b.n	80043e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004284:	4b5a      	ldr	r3, [pc, #360]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800428c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800428e:	4b58      	ldr	r3, [pc, #352]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d04a      	beq.n	8004330 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800429a:	4b55      	ldr	r3, [pc, #340]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	099b      	lsrs	r3, r3, #6
 80042a0:	f04f 0400 	mov.w	r4, #0
 80042a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	ea03 0501 	and.w	r5, r3, r1
 80042b0:	ea04 0602 	and.w	r6, r4, r2
 80042b4:	4629      	mov	r1, r5
 80042b6:	4632      	mov	r2, r6
 80042b8:	f04f 0300 	mov.w	r3, #0
 80042bc:	f04f 0400 	mov.w	r4, #0
 80042c0:	0154      	lsls	r4, r2, #5
 80042c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042c6:	014b      	lsls	r3, r1, #5
 80042c8:	4619      	mov	r1, r3
 80042ca:	4622      	mov	r2, r4
 80042cc:	1b49      	subs	r1, r1, r5
 80042ce:	eb62 0206 	sbc.w	r2, r2, r6
 80042d2:	f04f 0300 	mov.w	r3, #0
 80042d6:	f04f 0400 	mov.w	r4, #0
 80042da:	0194      	lsls	r4, r2, #6
 80042dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042e0:	018b      	lsls	r3, r1, #6
 80042e2:	1a5b      	subs	r3, r3, r1
 80042e4:	eb64 0402 	sbc.w	r4, r4, r2
 80042e8:	f04f 0100 	mov.w	r1, #0
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	00e2      	lsls	r2, r4, #3
 80042f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042f6:	00d9      	lsls	r1, r3, #3
 80042f8:	460b      	mov	r3, r1
 80042fa:	4614      	mov	r4, r2
 80042fc:	195b      	adds	r3, r3, r5
 80042fe:	eb44 0406 	adc.w	r4, r4, r6
 8004302:	f04f 0100 	mov.w	r1, #0
 8004306:	f04f 0200 	mov.w	r2, #0
 800430a:	0262      	lsls	r2, r4, #9
 800430c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004310:	0259      	lsls	r1, r3, #9
 8004312:	460b      	mov	r3, r1
 8004314:	4614      	mov	r4, r2
 8004316:	4618      	mov	r0, r3
 8004318:	4621      	mov	r1, r4
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f04f 0400 	mov.w	r4, #0
 8004320:	461a      	mov	r2, r3
 8004322:	4623      	mov	r3, r4
 8004324:	f7fb ff5c 	bl	80001e0 <__aeabi_uldivmod>
 8004328:	4603      	mov	r3, r0
 800432a:	460c      	mov	r4, r1
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	e049      	b.n	80043c4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004330:	4b2f      	ldr	r3, [pc, #188]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	099b      	lsrs	r3, r3, #6
 8004336:	f04f 0400 	mov.w	r4, #0
 800433a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800433e:	f04f 0200 	mov.w	r2, #0
 8004342:	ea03 0501 	and.w	r5, r3, r1
 8004346:	ea04 0602 	and.w	r6, r4, r2
 800434a:	4629      	mov	r1, r5
 800434c:	4632      	mov	r2, r6
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	f04f 0400 	mov.w	r4, #0
 8004356:	0154      	lsls	r4, r2, #5
 8004358:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800435c:	014b      	lsls	r3, r1, #5
 800435e:	4619      	mov	r1, r3
 8004360:	4622      	mov	r2, r4
 8004362:	1b49      	subs	r1, r1, r5
 8004364:	eb62 0206 	sbc.w	r2, r2, r6
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	f04f 0400 	mov.w	r4, #0
 8004370:	0194      	lsls	r4, r2, #6
 8004372:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004376:	018b      	lsls	r3, r1, #6
 8004378:	1a5b      	subs	r3, r3, r1
 800437a:	eb64 0402 	sbc.w	r4, r4, r2
 800437e:	f04f 0100 	mov.w	r1, #0
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	00e2      	lsls	r2, r4, #3
 8004388:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800438c:	00d9      	lsls	r1, r3, #3
 800438e:	460b      	mov	r3, r1
 8004390:	4614      	mov	r4, r2
 8004392:	195b      	adds	r3, r3, r5
 8004394:	eb44 0406 	adc.w	r4, r4, r6
 8004398:	f04f 0100 	mov.w	r1, #0
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	02a2      	lsls	r2, r4, #10
 80043a2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80043a6:	0299      	lsls	r1, r3, #10
 80043a8:	460b      	mov	r3, r1
 80043aa:	4614      	mov	r4, r2
 80043ac:	4618      	mov	r0, r3
 80043ae:	4621      	mov	r1, r4
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f04f 0400 	mov.w	r4, #0
 80043b6:	461a      	mov	r2, r3
 80043b8:	4623      	mov	r3, r4
 80043ba:	f7fb ff11 	bl	80001e0 <__aeabi_uldivmod>
 80043be:	4603      	mov	r3, r0
 80043c0:	460c      	mov	r4, r1
 80043c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043c4:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	0c1b      	lsrs	r3, r3, #16
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	3301      	adds	r3, #1
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043dc:	60bb      	str	r3, [r7, #8]
      break;
 80043de:	e002      	b.n	80043e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043e0:	4b04      	ldr	r3, [pc, #16]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80043e2:	60bb      	str	r3, [r7, #8]
      break;
 80043e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043e6:	68bb      	ldr	r3, [r7, #8]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043f0:	40023800 	.word	0x40023800
 80043f4:	00f42400 	.word	0x00f42400
 80043f8:	007a1200 	.word	0x007a1200

080043fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004400:	4b03      	ldr	r3, [pc, #12]	; (8004410 <HAL_RCC_GetHCLKFreq+0x14>)
 8004402:	681b      	ldr	r3, [r3, #0]
}
 8004404:	4618      	mov	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	20000000 	.word	0x20000000

08004414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004418:	f7ff fff0 	bl	80043fc <HAL_RCC_GetHCLKFreq>
 800441c:	4601      	mov	r1, r0
 800441e:	4b05      	ldr	r3, [pc, #20]	; (8004434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	0a9b      	lsrs	r3, r3, #10
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	4a03      	ldr	r2, [pc, #12]	; (8004438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800442a:	5cd3      	ldrb	r3, [r2, r3]
 800442c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004430:	4618      	mov	r0, r3
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40023800 	.word	0x40023800
 8004438:	08008674 	.word	0x08008674

0800443c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004440:	f7ff ffdc 	bl	80043fc <HAL_RCC_GetHCLKFreq>
 8004444:	4601      	mov	r1, r0
 8004446:	4b05      	ldr	r3, [pc, #20]	; (800445c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	0b5b      	lsrs	r3, r3, #13
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	4a03      	ldr	r2, [pc, #12]	; (8004460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004452:	5cd3      	ldrb	r3, [r2, r3]
 8004454:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004458:	4618      	mov	r0, r3
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40023800 	.word	0x40023800
 8004460:	08008674 	.word	0x08008674

08004464 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	220f      	movs	r2, #15
 8004472:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004474:	4b12      	ldr	r3, [pc, #72]	; (80044c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 0203 	and.w	r2, r3, #3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004480:	4b0f      	ldr	r3, [pc, #60]	; (80044c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800448c:	4b0c      	ldr	r3, [pc, #48]	; (80044c0 <HAL_RCC_GetClockConfig+0x5c>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004498:	4b09      	ldr	r3, [pc, #36]	; (80044c0 <HAL_RCC_GetClockConfig+0x5c>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	08db      	lsrs	r3, r3, #3
 800449e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044a6:	4b07      	ldr	r3, [pc, #28]	; (80044c4 <HAL_RCC_GetClockConfig+0x60>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 020f 	and.w	r2, r3, #15
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	601a      	str	r2, [r3, #0]
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	40023800 	.word	0x40023800
 80044c4:	40023c00 	.word	0x40023c00

080044c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e01d      	b.n	8004516 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d106      	bne.n	80044f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f815 	bl	800451e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3304      	adds	r3, #4
 8004504:	4619      	mov	r1, r3
 8004506:	4610      	mov	r0, r2
 8004508:	f000 fb60 	bl	8004bcc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004532:	b480      	push	{r7}
 8004534:	b085      	sub	sp, #20
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0201 	orr.w	r2, r2, #1
 8004548:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2b06      	cmp	r3, #6
 800455a:	d007      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0201 	orr.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b082      	sub	sp, #8
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e01d      	b.n	80045c8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d106      	bne.n	80045a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7fe fad3 	bl	8002b4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2202      	movs	r2, #2
 80045aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	3304      	adds	r3, #4
 80045b6:	4619      	mov	r1, r3
 80045b8:	4610      	mov	r0, r2
 80045ba:	f000 fb07 	bl	8004bcc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2201      	movs	r2, #1
 80045e0:	6839      	ldr	r1, [r7, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 fd42 	bl	800506c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a15      	ldr	r2, [pc, #84]	; (8004644 <HAL_TIM_PWM_Start+0x74>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d004      	beq.n	80045fc <HAL_TIM_PWM_Start+0x2c>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a14      	ldr	r2, [pc, #80]	; (8004648 <HAL_TIM_PWM_Start+0x78>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d101      	bne.n	8004600 <HAL_TIM_PWM_Start+0x30>
 80045fc:	2301      	movs	r3, #1
 80045fe:	e000      	b.n	8004602 <HAL_TIM_PWM_Start+0x32>
 8004600:	2300      	movs	r3, #0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d007      	beq.n	8004616 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004614:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2b06      	cmp	r3, #6
 8004626:	d007      	beq.n	8004638 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0201 	orr.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40010000 	.word	0x40010000
 8004648:	40010400 	.word	0x40010400

0800464c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e083      	b.n	8004768 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d106      	bne.n	800467a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7fe fa89 	bl	8002b8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2202      	movs	r2, #2
 800467e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6812      	ldr	r2, [r2, #0]
 800468c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004690:	f023 0307 	bic.w	r3, r3, #7
 8004694:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3304      	adds	r3, #4
 800469e:	4619      	mov	r1, r3
 80046a0:	4610      	mov	r0, r2
 80046a2:	f000 fa93 	bl	8004bcc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ce:	f023 0303 	bic.w	r3, r3, #3
 80046d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	021b      	lsls	r3, r3, #8
 80046de:	4313      	orrs	r3, r2
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80046ec:	f023 030c 	bic.w	r3, r3, #12
 80046f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	021b      	lsls	r3, r3, #8
 8004708:	4313      	orrs	r3, r2
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	4313      	orrs	r3, r2
 800470e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	011a      	lsls	r2, r3, #4
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	031b      	lsls	r3, r3, #12
 800471c:	4313      	orrs	r3, r2
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800472a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004732:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	011b      	lsls	r3, r3, #4
 800473e:	4313      	orrs	r3, r2
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <HAL_TIM_Encoder_Start+0x16>
 8004780:	2b04      	cmp	r3, #4
 8004782:	d008      	beq.n	8004796 <HAL_TIM_Encoder_Start+0x26>
 8004784:	e00f      	b.n	80047a6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2201      	movs	r2, #1
 800478c:	2100      	movs	r1, #0
 800478e:	4618      	mov	r0, r3
 8004790:	f000 fc6c 	bl	800506c <TIM_CCxChannelCmd>
      break;
 8004794:	e016      	b.n	80047c4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2201      	movs	r2, #1
 800479c:	2104      	movs	r1, #4
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 fc64 	bl	800506c <TIM_CCxChannelCmd>
      break;
 80047a4:	e00e      	b.n	80047c4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2201      	movs	r2, #1
 80047ac:	2100      	movs	r1, #0
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 fc5c 	bl	800506c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2201      	movs	r2, #1
 80047ba:	2104      	movs	r1, #4
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 fc55 	bl	800506c <TIM_CCxChannelCmd>
      break;
 80047c2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b082      	sub	sp, #8
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d122      	bne.n	800483a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d11b      	bne.n	800483a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f06f 0202 	mvn.w	r2, #2
 800480a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 f9b5 	bl	8004b90 <HAL_TIM_IC_CaptureCallback>
 8004826:	e005      	b.n	8004834 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f9a7 	bl	8004b7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f9b8 	bl	8004ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b04      	cmp	r3, #4
 8004846:	d122      	bne.n	800488e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f003 0304 	and.w	r3, r3, #4
 8004852:	2b04      	cmp	r3, #4
 8004854:	d11b      	bne.n	800488e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f06f 0204 	mvn.w	r2, #4
 800485e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f98b 	bl	8004b90 <HAL_TIM_IC_CaptureCallback>
 800487a:	e005      	b.n	8004888 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f97d 	bl	8004b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f98e 	bl	8004ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	2b08      	cmp	r3, #8
 800489a:	d122      	bne.n	80048e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d11b      	bne.n	80048e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f06f 0208 	mvn.w	r2, #8
 80048b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2204      	movs	r2, #4
 80048b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f961 	bl	8004b90 <HAL_TIM_IC_CaptureCallback>
 80048ce:	e005      	b.n	80048dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f953 	bl	8004b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f964 	bl	8004ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	f003 0310 	and.w	r3, r3, #16
 80048ec:	2b10      	cmp	r3, #16
 80048ee:	d122      	bne.n	8004936 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f003 0310 	and.w	r3, r3, #16
 80048fa:	2b10      	cmp	r3, #16
 80048fc:	d11b      	bne.n	8004936 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f06f 0210 	mvn.w	r2, #16
 8004906:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2208      	movs	r2, #8
 800490c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f937 	bl	8004b90 <HAL_TIM_IC_CaptureCallback>
 8004922:	e005      	b.n	8004930 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f929 	bl	8004b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f93a 	bl	8004ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b01      	cmp	r3, #1
 8004942:	d10e      	bne.n	8004962 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b01      	cmp	r3, #1
 8004950:	d107      	bne.n	8004962 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f06f 0201 	mvn.w	r2, #1
 800495a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7fd fefd 	bl	800275c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496c:	2b80      	cmp	r3, #128	; 0x80
 800496e:	d10e      	bne.n	800498e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497a:	2b80      	cmp	r3, #128	; 0x80
 800497c:	d107      	bne.n	800498e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fc1b 	bl	80051c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004998:	2b40      	cmp	r3, #64	; 0x40
 800499a:	d10e      	bne.n	80049ba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a6:	2b40      	cmp	r3, #64	; 0x40
 80049a8:	d107      	bne.n	80049ba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f8ff 	bl	8004bb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	f003 0320 	and.w	r3, r3, #32
 80049c4:	2b20      	cmp	r3, #32
 80049c6:	d10e      	bne.n	80049e6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f003 0320 	and.w	r3, r3, #32
 80049d2:	2b20      	cmp	r3, #32
 80049d4:	d107      	bne.n	80049e6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f06f 0220 	mvn.w	r2, #32
 80049de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 fbe5 	bl	80051b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049e6:	bf00      	nop
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d101      	bne.n	8004a0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a06:	2302      	movs	r3, #2
 8004a08:	e0b4      	b.n	8004b74 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2202      	movs	r2, #2
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b0c      	cmp	r3, #12
 8004a1e:	f200 809f 	bhi.w	8004b60 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004a22:	a201      	add	r2, pc, #4	; (adr r2, 8004a28 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a28:	08004a5d 	.word	0x08004a5d
 8004a2c:	08004b61 	.word	0x08004b61
 8004a30:	08004b61 	.word	0x08004b61
 8004a34:	08004b61 	.word	0x08004b61
 8004a38:	08004a9d 	.word	0x08004a9d
 8004a3c:	08004b61 	.word	0x08004b61
 8004a40:	08004b61 	.word	0x08004b61
 8004a44:	08004b61 	.word	0x08004b61
 8004a48:	08004adf 	.word	0x08004adf
 8004a4c:	08004b61 	.word	0x08004b61
 8004a50:	08004b61 	.word	0x08004b61
 8004a54:	08004b61 	.word	0x08004b61
 8004a58:	08004b1f 	.word	0x08004b1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68b9      	ldr	r1, [r7, #8]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 f952 	bl	8004d0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0208 	orr.w	r2, r2, #8
 8004a76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699a      	ldr	r2, [r3, #24]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0204 	bic.w	r2, r2, #4
 8004a86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6999      	ldr	r1, [r3, #24]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	691a      	ldr	r2, [r3, #16]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	619a      	str	r2, [r3, #24]
      break;
 8004a9a:	e062      	b.n	8004b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68b9      	ldr	r1, [r7, #8]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 f9a2 	bl	8004dec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699a      	ldr	r2, [r3, #24]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6999      	ldr	r1, [r3, #24]
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	021a      	lsls	r2, r3, #8
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	619a      	str	r2, [r3, #24]
      break;
 8004adc:	e041      	b.n	8004b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68b9      	ldr	r1, [r7, #8]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 f9f7 	bl	8004ed8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69da      	ldr	r2, [r3, #28]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f042 0208 	orr.w	r2, r2, #8
 8004af8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69da      	ldr	r2, [r3, #28]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 0204 	bic.w	r2, r2, #4
 8004b08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69d9      	ldr	r1, [r3, #28]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	61da      	str	r2, [r3, #28]
      break;
 8004b1c:	e021      	b.n	8004b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68b9      	ldr	r1, [r7, #8]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 fa4b 	bl	8004fc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69da      	ldr	r2, [r3, #28]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69d9      	ldr	r1, [r3, #28]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	021a      	lsls	r2, r3, #8
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	61da      	str	r2, [r3, #28]
      break;
 8004b5e:	e000      	b.n	8004b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004b60:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a40      	ldr	r2, [pc, #256]	; (8004ce0 <TIM_Base_SetConfig+0x114>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d013      	beq.n	8004c0c <TIM_Base_SetConfig+0x40>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bea:	d00f      	beq.n	8004c0c <TIM_Base_SetConfig+0x40>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a3d      	ldr	r2, [pc, #244]	; (8004ce4 <TIM_Base_SetConfig+0x118>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00b      	beq.n	8004c0c <TIM_Base_SetConfig+0x40>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a3c      	ldr	r2, [pc, #240]	; (8004ce8 <TIM_Base_SetConfig+0x11c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d007      	beq.n	8004c0c <TIM_Base_SetConfig+0x40>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a3b      	ldr	r2, [pc, #236]	; (8004cec <TIM_Base_SetConfig+0x120>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d003      	beq.n	8004c0c <TIM_Base_SetConfig+0x40>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a3a      	ldr	r2, [pc, #232]	; (8004cf0 <TIM_Base_SetConfig+0x124>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d108      	bne.n	8004c1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a2f      	ldr	r2, [pc, #188]	; (8004ce0 <TIM_Base_SetConfig+0x114>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d02b      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c2c:	d027      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a2c      	ldr	r2, [pc, #176]	; (8004ce4 <TIM_Base_SetConfig+0x118>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d023      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a2b      	ldr	r2, [pc, #172]	; (8004ce8 <TIM_Base_SetConfig+0x11c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d01f      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a2a      	ldr	r2, [pc, #168]	; (8004cec <TIM_Base_SetConfig+0x120>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d01b      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a29      	ldr	r2, [pc, #164]	; (8004cf0 <TIM_Base_SetConfig+0x124>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d017      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a28      	ldr	r2, [pc, #160]	; (8004cf4 <TIM_Base_SetConfig+0x128>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d013      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a27      	ldr	r2, [pc, #156]	; (8004cf8 <TIM_Base_SetConfig+0x12c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d00f      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a26      	ldr	r2, [pc, #152]	; (8004cfc <TIM_Base_SetConfig+0x130>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00b      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a25      	ldr	r2, [pc, #148]	; (8004d00 <TIM_Base_SetConfig+0x134>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d007      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a24      	ldr	r2, [pc, #144]	; (8004d04 <TIM_Base_SetConfig+0x138>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d003      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a23      	ldr	r2, [pc, #140]	; (8004d08 <TIM_Base_SetConfig+0x13c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d108      	bne.n	8004c90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a0a      	ldr	r2, [pc, #40]	; (8004ce0 <TIM_Base_SetConfig+0x114>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d003      	beq.n	8004cc4 <TIM_Base_SetConfig+0xf8>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a0c      	ldr	r2, [pc, #48]	; (8004cf0 <TIM_Base_SetConfig+0x124>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d103      	bne.n	8004ccc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	691a      	ldr	r2, [r3, #16]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	615a      	str	r2, [r3, #20]
}
 8004cd2:	bf00      	nop
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	40010000 	.word	0x40010000
 8004ce4:	40000400 	.word	0x40000400
 8004ce8:	40000800 	.word	0x40000800
 8004cec:	40000c00 	.word	0x40000c00
 8004cf0:	40010400 	.word	0x40010400
 8004cf4:	40014000 	.word	0x40014000
 8004cf8:	40014400 	.word	0x40014400
 8004cfc:	40014800 	.word	0x40014800
 8004d00:	40001800 	.word	0x40001800
 8004d04:	40001c00 	.word	0x40001c00
 8004d08:	40002000 	.word	0x40002000

08004d0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	f023 0201 	bic.w	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f023 0303 	bic.w	r3, r3, #3
 8004d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f023 0302 	bic.w	r3, r3, #2
 8004d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a20      	ldr	r2, [pc, #128]	; (8004de4 <TIM_OC1_SetConfig+0xd8>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d003      	beq.n	8004d70 <TIM_OC1_SetConfig+0x64>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a1f      	ldr	r2, [pc, #124]	; (8004de8 <TIM_OC1_SetConfig+0xdc>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d10c      	bne.n	8004d8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f023 0308 	bic.w	r3, r3, #8
 8004d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f023 0304 	bic.w	r3, r3, #4
 8004d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a15      	ldr	r2, [pc, #84]	; (8004de4 <TIM_OC1_SetConfig+0xd8>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d003      	beq.n	8004d9a <TIM_OC1_SetConfig+0x8e>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a14      	ldr	r2, [pc, #80]	; (8004de8 <TIM_OC1_SetConfig+0xdc>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d111      	bne.n	8004dbe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004da0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004da8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	621a      	str	r2, [r3, #32]
}
 8004dd8:	bf00      	nop
 8004dda:	371c      	adds	r7, #28
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr
 8004de4:	40010000 	.word	0x40010000
 8004de8:	40010400 	.word	0x40010400

08004dec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	f023 0210 	bic.w	r2, r3, #16
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	021b      	lsls	r3, r3, #8
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f023 0320 	bic.w	r3, r3, #32
 8004e36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	011b      	lsls	r3, r3, #4
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a22      	ldr	r2, [pc, #136]	; (8004ed0 <TIM_OC2_SetConfig+0xe4>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d003      	beq.n	8004e54 <TIM_OC2_SetConfig+0x68>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a21      	ldr	r2, [pc, #132]	; (8004ed4 <TIM_OC2_SetConfig+0xe8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d10d      	bne.n	8004e70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a17      	ldr	r2, [pc, #92]	; (8004ed0 <TIM_OC2_SetConfig+0xe4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d003      	beq.n	8004e80 <TIM_OC2_SetConfig+0x94>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a16      	ldr	r2, [pc, #88]	; (8004ed4 <TIM_OC2_SetConfig+0xe8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d113      	bne.n	8004ea8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	621a      	str	r2, [r3, #32]
}
 8004ec2:	bf00      	nop
 8004ec4:	371c      	adds	r7, #28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40010000 	.word	0x40010000
 8004ed4:	40010400 	.word	0x40010400

08004ed8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0303 	bic.w	r3, r3, #3
 8004f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	021b      	lsls	r3, r3, #8
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a21      	ldr	r2, [pc, #132]	; (8004fb8 <TIM_OC3_SetConfig+0xe0>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d003      	beq.n	8004f3e <TIM_OC3_SetConfig+0x66>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a20      	ldr	r2, [pc, #128]	; (8004fbc <TIM_OC3_SetConfig+0xe4>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d10d      	bne.n	8004f5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	021b      	lsls	r3, r3, #8
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a16      	ldr	r2, [pc, #88]	; (8004fb8 <TIM_OC3_SetConfig+0xe0>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d003      	beq.n	8004f6a <TIM_OC3_SetConfig+0x92>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a15      	ldr	r2, [pc, #84]	; (8004fbc <TIM_OC3_SetConfig+0xe4>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d113      	bne.n	8004f92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	011b      	lsls	r3, r3, #4
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	011b      	lsls	r3, r3, #4
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	621a      	str	r2, [r3, #32]
}
 8004fac:	bf00      	nop
 8004fae:	371c      	adds	r7, #28
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	40010000 	.word	0x40010000
 8004fbc:	40010400 	.word	0x40010400

08004fc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	021b      	lsls	r3, r3, #8
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4313      	orrs	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800500a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	031b      	lsls	r3, r3, #12
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a12      	ldr	r2, [pc, #72]	; (8005064 <TIM_OC4_SetConfig+0xa4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d003      	beq.n	8005028 <TIM_OC4_SetConfig+0x68>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a11      	ldr	r2, [pc, #68]	; (8005068 <TIM_OC4_SetConfig+0xa8>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d109      	bne.n	800503c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800502e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	019b      	lsls	r3, r3, #6
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	621a      	str	r2, [r3, #32]
}
 8005056:	bf00      	nop
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	40010000 	.word	0x40010000
 8005068:	40010400 	.word	0x40010400

0800506c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f003 031f 	and.w	r3, r3, #31
 800507e:	2201      	movs	r2, #1
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a1a      	ldr	r2, [r3, #32]
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	43db      	mvns	r3, r3
 800508e:	401a      	ands	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a1a      	ldr	r2, [r3, #32]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f003 031f 	and.w	r3, r3, #31
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	fa01 f303 	lsl.w	r3, r1, r3
 80050a4:	431a      	orrs	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	621a      	str	r2, [r3, #32]
}
 80050aa:	bf00      	nop
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
	...

080050b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e05a      	b.n	8005186 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	4313      	orrs	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a21      	ldr	r2, [pc, #132]	; (8005194 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d022      	beq.n	800515a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511c:	d01d      	beq.n	800515a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a1d      	ldr	r2, [pc, #116]	; (8005198 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d018      	beq.n	800515a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a1b      	ldr	r2, [pc, #108]	; (800519c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d013      	beq.n	800515a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a1a      	ldr	r2, [pc, #104]	; (80051a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d00e      	beq.n	800515a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a18      	ldr	r2, [pc, #96]	; (80051a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d009      	beq.n	800515a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a17      	ldr	r2, [pc, #92]	; (80051a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d004      	beq.n	800515a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a15      	ldr	r2, [pc, #84]	; (80051ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d10c      	bne.n	8005174 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005160:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	4313      	orrs	r3, r2
 800516a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	40010000 	.word	0x40010000
 8005198:	40000400 	.word	0x40000400
 800519c:	40000800 	.word	0x40000800
 80051a0:	40000c00 	.word	0x40000c00
 80051a4:	40010400 	.word	0x40010400
 80051a8:	40014000 	.word	0x40014000
 80051ac:	40001800 	.word	0x40001800

080051b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e03f      	b.n	800526a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d106      	bne.n	8005204 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7fd fd6e 	bl	8002ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2224      	movs	r2, #36	; 0x24
 8005208:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68da      	ldr	r2, [r3, #12]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800521a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 fc41 	bl	8005aa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	691a      	ldr	r2, [r3, #16]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005230:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	695a      	ldr	r2, [r3, #20]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005240:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68da      	ldr	r2, [r3, #12]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005250:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2220      	movs	r2, #32
 800525c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	4613      	mov	r3, r2
 8005280:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b20      	cmp	r3, #32
 800528c:	d153      	bne.n	8005336 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <HAL_UART_Transmit_DMA+0x26>
 8005294:	88fb      	ldrh	r3, [r7, #6]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e04c      	b.n	8005338 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d101      	bne.n	80052ac <HAL_UART_Transmit_DMA+0x38>
 80052a8:	2302      	movs	r3, #2
 80052aa:	e045      	b.n	8005338 <HAL_UART_Transmit_DMA+0xc4>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	88fa      	ldrh	r2, [r7, #6]
 80052be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	88fa      	ldrh	r2, [r7, #6]
 80052c4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2221      	movs	r2, #33	; 0x21
 80052d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d8:	4a19      	ldr	r2, [pc, #100]	; (8005340 <HAL_UART_Transmit_DMA+0xcc>)
 80052da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e0:	4a18      	ldr	r2, [pc, #96]	; (8005344 <HAL_UART_Transmit_DMA+0xd0>)
 80052e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e8:	4a17      	ldr	r2, [pc, #92]	; (8005348 <HAL_UART_Transmit_DMA+0xd4>)
 80052ea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f0:	2200      	movs	r2, #0
 80052f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80052f4:	f107 0308 	add.w	r3, r7, #8
 80052f8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	6819      	ldr	r1, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3304      	adds	r3, #4
 8005308:	461a      	mov	r2, r3
 800530a:	88fb      	ldrh	r3, [r7, #6]
 800530c:	f7fd ff98 	bl	8003240 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005318:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	695a      	ldr	r2, [r3, #20]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005330:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	e000      	b.n	8005338 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8005336:	2302      	movs	r3, #2
  }
}
 8005338:	4618      	mov	r0, r3
 800533a:	3718      	adds	r7, #24
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	080056b1 	.word	0x080056b1
 8005344:	08005703 	.word	0x08005703
 8005348:	080057a3 	.word	0x080057a3

0800534c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	4613      	mov	r3, r2
 8005358:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b20      	cmp	r3, #32
 8005364:	d166      	bne.n	8005434 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d002      	beq.n	8005372 <HAL_UART_Receive_DMA+0x26>
 800536c:	88fb      	ldrh	r3, [r7, #6]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e05f      	b.n	8005436 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_UART_Receive_DMA+0x38>
 8005380:	2302      	movs	r3, #2
 8005382:	e058      	b.n	8005436 <HAL_UART_Receive_DMA+0xea>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	88fa      	ldrh	r2, [r7, #6]
 8005396:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2222      	movs	r2, #34	; 0x22
 80053a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053aa:	4a25      	ldr	r2, [pc, #148]	; (8005440 <HAL_UART_Receive_DMA+0xf4>)
 80053ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b2:	4a24      	ldr	r2, [pc, #144]	; (8005444 <HAL_UART_Receive_DMA+0xf8>)
 80053b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ba:	4a23      	ldr	r2, [pc, #140]	; (8005448 <HAL_UART_Receive_DMA+0xfc>)
 80053bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c2:	2200      	movs	r2, #0
 80053c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80053c6:	f107 0308 	add.w	r3, r7, #8
 80053ca:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3304      	adds	r3, #4
 80053d6:	4619      	mov	r1, r3
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	88fb      	ldrh	r3, [r7, #6]
 80053de:	f7fd ff2f 	bl	8003240 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80053e2:	2300      	movs	r3, #0
 80053e4:	613b      	str	r3, [r7, #16]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	613b      	str	r3, [r7, #16]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	613b      	str	r3, [r7, #16]
 80053f6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800540e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	695a      	ldr	r2, [r3, #20]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 0201 	orr.w	r2, r2, #1
 800541e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	695a      	ldr	r2, [r3, #20]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800542e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005430:	2300      	movs	r3, #0
 8005432:	e000      	b.n	8005436 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005434:	2302      	movs	r3, #2
  }
}
 8005436:	4618      	mov	r0, r3
 8005438:	3718      	adds	r7, #24
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	0800571f 	.word	0x0800571f
 8005444:	08005787 	.word	0x08005787
 8005448:	080057a3 	.word	0x080057a3

0800544c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800546c:	2300      	movs	r3, #0
 800546e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005470:	2300      	movs	r3, #0
 8005472:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10d      	bne.n	800549e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	f003 0320 	and.w	r3, r3, #32
 8005488:	2b00      	cmp	r3, #0
 800548a:	d008      	beq.n	800549e <HAL_UART_IRQHandler+0x52>
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	f003 0320 	and.w	r3, r3, #32
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fa83 	bl	80059a2 <UART_Receive_IT>
      return;
 800549c:	e0d1      	b.n	8005642 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 80b0 	beq.w	8005606 <HAL_UART_IRQHandler+0x1ba>
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d105      	bne.n	80054bc <HAL_UART_IRQHandler+0x70>
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 80a5 	beq.w	8005606 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00a      	beq.n	80054dc <HAL_UART_IRQHandler+0x90>
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d005      	beq.n	80054dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d4:	f043 0201 	orr.w	r2, r3, #1
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	f003 0304 	and.w	r3, r3, #4
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <HAL_UART_IRQHandler+0xb0>
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d005      	beq.n	80054fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f4:	f043 0202 	orr.w	r2, r3, #2
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <HAL_UART_IRQHandler+0xd0>
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b00      	cmp	r3, #0
 800550e:	d005      	beq.n	800551c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005514:	f043 0204 	orr.w	r2, r3, #4
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00f      	beq.n	8005546 <HAL_UART_IRQHandler+0xfa>
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	f003 0320 	and.w	r3, r3, #32
 800552c:	2b00      	cmp	r3, #0
 800552e:	d104      	bne.n	800553a <HAL_UART_IRQHandler+0xee>
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d005      	beq.n	8005546 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553e:	f043 0208 	orr.w	r2, r3, #8
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554a:	2b00      	cmp	r3, #0
 800554c:	d078      	beq.n	8005640 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	f003 0320 	and.w	r3, r3, #32
 8005554:	2b00      	cmp	r3, #0
 8005556:	d007      	beq.n	8005568 <HAL_UART_IRQHandler+0x11c>
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	f003 0320 	and.w	r3, r3, #32
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 fa1d 	bl	80059a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005572:	2b40      	cmp	r3, #64	; 0x40
 8005574:	bf0c      	ite	eq
 8005576:	2301      	moveq	r3, #1
 8005578:	2300      	movne	r3, #0
 800557a:	b2db      	uxtb	r3, r3
 800557c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005582:	f003 0308 	and.w	r3, r3, #8
 8005586:	2b00      	cmp	r3, #0
 8005588:	d102      	bne.n	8005590 <HAL_UART_IRQHandler+0x144>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d031      	beq.n	80055f4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f966 	bl	8005862 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a0:	2b40      	cmp	r3, #64	; 0x40
 80055a2:	d123      	bne.n	80055ec <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	695a      	ldr	r2, [r3, #20]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055b2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d013      	beq.n	80055e4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c0:	4a21      	ldr	r2, [pc, #132]	; (8005648 <HAL_UART_IRQHandler+0x1fc>)
 80055c2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fd fe91 	bl	80032f0 <HAL_DMA_Abort_IT>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d016      	beq.n	8005602 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055de:	4610      	mov	r0, r2
 80055e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e2:	e00e      	b.n	8005602 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f859 	bl	800569c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ea:	e00a      	b.n	8005602 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f855 	bl	800569c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f2:	e006      	b.n	8005602 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f851 	bl	800569c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005600:	e01e      	b.n	8005640 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005602:	bf00      	nop
    return;
 8005604:	e01c      	b.n	8005640 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560c:	2b00      	cmp	r3, #0
 800560e:	d008      	beq.n	8005622 <HAL_UART_IRQHandler+0x1d6>
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f953 	bl	80058c6 <UART_Transmit_IT>
    return;
 8005620:	e00f      	b.n	8005642 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00a      	beq.n	8005642 <HAL_UART_IRQHandler+0x1f6>
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005632:	2b00      	cmp	r3, #0
 8005634:	d005      	beq.n	8005642 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f99b 	bl	8005972 <UART_EndTransmit_IT>
    return;
 800563c:	bf00      	nop
 800563e:	e000      	b.n	8005642 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005640:	bf00      	nop
  }
}
 8005642:	3720      	adds	r7, #32
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	0800589f 	.word	0x0800589f

0800564c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056bc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d113      	bne.n	80056f4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	695a      	ldr	r2, [r3, #20]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056e0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68da      	ldr	r2, [r3, #12]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056f0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80056f2:	e002      	b.n	80056fa <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f7ff ffa9 	bl	800564c <HAL_UART_TxCpltCallback>
}
 80056fa:	bf00      	nop
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b084      	sub	sp, #16
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f7ff ffa5 	bl	8005660 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005716:	bf00      	nop
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b084      	sub	sp, #16
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005736:	2b00      	cmp	r3, #0
 8005738:	d11e      	bne.n	8005778 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800574e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	695a      	ldr	r2, [r3, #20]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0201 	bic.w	r2, r2, #1
 800575e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	695a      	ldr	r2, [r3, #20]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800576e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2220      	movs	r2, #32
 8005774:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f7ff ff7b 	bl	8005674 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800577e:	bf00      	nop
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b084      	sub	sp, #16
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005792:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f7ff ff77 	bl	8005688 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800579a:	bf00      	nop
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b084      	sub	sp, #16
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057be:	2b80      	cmp	r3, #128	; 0x80
 80057c0:	bf0c      	ite	eq
 80057c2:	2301      	moveq	r3, #1
 80057c4:	2300      	movne	r3, #0
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b21      	cmp	r3, #33	; 0x21
 80057d4:	d108      	bne.n	80057e8 <UART_DMAError+0x46>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d005      	beq.n	80057e8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2200      	movs	r2, #0
 80057e0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80057e2:	68b8      	ldr	r0, [r7, #8]
 80057e4:	f000 f827 	bl	8005836 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f2:	2b40      	cmp	r3, #64	; 0x40
 80057f4:	bf0c      	ite	eq
 80057f6:	2301      	moveq	r3, #1
 80057f8:	2300      	movne	r3, #0
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b22      	cmp	r3, #34	; 0x22
 8005808:	d108      	bne.n	800581c <UART_DMAError+0x7a>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d005      	beq.n	800581c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2200      	movs	r2, #0
 8005814:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005816:	68b8      	ldr	r0, [r7, #8]
 8005818:	f000 f823 	bl	8005862 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005820:	f043 0210 	orr.w	r2, r3, #16
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005828:	68b8      	ldr	r0, [r7, #8]
 800582a:	f7ff ff37 	bl	800569c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800582e:	bf00      	nop
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005836:	b480      	push	{r7}
 8005838:	b083      	sub	sp, #12
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68da      	ldr	r2, [r3, #12]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800584c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2220      	movs	r2, #32
 8005852:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005862:	b480      	push	{r7}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68da      	ldr	r2, [r3, #12]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005878:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	695a      	ldr	r2, [r3, #20]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0201 	bic.w	r2, r2, #1
 8005888:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2220      	movs	r2, #32
 800588e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b084      	sub	sp, #16
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f7ff feef 	bl	800569c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058be:	bf00      	nop
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b085      	sub	sp, #20
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b21      	cmp	r3, #33	; 0x21
 80058d8:	d144      	bne.n	8005964 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058e2:	d11a      	bne.n	800591a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058f8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d105      	bne.n	800590e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	1c9a      	adds	r2, r3, #2
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	621a      	str	r2, [r3, #32]
 800590c:	e00e      	b.n	800592c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	1c5a      	adds	r2, r3, #1
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	621a      	str	r2, [r3, #32]
 8005918:	e008      	b.n	800592c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	1c59      	adds	r1, r3, #1
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	6211      	str	r1, [r2, #32]
 8005924:	781a      	ldrb	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005930:	b29b      	uxth	r3, r3
 8005932:	3b01      	subs	r3, #1
 8005934:	b29b      	uxth	r3, r3
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	4619      	mov	r1, r3
 800593a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10f      	bne.n	8005960 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800594e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800595e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005960:	2300      	movs	r3, #0
 8005962:	e000      	b.n	8005966 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005964:	2302      	movs	r3, #2
  }
}
 8005966:	4618      	mov	r0, r3
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b082      	sub	sp, #8
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68da      	ldr	r2, [r3, #12]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005988:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2220      	movs	r2, #32
 800598e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7ff fe5a 	bl	800564c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b084      	sub	sp, #16
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b22      	cmp	r3, #34	; 0x22
 80059b4:	d171      	bne.n	8005a9a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059be:	d123      	bne.n	8005a08 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10e      	bne.n	80059ec <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059da:	b29a      	uxth	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e4:	1c9a      	adds	r2, r3, #2
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	629a      	str	r2, [r3, #40]	; 0x28
 80059ea:	e029      	b.n	8005a40 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a00:	1c5a      	adds	r2, r3, #1
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	629a      	str	r2, [r3, #40]	; 0x28
 8005a06:	e01b      	b.n	8005a40 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10a      	bne.n	8005a26 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6858      	ldr	r0, [r3, #4]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1a:	1c59      	adds	r1, r3, #1
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	6291      	str	r1, [r2, #40]	; 0x28
 8005a20:	b2c2      	uxtb	r2, r0
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	e00c      	b.n	8005a40 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	b2da      	uxtb	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a32:	1c58      	adds	r0, r3, #1
 8005a34:	6879      	ldr	r1, [r7, #4]
 8005a36:	6288      	str	r0, [r1, #40]	; 0x28
 8005a38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a3c:	b2d2      	uxtb	r2, r2
 8005a3e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d120      	bne.n	8005a96 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68da      	ldr	r2, [r3, #12]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0220 	bic.w	r2, r2, #32
 8005a62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	695a      	ldr	r2, [r3, #20]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 0201 	bic.w	r2, r2, #1
 8005a82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f7ff fdf1 	bl	8005674 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	e002      	b.n	8005a9c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	e000      	b.n	8005a9c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005a9a:	2302      	movs	r3, #2
  }
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa8:	b085      	sub	sp, #20
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	431a      	orrs	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005ae6:	f023 030c 	bic.w	r3, r3, #12
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	6812      	ldr	r2, [r2, #0]
 8005aee:	68f9      	ldr	r1, [r7, #12]
 8005af0:	430b      	orrs	r3, r1
 8005af2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	699a      	ldr	r2, [r3, #24]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b12:	f040 818b 	bne.w	8005e2c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4ac1      	ldr	r2, [pc, #772]	; (8005e20 <UART_SetConfig+0x37c>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d005      	beq.n	8005b2c <UART_SetConfig+0x88>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4abf      	ldr	r2, [pc, #764]	; (8005e24 <UART_SetConfig+0x380>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	f040 80bd 	bne.w	8005ca6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b2c:	f7fe fc86 	bl	800443c <HAL_RCC_GetPCLK2Freq>
 8005b30:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	461d      	mov	r5, r3
 8005b36:	f04f 0600 	mov.w	r6, #0
 8005b3a:	46a8      	mov	r8, r5
 8005b3c:	46b1      	mov	r9, r6
 8005b3e:	eb18 0308 	adds.w	r3, r8, r8
 8005b42:	eb49 0409 	adc.w	r4, r9, r9
 8005b46:	4698      	mov	r8, r3
 8005b48:	46a1      	mov	r9, r4
 8005b4a:	eb18 0805 	adds.w	r8, r8, r5
 8005b4e:	eb49 0906 	adc.w	r9, r9, r6
 8005b52:	f04f 0100 	mov.w	r1, #0
 8005b56:	f04f 0200 	mov.w	r2, #0
 8005b5a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b5e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b62:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b66:	4688      	mov	r8, r1
 8005b68:	4691      	mov	r9, r2
 8005b6a:	eb18 0005 	adds.w	r0, r8, r5
 8005b6e:	eb49 0106 	adc.w	r1, r9, r6
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	461d      	mov	r5, r3
 8005b78:	f04f 0600 	mov.w	r6, #0
 8005b7c:	196b      	adds	r3, r5, r5
 8005b7e:	eb46 0406 	adc.w	r4, r6, r6
 8005b82:	461a      	mov	r2, r3
 8005b84:	4623      	mov	r3, r4
 8005b86:	f7fa fb2b 	bl	80001e0 <__aeabi_uldivmod>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	460c      	mov	r4, r1
 8005b8e:	461a      	mov	r2, r3
 8005b90:	4ba5      	ldr	r3, [pc, #660]	; (8005e28 <UART_SetConfig+0x384>)
 8005b92:	fba3 2302 	umull	r2, r3, r3, r2
 8005b96:	095b      	lsrs	r3, r3, #5
 8005b98:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	461d      	mov	r5, r3
 8005ba0:	f04f 0600 	mov.w	r6, #0
 8005ba4:	46a9      	mov	r9, r5
 8005ba6:	46b2      	mov	sl, r6
 8005ba8:	eb19 0309 	adds.w	r3, r9, r9
 8005bac:	eb4a 040a 	adc.w	r4, sl, sl
 8005bb0:	4699      	mov	r9, r3
 8005bb2:	46a2      	mov	sl, r4
 8005bb4:	eb19 0905 	adds.w	r9, r9, r5
 8005bb8:	eb4a 0a06 	adc.w	sl, sl, r6
 8005bbc:	f04f 0100 	mov.w	r1, #0
 8005bc0:	f04f 0200 	mov.w	r2, #0
 8005bc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bcc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bd0:	4689      	mov	r9, r1
 8005bd2:	4692      	mov	sl, r2
 8005bd4:	eb19 0005 	adds.w	r0, r9, r5
 8005bd8:	eb4a 0106 	adc.w	r1, sl, r6
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	461d      	mov	r5, r3
 8005be2:	f04f 0600 	mov.w	r6, #0
 8005be6:	196b      	adds	r3, r5, r5
 8005be8:	eb46 0406 	adc.w	r4, r6, r6
 8005bec:	461a      	mov	r2, r3
 8005bee:	4623      	mov	r3, r4
 8005bf0:	f7fa faf6 	bl	80001e0 <__aeabi_uldivmod>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	460c      	mov	r4, r1
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	4b8b      	ldr	r3, [pc, #556]	; (8005e28 <UART_SetConfig+0x384>)
 8005bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8005c00:	095b      	lsrs	r3, r3, #5
 8005c02:	2164      	movs	r1, #100	; 0x64
 8005c04:	fb01 f303 	mul.w	r3, r1, r3
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	3332      	adds	r3, #50	; 0x32
 8005c0e:	4a86      	ldr	r2, [pc, #536]	; (8005e28 <UART_SetConfig+0x384>)
 8005c10:	fba2 2303 	umull	r2, r3, r2, r3
 8005c14:	095b      	lsrs	r3, r3, #5
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c1c:	4498      	add	r8, r3
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	461d      	mov	r5, r3
 8005c22:	f04f 0600 	mov.w	r6, #0
 8005c26:	46a9      	mov	r9, r5
 8005c28:	46b2      	mov	sl, r6
 8005c2a:	eb19 0309 	adds.w	r3, r9, r9
 8005c2e:	eb4a 040a 	adc.w	r4, sl, sl
 8005c32:	4699      	mov	r9, r3
 8005c34:	46a2      	mov	sl, r4
 8005c36:	eb19 0905 	adds.w	r9, r9, r5
 8005c3a:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c3e:	f04f 0100 	mov.w	r1, #0
 8005c42:	f04f 0200 	mov.w	r2, #0
 8005c46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c52:	4689      	mov	r9, r1
 8005c54:	4692      	mov	sl, r2
 8005c56:	eb19 0005 	adds.w	r0, r9, r5
 8005c5a:	eb4a 0106 	adc.w	r1, sl, r6
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	461d      	mov	r5, r3
 8005c64:	f04f 0600 	mov.w	r6, #0
 8005c68:	196b      	adds	r3, r5, r5
 8005c6a:	eb46 0406 	adc.w	r4, r6, r6
 8005c6e:	461a      	mov	r2, r3
 8005c70:	4623      	mov	r3, r4
 8005c72:	f7fa fab5 	bl	80001e0 <__aeabi_uldivmod>
 8005c76:	4603      	mov	r3, r0
 8005c78:	460c      	mov	r4, r1
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	4b6a      	ldr	r3, [pc, #424]	; (8005e28 <UART_SetConfig+0x384>)
 8005c7e:	fba3 1302 	umull	r1, r3, r3, r2
 8005c82:	095b      	lsrs	r3, r3, #5
 8005c84:	2164      	movs	r1, #100	; 0x64
 8005c86:	fb01 f303 	mul.w	r3, r1, r3
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	3332      	adds	r3, #50	; 0x32
 8005c90:	4a65      	ldr	r2, [pc, #404]	; (8005e28 <UART_SetConfig+0x384>)
 8005c92:	fba2 2303 	umull	r2, r3, r2, r3
 8005c96:	095b      	lsrs	r3, r3, #5
 8005c98:	f003 0207 	and.w	r2, r3, #7
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4442      	add	r2, r8
 8005ca2:	609a      	str	r2, [r3, #8]
 8005ca4:	e26f      	b.n	8006186 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ca6:	f7fe fbb5 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 8005caa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	461d      	mov	r5, r3
 8005cb0:	f04f 0600 	mov.w	r6, #0
 8005cb4:	46a8      	mov	r8, r5
 8005cb6:	46b1      	mov	r9, r6
 8005cb8:	eb18 0308 	adds.w	r3, r8, r8
 8005cbc:	eb49 0409 	adc.w	r4, r9, r9
 8005cc0:	4698      	mov	r8, r3
 8005cc2:	46a1      	mov	r9, r4
 8005cc4:	eb18 0805 	adds.w	r8, r8, r5
 8005cc8:	eb49 0906 	adc.w	r9, r9, r6
 8005ccc:	f04f 0100 	mov.w	r1, #0
 8005cd0:	f04f 0200 	mov.w	r2, #0
 8005cd4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005cd8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005cdc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ce0:	4688      	mov	r8, r1
 8005ce2:	4691      	mov	r9, r2
 8005ce4:	eb18 0005 	adds.w	r0, r8, r5
 8005ce8:	eb49 0106 	adc.w	r1, r9, r6
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	461d      	mov	r5, r3
 8005cf2:	f04f 0600 	mov.w	r6, #0
 8005cf6:	196b      	adds	r3, r5, r5
 8005cf8:	eb46 0406 	adc.w	r4, r6, r6
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	4623      	mov	r3, r4
 8005d00:	f7fa fa6e 	bl	80001e0 <__aeabi_uldivmod>
 8005d04:	4603      	mov	r3, r0
 8005d06:	460c      	mov	r4, r1
 8005d08:	461a      	mov	r2, r3
 8005d0a:	4b47      	ldr	r3, [pc, #284]	; (8005e28 <UART_SetConfig+0x384>)
 8005d0c:	fba3 2302 	umull	r2, r3, r3, r2
 8005d10:	095b      	lsrs	r3, r3, #5
 8005d12:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	461d      	mov	r5, r3
 8005d1a:	f04f 0600 	mov.w	r6, #0
 8005d1e:	46a9      	mov	r9, r5
 8005d20:	46b2      	mov	sl, r6
 8005d22:	eb19 0309 	adds.w	r3, r9, r9
 8005d26:	eb4a 040a 	adc.w	r4, sl, sl
 8005d2a:	4699      	mov	r9, r3
 8005d2c:	46a2      	mov	sl, r4
 8005d2e:	eb19 0905 	adds.w	r9, r9, r5
 8005d32:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d36:	f04f 0100 	mov.w	r1, #0
 8005d3a:	f04f 0200 	mov.w	r2, #0
 8005d3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d4a:	4689      	mov	r9, r1
 8005d4c:	4692      	mov	sl, r2
 8005d4e:	eb19 0005 	adds.w	r0, r9, r5
 8005d52:	eb4a 0106 	adc.w	r1, sl, r6
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	461d      	mov	r5, r3
 8005d5c:	f04f 0600 	mov.w	r6, #0
 8005d60:	196b      	adds	r3, r5, r5
 8005d62:	eb46 0406 	adc.w	r4, r6, r6
 8005d66:	461a      	mov	r2, r3
 8005d68:	4623      	mov	r3, r4
 8005d6a:	f7fa fa39 	bl	80001e0 <__aeabi_uldivmod>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	460c      	mov	r4, r1
 8005d72:	461a      	mov	r2, r3
 8005d74:	4b2c      	ldr	r3, [pc, #176]	; (8005e28 <UART_SetConfig+0x384>)
 8005d76:	fba3 1302 	umull	r1, r3, r3, r2
 8005d7a:	095b      	lsrs	r3, r3, #5
 8005d7c:	2164      	movs	r1, #100	; 0x64
 8005d7e:	fb01 f303 	mul.w	r3, r1, r3
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	3332      	adds	r3, #50	; 0x32
 8005d88:	4a27      	ldr	r2, [pc, #156]	; (8005e28 <UART_SetConfig+0x384>)
 8005d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d8e:	095b      	lsrs	r3, r3, #5
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d96:	4498      	add	r8, r3
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	461d      	mov	r5, r3
 8005d9c:	f04f 0600 	mov.w	r6, #0
 8005da0:	46a9      	mov	r9, r5
 8005da2:	46b2      	mov	sl, r6
 8005da4:	eb19 0309 	adds.w	r3, r9, r9
 8005da8:	eb4a 040a 	adc.w	r4, sl, sl
 8005dac:	4699      	mov	r9, r3
 8005dae:	46a2      	mov	sl, r4
 8005db0:	eb19 0905 	adds.w	r9, r9, r5
 8005db4:	eb4a 0a06 	adc.w	sl, sl, r6
 8005db8:	f04f 0100 	mov.w	r1, #0
 8005dbc:	f04f 0200 	mov.w	r2, #0
 8005dc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005dc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005dcc:	4689      	mov	r9, r1
 8005dce:	4692      	mov	sl, r2
 8005dd0:	eb19 0005 	adds.w	r0, r9, r5
 8005dd4:	eb4a 0106 	adc.w	r1, sl, r6
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	461d      	mov	r5, r3
 8005dde:	f04f 0600 	mov.w	r6, #0
 8005de2:	196b      	adds	r3, r5, r5
 8005de4:	eb46 0406 	adc.w	r4, r6, r6
 8005de8:	461a      	mov	r2, r3
 8005dea:	4623      	mov	r3, r4
 8005dec:	f7fa f9f8 	bl	80001e0 <__aeabi_uldivmod>
 8005df0:	4603      	mov	r3, r0
 8005df2:	460c      	mov	r4, r1
 8005df4:	461a      	mov	r2, r3
 8005df6:	4b0c      	ldr	r3, [pc, #48]	; (8005e28 <UART_SetConfig+0x384>)
 8005df8:	fba3 1302 	umull	r1, r3, r3, r2
 8005dfc:	095b      	lsrs	r3, r3, #5
 8005dfe:	2164      	movs	r1, #100	; 0x64
 8005e00:	fb01 f303 	mul.w	r3, r1, r3
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	3332      	adds	r3, #50	; 0x32
 8005e0a:	4a07      	ldr	r2, [pc, #28]	; (8005e28 <UART_SetConfig+0x384>)
 8005e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e10:	095b      	lsrs	r3, r3, #5
 8005e12:	f003 0207 	and.w	r2, r3, #7
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4442      	add	r2, r8
 8005e1c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005e1e:	e1b2      	b.n	8006186 <UART_SetConfig+0x6e2>
 8005e20:	40011000 	.word	0x40011000
 8005e24:	40011400 	.word	0x40011400
 8005e28:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4ad7      	ldr	r2, [pc, #860]	; (8006190 <UART_SetConfig+0x6ec>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d005      	beq.n	8005e42 <UART_SetConfig+0x39e>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4ad6      	ldr	r2, [pc, #856]	; (8006194 <UART_SetConfig+0x6f0>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	f040 80d1 	bne.w	8005fe4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e42:	f7fe fafb 	bl	800443c <HAL_RCC_GetPCLK2Freq>
 8005e46:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	469a      	mov	sl, r3
 8005e4c:	f04f 0b00 	mov.w	fp, #0
 8005e50:	46d0      	mov	r8, sl
 8005e52:	46d9      	mov	r9, fp
 8005e54:	eb18 0308 	adds.w	r3, r8, r8
 8005e58:	eb49 0409 	adc.w	r4, r9, r9
 8005e5c:	4698      	mov	r8, r3
 8005e5e:	46a1      	mov	r9, r4
 8005e60:	eb18 080a 	adds.w	r8, r8, sl
 8005e64:	eb49 090b 	adc.w	r9, r9, fp
 8005e68:	f04f 0100 	mov.w	r1, #0
 8005e6c:	f04f 0200 	mov.w	r2, #0
 8005e70:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e74:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e78:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e7c:	4688      	mov	r8, r1
 8005e7e:	4691      	mov	r9, r2
 8005e80:	eb1a 0508 	adds.w	r5, sl, r8
 8005e84:	eb4b 0609 	adc.w	r6, fp, r9
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	f04f 0200 	mov.w	r2, #0
 8005e92:	f04f 0300 	mov.w	r3, #0
 8005e96:	f04f 0400 	mov.w	r4, #0
 8005e9a:	0094      	lsls	r4, r2, #2
 8005e9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ea0:	008b      	lsls	r3, r1, #2
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	4623      	mov	r3, r4
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	4631      	mov	r1, r6
 8005eaa:	f7fa f999 	bl	80001e0 <__aeabi_uldivmod>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	460c      	mov	r4, r1
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	4bb8      	ldr	r3, [pc, #736]	; (8006198 <UART_SetConfig+0x6f4>)
 8005eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8005eba:	095b      	lsrs	r3, r3, #5
 8005ebc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	469b      	mov	fp, r3
 8005ec4:	f04f 0c00 	mov.w	ip, #0
 8005ec8:	46d9      	mov	r9, fp
 8005eca:	46e2      	mov	sl, ip
 8005ecc:	eb19 0309 	adds.w	r3, r9, r9
 8005ed0:	eb4a 040a 	adc.w	r4, sl, sl
 8005ed4:	4699      	mov	r9, r3
 8005ed6:	46a2      	mov	sl, r4
 8005ed8:	eb19 090b 	adds.w	r9, r9, fp
 8005edc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ee0:	f04f 0100 	mov.w	r1, #0
 8005ee4:	f04f 0200 	mov.w	r2, #0
 8005ee8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005eec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ef0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ef4:	4689      	mov	r9, r1
 8005ef6:	4692      	mov	sl, r2
 8005ef8:	eb1b 0509 	adds.w	r5, fp, r9
 8005efc:	eb4c 060a 	adc.w	r6, ip, sl
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	4619      	mov	r1, r3
 8005f06:	f04f 0200 	mov.w	r2, #0
 8005f0a:	f04f 0300 	mov.w	r3, #0
 8005f0e:	f04f 0400 	mov.w	r4, #0
 8005f12:	0094      	lsls	r4, r2, #2
 8005f14:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f18:	008b      	lsls	r3, r1, #2
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	4623      	mov	r3, r4
 8005f1e:	4628      	mov	r0, r5
 8005f20:	4631      	mov	r1, r6
 8005f22:	f7fa f95d 	bl	80001e0 <__aeabi_uldivmod>
 8005f26:	4603      	mov	r3, r0
 8005f28:	460c      	mov	r4, r1
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	4b9a      	ldr	r3, [pc, #616]	; (8006198 <UART_SetConfig+0x6f4>)
 8005f2e:	fba3 1302 	umull	r1, r3, r3, r2
 8005f32:	095b      	lsrs	r3, r3, #5
 8005f34:	2164      	movs	r1, #100	; 0x64
 8005f36:	fb01 f303 	mul.w	r3, r1, r3
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	011b      	lsls	r3, r3, #4
 8005f3e:	3332      	adds	r3, #50	; 0x32
 8005f40:	4a95      	ldr	r2, [pc, #596]	; (8006198 <UART_SetConfig+0x6f4>)
 8005f42:	fba2 2303 	umull	r2, r3, r2, r3
 8005f46:	095b      	lsrs	r3, r3, #5
 8005f48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f4c:	4498      	add	r8, r3
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	469b      	mov	fp, r3
 8005f52:	f04f 0c00 	mov.w	ip, #0
 8005f56:	46d9      	mov	r9, fp
 8005f58:	46e2      	mov	sl, ip
 8005f5a:	eb19 0309 	adds.w	r3, r9, r9
 8005f5e:	eb4a 040a 	adc.w	r4, sl, sl
 8005f62:	4699      	mov	r9, r3
 8005f64:	46a2      	mov	sl, r4
 8005f66:	eb19 090b 	adds.w	r9, r9, fp
 8005f6a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f6e:	f04f 0100 	mov.w	r1, #0
 8005f72:	f04f 0200 	mov.w	r2, #0
 8005f76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f82:	4689      	mov	r9, r1
 8005f84:	4692      	mov	sl, r2
 8005f86:	eb1b 0509 	adds.w	r5, fp, r9
 8005f8a:	eb4c 060a 	adc.w	r6, ip, sl
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	4619      	mov	r1, r3
 8005f94:	f04f 0200 	mov.w	r2, #0
 8005f98:	f04f 0300 	mov.w	r3, #0
 8005f9c:	f04f 0400 	mov.w	r4, #0
 8005fa0:	0094      	lsls	r4, r2, #2
 8005fa2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005fa6:	008b      	lsls	r3, r1, #2
 8005fa8:	461a      	mov	r2, r3
 8005faa:	4623      	mov	r3, r4
 8005fac:	4628      	mov	r0, r5
 8005fae:	4631      	mov	r1, r6
 8005fb0:	f7fa f916 	bl	80001e0 <__aeabi_uldivmod>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	460c      	mov	r4, r1
 8005fb8:	461a      	mov	r2, r3
 8005fba:	4b77      	ldr	r3, [pc, #476]	; (8006198 <UART_SetConfig+0x6f4>)
 8005fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8005fc0:	095b      	lsrs	r3, r3, #5
 8005fc2:	2164      	movs	r1, #100	; 0x64
 8005fc4:	fb01 f303 	mul.w	r3, r1, r3
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	011b      	lsls	r3, r3, #4
 8005fcc:	3332      	adds	r3, #50	; 0x32
 8005fce:	4a72      	ldr	r2, [pc, #456]	; (8006198 <UART_SetConfig+0x6f4>)
 8005fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd4:	095b      	lsrs	r3, r3, #5
 8005fd6:	f003 020f 	and.w	r2, r3, #15
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4442      	add	r2, r8
 8005fe0:	609a      	str	r2, [r3, #8]
 8005fe2:	e0d0      	b.n	8006186 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fe4:	f7fe fa16 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 8005fe8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	469a      	mov	sl, r3
 8005fee:	f04f 0b00 	mov.w	fp, #0
 8005ff2:	46d0      	mov	r8, sl
 8005ff4:	46d9      	mov	r9, fp
 8005ff6:	eb18 0308 	adds.w	r3, r8, r8
 8005ffa:	eb49 0409 	adc.w	r4, r9, r9
 8005ffe:	4698      	mov	r8, r3
 8006000:	46a1      	mov	r9, r4
 8006002:	eb18 080a 	adds.w	r8, r8, sl
 8006006:	eb49 090b 	adc.w	r9, r9, fp
 800600a:	f04f 0100 	mov.w	r1, #0
 800600e:	f04f 0200 	mov.w	r2, #0
 8006012:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006016:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800601a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800601e:	4688      	mov	r8, r1
 8006020:	4691      	mov	r9, r2
 8006022:	eb1a 0508 	adds.w	r5, sl, r8
 8006026:	eb4b 0609 	adc.w	r6, fp, r9
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	4619      	mov	r1, r3
 8006030:	f04f 0200 	mov.w	r2, #0
 8006034:	f04f 0300 	mov.w	r3, #0
 8006038:	f04f 0400 	mov.w	r4, #0
 800603c:	0094      	lsls	r4, r2, #2
 800603e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006042:	008b      	lsls	r3, r1, #2
 8006044:	461a      	mov	r2, r3
 8006046:	4623      	mov	r3, r4
 8006048:	4628      	mov	r0, r5
 800604a:	4631      	mov	r1, r6
 800604c:	f7fa f8c8 	bl	80001e0 <__aeabi_uldivmod>
 8006050:	4603      	mov	r3, r0
 8006052:	460c      	mov	r4, r1
 8006054:	461a      	mov	r2, r3
 8006056:	4b50      	ldr	r3, [pc, #320]	; (8006198 <UART_SetConfig+0x6f4>)
 8006058:	fba3 2302 	umull	r2, r3, r3, r2
 800605c:	095b      	lsrs	r3, r3, #5
 800605e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	469b      	mov	fp, r3
 8006066:	f04f 0c00 	mov.w	ip, #0
 800606a:	46d9      	mov	r9, fp
 800606c:	46e2      	mov	sl, ip
 800606e:	eb19 0309 	adds.w	r3, r9, r9
 8006072:	eb4a 040a 	adc.w	r4, sl, sl
 8006076:	4699      	mov	r9, r3
 8006078:	46a2      	mov	sl, r4
 800607a:	eb19 090b 	adds.w	r9, r9, fp
 800607e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006082:	f04f 0100 	mov.w	r1, #0
 8006086:	f04f 0200 	mov.w	r2, #0
 800608a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800608e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006092:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006096:	4689      	mov	r9, r1
 8006098:	4692      	mov	sl, r2
 800609a:	eb1b 0509 	adds.w	r5, fp, r9
 800609e:	eb4c 060a 	adc.w	r6, ip, sl
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	4619      	mov	r1, r3
 80060a8:	f04f 0200 	mov.w	r2, #0
 80060ac:	f04f 0300 	mov.w	r3, #0
 80060b0:	f04f 0400 	mov.w	r4, #0
 80060b4:	0094      	lsls	r4, r2, #2
 80060b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060ba:	008b      	lsls	r3, r1, #2
 80060bc:	461a      	mov	r2, r3
 80060be:	4623      	mov	r3, r4
 80060c0:	4628      	mov	r0, r5
 80060c2:	4631      	mov	r1, r6
 80060c4:	f7fa f88c 	bl	80001e0 <__aeabi_uldivmod>
 80060c8:	4603      	mov	r3, r0
 80060ca:	460c      	mov	r4, r1
 80060cc:	461a      	mov	r2, r3
 80060ce:	4b32      	ldr	r3, [pc, #200]	; (8006198 <UART_SetConfig+0x6f4>)
 80060d0:	fba3 1302 	umull	r1, r3, r3, r2
 80060d4:	095b      	lsrs	r3, r3, #5
 80060d6:	2164      	movs	r1, #100	; 0x64
 80060d8:	fb01 f303 	mul.w	r3, r1, r3
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	011b      	lsls	r3, r3, #4
 80060e0:	3332      	adds	r3, #50	; 0x32
 80060e2:	4a2d      	ldr	r2, [pc, #180]	; (8006198 <UART_SetConfig+0x6f4>)
 80060e4:	fba2 2303 	umull	r2, r3, r2, r3
 80060e8:	095b      	lsrs	r3, r3, #5
 80060ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060ee:	4498      	add	r8, r3
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	469b      	mov	fp, r3
 80060f4:	f04f 0c00 	mov.w	ip, #0
 80060f8:	46d9      	mov	r9, fp
 80060fa:	46e2      	mov	sl, ip
 80060fc:	eb19 0309 	adds.w	r3, r9, r9
 8006100:	eb4a 040a 	adc.w	r4, sl, sl
 8006104:	4699      	mov	r9, r3
 8006106:	46a2      	mov	sl, r4
 8006108:	eb19 090b 	adds.w	r9, r9, fp
 800610c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006110:	f04f 0100 	mov.w	r1, #0
 8006114:	f04f 0200 	mov.w	r2, #0
 8006118:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800611c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006120:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006124:	4689      	mov	r9, r1
 8006126:	4692      	mov	sl, r2
 8006128:	eb1b 0509 	adds.w	r5, fp, r9
 800612c:	eb4c 060a 	adc.w	r6, ip, sl
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	4619      	mov	r1, r3
 8006136:	f04f 0200 	mov.w	r2, #0
 800613a:	f04f 0300 	mov.w	r3, #0
 800613e:	f04f 0400 	mov.w	r4, #0
 8006142:	0094      	lsls	r4, r2, #2
 8006144:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006148:	008b      	lsls	r3, r1, #2
 800614a:	461a      	mov	r2, r3
 800614c:	4623      	mov	r3, r4
 800614e:	4628      	mov	r0, r5
 8006150:	4631      	mov	r1, r6
 8006152:	f7fa f845 	bl	80001e0 <__aeabi_uldivmod>
 8006156:	4603      	mov	r3, r0
 8006158:	460c      	mov	r4, r1
 800615a:	461a      	mov	r2, r3
 800615c:	4b0e      	ldr	r3, [pc, #56]	; (8006198 <UART_SetConfig+0x6f4>)
 800615e:	fba3 1302 	umull	r1, r3, r3, r2
 8006162:	095b      	lsrs	r3, r3, #5
 8006164:	2164      	movs	r1, #100	; 0x64
 8006166:	fb01 f303 	mul.w	r3, r1, r3
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	011b      	lsls	r3, r3, #4
 800616e:	3332      	adds	r3, #50	; 0x32
 8006170:	4a09      	ldr	r2, [pc, #36]	; (8006198 <UART_SetConfig+0x6f4>)
 8006172:	fba2 2303 	umull	r2, r3, r2, r3
 8006176:	095b      	lsrs	r3, r3, #5
 8006178:	f003 020f 	and.w	r2, r3, #15
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4442      	add	r2, r8
 8006182:	609a      	str	r2, [r3, #8]
}
 8006184:	e7ff      	b.n	8006186 <UART_SetConfig+0x6e2>
 8006186:	bf00      	nop
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006190:	40011000 	.word	0x40011000
 8006194:	40011400 	.word	0x40011400
 8006198:	51eb851f 	.word	0x51eb851f

0800619c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	4603      	mov	r3, r0
 80061a4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80061a6:	2300      	movs	r3, #0
 80061a8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80061aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061ae:	2b84      	cmp	r3, #132	; 0x84
 80061b0:	d005      	beq.n	80061be <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80061b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	4413      	add	r3, r2
 80061ba:	3303      	adds	r3, #3
 80061bc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80061be:	68fb      	ldr	r3, [r7, #12]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80061d0:	f000 fe48 	bl	8006e64 <vTaskStartScheduler>
  
  return osOK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	bd80      	pop	{r7, pc}

080061da <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80061da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061dc:	b089      	sub	sp, #36	; 0x24
 80061de:	af04      	add	r7, sp, #16
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d020      	beq.n	800622e <osThreadCreate+0x54>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d01c      	beq.n	800622e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685c      	ldr	r4, [r3, #4]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681d      	ldr	r5, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	691e      	ldr	r6, [r3, #16]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006206:	4618      	mov	r0, r3
 8006208:	f7ff ffc8 	bl	800619c <makeFreeRtosPriority>
 800620c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006216:	9202      	str	r2, [sp, #8]
 8006218:	9301      	str	r3, [sp, #4]
 800621a:	9100      	str	r1, [sp, #0]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	4632      	mov	r2, r6
 8006220:	4629      	mov	r1, r5
 8006222:	4620      	mov	r0, r4
 8006224:	f000 fc5a 	bl	8006adc <xTaskCreateStatic>
 8006228:	4603      	mov	r3, r0
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	e01c      	b.n	8006268 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685c      	ldr	r4, [r3, #4]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800623a:	b29e      	uxth	r6, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006242:	4618      	mov	r0, r3
 8006244:	f7ff ffaa 	bl	800619c <makeFreeRtosPriority>
 8006248:	4602      	mov	r2, r0
 800624a:	f107 030c 	add.w	r3, r7, #12
 800624e:	9301      	str	r3, [sp, #4]
 8006250:	9200      	str	r2, [sp, #0]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	4632      	mov	r2, r6
 8006256:	4629      	mov	r1, r5
 8006258:	4620      	mov	r0, r4
 800625a:	f000 fc99 	bl	8006b90 <xTaskCreate>
 800625e:	4603      	mov	r3, r0
 8006260:	2b01      	cmp	r3, #1
 8006262:	d001      	beq.n	8006268 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006264:	2300      	movs	r3, #0
 8006266:	e000      	b.n	800626a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006268:	68fb      	ldr	r3, [r7, #12]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006272 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b084      	sub	sp, #16
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <osDelay+0x16>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	e000      	b.n	800628a <osDelay+0x18>
 8006288:	2301      	movs	r3, #1
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fdb6 	bl	8006dfc <vTaskDelay>
  
  return osOK;
 8006290:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b082      	sub	sp, #8
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d007      	beq.n	80062ba <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	4619      	mov	r1, r3
 80062b0:	2001      	movs	r0, #1
 80062b2:	f000 fa2a 	bl	800670a <xQueueCreateMutexStatic>
 80062b6:	4603      	mov	r3, r0
 80062b8:	e003      	b.n	80062c2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80062ba:	2001      	movs	r0, #1
 80062bc:	f000 fa0d 	bl	80066da <xQueueCreateMutex>
 80062c0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80062ca:	b480      	push	{r7}
 80062cc:	b083      	sub	sp, #12
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f103 0208 	add.w	r2, r3, #8
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f04f 32ff 	mov.w	r2, #4294967295
 80062e2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f103 0208 	add.w	r2, r3, #8
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f103 0208 	add.w	r2, r3, #8
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80062fe:	bf00      	nop
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800630a:	b480      	push	{r7}
 800630c:	b083      	sub	sp, #12
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	689a      	ldr	r2, [r3, #8]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	601a      	str	r2, [r3, #0]
}
 8006360:	bf00      	nop
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006382:	d103      	bne.n	800638c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	60fb      	str	r3, [r7, #12]
 800638a:	e00c      	b.n	80063a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	3308      	adds	r3, #8
 8006390:	60fb      	str	r3, [r7, #12]
 8006392:	e002      	b.n	800639a <vListInsert+0x2e>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	60fb      	str	r3, [r7, #12]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d2f6      	bcs.n	8006394 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	601a      	str	r2, [r3, #0]
}
 80063d2:	bf00      	nop
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80063de:	b480      	push	{r7}
 80063e0:	b085      	sub	sp, #20
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	6892      	ldr	r2, [r2, #8]
 80063f4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	6852      	ldr	r2, [r2, #4]
 80063fe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	429a      	cmp	r2, r3
 8006408:	d103      	bne.n	8006412 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	689a      	ldr	r2, [r3, #8]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	1e5a      	subs	r2, r3, #1
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
	...

08006434 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d109      	bne.n	800645c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	60bb      	str	r3, [r7, #8]
 800645a:	e7fe      	b.n	800645a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800645c:	f001 fb26 	bl	8007aac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006468:	68f9      	ldr	r1, [r7, #12]
 800646a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800646c:	fb01 f303 	mul.w	r3, r1, r3
 8006470:	441a      	add	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648c:	3b01      	subs	r3, #1
 800648e:	68f9      	ldr	r1, [r7, #12]
 8006490:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006492:	fb01 f303 	mul.w	r3, r1, r3
 8006496:	441a      	add	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	22ff      	movs	r2, #255	; 0xff
 80064a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	22ff      	movs	r2, #255	; 0xff
 80064a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d114      	bne.n	80064dc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d01a      	beq.n	80064f0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	3310      	adds	r3, #16
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 ff0e 	bl	80072e0 <xTaskRemoveFromEventList>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d012      	beq.n	80064f0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80064ca:	4b0d      	ldr	r3, [pc, #52]	; (8006500 <xQueueGenericReset+0xcc>)
 80064cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	e009      	b.n	80064f0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	3310      	adds	r3, #16
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7ff fef2 	bl	80062ca <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3324      	adds	r3, #36	; 0x24
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7ff feed 	bl	80062ca <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80064f0:	f001 fb0a 	bl	8007b08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80064f4:	2301      	movs	r3, #1
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	e000ed04 	.word	0xe000ed04

08006504 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006504:	b580      	push	{r7, lr}
 8006506:	b08e      	sub	sp, #56	; 0x38
 8006508:	af02      	add	r7, sp, #8
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
 8006510:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d109      	bne.n	800652c <xQueueGenericCreateStatic+0x28>
 8006518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651c:	f383 8811 	msr	BASEPRI, r3
 8006520:	f3bf 8f6f 	isb	sy
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	62bb      	str	r3, [r7, #40]	; 0x28
 800652a:	e7fe      	b.n	800652a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d109      	bne.n	8006546 <xQueueGenericCreateStatic+0x42>
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	627b      	str	r3, [r7, #36]	; 0x24
 8006544:	e7fe      	b.n	8006544 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <xQueueGenericCreateStatic+0x4e>
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d001      	beq.n	8006556 <xQueueGenericCreateStatic+0x52>
 8006552:	2301      	movs	r3, #1
 8006554:	e000      	b.n	8006558 <xQueueGenericCreateStatic+0x54>
 8006556:	2300      	movs	r3, #0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d109      	bne.n	8006570 <xQueueGenericCreateStatic+0x6c>
 800655c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	623b      	str	r3, [r7, #32]
 800656e:	e7fe      	b.n	800656e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d102      	bne.n	800657c <xQueueGenericCreateStatic+0x78>
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <xQueueGenericCreateStatic+0x7c>
 800657c:	2301      	movs	r3, #1
 800657e:	e000      	b.n	8006582 <xQueueGenericCreateStatic+0x7e>
 8006580:	2300      	movs	r3, #0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d109      	bne.n	800659a <xQueueGenericCreateStatic+0x96>
 8006586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	61fb      	str	r3, [r7, #28]
 8006598:	e7fe      	b.n	8006598 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800659a:	2348      	movs	r3, #72	; 0x48
 800659c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	2b48      	cmp	r3, #72	; 0x48
 80065a2:	d009      	beq.n	80065b8 <xQueueGenericCreateStatic+0xb4>
 80065a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a8:	f383 8811 	msr	BASEPRI, r3
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f3bf 8f4f 	dsb	sy
 80065b4:	61bb      	str	r3, [r7, #24]
 80065b6:	e7fe      	b.n	80065b6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80065b8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80065be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00d      	beq.n	80065e0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80065c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065cc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80065d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	4613      	mov	r3, r2
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	68b9      	ldr	r1, [r7, #8]
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f000 f844 	bl	8006668 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80065e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3730      	adds	r7, #48	; 0x30
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b08a      	sub	sp, #40	; 0x28
 80065ee:	af02      	add	r7, sp, #8
 80065f0:	60f8      	str	r0, [r7, #12]
 80065f2:	60b9      	str	r1, [r7, #8]
 80065f4:	4613      	mov	r3, r2
 80065f6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d109      	bne.n	8006612 <xQueueGenericCreate+0x28>
 80065fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	613b      	str	r3, [r7, #16]
 8006610:	e7fe      	b.n	8006610 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d102      	bne.n	800661e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006618:	2300      	movs	r3, #0
 800661a:	61fb      	str	r3, [r7, #28]
 800661c:	e004      	b.n	8006628 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	fb02 f303 	mul.w	r3, r2, r3
 8006626:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	3348      	adds	r3, #72	; 0x48
 800662c:	4618      	mov	r0, r3
 800662e:	f001 fb19 	bl	8007c64 <pvPortMalloc>
 8006632:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d011      	beq.n	800665e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	3348      	adds	r3, #72	; 0x48
 8006642:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800664c:	79fa      	ldrb	r2, [r7, #7]
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	4613      	mov	r3, r2
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	68b9      	ldr	r1, [r7, #8]
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f000 f805 	bl	8006668 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800665e:	69bb      	ldr	r3, [r7, #24]
	}
 8006660:	4618      	mov	r0, r3
 8006662:	3720      	adds	r7, #32
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d103      	bne.n	8006684 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	e002      	b.n	800668a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006696:	2101      	movs	r1, #1
 8006698:	69b8      	ldr	r0, [r7, #24]
 800669a:	f7ff fecb 	bl	8006434 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800669e:	bf00      	nop
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b082      	sub	sp, #8
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00e      	beq.n	80066d2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80066c6:	2300      	movs	r3, #0
 80066c8:	2200      	movs	r2, #0
 80066ca:	2100      	movs	r1, #0
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f837 	bl	8006740 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80066d2:	bf00      	nop
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b086      	sub	sp, #24
 80066de:	af00      	add	r7, sp, #0
 80066e0:	4603      	mov	r3, r0
 80066e2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80066e4:	2301      	movs	r3, #1
 80066e6:	617b      	str	r3, [r7, #20]
 80066e8:	2300      	movs	r3, #0
 80066ea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80066ec:	79fb      	ldrb	r3, [r7, #7]
 80066ee:	461a      	mov	r2, r3
 80066f0:	6939      	ldr	r1, [r7, #16]
 80066f2:	6978      	ldr	r0, [r7, #20]
 80066f4:	f7ff ff79 	bl	80065ea <xQueueGenericCreate>
 80066f8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f7ff ffd3 	bl	80066a6 <prvInitialiseMutex>

		return xNewQueue;
 8006700:	68fb      	ldr	r3, [r7, #12]
	}
 8006702:	4618      	mov	r0, r3
 8006704:	3718      	adds	r7, #24
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800670a:	b580      	push	{r7, lr}
 800670c:	b088      	sub	sp, #32
 800670e:	af02      	add	r7, sp, #8
 8006710:	4603      	mov	r3, r0
 8006712:	6039      	str	r1, [r7, #0]
 8006714:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006716:	2301      	movs	r3, #1
 8006718:	617b      	str	r3, [r7, #20]
 800671a:	2300      	movs	r3, #0
 800671c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800671e:	79fb      	ldrb	r3, [r7, #7]
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	2200      	movs	r2, #0
 8006726:	6939      	ldr	r1, [r7, #16]
 8006728:	6978      	ldr	r0, [r7, #20]
 800672a:	f7ff feeb 	bl	8006504 <xQueueGenericCreateStatic>
 800672e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f7ff ffb8 	bl	80066a6 <prvInitialiseMutex>

		return xNewQueue;
 8006736:	68fb      	ldr	r3, [r7, #12]
	}
 8006738:	4618      	mov	r0, r3
 800673a:	3718      	adds	r7, #24
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b08e      	sub	sp, #56	; 0x38
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
 800674c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800674e:	2300      	movs	r3, #0
 8006750:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006758:	2b00      	cmp	r3, #0
 800675a:	d109      	bne.n	8006770 <xQueueGenericSend+0x30>
 800675c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006760:	f383 8811 	msr	BASEPRI, r3
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	62bb      	str	r3, [r7, #40]	; 0x28
 800676e:	e7fe      	b.n	800676e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d103      	bne.n	800677e <xQueueGenericSend+0x3e>
 8006776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <xQueueGenericSend+0x42>
 800677e:	2301      	movs	r3, #1
 8006780:	e000      	b.n	8006784 <xQueueGenericSend+0x44>
 8006782:	2300      	movs	r3, #0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d109      	bne.n	800679c <xQueueGenericSend+0x5c>
 8006788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
 800679a:	e7fe      	b.n	800679a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d103      	bne.n	80067aa <xQueueGenericSend+0x6a>
 80067a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d101      	bne.n	80067ae <xQueueGenericSend+0x6e>
 80067aa:	2301      	movs	r3, #1
 80067ac:	e000      	b.n	80067b0 <xQueueGenericSend+0x70>
 80067ae:	2300      	movs	r3, #0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d109      	bne.n	80067c8 <xQueueGenericSend+0x88>
 80067b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b8:	f383 8811 	msr	BASEPRI, r3
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	623b      	str	r3, [r7, #32]
 80067c6:	e7fe      	b.n	80067c6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067c8:	f000 ff40 	bl	800764c <xTaskGetSchedulerState>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d102      	bne.n	80067d8 <xQueueGenericSend+0x98>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <xQueueGenericSend+0x9c>
 80067d8:	2301      	movs	r3, #1
 80067da:	e000      	b.n	80067de <xQueueGenericSend+0x9e>
 80067dc:	2300      	movs	r3, #0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d109      	bne.n	80067f6 <xQueueGenericSend+0xb6>
 80067e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	61fb      	str	r3, [r7, #28]
 80067f4:	e7fe      	b.n	80067f4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067f6:	f001 f959 	bl	8007aac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006802:	429a      	cmp	r2, r3
 8006804:	d302      	bcc.n	800680c <xQueueGenericSend+0xcc>
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2b02      	cmp	r3, #2
 800680a:	d129      	bne.n	8006860 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	68b9      	ldr	r1, [r7, #8]
 8006810:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006812:	f000 f88f 	bl	8006934 <prvCopyDataToQueue>
 8006816:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681c:	2b00      	cmp	r3, #0
 800681e:	d010      	beq.n	8006842 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006822:	3324      	adds	r3, #36	; 0x24
 8006824:	4618      	mov	r0, r3
 8006826:	f000 fd5b 	bl	80072e0 <xTaskRemoveFromEventList>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d013      	beq.n	8006858 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006830:	4b3f      	ldr	r3, [pc, #252]	; (8006930 <xQueueGenericSend+0x1f0>)
 8006832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	e00a      	b.n	8006858 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006844:	2b00      	cmp	r3, #0
 8006846:	d007      	beq.n	8006858 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006848:	4b39      	ldr	r3, [pc, #228]	; (8006930 <xQueueGenericSend+0x1f0>)
 800684a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006858:	f001 f956 	bl	8007b08 <vPortExitCritical>
				return pdPASS;
 800685c:	2301      	movs	r3, #1
 800685e:	e063      	b.n	8006928 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d103      	bne.n	800686e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006866:	f001 f94f 	bl	8007b08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800686a:	2300      	movs	r3, #0
 800686c:	e05c      	b.n	8006928 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800686e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006870:	2b00      	cmp	r3, #0
 8006872:	d106      	bne.n	8006882 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006874:	f107 0314 	add.w	r3, r7, #20
 8006878:	4618      	mov	r0, r3
 800687a:	f000 fd93 	bl	80073a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800687e:	2301      	movs	r3, #1
 8006880:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006882:	f001 f941 	bl	8007b08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006886:	f000 fb4b 	bl	8006f20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800688a:	f001 f90f 	bl	8007aac <vPortEnterCritical>
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006894:	b25b      	sxtb	r3, r3
 8006896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689a:	d103      	bne.n	80068a4 <xQueueGenericSend+0x164>
 800689c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068aa:	b25b      	sxtb	r3, r3
 80068ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b0:	d103      	bne.n	80068ba <xQueueGenericSend+0x17a>
 80068b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068ba:	f001 f925 	bl	8007b08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068be:	1d3a      	adds	r2, r7, #4
 80068c0:	f107 0314 	add.w	r3, r7, #20
 80068c4:	4611      	mov	r1, r2
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 fd82 	bl	80073d0 <xTaskCheckForTimeOut>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d124      	bne.n	800691c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80068d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068d4:	f000 f8ea 	bl	8006aac <prvIsQueueFull>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d018      	beq.n	8006910 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80068de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e0:	3310      	adds	r3, #16
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	4611      	mov	r1, r2
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 fcd6 	bl	8007298 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80068ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068ee:	f000 f88b 	bl	8006a08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80068f2:	f000 fb23 	bl	8006f3c <xTaskResumeAll>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f47f af7c 	bne.w	80067f6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80068fe:	4b0c      	ldr	r3, [pc, #48]	; (8006930 <xQueueGenericSend+0x1f0>)
 8006900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	e772      	b.n	80067f6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006912:	f000 f879 	bl	8006a08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006916:	f000 fb11 	bl	8006f3c <xTaskResumeAll>
 800691a:	e76c      	b.n	80067f6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800691c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800691e:	f000 f873 	bl	8006a08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006922:	f000 fb0b 	bl	8006f3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006926:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006928:	4618      	mov	r0, r3
 800692a:	3738      	adds	r7, #56	; 0x38
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	e000ed04 	.word	0xe000ed04

08006934 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006940:	2300      	movs	r3, #0
 8006942:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006948:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10d      	bne.n	800696e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d14d      	bne.n	80069f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	4618      	mov	r0, r3
 8006960:	f000 fe92 	bl	8007688 <xTaskPriorityDisinherit>
 8006964:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	609a      	str	r2, [r3, #8]
 800696c:	e043      	b.n	80069f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d119      	bne.n	80069a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6858      	ldr	r0, [r3, #4]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697c:	461a      	mov	r2, r3
 800697e:	68b9      	ldr	r1, [r7, #8]
 8006980:	f001 fb8c 	bl	800809c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698c:	441a      	add	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	429a      	cmp	r2, r3
 800699c:	d32b      	bcc.n	80069f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	605a      	str	r2, [r3, #4]
 80069a6:	e026      	b.n	80069f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	68d8      	ldr	r0, [r3, #12]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b0:	461a      	mov	r2, r3
 80069b2:	68b9      	ldr	r1, [r7, #8]
 80069b4:	f001 fb72 	bl	800809c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	68da      	ldr	r2, [r3, #12]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c0:	425b      	negs	r3, r3
 80069c2:	441a      	add	r2, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	68da      	ldr	r2, [r3, #12]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d207      	bcs.n	80069e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	689a      	ldr	r2, [r3, #8]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069dc:	425b      	negs	r3, r3
 80069de:	441a      	add	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d105      	bne.n	80069f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d002      	beq.n	80069f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	3b01      	subs	r3, #1
 80069f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	1c5a      	adds	r2, r3, #1
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80069fe:	697b      	ldr	r3, [r7, #20]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3718      	adds	r7, #24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a10:	f001 f84c 	bl	8007aac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a1c:	e011      	b.n	8006a42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d012      	beq.n	8006a4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	3324      	adds	r3, #36	; 0x24
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 fc58 	bl	80072e0 <xTaskRemoveFromEventList>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d001      	beq.n	8006a3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a36:	f000 fd2b 	bl	8007490 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	dce9      	bgt.n	8006a1e <prvUnlockQueue+0x16>
 8006a4a:	e000      	b.n	8006a4e <prvUnlockQueue+0x46>
					break;
 8006a4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	22ff      	movs	r2, #255	; 0xff
 8006a52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006a56:	f001 f857 	bl	8007b08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a5a:	f001 f827 	bl	8007aac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a66:	e011      	b.n	8006a8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d012      	beq.n	8006a96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	3310      	adds	r3, #16
 8006a74:	4618      	mov	r0, r3
 8006a76:	f000 fc33 	bl	80072e0 <xTaskRemoveFromEventList>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a80:	f000 fd06 	bl	8007490 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a84:	7bbb      	ldrb	r3, [r7, #14]
 8006a86:	3b01      	subs	r3, #1
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	dce9      	bgt.n	8006a68 <prvUnlockQueue+0x60>
 8006a94:	e000      	b.n	8006a98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	22ff      	movs	r2, #255	; 0xff
 8006a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006aa0:	f001 f832 	bl	8007b08 <vPortExitCritical>
}
 8006aa4:	bf00      	nop
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ab4:	f000 fffa 	bl	8007aac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d102      	bne.n	8006aca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	60fb      	str	r3, [r7, #12]
 8006ac8:	e001      	b.n	8006ace <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006aca:	2300      	movs	r3, #0
 8006acc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ace:	f001 f81b 	bl	8007b08 <vPortExitCritical>

	return xReturn;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08e      	sub	sp, #56	; 0x38
 8006ae0:	af04      	add	r7, sp, #16
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d109      	bne.n	8006b04 <xTaskCreateStatic+0x28>
 8006af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	623b      	str	r3, [r7, #32]
 8006b02:	e7fe      	b.n	8006b02 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d109      	bne.n	8006b1e <xTaskCreateStatic+0x42>
 8006b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0e:	f383 8811 	msr	BASEPRI, r3
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	61fb      	str	r3, [r7, #28]
 8006b1c:	e7fe      	b.n	8006b1c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b1e:	2354      	movs	r3, #84	; 0x54
 8006b20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	2b54      	cmp	r3, #84	; 0x54
 8006b26:	d009      	beq.n	8006b3c <xTaskCreateStatic+0x60>
 8006b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	61bb      	str	r3, [r7, #24]
 8006b3a:	e7fe      	b.n	8006b3a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b3c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d01e      	beq.n	8006b82 <xTaskCreateStatic+0xa6>
 8006b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d01b      	beq.n	8006b82 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b52:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	2202      	movs	r2, #2
 8006b58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	9303      	str	r3, [sp, #12]
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	9302      	str	r3, [sp, #8]
 8006b64:	f107 0314 	add.w	r3, r7, #20
 8006b68:	9301      	str	r3, [sp, #4]
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	68b9      	ldr	r1, [r7, #8]
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f000 f850 	bl	8006c1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b7c:	f000 f8d4 	bl	8006d28 <prvAddNewTaskToReadyList>
 8006b80:	e001      	b.n	8006b86 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8006b82:	2300      	movs	r3, #0
 8006b84:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b86:	697b      	ldr	r3, [r7, #20]
	}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3728      	adds	r7, #40	; 0x28
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b08c      	sub	sp, #48	; 0x30
 8006b94:	af04      	add	r7, sp, #16
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	603b      	str	r3, [r7, #0]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ba0:	88fb      	ldrh	r3, [r7, #6]
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f001 f85d 	bl	8007c64 <pvPortMalloc>
 8006baa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00e      	beq.n	8006bd0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006bb2:	2054      	movs	r0, #84	; 0x54
 8006bb4:	f001 f856 	bl	8007c64 <pvPortMalloc>
 8006bb8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d003      	beq.n	8006bc8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	631a      	str	r2, [r3, #48]	; 0x30
 8006bc6:	e005      	b.n	8006bd4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006bc8:	6978      	ldr	r0, [r7, #20]
 8006bca:	f001 f90d 	bl	8007de8 <vPortFree>
 8006bce:	e001      	b.n	8006bd4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d017      	beq.n	8006c0a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006be2:	88fa      	ldrh	r2, [r7, #6]
 8006be4:	2300      	movs	r3, #0
 8006be6:	9303      	str	r3, [sp, #12]
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	9302      	str	r3, [sp, #8]
 8006bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bee:	9301      	str	r3, [sp, #4]
 8006bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	68b9      	ldr	r1, [r7, #8]
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f000 f80e 	bl	8006c1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bfe:	69f8      	ldr	r0, [r7, #28]
 8006c00:	f000 f892 	bl	8006d28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c04:	2301      	movs	r3, #1
 8006c06:	61bb      	str	r3, [r7, #24]
 8006c08:	e002      	b.n	8006c10 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c0e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c10:	69bb      	ldr	r3, [r7, #24]
	}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3720      	adds	r7, #32
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b088      	sub	sp, #32
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	60f8      	str	r0, [r7, #12]
 8006c22:	60b9      	str	r1, [r7, #8]
 8006c24:	607a      	str	r2, [r7, #4]
 8006c26:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c32:	3b01      	subs	r3, #1
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	f023 0307 	bic.w	r3, r3, #7
 8006c40:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	f003 0307 	and.w	r3, r3, #7
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d009      	beq.n	8006c60 <prvInitialiseNewTask+0x46>
 8006c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c50:	f383 8811 	msr	BASEPRI, r3
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	617b      	str	r3, [r7, #20]
 8006c5e:	e7fe      	b.n	8006c5e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d01f      	beq.n	8006ca6 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c66:	2300      	movs	r3, #0
 8006c68:	61fb      	str	r3, [r7, #28]
 8006c6a:	e012      	b.n	8006c92 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	4413      	add	r3, r2
 8006c72:	7819      	ldrb	r1, [r3, #0]
 8006c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	4413      	add	r3, r2
 8006c7a:	3334      	adds	r3, #52	; 0x34
 8006c7c:	460a      	mov	r2, r1
 8006c7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	4413      	add	r3, r2
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d006      	beq.n	8006c9a <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	61fb      	str	r3, [r7, #28]
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	2b0f      	cmp	r3, #15
 8006c96:	d9e9      	bls.n	8006c6c <prvInitialiseNewTask+0x52>
 8006c98:	e000      	b.n	8006c9c <prvInitialiseNewTask+0x82>
			{
				break;
 8006c9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ca4:	e003      	b.n	8006cae <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb0:	2b06      	cmp	r3, #6
 8006cb2:	d901      	bls.n	8006cb8 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006cb4:	2306      	movs	r3, #6
 8006cb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cc2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ccc:	3304      	adds	r3, #4
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7ff fb1b 	bl	800630a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd6:	3318      	adds	r3, #24
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7ff fb16 	bl	800630a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ce2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce6:	f1c3 0207 	rsb	r2, r3, #7
 8006cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cf2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	68f9      	ldr	r1, [r7, #12]
 8006d06:	69b8      	ldr	r0, [r7, #24]
 8006d08:	f000 fda8 	bl	800785c <pxPortInitialiseStack>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d002      	beq.n	8006d1e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d1e:	bf00      	nop
 8006d20:	3720      	adds	r7, #32
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
	...

08006d28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d30:	f000 febc 	bl	8007aac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d34:	4b2a      	ldr	r3, [pc, #168]	; (8006de0 <prvAddNewTaskToReadyList+0xb8>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	4a29      	ldr	r2, [pc, #164]	; (8006de0 <prvAddNewTaskToReadyList+0xb8>)
 8006d3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d3e:	4b29      	ldr	r3, [pc, #164]	; (8006de4 <prvAddNewTaskToReadyList+0xbc>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d109      	bne.n	8006d5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d46:	4a27      	ldr	r2, [pc, #156]	; (8006de4 <prvAddNewTaskToReadyList+0xbc>)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d4c:	4b24      	ldr	r3, [pc, #144]	; (8006de0 <prvAddNewTaskToReadyList+0xb8>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d110      	bne.n	8006d76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d54:	f000 fbc0 	bl	80074d8 <prvInitialiseTaskLists>
 8006d58:	e00d      	b.n	8006d76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d5a:	4b23      	ldr	r3, [pc, #140]	; (8006de8 <prvAddNewTaskToReadyList+0xc0>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d109      	bne.n	8006d76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d62:	4b20      	ldr	r3, [pc, #128]	; (8006de4 <prvAddNewTaskToReadyList+0xbc>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d802      	bhi.n	8006d76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d70:	4a1c      	ldr	r2, [pc, #112]	; (8006de4 <prvAddNewTaskToReadyList+0xbc>)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d76:	4b1d      	ldr	r3, [pc, #116]	; (8006dec <prvAddNewTaskToReadyList+0xc4>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	4a1b      	ldr	r2, [pc, #108]	; (8006dec <prvAddNewTaskToReadyList+0xc4>)
 8006d7e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d84:	2201      	movs	r2, #1
 8006d86:	409a      	lsls	r2, r3
 8006d88:	4b19      	ldr	r3, [pc, #100]	; (8006df0 <prvAddNewTaskToReadyList+0xc8>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	4a18      	ldr	r2, [pc, #96]	; (8006df0 <prvAddNewTaskToReadyList+0xc8>)
 8006d90:	6013      	str	r3, [r2, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d96:	4613      	mov	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4a15      	ldr	r2, [pc, #84]	; (8006df4 <prvAddNewTaskToReadyList+0xcc>)
 8006da0:	441a      	add	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	3304      	adds	r3, #4
 8006da6:	4619      	mov	r1, r3
 8006da8:	4610      	mov	r0, r2
 8006daa:	f7ff fabb 	bl	8006324 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006dae:	f000 feab 	bl	8007b08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006db2:	4b0d      	ldr	r3, [pc, #52]	; (8006de8 <prvAddNewTaskToReadyList+0xc0>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00e      	beq.n	8006dd8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006dba:	4b0a      	ldr	r3, [pc, #40]	; (8006de4 <prvAddNewTaskToReadyList+0xbc>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d207      	bcs.n	8006dd8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006dc8:	4b0b      	ldr	r3, [pc, #44]	; (8006df8 <prvAddNewTaskToReadyList+0xd0>)
 8006dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dce:	601a      	str	r2, [r3, #0]
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006dd8:	bf00      	nop
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	200003f0 	.word	0x200003f0
 8006de4:	200002f0 	.word	0x200002f0
 8006de8:	200003fc 	.word	0x200003fc
 8006dec:	2000040c 	.word	0x2000040c
 8006df0:	200003f8 	.word	0x200003f8
 8006df4:	200002f4 	.word	0x200002f4
 8006df8:	e000ed04 	.word	0xe000ed04

08006dfc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e04:	2300      	movs	r3, #0
 8006e06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d016      	beq.n	8006e3c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e0e:	4b13      	ldr	r3, [pc, #76]	; (8006e5c <vTaskDelay+0x60>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d009      	beq.n	8006e2a <vTaskDelay+0x2e>
 8006e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1a:	f383 8811 	msr	BASEPRI, r3
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	f3bf 8f4f 	dsb	sy
 8006e26:	60bb      	str	r3, [r7, #8]
 8006e28:	e7fe      	b.n	8006e28 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006e2a:	f000 f879 	bl	8006f20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e2e:	2100      	movs	r1, #0
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fcad 	bl	8007790 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e36:	f000 f881 	bl	8006f3c <xTaskResumeAll>
 8006e3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d107      	bne.n	8006e52 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006e42:	4b07      	ldr	r3, [pc, #28]	; (8006e60 <vTaskDelay+0x64>)
 8006e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e52:	bf00      	nop
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20000418 	.word	0x20000418
 8006e60:	e000ed04 	.word	0xe000ed04

08006e64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b08a      	sub	sp, #40	; 0x28
 8006e68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e72:	463a      	mov	r2, r7
 8006e74:	1d39      	adds	r1, r7, #4
 8006e76:	f107 0308 	add.w	r3, r7, #8
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fb fa70 	bl	8002360 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	9202      	str	r2, [sp, #8]
 8006e88:	9301      	str	r3, [sp, #4]
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	2300      	movs	r3, #0
 8006e90:	460a      	mov	r2, r1
 8006e92:	491d      	ldr	r1, [pc, #116]	; (8006f08 <vTaskStartScheduler+0xa4>)
 8006e94:	481d      	ldr	r0, [pc, #116]	; (8006f0c <vTaskStartScheduler+0xa8>)
 8006e96:	f7ff fe21 	bl	8006adc <xTaskCreateStatic>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	4b1c      	ldr	r3, [pc, #112]	; (8006f10 <vTaskStartScheduler+0xac>)
 8006e9e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ea0:	4b1b      	ldr	r3, [pc, #108]	; (8006f10 <vTaskStartScheduler+0xac>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d002      	beq.n	8006eae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	617b      	str	r3, [r7, #20]
 8006eac:	e001      	b.n	8006eb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d115      	bne.n	8006ee4 <vTaskStartScheduler+0x80>
 8006eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebc:	f383 8811 	msr	BASEPRI, r3
 8006ec0:	f3bf 8f6f 	isb	sy
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006eca:	4b12      	ldr	r3, [pc, #72]	; (8006f14 <vTaskStartScheduler+0xb0>)
 8006ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ed2:	4b11      	ldr	r3, [pc, #68]	; (8006f18 <vTaskStartScheduler+0xb4>)
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ed8:	4b10      	ldr	r3, [pc, #64]	; (8006f1c <vTaskStartScheduler+0xb8>)
 8006eda:	2200      	movs	r2, #0
 8006edc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006ede:	f000 fd47 	bl	8007970 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ee2:	e00d      	b.n	8006f00 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eea:	d109      	bne.n	8006f00 <vTaskStartScheduler+0x9c>
 8006eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef0:	f383 8811 	msr	BASEPRI, r3
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	f3bf 8f4f 	dsb	sy
 8006efc:	60fb      	str	r3, [r7, #12]
 8006efe:	e7fe      	b.n	8006efe <vTaskStartScheduler+0x9a>
}
 8006f00:	bf00      	nop
 8006f02:	3718      	adds	r7, #24
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	08008588 	.word	0x08008588
 8006f0c:	080074a9 	.word	0x080074a9
 8006f10:	20000414 	.word	0x20000414
 8006f14:	20000410 	.word	0x20000410
 8006f18:	200003fc 	.word	0x200003fc
 8006f1c:	200003f4 	.word	0x200003f4

08006f20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f20:	b480      	push	{r7}
 8006f22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006f24:	4b04      	ldr	r3, [pc, #16]	; (8006f38 <vTaskSuspendAll+0x18>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	4a03      	ldr	r2, [pc, #12]	; (8006f38 <vTaskSuspendAll+0x18>)
 8006f2c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006f2e:	bf00      	nop
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	20000418 	.word	0x20000418

08006f3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f42:	2300      	movs	r3, #0
 8006f44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f46:	2300      	movs	r3, #0
 8006f48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f4a:	4b41      	ldr	r3, [pc, #260]	; (8007050 <xTaskResumeAll+0x114>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d109      	bne.n	8006f66 <xTaskResumeAll+0x2a>
 8006f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	603b      	str	r3, [r7, #0]
 8006f64:	e7fe      	b.n	8006f64 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f66:	f000 fda1 	bl	8007aac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f6a:	4b39      	ldr	r3, [pc, #228]	; (8007050 <xTaskResumeAll+0x114>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	4a37      	ldr	r2, [pc, #220]	; (8007050 <xTaskResumeAll+0x114>)
 8006f72:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f74:	4b36      	ldr	r3, [pc, #216]	; (8007050 <xTaskResumeAll+0x114>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d161      	bne.n	8007040 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f7c:	4b35      	ldr	r3, [pc, #212]	; (8007054 <xTaskResumeAll+0x118>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d05d      	beq.n	8007040 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f84:	e02e      	b.n	8006fe4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f86:	4b34      	ldr	r3, [pc, #208]	; (8007058 <xTaskResumeAll+0x11c>)
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	3318      	adds	r3, #24
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7ff fa23 	bl	80063de <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	3304      	adds	r3, #4
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7ff fa1e 	bl	80063de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	409a      	lsls	r2, r3
 8006faa:	4b2c      	ldr	r3, [pc, #176]	; (800705c <xTaskResumeAll+0x120>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	4a2a      	ldr	r2, [pc, #168]	; (800705c <xTaskResumeAll+0x120>)
 8006fb2:	6013      	str	r3, [r2, #0]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb8:	4613      	mov	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4a27      	ldr	r2, [pc, #156]	; (8007060 <xTaskResumeAll+0x124>)
 8006fc2:	441a      	add	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	4619      	mov	r1, r3
 8006fca:	4610      	mov	r0, r2
 8006fcc:	f7ff f9aa 	bl	8006324 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd4:	4b23      	ldr	r3, [pc, #140]	; (8007064 <xTaskResumeAll+0x128>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d302      	bcc.n	8006fe4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006fde:	4b22      	ldr	r3, [pc, #136]	; (8007068 <xTaskResumeAll+0x12c>)
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fe4:	4b1c      	ldr	r3, [pc, #112]	; (8007058 <xTaskResumeAll+0x11c>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1cc      	bne.n	8006f86 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ff2:	f000 fb0b 	bl	800760c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006ff6:	4b1d      	ldr	r3, [pc, #116]	; (800706c <xTaskResumeAll+0x130>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d010      	beq.n	8007024 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007002:	f000 f837 	bl	8007074 <xTaskIncrementTick>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800700c:	4b16      	ldr	r3, [pc, #88]	; (8007068 <xTaskResumeAll+0x12c>)
 800700e:	2201      	movs	r2, #1
 8007010:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	3b01      	subs	r3, #1
 8007016:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1f1      	bne.n	8007002 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800701e:	4b13      	ldr	r3, [pc, #76]	; (800706c <xTaskResumeAll+0x130>)
 8007020:	2200      	movs	r2, #0
 8007022:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007024:	4b10      	ldr	r3, [pc, #64]	; (8007068 <xTaskResumeAll+0x12c>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d009      	beq.n	8007040 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800702c:	2301      	movs	r3, #1
 800702e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007030:	4b0f      	ldr	r3, [pc, #60]	; (8007070 <xTaskResumeAll+0x134>)
 8007032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007036:	601a      	str	r2, [r3, #0]
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007040:	f000 fd62 	bl	8007b08 <vPortExitCritical>

	return xAlreadyYielded;
 8007044:	68bb      	ldr	r3, [r7, #8]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	20000418 	.word	0x20000418
 8007054:	200003f0 	.word	0x200003f0
 8007058:	200003b0 	.word	0x200003b0
 800705c:	200003f8 	.word	0x200003f8
 8007060:	200002f4 	.word	0x200002f4
 8007064:	200002f0 	.word	0x200002f0
 8007068:	20000404 	.word	0x20000404
 800706c:	20000400 	.word	0x20000400
 8007070:	e000ed04 	.word	0xe000ed04

08007074 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800707a:	2300      	movs	r3, #0
 800707c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800707e:	4b4e      	ldr	r3, [pc, #312]	; (80071b8 <xTaskIncrementTick+0x144>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	f040 8087 	bne.w	8007196 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007088:	4b4c      	ldr	r3, [pc, #304]	; (80071bc <xTaskIncrementTick+0x148>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3301      	adds	r3, #1
 800708e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007090:	4a4a      	ldr	r2, [pc, #296]	; (80071bc <xTaskIncrementTick+0x148>)
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d11f      	bne.n	80070dc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800709c:	4b48      	ldr	r3, [pc, #288]	; (80071c0 <xTaskIncrementTick+0x14c>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d009      	beq.n	80070ba <xTaskIncrementTick+0x46>
 80070a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	603b      	str	r3, [r7, #0]
 80070b8:	e7fe      	b.n	80070b8 <xTaskIncrementTick+0x44>
 80070ba:	4b41      	ldr	r3, [pc, #260]	; (80071c0 <xTaskIncrementTick+0x14c>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	4b40      	ldr	r3, [pc, #256]	; (80071c4 <xTaskIncrementTick+0x150>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a3e      	ldr	r2, [pc, #248]	; (80071c0 <xTaskIncrementTick+0x14c>)
 80070c6:	6013      	str	r3, [r2, #0]
 80070c8:	4a3e      	ldr	r2, [pc, #248]	; (80071c4 <xTaskIncrementTick+0x150>)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	4b3e      	ldr	r3, [pc, #248]	; (80071c8 <xTaskIncrementTick+0x154>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	3301      	adds	r3, #1
 80070d4:	4a3c      	ldr	r2, [pc, #240]	; (80071c8 <xTaskIncrementTick+0x154>)
 80070d6:	6013      	str	r3, [r2, #0]
 80070d8:	f000 fa98 	bl	800760c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80070dc:	4b3b      	ldr	r3, [pc, #236]	; (80071cc <xTaskIncrementTick+0x158>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d348      	bcc.n	8007178 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070e6:	4b36      	ldr	r3, [pc, #216]	; (80071c0 <xTaskIncrementTick+0x14c>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d104      	bne.n	80070fa <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070f0:	4b36      	ldr	r3, [pc, #216]	; (80071cc <xTaskIncrementTick+0x158>)
 80070f2:	f04f 32ff 	mov.w	r2, #4294967295
 80070f6:	601a      	str	r2, [r3, #0]
					break;
 80070f8:	e03e      	b.n	8007178 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070fa:	4b31      	ldr	r3, [pc, #196]	; (80071c0 <xTaskIncrementTick+0x14c>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	429a      	cmp	r2, r3
 8007110:	d203      	bcs.n	800711a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007112:	4a2e      	ldr	r2, [pc, #184]	; (80071cc <xTaskIncrementTick+0x158>)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007118:	e02e      	b.n	8007178 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	3304      	adds	r3, #4
 800711e:	4618      	mov	r0, r3
 8007120:	f7ff f95d 	bl	80063de <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007128:	2b00      	cmp	r3, #0
 800712a:	d004      	beq.n	8007136 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	3318      	adds	r3, #24
 8007130:	4618      	mov	r0, r3
 8007132:	f7ff f954 	bl	80063de <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713a:	2201      	movs	r2, #1
 800713c:	409a      	lsls	r2, r3
 800713e:	4b24      	ldr	r3, [pc, #144]	; (80071d0 <xTaskIncrementTick+0x15c>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4313      	orrs	r3, r2
 8007144:	4a22      	ldr	r2, [pc, #136]	; (80071d0 <xTaskIncrementTick+0x15c>)
 8007146:	6013      	str	r3, [r2, #0]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800714c:	4613      	mov	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4a1f      	ldr	r2, [pc, #124]	; (80071d4 <xTaskIncrementTick+0x160>)
 8007156:	441a      	add	r2, r3
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	3304      	adds	r3, #4
 800715c:	4619      	mov	r1, r3
 800715e:	4610      	mov	r0, r2
 8007160:	f7ff f8e0 	bl	8006324 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007168:	4b1b      	ldr	r3, [pc, #108]	; (80071d8 <xTaskIncrementTick+0x164>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716e:	429a      	cmp	r2, r3
 8007170:	d3b9      	bcc.n	80070e6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007172:	2301      	movs	r3, #1
 8007174:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007176:	e7b6      	b.n	80070e6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007178:	4b17      	ldr	r3, [pc, #92]	; (80071d8 <xTaskIncrementTick+0x164>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800717e:	4915      	ldr	r1, [pc, #84]	; (80071d4 <xTaskIncrementTick+0x160>)
 8007180:	4613      	mov	r3, r2
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4413      	add	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	440b      	add	r3, r1
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d907      	bls.n	80071a0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8007190:	2301      	movs	r3, #1
 8007192:	617b      	str	r3, [r7, #20]
 8007194:	e004      	b.n	80071a0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007196:	4b11      	ldr	r3, [pc, #68]	; (80071dc <xTaskIncrementTick+0x168>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3301      	adds	r3, #1
 800719c:	4a0f      	ldr	r2, [pc, #60]	; (80071dc <xTaskIncrementTick+0x168>)
 800719e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80071a0:	4b0f      	ldr	r3, [pc, #60]	; (80071e0 <xTaskIncrementTick+0x16c>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d001      	beq.n	80071ac <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80071a8:	2301      	movs	r3, #1
 80071aa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80071ac:	697b      	ldr	r3, [r7, #20]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3718      	adds	r7, #24
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	20000418 	.word	0x20000418
 80071bc:	200003f4 	.word	0x200003f4
 80071c0:	200003a8 	.word	0x200003a8
 80071c4:	200003ac 	.word	0x200003ac
 80071c8:	20000408 	.word	0x20000408
 80071cc:	20000410 	.word	0x20000410
 80071d0:	200003f8 	.word	0x200003f8
 80071d4:	200002f4 	.word	0x200002f4
 80071d8:	200002f0 	.word	0x200002f0
 80071dc:	20000400 	.word	0x20000400
 80071e0:	20000404 	.word	0x20000404

080071e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80071e4:	b480      	push	{r7}
 80071e6:	b087      	sub	sp, #28
 80071e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80071ea:	4b26      	ldr	r3, [pc, #152]	; (8007284 <vTaskSwitchContext+0xa0>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d003      	beq.n	80071fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071f2:	4b25      	ldr	r3, [pc, #148]	; (8007288 <vTaskSwitchContext+0xa4>)
 80071f4:	2201      	movs	r2, #1
 80071f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071f8:	e03e      	b.n	8007278 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80071fa:	4b23      	ldr	r3, [pc, #140]	; (8007288 <vTaskSwitchContext+0xa4>)
 80071fc:	2200      	movs	r2, #0
 80071fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007200:	4b22      	ldr	r3, [pc, #136]	; (800728c <vTaskSwitchContext+0xa8>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	fab3 f383 	clz	r3, r3
 800720c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800720e:	7afb      	ldrb	r3, [r7, #11]
 8007210:	f1c3 031f 	rsb	r3, r3, #31
 8007214:	617b      	str	r3, [r7, #20]
 8007216:	491e      	ldr	r1, [pc, #120]	; (8007290 <vTaskSwitchContext+0xac>)
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	4613      	mov	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	440b      	add	r3, r1
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d109      	bne.n	800723e <vTaskSwitchContext+0x5a>
	__asm volatile
 800722a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722e:	f383 8811 	msr	BASEPRI, r3
 8007232:	f3bf 8f6f 	isb	sy
 8007236:	f3bf 8f4f 	dsb	sy
 800723a:	607b      	str	r3, [r7, #4]
 800723c:	e7fe      	b.n	800723c <vTaskSwitchContext+0x58>
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	4613      	mov	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4413      	add	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4a11      	ldr	r2, [pc, #68]	; (8007290 <vTaskSwitchContext+0xac>)
 800724a:	4413      	add	r3, r2
 800724c:	613b      	str	r3, [r7, #16]
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	605a      	str	r2, [r3, #4]
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	3308      	adds	r3, #8
 8007260:	429a      	cmp	r2, r3
 8007262:	d104      	bne.n	800726e <vTaskSwitchContext+0x8a>
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	685a      	ldr	r2, [r3, #4]
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	605a      	str	r2, [r3, #4]
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	4a07      	ldr	r2, [pc, #28]	; (8007294 <vTaskSwitchContext+0xb0>)
 8007276:	6013      	str	r3, [r2, #0]
}
 8007278:	bf00      	nop
 800727a:	371c      	adds	r7, #28
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr
 8007284:	20000418 	.word	0x20000418
 8007288:	20000404 	.word	0x20000404
 800728c:	200003f8 	.word	0x200003f8
 8007290:	200002f4 	.word	0x200002f4
 8007294:	200002f0 	.word	0x200002f0

08007298 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d109      	bne.n	80072bc <vTaskPlaceOnEventList+0x24>
 80072a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ac:	f383 8811 	msr	BASEPRI, r3
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	60fb      	str	r3, [r7, #12]
 80072ba:	e7fe      	b.n	80072ba <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072bc:	4b07      	ldr	r3, [pc, #28]	; (80072dc <vTaskPlaceOnEventList+0x44>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	3318      	adds	r3, #24
 80072c2:	4619      	mov	r1, r3
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f7ff f851 	bl	800636c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80072ca:	2101      	movs	r1, #1
 80072cc:	6838      	ldr	r0, [r7, #0]
 80072ce:	f000 fa5f 	bl	8007790 <prvAddCurrentTaskToDelayedList>
}
 80072d2:	bf00      	nop
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	200002f0 	.word	0x200002f0

080072e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b086      	sub	sp, #24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d109      	bne.n	800730a <xTaskRemoveFromEventList+0x2a>
 80072f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	60fb      	str	r3, [r7, #12]
 8007308:	e7fe      	b.n	8007308 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	3318      	adds	r3, #24
 800730e:	4618      	mov	r0, r3
 8007310:	f7ff f865 	bl	80063de <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007314:	4b1d      	ldr	r3, [pc, #116]	; (800738c <xTaskRemoveFromEventList+0xac>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d11c      	bne.n	8007356 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	3304      	adds	r3, #4
 8007320:	4618      	mov	r0, r3
 8007322:	f7ff f85c 	bl	80063de <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732a:	2201      	movs	r2, #1
 800732c:	409a      	lsls	r2, r3
 800732e:	4b18      	ldr	r3, [pc, #96]	; (8007390 <xTaskRemoveFromEventList+0xb0>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4313      	orrs	r3, r2
 8007334:	4a16      	ldr	r2, [pc, #88]	; (8007390 <xTaskRemoveFromEventList+0xb0>)
 8007336:	6013      	str	r3, [r2, #0]
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800733c:	4613      	mov	r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4a13      	ldr	r2, [pc, #76]	; (8007394 <xTaskRemoveFromEventList+0xb4>)
 8007346:	441a      	add	r2, r3
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	3304      	adds	r3, #4
 800734c:	4619      	mov	r1, r3
 800734e:	4610      	mov	r0, r2
 8007350:	f7fe ffe8 	bl	8006324 <vListInsertEnd>
 8007354:	e005      	b.n	8007362 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	3318      	adds	r3, #24
 800735a:	4619      	mov	r1, r3
 800735c:	480e      	ldr	r0, [pc, #56]	; (8007398 <xTaskRemoveFromEventList+0xb8>)
 800735e:	f7fe ffe1 	bl	8006324 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007366:	4b0d      	ldr	r3, [pc, #52]	; (800739c <xTaskRemoveFromEventList+0xbc>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736c:	429a      	cmp	r2, r3
 800736e:	d905      	bls.n	800737c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007370:	2301      	movs	r3, #1
 8007372:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007374:	4b0a      	ldr	r3, [pc, #40]	; (80073a0 <xTaskRemoveFromEventList+0xc0>)
 8007376:	2201      	movs	r2, #1
 8007378:	601a      	str	r2, [r3, #0]
 800737a:	e001      	b.n	8007380 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800737c:	2300      	movs	r3, #0
 800737e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007380:	697b      	ldr	r3, [r7, #20]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3718      	adds	r7, #24
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	20000418 	.word	0x20000418
 8007390:	200003f8 	.word	0x200003f8
 8007394:	200002f4 	.word	0x200002f4
 8007398:	200003b0 	.word	0x200003b0
 800739c:	200002f0 	.word	0x200002f0
 80073a0:	20000404 	.word	0x20000404

080073a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073ac:	4b06      	ldr	r3, [pc, #24]	; (80073c8 <vTaskInternalSetTimeOutState+0x24>)
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073b4:	4b05      	ldr	r3, [pc, #20]	; (80073cc <vTaskInternalSetTimeOutState+0x28>)
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	605a      	str	r2, [r3, #4]
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	20000408 	.word	0x20000408
 80073cc:	200003f4 	.word	0x200003f4

080073d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b088      	sub	sp, #32
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d109      	bne.n	80073f4 <xTaskCheckForTimeOut+0x24>
 80073e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e4:	f383 8811 	msr	BASEPRI, r3
 80073e8:	f3bf 8f6f 	isb	sy
 80073ec:	f3bf 8f4f 	dsb	sy
 80073f0:	613b      	str	r3, [r7, #16]
 80073f2:	e7fe      	b.n	80073f2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d109      	bne.n	800740e <xTaskCheckForTimeOut+0x3e>
 80073fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	60fb      	str	r3, [r7, #12]
 800740c:	e7fe      	b.n	800740c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800740e:	f000 fb4d 	bl	8007aac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007412:	4b1d      	ldr	r3, [pc, #116]	; (8007488 <xTaskCheckForTimeOut+0xb8>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	69ba      	ldr	r2, [r7, #24]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742a:	d102      	bne.n	8007432 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800742c:	2300      	movs	r3, #0
 800742e:	61fb      	str	r3, [r7, #28]
 8007430:	e023      	b.n	800747a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	4b15      	ldr	r3, [pc, #84]	; (800748c <xTaskCheckForTimeOut+0xbc>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	429a      	cmp	r2, r3
 800743c:	d007      	beq.n	800744e <xTaskCheckForTimeOut+0x7e>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	69ba      	ldr	r2, [r7, #24]
 8007444:	429a      	cmp	r2, r3
 8007446:	d302      	bcc.n	800744e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007448:	2301      	movs	r3, #1
 800744a:	61fb      	str	r3, [r7, #28]
 800744c:	e015      	b.n	800747a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	429a      	cmp	r2, r3
 8007456:	d20b      	bcs.n	8007470 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	1ad2      	subs	r2, r2, r3
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f7ff ff9d 	bl	80073a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800746a:	2300      	movs	r3, #0
 800746c:	61fb      	str	r3, [r7, #28]
 800746e:	e004      	b.n	800747a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	2200      	movs	r2, #0
 8007474:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007476:	2301      	movs	r3, #1
 8007478:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800747a:	f000 fb45 	bl	8007b08 <vPortExitCritical>

	return xReturn;
 800747e:	69fb      	ldr	r3, [r7, #28]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3720      	adds	r7, #32
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	200003f4 	.word	0x200003f4
 800748c:	20000408 	.word	0x20000408

08007490 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007490:	b480      	push	{r7}
 8007492:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007494:	4b03      	ldr	r3, [pc, #12]	; (80074a4 <vTaskMissedYield+0x14>)
 8007496:	2201      	movs	r2, #1
 8007498:	601a      	str	r2, [r3, #0]
}
 800749a:	bf00      	nop
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr
 80074a4:	20000404 	.word	0x20000404

080074a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074b0:	f000 f852 	bl	8007558 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074b4:	4b06      	ldr	r3, [pc, #24]	; (80074d0 <prvIdleTask+0x28>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d9f9      	bls.n	80074b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074bc:	4b05      	ldr	r3, [pc, #20]	; (80074d4 <prvIdleTask+0x2c>)
 80074be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074c2:	601a      	str	r2, [r3, #0]
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074cc:	e7f0      	b.n	80074b0 <prvIdleTask+0x8>
 80074ce:	bf00      	nop
 80074d0:	200002f4 	.word	0x200002f4
 80074d4:	e000ed04 	.word	0xe000ed04

080074d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074de:	2300      	movs	r3, #0
 80074e0:	607b      	str	r3, [r7, #4]
 80074e2:	e00c      	b.n	80074fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	4613      	mov	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4a12      	ldr	r2, [pc, #72]	; (8007538 <prvInitialiseTaskLists+0x60>)
 80074f0:	4413      	add	r3, r2
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fe fee9 	bl	80062ca <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	3301      	adds	r3, #1
 80074fc:	607b      	str	r3, [r7, #4]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b06      	cmp	r3, #6
 8007502:	d9ef      	bls.n	80074e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007504:	480d      	ldr	r0, [pc, #52]	; (800753c <prvInitialiseTaskLists+0x64>)
 8007506:	f7fe fee0 	bl	80062ca <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800750a:	480d      	ldr	r0, [pc, #52]	; (8007540 <prvInitialiseTaskLists+0x68>)
 800750c:	f7fe fedd 	bl	80062ca <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007510:	480c      	ldr	r0, [pc, #48]	; (8007544 <prvInitialiseTaskLists+0x6c>)
 8007512:	f7fe feda 	bl	80062ca <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007516:	480c      	ldr	r0, [pc, #48]	; (8007548 <prvInitialiseTaskLists+0x70>)
 8007518:	f7fe fed7 	bl	80062ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800751c:	480b      	ldr	r0, [pc, #44]	; (800754c <prvInitialiseTaskLists+0x74>)
 800751e:	f7fe fed4 	bl	80062ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007522:	4b0b      	ldr	r3, [pc, #44]	; (8007550 <prvInitialiseTaskLists+0x78>)
 8007524:	4a05      	ldr	r2, [pc, #20]	; (800753c <prvInitialiseTaskLists+0x64>)
 8007526:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007528:	4b0a      	ldr	r3, [pc, #40]	; (8007554 <prvInitialiseTaskLists+0x7c>)
 800752a:	4a05      	ldr	r2, [pc, #20]	; (8007540 <prvInitialiseTaskLists+0x68>)
 800752c:	601a      	str	r2, [r3, #0]
}
 800752e:	bf00      	nop
 8007530:	3708      	adds	r7, #8
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	200002f4 	.word	0x200002f4
 800753c:	20000380 	.word	0x20000380
 8007540:	20000394 	.word	0x20000394
 8007544:	200003b0 	.word	0x200003b0
 8007548:	200003c4 	.word	0x200003c4
 800754c:	200003dc 	.word	0x200003dc
 8007550:	200003a8 	.word	0x200003a8
 8007554:	200003ac 	.word	0x200003ac

08007558 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800755e:	e019      	b.n	8007594 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007560:	f000 faa4 	bl	8007aac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007564:	4b0f      	ldr	r3, [pc, #60]	; (80075a4 <prvCheckTasksWaitingTermination+0x4c>)
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	3304      	adds	r3, #4
 8007570:	4618      	mov	r0, r3
 8007572:	f7fe ff34 	bl	80063de <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007576:	4b0c      	ldr	r3, [pc, #48]	; (80075a8 <prvCheckTasksWaitingTermination+0x50>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	3b01      	subs	r3, #1
 800757c:	4a0a      	ldr	r2, [pc, #40]	; (80075a8 <prvCheckTasksWaitingTermination+0x50>)
 800757e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007580:	4b0a      	ldr	r3, [pc, #40]	; (80075ac <prvCheckTasksWaitingTermination+0x54>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	3b01      	subs	r3, #1
 8007586:	4a09      	ldr	r2, [pc, #36]	; (80075ac <prvCheckTasksWaitingTermination+0x54>)
 8007588:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800758a:	f000 fabd 	bl	8007b08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 f80e 	bl	80075b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007594:	4b05      	ldr	r3, [pc, #20]	; (80075ac <prvCheckTasksWaitingTermination+0x54>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1e1      	bne.n	8007560 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800759c:	bf00      	nop
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	200003c4 	.word	0x200003c4
 80075a8:	200003f0 	.word	0x200003f0
 80075ac:	200003d8 	.word	0x200003d8

080075b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d108      	bne.n	80075d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 fc0e 	bl	8007de8 <vPortFree>
				vPortFree( pxTCB );
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fc0b 	bl	8007de8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80075d2:	e017      	b.n	8007604 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d103      	bne.n	80075e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fc02 	bl	8007de8 <vPortFree>
	}
 80075e4:	e00e      	b.n	8007604 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d009      	beq.n	8007604 <prvDeleteTCB+0x54>
 80075f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	60fb      	str	r3, [r7, #12]
 8007602:	e7fe      	b.n	8007602 <prvDeleteTCB+0x52>
	}
 8007604:	bf00      	nop
 8007606:	3710      	adds	r7, #16
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007612:	4b0c      	ldr	r3, [pc, #48]	; (8007644 <prvResetNextTaskUnblockTime+0x38>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d104      	bne.n	8007626 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800761c:	4b0a      	ldr	r3, [pc, #40]	; (8007648 <prvResetNextTaskUnblockTime+0x3c>)
 800761e:	f04f 32ff 	mov.w	r2, #4294967295
 8007622:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007624:	e008      	b.n	8007638 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007626:	4b07      	ldr	r3, [pc, #28]	; (8007644 <prvResetNextTaskUnblockTime+0x38>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	4a04      	ldr	r2, [pc, #16]	; (8007648 <prvResetNextTaskUnblockTime+0x3c>)
 8007636:	6013      	str	r3, [r2, #0]
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr
 8007644:	200003a8 	.word	0x200003a8
 8007648:	20000410 	.word	0x20000410

0800764c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007652:	4b0b      	ldr	r3, [pc, #44]	; (8007680 <xTaskGetSchedulerState+0x34>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d102      	bne.n	8007660 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800765a:	2301      	movs	r3, #1
 800765c:	607b      	str	r3, [r7, #4]
 800765e:	e008      	b.n	8007672 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007660:	4b08      	ldr	r3, [pc, #32]	; (8007684 <xTaskGetSchedulerState+0x38>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d102      	bne.n	800766e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007668:	2302      	movs	r3, #2
 800766a:	607b      	str	r3, [r7, #4]
 800766c:	e001      	b.n	8007672 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800766e:	2300      	movs	r3, #0
 8007670:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007672:	687b      	ldr	r3, [r7, #4]
	}
 8007674:	4618      	mov	r0, r3
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	200003fc 	.word	0x200003fc
 8007684:	20000418 	.word	0x20000418

08007688 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007688:	b580      	push	{r7, lr}
 800768a:	b086      	sub	sp, #24
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007694:	2300      	movs	r3, #0
 8007696:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d06c      	beq.n	8007778 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800769e:	4b39      	ldr	r3, [pc, #228]	; (8007784 <xTaskPriorityDisinherit+0xfc>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	693a      	ldr	r2, [r7, #16]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d009      	beq.n	80076bc <xTaskPriorityDisinherit+0x34>
 80076a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ac:	f383 8811 	msr	BASEPRI, r3
 80076b0:	f3bf 8f6f 	isb	sy
 80076b4:	f3bf 8f4f 	dsb	sy
 80076b8:	60fb      	str	r3, [r7, #12]
 80076ba:	e7fe      	b.n	80076ba <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d109      	bne.n	80076d8 <xTaskPriorityDisinherit+0x50>
 80076c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c8:	f383 8811 	msr	BASEPRI, r3
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	60bb      	str	r3, [r7, #8]
 80076d6:	e7fe      	b.n	80076d6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076dc:	1e5a      	subs	r2, r3, #1
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d044      	beq.n	8007778 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d140      	bne.n	8007778 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	3304      	adds	r3, #4
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fe fe6f 	bl	80063de <uxListRemove>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d115      	bne.n	8007732 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800770a:	491f      	ldr	r1, [pc, #124]	; (8007788 <xTaskPriorityDisinherit+0x100>)
 800770c:	4613      	mov	r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	4413      	add	r3, r2
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	440b      	add	r3, r1
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10a      	bne.n	8007732 <xTaskPriorityDisinherit+0xaa>
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007720:	2201      	movs	r2, #1
 8007722:	fa02 f303 	lsl.w	r3, r2, r3
 8007726:	43da      	mvns	r2, r3
 8007728:	4b18      	ldr	r3, [pc, #96]	; (800778c <xTaskPriorityDisinherit+0x104>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4013      	ands	r3, r2
 800772e:	4a17      	ldr	r2, [pc, #92]	; (800778c <xTaskPriorityDisinherit+0x104>)
 8007730:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773e:	f1c3 0207 	rsb	r2, r3, #7
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774a:	2201      	movs	r2, #1
 800774c:	409a      	lsls	r2, r3
 800774e:	4b0f      	ldr	r3, [pc, #60]	; (800778c <xTaskPriorityDisinherit+0x104>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4313      	orrs	r3, r2
 8007754:	4a0d      	ldr	r2, [pc, #52]	; (800778c <xTaskPriorityDisinherit+0x104>)
 8007756:	6013      	str	r3, [r2, #0]
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800775c:	4613      	mov	r3, r2
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	4413      	add	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4a08      	ldr	r2, [pc, #32]	; (8007788 <xTaskPriorityDisinherit+0x100>)
 8007766:	441a      	add	r2, r3
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	3304      	adds	r3, #4
 800776c:	4619      	mov	r1, r3
 800776e:	4610      	mov	r0, r2
 8007770:	f7fe fdd8 	bl	8006324 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007774:	2301      	movs	r3, #1
 8007776:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007778:	697b      	ldr	r3, [r7, #20]
	}
 800777a:	4618      	mov	r0, r3
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	200002f0 	.word	0x200002f0
 8007788:	200002f4 	.word	0x200002f4
 800778c:	200003f8 	.word	0x200003f8

08007790 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800779a:	4b29      	ldr	r3, [pc, #164]	; (8007840 <prvAddCurrentTaskToDelayedList+0xb0>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077a0:	4b28      	ldr	r3, [pc, #160]	; (8007844 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	3304      	adds	r3, #4
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7fe fe19 	bl	80063de <uxListRemove>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10b      	bne.n	80077ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80077b2:	4b24      	ldr	r3, [pc, #144]	; (8007844 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b8:	2201      	movs	r2, #1
 80077ba:	fa02 f303 	lsl.w	r3, r2, r3
 80077be:	43da      	mvns	r2, r3
 80077c0:	4b21      	ldr	r3, [pc, #132]	; (8007848 <prvAddCurrentTaskToDelayedList+0xb8>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4013      	ands	r3, r2
 80077c6:	4a20      	ldr	r2, [pc, #128]	; (8007848 <prvAddCurrentTaskToDelayedList+0xb8>)
 80077c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d0:	d10a      	bne.n	80077e8 <prvAddCurrentTaskToDelayedList+0x58>
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d007      	beq.n	80077e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077d8:	4b1a      	ldr	r3, [pc, #104]	; (8007844 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3304      	adds	r3, #4
 80077de:	4619      	mov	r1, r3
 80077e0:	481a      	ldr	r0, [pc, #104]	; (800784c <prvAddCurrentTaskToDelayedList+0xbc>)
 80077e2:	f7fe fd9f 	bl	8006324 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80077e6:	e026      	b.n	8007836 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4413      	add	r3, r2
 80077ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80077f0:	4b14      	ldr	r3, [pc, #80]	; (8007844 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d209      	bcs.n	8007814 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007800:	4b13      	ldr	r3, [pc, #76]	; (8007850 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	4b0f      	ldr	r3, [pc, #60]	; (8007844 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3304      	adds	r3, #4
 800780a:	4619      	mov	r1, r3
 800780c:	4610      	mov	r0, r2
 800780e:	f7fe fdad 	bl	800636c <vListInsert>
}
 8007812:	e010      	b.n	8007836 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007814:	4b0f      	ldr	r3, [pc, #60]	; (8007854 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	4b0a      	ldr	r3, [pc, #40]	; (8007844 <prvAddCurrentTaskToDelayedList+0xb4>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	3304      	adds	r3, #4
 800781e:	4619      	mov	r1, r3
 8007820:	4610      	mov	r0, r2
 8007822:	f7fe fda3 	bl	800636c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007826:	4b0c      	ldr	r3, [pc, #48]	; (8007858 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	429a      	cmp	r2, r3
 800782e:	d202      	bcs.n	8007836 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007830:	4a09      	ldr	r2, [pc, #36]	; (8007858 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	6013      	str	r3, [r2, #0]
}
 8007836:	bf00      	nop
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	200003f4 	.word	0x200003f4
 8007844:	200002f0 	.word	0x200002f0
 8007848:	200003f8 	.word	0x200003f8
 800784c:	200003dc 	.word	0x200003dc
 8007850:	200003ac 	.word	0x200003ac
 8007854:	200003a8 	.word	0x200003a8
 8007858:	20000410 	.word	0x20000410

0800785c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	3b04      	subs	r3, #4
 800786c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007874:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	3b04      	subs	r3, #4
 800787a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	f023 0201 	bic.w	r2, r3, #1
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	3b04      	subs	r3, #4
 800788a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800788c:	4a0c      	ldr	r2, [pc, #48]	; (80078c0 <pxPortInitialiseStack+0x64>)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	3b14      	subs	r3, #20
 8007896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	3b04      	subs	r3, #4
 80078a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f06f 0202 	mvn.w	r2, #2
 80078aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	3b20      	subs	r3, #32
 80078b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80078b2:	68fb      	ldr	r3, [r7, #12]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	080078c5 	.word	0x080078c5

080078c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80078ca:	2300      	movs	r3, #0
 80078cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80078ce:	4b11      	ldr	r3, [pc, #68]	; (8007914 <prvTaskExitError+0x50>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d6:	d009      	beq.n	80078ec <prvTaskExitError+0x28>
 80078d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078dc:	f383 8811 	msr	BASEPRI, r3
 80078e0:	f3bf 8f6f 	isb	sy
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	60fb      	str	r3, [r7, #12]
 80078ea:	e7fe      	b.n	80078ea <prvTaskExitError+0x26>
 80078ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078fe:	bf00      	nop
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d0fc      	beq.n	8007900 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007906:	bf00      	nop
 8007908:	3714      	adds	r7, #20
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	2000000c 	.word	0x2000000c
	...

08007920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007920:	4b07      	ldr	r3, [pc, #28]	; (8007940 <pxCurrentTCBConst2>)
 8007922:	6819      	ldr	r1, [r3, #0]
 8007924:	6808      	ldr	r0, [r1, #0]
 8007926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800792a:	f380 8809 	msr	PSP, r0
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f04f 0000 	mov.w	r0, #0
 8007936:	f380 8811 	msr	BASEPRI, r0
 800793a:	4770      	bx	lr
 800793c:	f3af 8000 	nop.w

08007940 <pxCurrentTCBConst2>:
 8007940:	200002f0 	.word	0x200002f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007944:	bf00      	nop
 8007946:	bf00      	nop

08007948 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007948:	4808      	ldr	r0, [pc, #32]	; (800796c <prvPortStartFirstTask+0x24>)
 800794a:	6800      	ldr	r0, [r0, #0]
 800794c:	6800      	ldr	r0, [r0, #0]
 800794e:	f380 8808 	msr	MSP, r0
 8007952:	f04f 0000 	mov.w	r0, #0
 8007956:	f380 8814 	msr	CONTROL, r0
 800795a:	b662      	cpsie	i
 800795c:	b661      	cpsie	f
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	df00      	svc	0
 8007968:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800796a:	bf00      	nop
 800796c:	e000ed08 	.word	0xe000ed08

08007970 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b086      	sub	sp, #24
 8007974:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007976:	4b44      	ldr	r3, [pc, #272]	; (8007a88 <xPortStartScheduler+0x118>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a44      	ldr	r2, [pc, #272]	; (8007a8c <xPortStartScheduler+0x11c>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d109      	bne.n	8007994 <xPortStartScheduler+0x24>
 8007980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007984:	f383 8811 	msr	BASEPRI, r3
 8007988:	f3bf 8f6f 	isb	sy
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	613b      	str	r3, [r7, #16]
 8007992:	e7fe      	b.n	8007992 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007994:	4b3c      	ldr	r3, [pc, #240]	; (8007a88 <xPortStartScheduler+0x118>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a3d      	ldr	r2, [pc, #244]	; (8007a90 <xPortStartScheduler+0x120>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d109      	bne.n	80079b2 <xPortStartScheduler+0x42>
 800799e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	e7fe      	b.n	80079b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80079b2:	4b38      	ldr	r3, [pc, #224]	; (8007a94 <xPortStartScheduler+0x124>)
 80079b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	22ff      	movs	r2, #255	; 0xff
 80079c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80079cc:	78fb      	ldrb	r3, [r7, #3]
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80079d4:	b2da      	uxtb	r2, r3
 80079d6:	4b30      	ldr	r3, [pc, #192]	; (8007a98 <xPortStartScheduler+0x128>)
 80079d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80079da:	4b30      	ldr	r3, [pc, #192]	; (8007a9c <xPortStartScheduler+0x12c>)
 80079dc:	2207      	movs	r2, #7
 80079de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079e0:	e009      	b.n	80079f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80079e2:	4b2e      	ldr	r3, [pc, #184]	; (8007a9c <xPortStartScheduler+0x12c>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3b01      	subs	r3, #1
 80079e8:	4a2c      	ldr	r2, [pc, #176]	; (8007a9c <xPortStartScheduler+0x12c>)
 80079ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079ec:	78fb      	ldrb	r3, [r7, #3]
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	005b      	lsls	r3, r3, #1
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079f6:	78fb      	ldrb	r3, [r7, #3]
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079fe:	2b80      	cmp	r3, #128	; 0x80
 8007a00:	d0ef      	beq.n	80079e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a02:	4b26      	ldr	r3, [pc, #152]	; (8007a9c <xPortStartScheduler+0x12c>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f1c3 0307 	rsb	r3, r3, #7
 8007a0a:	2b04      	cmp	r3, #4
 8007a0c:	d009      	beq.n	8007a22 <xPortStartScheduler+0xb2>
 8007a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	60bb      	str	r3, [r7, #8]
 8007a20:	e7fe      	b.n	8007a20 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a22:	4b1e      	ldr	r3, [pc, #120]	; (8007a9c <xPortStartScheduler+0x12c>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	021b      	lsls	r3, r3, #8
 8007a28:	4a1c      	ldr	r2, [pc, #112]	; (8007a9c <xPortStartScheduler+0x12c>)
 8007a2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a2c:	4b1b      	ldr	r3, [pc, #108]	; (8007a9c <xPortStartScheduler+0x12c>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a34:	4a19      	ldr	r2, [pc, #100]	; (8007a9c <xPortStartScheduler+0x12c>)
 8007a36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	b2da      	uxtb	r2, r3
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a40:	4b17      	ldr	r3, [pc, #92]	; (8007aa0 <xPortStartScheduler+0x130>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a16      	ldr	r2, [pc, #88]	; (8007aa0 <xPortStartScheduler+0x130>)
 8007a46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a4c:	4b14      	ldr	r3, [pc, #80]	; (8007aa0 <xPortStartScheduler+0x130>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a13      	ldr	r2, [pc, #76]	; (8007aa0 <xPortStartScheduler+0x130>)
 8007a52:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a58:	f000 f8d6 	bl	8007c08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a5c:	4b11      	ldr	r3, [pc, #68]	; (8007aa4 <xPortStartScheduler+0x134>)
 8007a5e:	2200      	movs	r2, #0
 8007a60:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a62:	f000 f8f5 	bl	8007c50 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a66:	4b10      	ldr	r3, [pc, #64]	; (8007aa8 <xPortStartScheduler+0x138>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a0f      	ldr	r2, [pc, #60]	; (8007aa8 <xPortStartScheduler+0x138>)
 8007a6c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a70:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a72:	f7ff ff69 	bl	8007948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a76:	f7ff fbb5 	bl	80071e4 <vTaskSwitchContext>
	prvTaskExitError();
 8007a7a:	f7ff ff23 	bl	80078c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3718      	adds	r7, #24
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	e000ed00 	.word	0xe000ed00
 8007a8c:	410fc271 	.word	0x410fc271
 8007a90:	410fc270 	.word	0x410fc270
 8007a94:	e000e400 	.word	0xe000e400
 8007a98:	2000041c 	.word	0x2000041c
 8007a9c:	20000420 	.word	0x20000420
 8007aa0:	e000ed20 	.word	0xe000ed20
 8007aa4:	2000000c 	.word	0x2000000c
 8007aa8:	e000ef34 	.word	0xe000ef34

08007aac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab6:	f383 8811 	msr	BASEPRI, r3
 8007aba:	f3bf 8f6f 	isb	sy
 8007abe:	f3bf 8f4f 	dsb	sy
 8007ac2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ac4:	4b0e      	ldr	r3, [pc, #56]	; (8007b00 <vPortEnterCritical+0x54>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	4a0d      	ldr	r2, [pc, #52]	; (8007b00 <vPortEnterCritical+0x54>)
 8007acc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ace:	4b0c      	ldr	r3, [pc, #48]	; (8007b00 <vPortEnterCritical+0x54>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d10e      	bne.n	8007af4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ad6:	4b0b      	ldr	r3, [pc, #44]	; (8007b04 <vPortEnterCritical+0x58>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d009      	beq.n	8007af4 <vPortEnterCritical+0x48>
 8007ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	603b      	str	r3, [r7, #0]
 8007af2:	e7fe      	b.n	8007af2 <vPortEnterCritical+0x46>
	}
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	2000000c 	.word	0x2000000c
 8007b04:	e000ed04 	.word	0xe000ed04

08007b08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b0e:	4b11      	ldr	r3, [pc, #68]	; (8007b54 <vPortExitCritical+0x4c>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d109      	bne.n	8007b2a <vPortExitCritical+0x22>
 8007b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1a:	f383 8811 	msr	BASEPRI, r3
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	607b      	str	r3, [r7, #4]
 8007b28:	e7fe      	b.n	8007b28 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007b2a:	4b0a      	ldr	r3, [pc, #40]	; (8007b54 <vPortExitCritical+0x4c>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	4a08      	ldr	r2, [pc, #32]	; (8007b54 <vPortExitCritical+0x4c>)
 8007b32:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b34:	4b07      	ldr	r3, [pc, #28]	; (8007b54 <vPortExitCritical+0x4c>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d104      	bne.n	8007b46 <vPortExitCritical+0x3e>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b46:	bf00      	nop
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	2000000c 	.word	0x2000000c
	...

08007b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b60:	f3ef 8009 	mrs	r0, PSP
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	4b15      	ldr	r3, [pc, #84]	; (8007bc0 <pxCurrentTCBConst>)
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	f01e 0f10 	tst.w	lr, #16
 8007b70:	bf08      	it	eq
 8007b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7a:	6010      	str	r0, [r2, #0]
 8007b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b84:	f380 8811 	msr	BASEPRI, r0
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f7ff fb28 	bl	80071e4 <vTaskSwitchContext>
 8007b94:	f04f 0000 	mov.w	r0, #0
 8007b98:	f380 8811 	msr	BASEPRI, r0
 8007b9c:	bc09      	pop	{r0, r3}
 8007b9e:	6819      	ldr	r1, [r3, #0]
 8007ba0:	6808      	ldr	r0, [r1, #0]
 8007ba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba6:	f01e 0f10 	tst.w	lr, #16
 8007baa:	bf08      	it	eq
 8007bac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007bb0:	f380 8809 	msr	PSP, r0
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	f3af 8000 	nop.w

08007bc0 <pxCurrentTCBConst>:
 8007bc0:	200002f0 	.word	0x200002f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007bc4:	bf00      	nop
 8007bc6:	bf00      	nop

08007bc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8007bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd2:	f383 8811 	msr	BASEPRI, r3
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007be0:	f7ff fa48 	bl	8007074 <xTaskIncrementTick>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d003      	beq.n	8007bf2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007bea:	4b06      	ldr	r3, [pc, #24]	; (8007c04 <SysTick_Handler+0x3c>)
 8007bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bf0:	601a      	str	r2, [r3, #0]
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007bfc:	bf00      	nop
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	e000ed04 	.word	0xe000ed04

08007c08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c08:	b480      	push	{r7}
 8007c0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c0c:	4b0b      	ldr	r3, [pc, #44]	; (8007c3c <vPortSetupTimerInterrupt+0x34>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c12:	4b0b      	ldr	r3, [pc, #44]	; (8007c40 <vPortSetupTimerInterrupt+0x38>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c18:	4b0a      	ldr	r3, [pc, #40]	; (8007c44 <vPortSetupTimerInterrupt+0x3c>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a0a      	ldr	r2, [pc, #40]	; (8007c48 <vPortSetupTimerInterrupt+0x40>)
 8007c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c22:	099b      	lsrs	r3, r3, #6
 8007c24:	4a09      	ldr	r2, [pc, #36]	; (8007c4c <vPortSetupTimerInterrupt+0x44>)
 8007c26:	3b01      	subs	r3, #1
 8007c28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c2a:	4b04      	ldr	r3, [pc, #16]	; (8007c3c <vPortSetupTimerInterrupt+0x34>)
 8007c2c:	2207      	movs	r2, #7
 8007c2e:	601a      	str	r2, [r3, #0]
}
 8007c30:	bf00      	nop
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	e000e010 	.word	0xe000e010
 8007c40:	e000e018 	.word	0xe000e018
 8007c44:	20000000 	.word	0x20000000
 8007c48:	10624dd3 	.word	0x10624dd3
 8007c4c:	e000e014 	.word	0xe000e014

08007c50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c60 <vPortEnableVFP+0x10>
 8007c54:	6801      	ldr	r1, [r0, #0]
 8007c56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c5a:	6001      	str	r1, [r0, #0]
 8007c5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c5e:	bf00      	nop
 8007c60:	e000ed88 	.word	0xe000ed88

08007c64 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b08a      	sub	sp, #40	; 0x28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c70:	f7ff f956 	bl	8006f20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c74:	4b57      	ldr	r3, [pc, #348]	; (8007dd4 <pvPortMalloc+0x170>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d101      	bne.n	8007c80 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c7c:	f000 f90c 	bl	8007e98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c80:	4b55      	ldr	r3, [pc, #340]	; (8007dd8 <pvPortMalloc+0x174>)
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4013      	ands	r3, r2
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f040 808c 	bne.w	8007da6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d01c      	beq.n	8007cce <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007c94:	2208      	movs	r2, #8
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4413      	add	r3, r2
 8007c9a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f003 0307 	and.w	r3, r3, #7
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d013      	beq.n	8007cce <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f023 0307 	bic.w	r3, r3, #7
 8007cac:	3308      	adds	r3, #8
 8007cae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f003 0307 	and.w	r3, r3, #7
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d009      	beq.n	8007cce <pvPortMalloc+0x6a>
	__asm volatile
 8007cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbe:	f383 8811 	msr	BASEPRI, r3
 8007cc2:	f3bf 8f6f 	isb	sy
 8007cc6:	f3bf 8f4f 	dsb	sy
 8007cca:	617b      	str	r3, [r7, #20]
 8007ccc:	e7fe      	b.n	8007ccc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d068      	beq.n	8007da6 <pvPortMalloc+0x142>
 8007cd4:	4b41      	ldr	r3, [pc, #260]	; (8007ddc <pvPortMalloc+0x178>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d863      	bhi.n	8007da6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007cde:	4b40      	ldr	r3, [pc, #256]	; (8007de0 <pvPortMalloc+0x17c>)
 8007ce0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ce2:	4b3f      	ldr	r3, [pc, #252]	; (8007de0 <pvPortMalloc+0x17c>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ce8:	e004      	b.n	8007cf4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d903      	bls.n	8007d06 <pvPortMalloc+0xa2>
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1f1      	bne.n	8007cea <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d06:	4b33      	ldr	r3, [pc, #204]	; (8007dd4 <pvPortMalloc+0x170>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d04a      	beq.n	8007da6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d10:	6a3b      	ldr	r3, [r7, #32]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2208      	movs	r2, #8
 8007d16:	4413      	add	r3, r2
 8007d18:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	6a3b      	ldr	r3, [r7, #32]
 8007d20:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d24:	685a      	ldr	r2, [r3, #4]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	1ad2      	subs	r2, r2, r3
 8007d2a:	2308      	movs	r3, #8
 8007d2c:	005b      	lsls	r3, r3, #1
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d91e      	bls.n	8007d70 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4413      	add	r3, r2
 8007d38:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	f003 0307 	and.w	r3, r3, #7
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d009      	beq.n	8007d58 <pvPortMalloc+0xf4>
 8007d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	613b      	str	r3, [r7, #16]
 8007d56:	e7fe      	b.n	8007d56 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	1ad2      	subs	r2, r2, r3
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d6a:	69b8      	ldr	r0, [r7, #24]
 8007d6c:	f000 f8f6 	bl	8007f5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d70:	4b1a      	ldr	r3, [pc, #104]	; (8007ddc <pvPortMalloc+0x178>)
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	4a18      	ldr	r2, [pc, #96]	; (8007ddc <pvPortMalloc+0x178>)
 8007d7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d7e:	4b17      	ldr	r3, [pc, #92]	; (8007ddc <pvPortMalloc+0x178>)
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	4b18      	ldr	r3, [pc, #96]	; (8007de4 <pvPortMalloc+0x180>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d203      	bcs.n	8007d92 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d8a:	4b14      	ldr	r3, [pc, #80]	; (8007ddc <pvPortMalloc+0x178>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a15      	ldr	r2, [pc, #84]	; (8007de4 <pvPortMalloc+0x180>)
 8007d90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	4b10      	ldr	r3, [pc, #64]	; (8007dd8 <pvPortMalloc+0x174>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	431a      	orrs	r2, r3
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	2200      	movs	r2, #0
 8007da4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007da6:	f7ff f8c9 	bl	8006f3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	f003 0307 	and.w	r3, r3, #7
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d009      	beq.n	8007dc8 <pvPortMalloc+0x164>
 8007db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db8:	f383 8811 	msr	BASEPRI, r3
 8007dbc:	f3bf 8f6f 	isb	sy
 8007dc0:	f3bf 8f4f 	dsb	sy
 8007dc4:	60fb      	str	r3, [r7, #12]
 8007dc6:	e7fe      	b.n	8007dc6 <pvPortMalloc+0x162>
	return pvReturn;
 8007dc8:	69fb      	ldr	r3, [r7, #28]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3728      	adds	r7, #40	; 0x28
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	2000402c 	.word	0x2000402c
 8007dd8:	20004038 	.word	0x20004038
 8007ddc:	20004030 	.word	0x20004030
 8007de0:	20004024 	.word	0x20004024
 8007de4:	20004034 	.word	0x20004034

08007de8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d046      	beq.n	8007e88 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007dfa:	2308      	movs	r3, #8
 8007dfc:	425b      	negs	r3, r3
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	4413      	add	r3, r2
 8007e02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	4b20      	ldr	r3, [pc, #128]	; (8007e90 <vPortFree+0xa8>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4013      	ands	r3, r2
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d109      	bne.n	8007e2a <vPortFree+0x42>
 8007e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1a:	f383 8811 	msr	BASEPRI, r3
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f3bf 8f4f 	dsb	sy
 8007e26:	60fb      	str	r3, [r7, #12]
 8007e28:	e7fe      	b.n	8007e28 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d009      	beq.n	8007e46 <vPortFree+0x5e>
 8007e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e36:	f383 8811 	msr	BASEPRI, r3
 8007e3a:	f3bf 8f6f 	isb	sy
 8007e3e:	f3bf 8f4f 	dsb	sy
 8007e42:	60bb      	str	r3, [r7, #8]
 8007e44:	e7fe      	b.n	8007e44 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	685a      	ldr	r2, [r3, #4]
 8007e4a:	4b11      	ldr	r3, [pc, #68]	; (8007e90 <vPortFree+0xa8>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4013      	ands	r3, r2
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d019      	beq.n	8007e88 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d115      	bne.n	8007e88 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	4b0b      	ldr	r3, [pc, #44]	; (8007e90 <vPortFree+0xa8>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	43db      	mvns	r3, r3
 8007e66:	401a      	ands	r2, r3
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e6c:	f7ff f858 	bl	8006f20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	4b07      	ldr	r3, [pc, #28]	; (8007e94 <vPortFree+0xac>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4413      	add	r3, r2
 8007e7a:	4a06      	ldr	r2, [pc, #24]	; (8007e94 <vPortFree+0xac>)
 8007e7c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e7e:	6938      	ldr	r0, [r7, #16]
 8007e80:	f000 f86c 	bl	8007f5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007e84:	f7ff f85a 	bl	8006f3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e88:	bf00      	nop
 8007e8a:	3718      	adds	r7, #24
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	20004038 	.word	0x20004038
 8007e94:	20004030 	.word	0x20004030

08007e98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e9e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007ea2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ea4:	4b27      	ldr	r3, [pc, #156]	; (8007f44 <prvHeapInit+0xac>)
 8007ea6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f003 0307 	and.w	r3, r3, #7
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00c      	beq.n	8007ecc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	3307      	adds	r3, #7
 8007eb6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f023 0307 	bic.w	r3, r3, #7
 8007ebe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	1ad3      	subs	r3, r2, r3
 8007ec6:	4a1f      	ldr	r2, [pc, #124]	; (8007f44 <prvHeapInit+0xac>)
 8007ec8:	4413      	add	r3, r2
 8007eca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ed0:	4a1d      	ldr	r2, [pc, #116]	; (8007f48 <prvHeapInit+0xb0>)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ed6:	4b1c      	ldr	r3, [pc, #112]	; (8007f48 <prvHeapInit+0xb0>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ee4:	2208      	movs	r2, #8
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	1a9b      	subs	r3, r3, r2
 8007eea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f023 0307 	bic.w	r3, r3, #7
 8007ef2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	4a15      	ldr	r2, [pc, #84]	; (8007f4c <prvHeapInit+0xb4>)
 8007ef8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007efa:	4b14      	ldr	r3, [pc, #80]	; (8007f4c <prvHeapInit+0xb4>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2200      	movs	r2, #0
 8007f00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f02:	4b12      	ldr	r3, [pc, #72]	; (8007f4c <prvHeapInit+0xb4>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2200      	movs	r2, #0
 8007f08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	1ad2      	subs	r2, r2, r3
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f18:	4b0c      	ldr	r3, [pc, #48]	; (8007f4c <prvHeapInit+0xb4>)
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	4a0a      	ldr	r2, [pc, #40]	; (8007f50 <prvHeapInit+0xb8>)
 8007f26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	4a09      	ldr	r2, [pc, #36]	; (8007f54 <prvHeapInit+0xbc>)
 8007f2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f30:	4b09      	ldr	r3, [pc, #36]	; (8007f58 <prvHeapInit+0xc0>)
 8007f32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007f36:	601a      	str	r2, [r3, #0]
}
 8007f38:	bf00      	nop
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr
 8007f44:	20000424 	.word	0x20000424
 8007f48:	20004024 	.word	0x20004024
 8007f4c:	2000402c 	.word	0x2000402c
 8007f50:	20004034 	.word	0x20004034
 8007f54:	20004030 	.word	0x20004030
 8007f58:	20004038 	.word	0x20004038

08007f5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f64:	4b28      	ldr	r3, [pc, #160]	; (8008008 <prvInsertBlockIntoFreeList+0xac>)
 8007f66:	60fb      	str	r3, [r7, #12]
 8007f68:	e002      	b.n	8007f70 <prvInsertBlockIntoFreeList+0x14>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	60fb      	str	r3, [r7, #12]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d8f7      	bhi.n	8007f6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	68ba      	ldr	r2, [r7, #8]
 8007f84:	4413      	add	r3, r2
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d108      	bne.n	8007f9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	685a      	ldr	r2, [r3, #4]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	441a      	add	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	441a      	add	r2, r3
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d118      	bne.n	8007fe4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	4b15      	ldr	r3, [pc, #84]	; (800800c <prvInsertBlockIntoFreeList+0xb0>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d00d      	beq.n	8007fda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	685a      	ldr	r2, [r3, #4]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	441a      	add	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	601a      	str	r2, [r3, #0]
 8007fd8:	e008      	b.n	8007fec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007fda:	4b0c      	ldr	r3, [pc, #48]	; (800800c <prvInsertBlockIntoFreeList+0xb0>)
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	e003      	b.n	8007fec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d002      	beq.n	8007ffa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ffa:	bf00      	nop
 8007ffc:	3714      	adds	r7, #20
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	20004024 	.word	0x20004024
 800800c:	2000402c 	.word	0x2000402c

08008010 <__cxa_pure_virtual>:
 8008010:	b508      	push	{r3, lr}
 8008012:	f000 f80d 	bl	8008030 <_ZSt9terminatev>

08008016 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8008016:	b508      	push	{r3, lr}
 8008018:	4780      	blx	r0
 800801a:	f000 f80e 	bl	800803a <abort>
	...

08008020 <_ZSt13get_terminatev>:
 8008020:	4b02      	ldr	r3, [pc, #8]	; (800802c <_ZSt13get_terminatev+0xc>)
 8008022:	6818      	ldr	r0, [r3, #0]
 8008024:	f3bf 8f5b 	dmb	ish
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	20000010 	.word	0x20000010

08008030 <_ZSt9terminatev>:
 8008030:	b508      	push	{r3, lr}
 8008032:	f7ff fff5 	bl	8008020 <_ZSt13get_terminatev>
 8008036:	f7ff ffee 	bl	8008016 <_ZN10__cxxabiv111__terminateEPFvvE>

0800803a <abort>:
 800803a:	b508      	push	{r3, lr}
 800803c:	2006      	movs	r0, #6
 800803e:	f000 f871 	bl	8008124 <raise>
 8008042:	2001      	movs	r0, #1
 8008044:	f7fa fc80 	bl	8002948 <_exit>

08008048 <__errno>:
 8008048:	4b01      	ldr	r3, [pc, #4]	; (8008050 <__errno+0x8>)
 800804a:	6818      	ldr	r0, [r3, #0]
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	20000014 	.word	0x20000014

08008054 <__libc_init_array>:
 8008054:	b570      	push	{r4, r5, r6, lr}
 8008056:	4e0d      	ldr	r6, [pc, #52]	; (800808c <__libc_init_array+0x38>)
 8008058:	4c0d      	ldr	r4, [pc, #52]	; (8008090 <__libc_init_array+0x3c>)
 800805a:	1ba4      	subs	r4, r4, r6
 800805c:	10a4      	asrs	r4, r4, #2
 800805e:	2500      	movs	r5, #0
 8008060:	42a5      	cmp	r5, r4
 8008062:	d109      	bne.n	8008078 <__libc_init_array+0x24>
 8008064:	4e0b      	ldr	r6, [pc, #44]	; (8008094 <__libc_init_array+0x40>)
 8008066:	4c0c      	ldr	r4, [pc, #48]	; (8008098 <__libc_init_array+0x44>)
 8008068:	f000 f960 	bl	800832c <_init>
 800806c:	1ba4      	subs	r4, r4, r6
 800806e:	10a4      	asrs	r4, r4, #2
 8008070:	2500      	movs	r5, #0
 8008072:	42a5      	cmp	r5, r4
 8008074:	d105      	bne.n	8008082 <__libc_init_array+0x2e>
 8008076:	bd70      	pop	{r4, r5, r6, pc}
 8008078:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800807c:	4798      	blx	r3
 800807e:	3501      	adds	r5, #1
 8008080:	e7ee      	b.n	8008060 <__libc_init_array+0xc>
 8008082:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008086:	4798      	blx	r3
 8008088:	3501      	adds	r5, #1
 800808a:	e7f2      	b.n	8008072 <__libc_init_array+0x1e>
 800808c:	0800868c 	.word	0x0800868c
 8008090:	0800868c 	.word	0x0800868c
 8008094:	0800868c 	.word	0x0800868c
 8008098:	08008690 	.word	0x08008690

0800809c <memcpy>:
 800809c:	b510      	push	{r4, lr}
 800809e:	1e43      	subs	r3, r0, #1
 80080a0:	440a      	add	r2, r1
 80080a2:	4291      	cmp	r1, r2
 80080a4:	d100      	bne.n	80080a8 <memcpy+0xc>
 80080a6:	bd10      	pop	{r4, pc}
 80080a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080b0:	e7f7      	b.n	80080a2 <memcpy+0x6>

080080b2 <memset>:
 80080b2:	4402      	add	r2, r0
 80080b4:	4603      	mov	r3, r0
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d100      	bne.n	80080bc <memset+0xa>
 80080ba:	4770      	bx	lr
 80080bc:	f803 1b01 	strb.w	r1, [r3], #1
 80080c0:	e7f9      	b.n	80080b6 <memset+0x4>
	...

080080c4 <realloc>:
 80080c4:	4b02      	ldr	r3, [pc, #8]	; (80080d0 <realloc+0xc>)
 80080c6:	460a      	mov	r2, r1
 80080c8:	4601      	mov	r1, r0
 80080ca:	6818      	ldr	r0, [r3, #0]
 80080cc:	f000 b8a0 	b.w	8008210 <_realloc_r>
 80080d0:	20000014 	.word	0x20000014

080080d4 <_raise_r>:
 80080d4:	291f      	cmp	r1, #31
 80080d6:	b538      	push	{r3, r4, r5, lr}
 80080d8:	4604      	mov	r4, r0
 80080da:	460d      	mov	r5, r1
 80080dc:	d904      	bls.n	80080e8 <_raise_r+0x14>
 80080de:	2316      	movs	r3, #22
 80080e0:	6003      	str	r3, [r0, #0]
 80080e2:	f04f 30ff 	mov.w	r0, #4294967295
 80080e6:	bd38      	pop	{r3, r4, r5, pc}
 80080e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80080ea:	b112      	cbz	r2, 80080f2 <_raise_r+0x1e>
 80080ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080f0:	b94b      	cbnz	r3, 8008106 <_raise_r+0x32>
 80080f2:	4620      	mov	r0, r4
 80080f4:	f000 f830 	bl	8008158 <_getpid_r>
 80080f8:	462a      	mov	r2, r5
 80080fa:	4601      	mov	r1, r0
 80080fc:	4620      	mov	r0, r4
 80080fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008102:	f000 b817 	b.w	8008134 <_kill_r>
 8008106:	2b01      	cmp	r3, #1
 8008108:	d00a      	beq.n	8008120 <_raise_r+0x4c>
 800810a:	1c59      	adds	r1, r3, #1
 800810c:	d103      	bne.n	8008116 <_raise_r+0x42>
 800810e:	2316      	movs	r3, #22
 8008110:	6003      	str	r3, [r0, #0]
 8008112:	2001      	movs	r0, #1
 8008114:	e7e7      	b.n	80080e6 <_raise_r+0x12>
 8008116:	2400      	movs	r4, #0
 8008118:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800811c:	4628      	mov	r0, r5
 800811e:	4798      	blx	r3
 8008120:	2000      	movs	r0, #0
 8008122:	e7e0      	b.n	80080e6 <_raise_r+0x12>

08008124 <raise>:
 8008124:	4b02      	ldr	r3, [pc, #8]	; (8008130 <raise+0xc>)
 8008126:	4601      	mov	r1, r0
 8008128:	6818      	ldr	r0, [r3, #0]
 800812a:	f7ff bfd3 	b.w	80080d4 <_raise_r>
 800812e:	bf00      	nop
 8008130:	20000014 	.word	0x20000014

08008134 <_kill_r>:
 8008134:	b538      	push	{r3, r4, r5, lr}
 8008136:	4c07      	ldr	r4, [pc, #28]	; (8008154 <_kill_r+0x20>)
 8008138:	2300      	movs	r3, #0
 800813a:	4605      	mov	r5, r0
 800813c:	4608      	mov	r0, r1
 800813e:	4611      	mov	r1, r2
 8008140:	6023      	str	r3, [r4, #0]
 8008142:	f7fa fbf1 	bl	8002928 <_kill>
 8008146:	1c43      	adds	r3, r0, #1
 8008148:	d102      	bne.n	8008150 <_kill_r+0x1c>
 800814a:	6823      	ldr	r3, [r4, #0]
 800814c:	b103      	cbz	r3, 8008150 <_kill_r+0x1c>
 800814e:	602b      	str	r3, [r5, #0]
 8008150:	bd38      	pop	{r3, r4, r5, pc}
 8008152:	bf00      	nop
 8008154:	20004230 	.word	0x20004230

08008158 <_getpid_r>:
 8008158:	f7fa bbde 	b.w	8002918 <_getpid>

0800815c <_malloc_r>:
 800815c:	b570      	push	{r4, r5, r6, lr}
 800815e:	1ccd      	adds	r5, r1, #3
 8008160:	f025 0503 	bic.w	r5, r5, #3
 8008164:	3508      	adds	r5, #8
 8008166:	2d0c      	cmp	r5, #12
 8008168:	bf38      	it	cc
 800816a:	250c      	movcc	r5, #12
 800816c:	2d00      	cmp	r5, #0
 800816e:	4606      	mov	r6, r0
 8008170:	db01      	blt.n	8008176 <_malloc_r+0x1a>
 8008172:	42a9      	cmp	r1, r5
 8008174:	d903      	bls.n	800817e <_malloc_r+0x22>
 8008176:	230c      	movs	r3, #12
 8008178:	6033      	str	r3, [r6, #0]
 800817a:	2000      	movs	r0, #0
 800817c:	bd70      	pop	{r4, r5, r6, pc}
 800817e:	f000 f87d 	bl	800827c <__malloc_lock>
 8008182:	4a21      	ldr	r2, [pc, #132]	; (8008208 <_malloc_r+0xac>)
 8008184:	6814      	ldr	r4, [r2, #0]
 8008186:	4621      	mov	r1, r4
 8008188:	b991      	cbnz	r1, 80081b0 <_malloc_r+0x54>
 800818a:	4c20      	ldr	r4, [pc, #128]	; (800820c <_malloc_r+0xb0>)
 800818c:	6823      	ldr	r3, [r4, #0]
 800818e:	b91b      	cbnz	r3, 8008198 <_malloc_r+0x3c>
 8008190:	4630      	mov	r0, r6
 8008192:	f000 f863 	bl	800825c <_sbrk_r>
 8008196:	6020      	str	r0, [r4, #0]
 8008198:	4629      	mov	r1, r5
 800819a:	4630      	mov	r0, r6
 800819c:	f000 f85e 	bl	800825c <_sbrk_r>
 80081a0:	1c43      	adds	r3, r0, #1
 80081a2:	d124      	bne.n	80081ee <_malloc_r+0x92>
 80081a4:	230c      	movs	r3, #12
 80081a6:	6033      	str	r3, [r6, #0]
 80081a8:	4630      	mov	r0, r6
 80081aa:	f000 f868 	bl	800827e <__malloc_unlock>
 80081ae:	e7e4      	b.n	800817a <_malloc_r+0x1e>
 80081b0:	680b      	ldr	r3, [r1, #0]
 80081b2:	1b5b      	subs	r3, r3, r5
 80081b4:	d418      	bmi.n	80081e8 <_malloc_r+0x8c>
 80081b6:	2b0b      	cmp	r3, #11
 80081b8:	d90f      	bls.n	80081da <_malloc_r+0x7e>
 80081ba:	600b      	str	r3, [r1, #0]
 80081bc:	50cd      	str	r5, [r1, r3]
 80081be:	18cc      	adds	r4, r1, r3
 80081c0:	4630      	mov	r0, r6
 80081c2:	f000 f85c 	bl	800827e <__malloc_unlock>
 80081c6:	f104 000b 	add.w	r0, r4, #11
 80081ca:	1d23      	adds	r3, r4, #4
 80081cc:	f020 0007 	bic.w	r0, r0, #7
 80081d0:	1ac3      	subs	r3, r0, r3
 80081d2:	d0d3      	beq.n	800817c <_malloc_r+0x20>
 80081d4:	425a      	negs	r2, r3
 80081d6:	50e2      	str	r2, [r4, r3]
 80081d8:	e7d0      	b.n	800817c <_malloc_r+0x20>
 80081da:	428c      	cmp	r4, r1
 80081dc:	684b      	ldr	r3, [r1, #4]
 80081de:	bf16      	itet	ne
 80081e0:	6063      	strne	r3, [r4, #4]
 80081e2:	6013      	streq	r3, [r2, #0]
 80081e4:	460c      	movne	r4, r1
 80081e6:	e7eb      	b.n	80081c0 <_malloc_r+0x64>
 80081e8:	460c      	mov	r4, r1
 80081ea:	6849      	ldr	r1, [r1, #4]
 80081ec:	e7cc      	b.n	8008188 <_malloc_r+0x2c>
 80081ee:	1cc4      	adds	r4, r0, #3
 80081f0:	f024 0403 	bic.w	r4, r4, #3
 80081f4:	42a0      	cmp	r0, r4
 80081f6:	d005      	beq.n	8008204 <_malloc_r+0xa8>
 80081f8:	1a21      	subs	r1, r4, r0
 80081fa:	4630      	mov	r0, r6
 80081fc:	f000 f82e 	bl	800825c <_sbrk_r>
 8008200:	3001      	adds	r0, #1
 8008202:	d0cf      	beq.n	80081a4 <_malloc_r+0x48>
 8008204:	6025      	str	r5, [r4, #0]
 8008206:	e7db      	b.n	80081c0 <_malloc_r+0x64>
 8008208:	2000403c 	.word	0x2000403c
 800820c:	20004040 	.word	0x20004040

08008210 <_realloc_r>:
 8008210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008212:	4607      	mov	r7, r0
 8008214:	4614      	mov	r4, r2
 8008216:	460e      	mov	r6, r1
 8008218:	b921      	cbnz	r1, 8008224 <_realloc_r+0x14>
 800821a:	4611      	mov	r1, r2
 800821c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008220:	f7ff bf9c 	b.w	800815c <_malloc_r>
 8008224:	b922      	cbnz	r2, 8008230 <_realloc_r+0x20>
 8008226:	f000 f82b 	bl	8008280 <_free_r>
 800822a:	4625      	mov	r5, r4
 800822c:	4628      	mov	r0, r5
 800822e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008230:	f000 f874 	bl	800831c <_malloc_usable_size_r>
 8008234:	42a0      	cmp	r0, r4
 8008236:	d20f      	bcs.n	8008258 <_realloc_r+0x48>
 8008238:	4621      	mov	r1, r4
 800823a:	4638      	mov	r0, r7
 800823c:	f7ff ff8e 	bl	800815c <_malloc_r>
 8008240:	4605      	mov	r5, r0
 8008242:	2800      	cmp	r0, #0
 8008244:	d0f2      	beq.n	800822c <_realloc_r+0x1c>
 8008246:	4631      	mov	r1, r6
 8008248:	4622      	mov	r2, r4
 800824a:	f7ff ff27 	bl	800809c <memcpy>
 800824e:	4631      	mov	r1, r6
 8008250:	4638      	mov	r0, r7
 8008252:	f000 f815 	bl	8008280 <_free_r>
 8008256:	e7e9      	b.n	800822c <_realloc_r+0x1c>
 8008258:	4635      	mov	r5, r6
 800825a:	e7e7      	b.n	800822c <_realloc_r+0x1c>

0800825c <_sbrk_r>:
 800825c:	b538      	push	{r3, r4, r5, lr}
 800825e:	4c06      	ldr	r4, [pc, #24]	; (8008278 <_sbrk_r+0x1c>)
 8008260:	2300      	movs	r3, #0
 8008262:	4605      	mov	r5, r0
 8008264:	4608      	mov	r0, r1
 8008266:	6023      	str	r3, [r4, #0]
 8008268:	f7fa fb78 	bl	800295c <_sbrk>
 800826c:	1c43      	adds	r3, r0, #1
 800826e:	d102      	bne.n	8008276 <_sbrk_r+0x1a>
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	b103      	cbz	r3, 8008276 <_sbrk_r+0x1a>
 8008274:	602b      	str	r3, [r5, #0]
 8008276:	bd38      	pop	{r3, r4, r5, pc}
 8008278:	20004230 	.word	0x20004230

0800827c <__malloc_lock>:
 800827c:	4770      	bx	lr

0800827e <__malloc_unlock>:
 800827e:	4770      	bx	lr

08008280 <_free_r>:
 8008280:	b538      	push	{r3, r4, r5, lr}
 8008282:	4605      	mov	r5, r0
 8008284:	2900      	cmp	r1, #0
 8008286:	d045      	beq.n	8008314 <_free_r+0x94>
 8008288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800828c:	1f0c      	subs	r4, r1, #4
 800828e:	2b00      	cmp	r3, #0
 8008290:	bfb8      	it	lt
 8008292:	18e4      	addlt	r4, r4, r3
 8008294:	f7ff fff2 	bl	800827c <__malloc_lock>
 8008298:	4a1f      	ldr	r2, [pc, #124]	; (8008318 <_free_r+0x98>)
 800829a:	6813      	ldr	r3, [r2, #0]
 800829c:	4610      	mov	r0, r2
 800829e:	b933      	cbnz	r3, 80082ae <_free_r+0x2e>
 80082a0:	6063      	str	r3, [r4, #4]
 80082a2:	6014      	str	r4, [r2, #0]
 80082a4:	4628      	mov	r0, r5
 80082a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082aa:	f7ff bfe8 	b.w	800827e <__malloc_unlock>
 80082ae:	42a3      	cmp	r3, r4
 80082b0:	d90c      	bls.n	80082cc <_free_r+0x4c>
 80082b2:	6821      	ldr	r1, [r4, #0]
 80082b4:	1862      	adds	r2, r4, r1
 80082b6:	4293      	cmp	r3, r2
 80082b8:	bf04      	itt	eq
 80082ba:	681a      	ldreq	r2, [r3, #0]
 80082bc:	685b      	ldreq	r3, [r3, #4]
 80082be:	6063      	str	r3, [r4, #4]
 80082c0:	bf04      	itt	eq
 80082c2:	1852      	addeq	r2, r2, r1
 80082c4:	6022      	streq	r2, [r4, #0]
 80082c6:	6004      	str	r4, [r0, #0]
 80082c8:	e7ec      	b.n	80082a4 <_free_r+0x24>
 80082ca:	4613      	mov	r3, r2
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	b10a      	cbz	r2, 80082d4 <_free_r+0x54>
 80082d0:	42a2      	cmp	r2, r4
 80082d2:	d9fa      	bls.n	80082ca <_free_r+0x4a>
 80082d4:	6819      	ldr	r1, [r3, #0]
 80082d6:	1858      	adds	r0, r3, r1
 80082d8:	42a0      	cmp	r0, r4
 80082da:	d10b      	bne.n	80082f4 <_free_r+0x74>
 80082dc:	6820      	ldr	r0, [r4, #0]
 80082de:	4401      	add	r1, r0
 80082e0:	1858      	adds	r0, r3, r1
 80082e2:	4282      	cmp	r2, r0
 80082e4:	6019      	str	r1, [r3, #0]
 80082e6:	d1dd      	bne.n	80082a4 <_free_r+0x24>
 80082e8:	6810      	ldr	r0, [r2, #0]
 80082ea:	6852      	ldr	r2, [r2, #4]
 80082ec:	605a      	str	r2, [r3, #4]
 80082ee:	4401      	add	r1, r0
 80082f0:	6019      	str	r1, [r3, #0]
 80082f2:	e7d7      	b.n	80082a4 <_free_r+0x24>
 80082f4:	d902      	bls.n	80082fc <_free_r+0x7c>
 80082f6:	230c      	movs	r3, #12
 80082f8:	602b      	str	r3, [r5, #0]
 80082fa:	e7d3      	b.n	80082a4 <_free_r+0x24>
 80082fc:	6820      	ldr	r0, [r4, #0]
 80082fe:	1821      	adds	r1, r4, r0
 8008300:	428a      	cmp	r2, r1
 8008302:	bf04      	itt	eq
 8008304:	6811      	ldreq	r1, [r2, #0]
 8008306:	6852      	ldreq	r2, [r2, #4]
 8008308:	6062      	str	r2, [r4, #4]
 800830a:	bf04      	itt	eq
 800830c:	1809      	addeq	r1, r1, r0
 800830e:	6021      	streq	r1, [r4, #0]
 8008310:	605c      	str	r4, [r3, #4]
 8008312:	e7c7      	b.n	80082a4 <_free_r+0x24>
 8008314:	bd38      	pop	{r3, r4, r5, pc}
 8008316:	bf00      	nop
 8008318:	2000403c 	.word	0x2000403c

0800831c <_malloc_usable_size_r>:
 800831c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008320:	1f18      	subs	r0, r3, #4
 8008322:	2b00      	cmp	r3, #0
 8008324:	bfbc      	itt	lt
 8008326:	580b      	ldrlt	r3, [r1, r0]
 8008328:	18c0      	addlt	r0, r0, r3
 800832a:	4770      	bx	lr

0800832c <_init>:
 800832c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832e:	bf00      	nop
 8008330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008332:	bc08      	pop	{r3}
 8008334:	469e      	mov	lr, r3
 8008336:	4770      	bx	lr

08008338 <_fini>:
 8008338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833a:	bf00      	nop
 800833c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800833e:	bc08      	pop	{r3}
 8008340:	469e      	mov	lr, r3
 8008342:	4770      	bx	lr
