
3ARA-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008138  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080082c8  080082c8  000182c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083f0  080083f0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080083f0  080083f0  000183f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083f8  080083f8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083f8  080083f8  000183f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083fc  080083fc  000183fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004284  20000010  08008410  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004294  08008410  00024294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029a65  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000515d  00000000  00000000  00049aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  0004ec08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001540  00000000  00000000  00050318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d59  00000000  00000000  00051858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ef70  00000000  00000000  000795b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9788  00000000  00000000  00098521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00171ca9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ef0  00000000  00000000  00171cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080082b0 	.word	0x080082b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080082b0 	.word	0x080082b0

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b96e 	b.w	8000d00 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	4604      	mov	r4, r0
 8000a44:	468c      	mov	ip, r1
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f040 8083 	bne.w	8000b52 <__udivmoddi4+0x116>
 8000a4c:	428a      	cmp	r2, r1
 8000a4e:	4617      	mov	r7, r2
 8000a50:	d947      	bls.n	8000ae2 <__udivmoddi4+0xa6>
 8000a52:	fab2 f282 	clz	r2, r2
 8000a56:	b142      	cbz	r2, 8000a6a <__udivmoddi4+0x2e>
 8000a58:	f1c2 0020 	rsb	r0, r2, #32
 8000a5c:	fa24 f000 	lsr.w	r0, r4, r0
 8000a60:	4091      	lsls	r1, r2
 8000a62:	4097      	lsls	r7, r2
 8000a64:	ea40 0c01 	orr.w	ip, r0, r1
 8000a68:	4094      	lsls	r4, r2
 8000a6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a6e:	0c23      	lsrs	r3, r4, #16
 8000a70:	fbbc f6f8 	udiv	r6, ip, r8
 8000a74:	fa1f fe87 	uxth.w	lr, r7
 8000a78:	fb08 c116 	mls	r1, r8, r6, ip
 8000a7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a80:	fb06 f10e 	mul.w	r1, r6, lr
 8000a84:	4299      	cmp	r1, r3
 8000a86:	d909      	bls.n	8000a9c <__udivmoddi4+0x60>
 8000a88:	18fb      	adds	r3, r7, r3
 8000a8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a8e:	f080 8119 	bcs.w	8000cc4 <__udivmoddi4+0x288>
 8000a92:	4299      	cmp	r1, r3
 8000a94:	f240 8116 	bls.w	8000cc4 <__udivmoddi4+0x288>
 8000a98:	3e02      	subs	r6, #2
 8000a9a:	443b      	add	r3, r7
 8000a9c:	1a5b      	subs	r3, r3, r1
 8000a9e:	b2a4      	uxth	r4, r4
 8000aa0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa4:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ab0:	45a6      	cmp	lr, r4
 8000ab2:	d909      	bls.n	8000ac8 <__udivmoddi4+0x8c>
 8000ab4:	193c      	adds	r4, r7, r4
 8000ab6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aba:	f080 8105 	bcs.w	8000cc8 <__udivmoddi4+0x28c>
 8000abe:	45a6      	cmp	lr, r4
 8000ac0:	f240 8102 	bls.w	8000cc8 <__udivmoddi4+0x28c>
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	443c      	add	r4, r7
 8000ac8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000acc:	eba4 040e 	sub.w	r4, r4, lr
 8000ad0:	2600      	movs	r6, #0
 8000ad2:	b11d      	cbz	r5, 8000adc <__udivmoddi4+0xa0>
 8000ad4:	40d4      	lsrs	r4, r2
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e9c5 4300 	strd	r4, r3, [r5]
 8000adc:	4631      	mov	r1, r6
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	b902      	cbnz	r2, 8000ae6 <__udivmoddi4+0xaa>
 8000ae4:	deff      	udf	#255	; 0xff
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	2a00      	cmp	r2, #0
 8000aec:	d150      	bne.n	8000b90 <__udivmoddi4+0x154>
 8000aee:	1bcb      	subs	r3, r1, r7
 8000af0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af4:	fa1f f887 	uxth.w	r8, r7
 8000af8:	2601      	movs	r6, #1
 8000afa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000afe:	0c21      	lsrs	r1, r4, #16
 8000b00:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b08:	fb08 f30c 	mul.w	r3, r8, ip
 8000b0c:	428b      	cmp	r3, r1
 8000b0e:	d907      	bls.n	8000b20 <__udivmoddi4+0xe4>
 8000b10:	1879      	adds	r1, r7, r1
 8000b12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0xe2>
 8000b18:	428b      	cmp	r3, r1
 8000b1a:	f200 80e9 	bhi.w	8000cf0 <__udivmoddi4+0x2b4>
 8000b1e:	4684      	mov	ip, r0
 8000b20:	1ac9      	subs	r1, r1, r3
 8000b22:	b2a3      	uxth	r3, r4
 8000b24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b28:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b2c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b30:	fb08 f800 	mul.w	r8, r8, r0
 8000b34:	45a0      	cmp	r8, r4
 8000b36:	d907      	bls.n	8000b48 <__udivmoddi4+0x10c>
 8000b38:	193c      	adds	r4, r7, r4
 8000b3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x10a>
 8000b40:	45a0      	cmp	r8, r4
 8000b42:	f200 80d9 	bhi.w	8000cf8 <__udivmoddi4+0x2bc>
 8000b46:	4618      	mov	r0, r3
 8000b48:	eba4 0408 	sub.w	r4, r4, r8
 8000b4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b50:	e7bf      	b.n	8000ad2 <__udivmoddi4+0x96>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d909      	bls.n	8000b6a <__udivmoddi4+0x12e>
 8000b56:	2d00      	cmp	r5, #0
 8000b58:	f000 80b1 	beq.w	8000cbe <__udivmoddi4+0x282>
 8000b5c:	2600      	movs	r6, #0
 8000b5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000b62:	4630      	mov	r0, r6
 8000b64:	4631      	mov	r1, r6
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	fab3 f683 	clz	r6, r3
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	d14a      	bne.n	8000c08 <__udivmoddi4+0x1cc>
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d302      	bcc.n	8000b7c <__udivmoddi4+0x140>
 8000b76:	4282      	cmp	r2, r0
 8000b78:	f200 80b8 	bhi.w	8000cec <__udivmoddi4+0x2b0>
 8000b7c:	1a84      	subs	r4, r0, r2
 8000b7e:	eb61 0103 	sbc.w	r1, r1, r3
 8000b82:	2001      	movs	r0, #1
 8000b84:	468c      	mov	ip, r1
 8000b86:	2d00      	cmp	r5, #0
 8000b88:	d0a8      	beq.n	8000adc <__udivmoddi4+0xa0>
 8000b8a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b8e:	e7a5      	b.n	8000adc <__udivmoddi4+0xa0>
 8000b90:	f1c2 0320 	rsb	r3, r2, #32
 8000b94:	fa20 f603 	lsr.w	r6, r0, r3
 8000b98:	4097      	lsls	r7, r2
 8000b9a:	fa01 f002 	lsl.w	r0, r1, r2
 8000b9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba2:	40d9      	lsrs	r1, r3
 8000ba4:	4330      	orrs	r0, r6
 8000ba6:	0c03      	lsrs	r3, r0, #16
 8000ba8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bac:	fa1f f887 	uxth.w	r8, r7
 8000bb0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb8:	fb06 f108 	mul.w	r1, r6, r8
 8000bbc:	4299      	cmp	r1, r3
 8000bbe:	fa04 f402 	lsl.w	r4, r4, r2
 8000bc2:	d909      	bls.n	8000bd8 <__udivmoddi4+0x19c>
 8000bc4:	18fb      	adds	r3, r7, r3
 8000bc6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bca:	f080 808d 	bcs.w	8000ce8 <__udivmoddi4+0x2ac>
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	f240 808a 	bls.w	8000ce8 <__udivmoddi4+0x2ac>
 8000bd4:	3e02      	subs	r6, #2
 8000bd6:	443b      	add	r3, r7
 8000bd8:	1a5b      	subs	r3, r3, r1
 8000bda:	b281      	uxth	r1, r0
 8000bdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000be0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000be4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be8:	fb00 f308 	mul.w	r3, r0, r8
 8000bec:	428b      	cmp	r3, r1
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x1c4>
 8000bf0:	1879      	adds	r1, r7, r1
 8000bf2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bf6:	d273      	bcs.n	8000ce0 <__udivmoddi4+0x2a4>
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	d971      	bls.n	8000ce0 <__udivmoddi4+0x2a4>
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	4439      	add	r1, r7
 8000c00:	1acb      	subs	r3, r1, r3
 8000c02:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c06:	e778      	b.n	8000afa <__udivmoddi4+0xbe>
 8000c08:	f1c6 0c20 	rsb	ip, r6, #32
 8000c0c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c10:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c14:	431c      	orrs	r4, r3
 8000c16:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c1e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c22:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c26:	431f      	orrs	r7, r3
 8000c28:	0c3b      	lsrs	r3, r7, #16
 8000c2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c2e:	fa1f f884 	uxth.w	r8, r4
 8000c32:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c36:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c3a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c3e:	458a      	cmp	sl, r1
 8000c40:	fa02 f206 	lsl.w	r2, r2, r6
 8000c44:	fa00 f306 	lsl.w	r3, r0, r6
 8000c48:	d908      	bls.n	8000c5c <__udivmoddi4+0x220>
 8000c4a:	1861      	adds	r1, r4, r1
 8000c4c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c50:	d248      	bcs.n	8000ce4 <__udivmoddi4+0x2a8>
 8000c52:	458a      	cmp	sl, r1
 8000c54:	d946      	bls.n	8000ce4 <__udivmoddi4+0x2a8>
 8000c56:	f1a9 0902 	sub.w	r9, r9, #2
 8000c5a:	4421      	add	r1, r4
 8000c5c:	eba1 010a 	sub.w	r1, r1, sl
 8000c60:	b2bf      	uxth	r7, r7
 8000c62:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c66:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c6a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c6e:	fb00 f808 	mul.w	r8, r0, r8
 8000c72:	45b8      	cmp	r8, r7
 8000c74:	d907      	bls.n	8000c86 <__udivmoddi4+0x24a>
 8000c76:	19e7      	adds	r7, r4, r7
 8000c78:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7c:	d22e      	bcs.n	8000cdc <__udivmoddi4+0x2a0>
 8000c7e:	45b8      	cmp	r8, r7
 8000c80:	d92c      	bls.n	8000cdc <__udivmoddi4+0x2a0>
 8000c82:	3802      	subs	r0, #2
 8000c84:	4427      	add	r7, r4
 8000c86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c8a:	eba7 0708 	sub.w	r7, r7, r8
 8000c8e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c92:	454f      	cmp	r7, r9
 8000c94:	46c6      	mov	lr, r8
 8000c96:	4649      	mov	r1, r9
 8000c98:	d31a      	bcc.n	8000cd0 <__udivmoddi4+0x294>
 8000c9a:	d017      	beq.n	8000ccc <__udivmoddi4+0x290>
 8000c9c:	b15d      	cbz	r5, 8000cb6 <__udivmoddi4+0x27a>
 8000c9e:	ebb3 020e 	subs.w	r2, r3, lr
 8000ca2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ca6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000caa:	40f2      	lsrs	r2, r6
 8000cac:	ea4c 0202 	orr.w	r2, ip, r2
 8000cb0:	40f7      	lsrs	r7, r6
 8000cb2:	e9c5 2700 	strd	r2, r7, [r5]
 8000cb6:	2600      	movs	r6, #0
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	462e      	mov	r6, r5
 8000cc0:	4628      	mov	r0, r5
 8000cc2:	e70b      	b.n	8000adc <__udivmoddi4+0xa0>
 8000cc4:	4606      	mov	r6, r0
 8000cc6:	e6e9      	b.n	8000a9c <__udivmoddi4+0x60>
 8000cc8:	4618      	mov	r0, r3
 8000cca:	e6fd      	b.n	8000ac8 <__udivmoddi4+0x8c>
 8000ccc:	4543      	cmp	r3, r8
 8000cce:	d2e5      	bcs.n	8000c9c <__udivmoddi4+0x260>
 8000cd0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cd4:	eb69 0104 	sbc.w	r1, r9, r4
 8000cd8:	3801      	subs	r0, #1
 8000cda:	e7df      	b.n	8000c9c <__udivmoddi4+0x260>
 8000cdc:	4608      	mov	r0, r1
 8000cde:	e7d2      	b.n	8000c86 <__udivmoddi4+0x24a>
 8000ce0:	4660      	mov	r0, ip
 8000ce2:	e78d      	b.n	8000c00 <__udivmoddi4+0x1c4>
 8000ce4:	4681      	mov	r9, r0
 8000ce6:	e7b9      	b.n	8000c5c <__udivmoddi4+0x220>
 8000ce8:	4666      	mov	r6, ip
 8000cea:	e775      	b.n	8000bd8 <__udivmoddi4+0x19c>
 8000cec:	4630      	mov	r0, r6
 8000cee:	e74a      	b.n	8000b86 <__udivmoddi4+0x14a>
 8000cf0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cf4:	4439      	add	r1, r7
 8000cf6:	e713      	b.n	8000b20 <__udivmoddi4+0xe4>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	443c      	add	r4, r7
 8000cfc:	e724      	b.n	8000b48 <__udivmoddi4+0x10c>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <robotInfoInit>:
 *      Author: Ignacio
 */

#include "3ARAInfo.h"

void robotInfoInit(RobotInfoHandler *info_handler, osMutexId *mutex){
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
	info_handler->mutexHandler = mutex;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	683a      	ldr	r2, [r7, #0]
 8000d12:	611a      	str	r2, [r3, #16]
	info_handler->angle_1 = 0;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f04f 0200 	mov.w	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
	info_handler->angle_2 = 0;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f04f 0200 	mov.w	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
	info_handler->angle_3 = 0;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f04f 0200 	mov.w	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
	info_handler->ticks = 0;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f04f 0200 	mov.w	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <setAngle1>:

void setAngle1(RobotInfoHandler *info_handler, float angle){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	ed87 0a00 	vstr	s0, [r7]
	osMutexWait(*(info_handler->mutexHandler), osWaitForever);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	691b      	ldr	r3, [r3, #16]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f04f 31ff 	mov.w	r1, #4294967295
 8000d56:	4618      	mov	r0, r3
 8000d58:	f004 ff52 	bl	8005c00 <osMutexWait>
	info_handler->angle_1 = angle;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	683a      	ldr	r2, [r7, #0]
 8000d60:	601a      	str	r2, [r3, #0]
	osMutexRelease(*(info_handler->mutexHandler));
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	691b      	ldr	r3, [r3, #16]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f004 ff97 	bl	8005c9c <osMutexRelease>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <setAngle2>:

void setAngle2(RobotInfoHandler *info_handler, float angle){
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	ed87 0a00 	vstr	s0, [r7]
	osMutexWait(*(info_handler->mutexHandler), osWaitForever);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	691b      	ldr	r3, [r3, #16]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f004 ff37 	bl	8005c00 <osMutexWait>
	info_handler->angle_2 = angle;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	683a      	ldr	r2, [r7, #0]
 8000d96:	605a      	str	r2, [r3, #4]
	osMutexRelease(*(info_handler->mutexHandler));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	691b      	ldr	r3, [r3, #16]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f004 ff7c 	bl	8005c9c <osMutexRelease>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <setAngle3>:

void setAngle3(RobotInfoHandler *info_handler, float angle){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	ed87 0a00 	vstr	s0, [r7]
	osMutexWait(*(info_handler->mutexHandler), osWaitForever);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	691b      	ldr	r3, [r3, #16]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f004 ff1c 	bl	8005c00 <osMutexWait>
	info_handler->angle_3 = angle;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	609a      	str	r2, [r3, #8]
	osMutexRelease(*(info_handler->mutexHandler));
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	691b      	ldr	r3, [r3, #16]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f004 ff61 	bl	8005c9c <osMutexRelease>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <_ZN7EncoderC1EP17TIM_HandleTypeDeff>:
#include "Encoder.hpp"

float ticks_1;
//uint32_t angle_2_ticks;

Encoder::Encoder(TIM_HandleTypeDef* encoder_timer, float count_per_turn){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	ed87 0a01 	vstr	s0, [r7, #4]
	timer = encoder_timer;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	68ba      	ldr	r2, [r7, #8]
 8000df6:	601a      	str	r2, [r3, #0]
	encoder_resolution = 360.0f / count_per_turn;
 8000df8:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000e20 <_ZN7EncoderC1EP17TIM_HandleTypeDeff+0x3c>
 8000dfc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	edc3 7a03 	vstr	s15, [r3, #12]
	HAL_TIM_Encoder_Start(timer, TIM_CHANNEL_ALL);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	213c      	movs	r1, #60	; 0x3c
 8000e10:	4618      	mov	r0, r3
 8000e12:	f003 fa61 	bl	80042d8 <HAL_TIM_Encoder_Start>
}
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	43b40000 	.word	0x43b40000
 8000e24:	00000000 	.word	0x00000000

08000e28 <_ZN7Encoder8getAngleEv>:

float Encoder::getAngle(){
 8000e28:	b5b0      	push	{r4, r5, r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	ticks_1 = (float) __HAL_TIM_GetCounter(timer);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e38:	ee07 3a90 	vmov	s15, r3
 8000e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e40:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <_ZN7Encoder8getAngleEv+0x80>)
 8000e42:	edc3 7a00 	vstr	s15, [r3]
	angle = (ticks_1 - 32767.0) * encoder_resolution;
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <_ZN7Encoder8getAngleEv+0x80>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fb24 	bl	8000498 <__aeabi_f2d>
 8000e50:	a313      	add	r3, pc, #76	; (adr r3, 8000ea0 <_ZN7Encoder8getAngleEv+0x78>)
 8000e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e56:	f7ff f9bf 	bl	80001d8 <__aeabi_dsub>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	4614      	mov	r4, r2
 8000e60:	461d      	mov	r5, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fb16 	bl	8000498 <__aeabi_f2d>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	460b      	mov	r3, r1
 8000e70:	4620      	mov	r0, r4
 8000e72:	4629      	mov	r1, r5
 8000e74:	f7ff fb68 	bl	8000548 <__aeabi_dmul>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f7ff fd74 	bl	800096c <__aeabi_d2f>
 8000e84:	4602      	mov	r2, r0
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	605a      	str	r2, [r3, #4]
	//angle_2_ticks = __HAL_TIM_GetCounter(timer);
	return angle;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	ee07 3a90 	vmov	s15, r3
}
 8000e92:	eeb0 0a67 	vmov.f32	s0, s15
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e9c:	f3af 8000 	nop.w
 8000ea0:	00000000 	.word	0x00000000
 8000ea4:	40dfffc0 	.word	0x40dfffc0
 8000ea8:	2000002c 	.word	0x2000002c

08000eac <_ZN7Encoder9getPulsesEv>:

float Encoder::getPulses(){
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	ticks = __HAL_TIM_GET_COUNTER(timer);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ebc:	ee07 3a90 	vmov	s15, r3
 8000ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	edc3 7a02 	vstr	s15, [r3, #8]
	return ticks;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	ee07 3a90 	vmov	s15, r3
}
 8000ed2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <_ZN7Encoder17resetTicksCounterEv>:

void Encoder::resetTicksCounter(){
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCounter(timer, 32767);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000ef2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <_ZN5MotorC1ER12MotorChannelR3PinS3_>:
#include "Motor.hpp"
#include "tim.h"
#include "stm32f4xx_hal_gpio.h"
#include "cmsis_os.h"

Motor::Motor(MotorChannel &motor_timer, Pin &motor_1, Pin &motor_2){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
 8000f0c:	603b      	str	r3, [r7, #0]
	gpio_pin_1 = motor_1.pin;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	889a      	ldrh	r2, [r3, #4]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	801a      	strh	r2, [r3, #0]
	gpio_pin_2 = motor_2.pin;
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	889a      	ldrh	r2, [r3, #4]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	805a      	strh	r2, [r3, #2]
	gpio_port_1 = motor_1.port;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	605a      	str	r2, [r3, #4]
	gpio_port_2 = motor_2.port;
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	609a      	str	r2, [r3, #8]
	channel = motor_timer.channel;
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	611a      	str	r2, [r3, #16]
	timer = motor_timer.timer;
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Start(motor_timer.timer, motor_timer.channel);
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	4619      	mov	r1, r3
 8000f48:	4610      	mov	r0, r2
 8000f4a:	f003 f857 	bl	8003ffc <HAL_TIM_PWM_Start>
}
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	4618      	mov	r0, r3
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <_ZN5Motor8turnLeftEm>:

void Motor::turnLeft(uint32_t duty){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(gpio_port_1, gpio_pin_1, GPIO_PIN_SET);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6858      	ldr	r0, [r3, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f002 f8f5 	bl	800315c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio_port_2, gpio_pin_2, GPIO_PIN_RESET);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6898      	ldr	r0, [r3, #8]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	885b      	ldrh	r3, [r3, #2]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f002 f8ed 	bl	800315c <HAL_GPIO_WritePin>
	switch(channel){
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	2b0c      	cmp	r3, #12
 8000f88:	d834      	bhi.n	8000ff4 <_ZN5Motor8turnLeftEm+0x9c>
 8000f8a:	a201      	add	r2, pc, #4	; (adr r2, 8000f90 <_ZN5Motor8turnLeftEm+0x38>)
 8000f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f90:	08000fc5 	.word	0x08000fc5
 8000f94:	08000ff5 	.word	0x08000ff5
 8000f98:	08000ff5 	.word	0x08000ff5
 8000f9c:	08000ff5 	.word	0x08000ff5
 8000fa0:	08000fd1 	.word	0x08000fd1
 8000fa4:	08000ff5 	.word	0x08000ff5
 8000fa8:	08000ff5 	.word	0x08000ff5
 8000fac:	08000ff5 	.word	0x08000ff5
 8000fb0:	08000fdd 	.word	0x08000fdd
 8000fb4:	08000ff5 	.word	0x08000ff5
 8000fb8:	08000ff5 	.word	0x08000ff5
 8000fbc:	08000ff5 	.word	0x08000ff5
 8000fc0:	08000fe9 	.word	0x08000fe9
		case TIM_CHANNEL_1:
			timer->Instance -> CCR1 = duty;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	683a      	ldr	r2, [r7, #0]
 8000fcc:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000fce:	e011      	b.n	8000ff4 <_ZN5Motor8turnLeftEm+0x9c>
		case TIM_CHANNEL_2:
			timer->Instance -> CCR2 = duty;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8000fda:	e00b      	b.n	8000ff4 <_ZN5Motor8turnLeftEm+0x9c>
		case TIM_CHANNEL_3:
			timer->Instance -> CCR3 = duty;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000fe6:	e005      	b.n	8000ff4 <_ZN5Motor8turnLeftEm+0x9c>
		case TIM_CHANNEL_4:
			timer->Instance -> CCR4 = duty;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000ff2:	bf00      	nop
	}
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <_ZN5Motor9turnRightEm>:

void Motor::turnRight(uint32_t duty){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(gpio_port_1, gpio_pin_1, GPIO_PIN_RESET);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6858      	ldr	r0, [r3, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	2200      	movs	r2, #0
 8001010:	4619      	mov	r1, r3
 8001012:	f002 f8a3 	bl	800315c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio_port_2, gpio_pin_2, GPIO_PIN_SET);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6898      	ldr	r0, [r3, #8]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	885b      	ldrh	r3, [r3, #2]
 800101e:	2201      	movs	r2, #1
 8001020:	4619      	mov	r1, r3
 8001022:	f002 f89b 	bl	800315c <HAL_GPIO_WritePin>
	switch(channel){
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	2b0c      	cmp	r3, #12
 800102c:	d834      	bhi.n	8001098 <_ZN5Motor9turnRightEm+0x9c>
 800102e:	a201      	add	r2, pc, #4	; (adr r2, 8001034 <_ZN5Motor9turnRightEm+0x38>)
 8001030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001034:	08001069 	.word	0x08001069
 8001038:	08001099 	.word	0x08001099
 800103c:	08001099 	.word	0x08001099
 8001040:	08001099 	.word	0x08001099
 8001044:	08001075 	.word	0x08001075
 8001048:	08001099 	.word	0x08001099
 800104c:	08001099 	.word	0x08001099
 8001050:	08001099 	.word	0x08001099
 8001054:	08001081 	.word	0x08001081
 8001058:	08001099 	.word	0x08001099
 800105c:	08001099 	.word	0x08001099
 8001060:	08001099 	.word	0x08001099
 8001064:	0800108d 	.word	0x0800108d
			case TIM_CHANNEL_1:
				timer->Instance -> CCR1 = duty;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8001072:	e011      	b.n	8001098 <_ZN5Motor9turnRightEm+0x9c>
			case TIM_CHANNEL_2:
				timer->Instance -> CCR2 = duty;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 800107e:	e00b      	b.n	8001098 <_ZN5Motor9turnRightEm+0x9c>
			case TIM_CHANNEL_3:
				timer->Instance -> CCR3 = duty;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	683a      	ldr	r2, [r7, #0]
 8001088:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 800108a:	e005      	b.n	8001098 <_ZN5Motor9turnRightEm+0x9c>
			case TIM_CHANNEL_4:
				timer->Instance -> CCR4 = duty;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8001096:	bf00      	nop
	}
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_ZN5Motor14goHomePositionEv>:

void Motor::goHomePosition(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	switch(channel){
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	2b0c      	cmp	r3, #12
 80010ae:	f200 8083 	bhi.w	80011b8 <_ZN5Motor14goHomePositionEv+0x118>
 80010b2:	a201      	add	r2, pc, #4	; (adr r2, 80010b8 <_ZN5Motor14goHomePositionEv+0x18>)
 80010b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b8:	080010ed 	.word	0x080010ed
 80010bc:	080011b9 	.word	0x080011b9
 80010c0:	080011b9 	.word	0x080011b9
 80010c4:	080011b9 	.word	0x080011b9
 80010c8:	0800112d 	.word	0x0800112d
 80010cc:	080011b9 	.word	0x080011b9
 80010d0:	080011b9 	.word	0x080011b9
 80010d4:	080011b9 	.word	0x080011b9
 80010d8:	0800116d 	.word	0x0800116d
 80010dc:	080011b9 	.word	0x080011b9
 80010e0:	080011b9 	.word	0x080011b9
 80010e4:	080011b9 	.word	0x080011b9
 80010e8:	080011ad 	.word	0x080011ad
		// Motor 2
		case TIM_CHANNEL_1:
			Motor::turnRight(800);
 80010ec:	f44f 7148 	mov.w	r1, #800	; 0x320
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff83 	bl	8000ffc <_ZN5Motor9turnRightEm>
			while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6) == GPIO_PIN_SET){
 80010f6:	2140      	movs	r1, #64	; 0x40
 80010f8:	4831      	ldr	r0, [pc, #196]	; (80011c0 <_ZN5Motor14goHomePositionEv+0x120>)
 80010fa:	f002 f817 	bl	800312c <HAL_GPIO_ReadPin>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b01      	cmp	r3, #1
 8001102:	bf0c      	ite	eq
 8001104:	2301      	moveq	r3, #1
 8001106:	2300      	movne	r3, #0
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <_ZN5Motor14goHomePositionEv+0x76>
				osDelay(2);
 800110e:	2002      	movs	r0, #2
 8001110:	f004 fd49 	bl	8005ba6 <osDelay>
			while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6) == GPIO_PIN_SET){
 8001114:	e7ef      	b.n	80010f6 <_ZN5Motor14goHomePositionEv+0x56>
			}
			timer->Instance -> CCR1 = 0;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2200      	movs	r2, #0
 800111e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCounter(&ENCODER_2_TIMER, 32767);
 8001120:	4b28      	ldr	r3, [pc, #160]	; (80011c4 <_ZN5Motor14goHomePositionEv+0x124>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001128:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800112a:	e045      	b.n	80011b8 <_ZN5Motor14goHomePositionEv+0x118>
		// Motor 1
		case TIM_CHANNEL_2:
			Motor::turnLeft(850);
 800112c:	f240 3152 	movw	r1, #850	; 0x352
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff11 	bl	8000f58 <_ZN5Motor8turnLeftEm>
			while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7) == GPIO_PIN_SET){
 8001136:	2180      	movs	r1, #128	; 0x80
 8001138:	4821      	ldr	r0, [pc, #132]	; (80011c0 <_ZN5Motor14goHomePositionEv+0x120>)
 800113a:	f001 fff7 	bl	800312c <HAL_GPIO_ReadPin>
 800113e:	4603      	mov	r3, r0
 8001140:	2b01      	cmp	r3, #1
 8001142:	bf0c      	ite	eq
 8001144:	2301      	moveq	r3, #1
 8001146:	2300      	movne	r3, #0
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <_ZN5Motor14goHomePositionEv+0xb6>
				osDelay(2);
 800114e:	2002      	movs	r0, #2
 8001150:	f004 fd29 	bl	8005ba6 <osDelay>
			while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7) == GPIO_PIN_SET){
 8001154:	e7ef      	b.n	8001136 <_ZN5Motor14goHomePositionEv+0x96>
			}
			timer->Instance -> CCR2 = 0;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2200      	movs	r2, #0
 800115e:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SetCounter(&ENCODER_1_TIMER, 32767);
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <_ZN5Motor14goHomePositionEv+0x128>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001168:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800116a:	e025      	b.n	80011b8 <_ZN5Motor14goHomePositionEv+0x118>
	    // Motor 3
		case TIM_CHANNEL_3:
			Motor::turnRight(700);
 800116c:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ff43 	bl	8000ffc <_ZN5Motor9turnRightEm>
			while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5) == GPIO_PIN_SET){
 8001176:	2120      	movs	r1, #32
 8001178:	4811      	ldr	r0, [pc, #68]	; (80011c0 <_ZN5Motor14goHomePositionEv+0x120>)
 800117a:	f001 ffd7 	bl	800312c <HAL_GPIO_ReadPin>
 800117e:	4603      	mov	r3, r0
 8001180:	2b01      	cmp	r3, #1
 8001182:	bf0c      	ite	eq
 8001184:	2301      	moveq	r3, #1
 8001186:	2300      	movne	r3, #0
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <_ZN5Motor14goHomePositionEv+0xf6>
				osDelay(2);
 800118e:	2002      	movs	r0, #2
 8001190:	f004 fd09 	bl	8005ba6 <osDelay>
			while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5) == GPIO_PIN_SET){
 8001194:	e7ef      	b.n	8001176 <_ZN5Motor14goHomePositionEv+0xd6>
			}
			timer->Instance -> CCR3 = 0;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2200      	movs	r2, #0
 800119e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SetCounter(&ENCODER_3_TIMER, 32767);
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <_ZN5Motor14goHomePositionEv+0x12c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80011a8:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 80011aa:	e005      	b.n	80011b8 <_ZN5Motor14goHomePositionEv+0x118>
		case TIM_CHANNEL_4:
			timer->Instance -> CCR4 = 0;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2200      	movs	r2, #0
 80011b4:	641a      	str	r2, [r3, #64]	; 0x40
			//__HAL_TIM_SetCounter(timer, 0);
			break;
 80011b6:	bf00      	nop
	}
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40020c00 	.word	0x40020c00
 80011c4:	200040e8 	.word	0x200040e8
 80011c8:	20004130 	.word	0x20004130
 80011cc:	20004178 	.word	0x20004178

080011d0 <_ZN5Motor9stopMotorEv>:

void Motor::stopMotor(){
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(gpio_port_1, gpio_pin_1, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(gpio_port_2, gpio_pin_2, GPIO_PIN_SET);
	switch(channel){
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	2b0c      	cmp	r3, #12
 80011de:	d844      	bhi.n	800126a <_ZN5Motor9stopMotorEv+0x9a>
 80011e0:	a201      	add	r2, pc, #4	; (adr r2, 80011e8 <_ZN5Motor9stopMotorEv+0x18>)
 80011e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e6:	bf00      	nop
 80011e8:	0800121d 	.word	0x0800121d
 80011ec:	0800126b 	.word	0x0800126b
 80011f0:	0800126b 	.word	0x0800126b
 80011f4:	0800126b 	.word	0x0800126b
 80011f8:	08001233 	.word	0x08001233
 80011fc:	0800126b 	.word	0x0800126b
 8001200:	0800126b 	.word	0x0800126b
 8001204:	0800126b 	.word	0x0800126b
 8001208:	08001249 	.word	0x08001249
 800120c:	0800126b 	.word	0x0800126b
 8001210:	0800126b 	.word	0x0800126b
 8001214:	0800126b 	.word	0x0800126b
 8001218:	0800125f 	.word	0x0800125f
			case TIM_CHANNEL_1:
				timer->Instance -> CCR1 = 0;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2200      	movs	r2, #0
 8001224:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCounter(&ENCODER_2_TIMER, 32767);
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <_ZN5Motor9stopMotorEv+0xa8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800122e:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 8001230:	e01b      	b.n	800126a <_ZN5Motor9stopMotorEv+0x9a>
			case TIM_CHANNEL_2:
				timer->Instance -> CCR2 = 0;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2200      	movs	r2, #0
 800123a:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SetCounter(&ENCODER_1_TIMER, 32767);
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <_ZN5Motor9stopMotorEv+0xac>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001244:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 8001246:	e010      	b.n	800126a <_ZN5Motor9stopMotorEv+0x9a>
			case TIM_CHANNEL_3:
				timer->Instance -> CCR3 = 0;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2200      	movs	r2, #0
 8001250:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SetCounter(&ENCODER_3_TIMER, 32767);
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <_ZN5Motor9stopMotorEv+0xb0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800125a:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 800125c:	e005      	b.n	800126a <_ZN5Motor9stopMotorEv+0x9a>
			case TIM_CHANNEL_4:
				timer->Instance -> CCR4 = 0;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2200      	movs	r2, #0
 8001266:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8001268:	bf00      	nop
	}
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	200040e8 	.word	0x200040e8
 800127c:	20004130 	.word	0x20004130
 8001280:	20004178 	.word	0x20004178

08001284 <startSerialComms>:
// Flag that activates when arrives a new package from serial port
bool data_received = false;
// Flag that indicates to send the data to the serial port
bool data_send = false;

void startSerialComms(RobotInfoHandler *info_handler){
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, (uint8_t*) rx_buffer, RECEIVED_BYTES);
 800128c:	220e      	movs	r2, #14
 800128e:	493e      	ldr	r1, [pc, #248]	; (8001388 <startSerialComms+0x104>)
 8001290:	483e      	ldr	r0, [pc, #248]	; (800138c <startSerialComms+0x108>)
 8001292:	f003 fe82 	bl	8004f9a <HAL_UART_Receive_IT>

	while(1){
		if(data_received == true){
 8001296:	4b3e      	ldr	r3, [pc, #248]	; (8001390 <startSerialComms+0x10c>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d152      	bne.n	8001344 <startSerialComms+0xc0>
			data_received = false;
 800129e:	4b3c      	ldr	r3, [pc, #240]	; (8001390 <startSerialComms+0x10c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
			if(rx_buffer[0] == START_OF_PACKAGE && rx_buffer[13] == END_OF_PACKAGE){
 80012a4:	4b38      	ldr	r3, [pc, #224]	; (8001388 <startSerialComms+0x104>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2ba1      	cmp	r3, #161	; 0xa1
 80012aa:	d14b      	bne.n	8001344 <startSerialComms+0xc0>
 80012ac:	4b36      	ldr	r3, [pc, #216]	; (8001388 <startSerialComms+0x104>)
 80012ae:	7b5b      	ldrb	r3, [r3, #13]
 80012b0:	2bb1      	cmp	r3, #177	; 0xb1
 80012b2:	d147      	bne.n	8001344 <startSerialComms+0xc0>
				angle_1.bytes[0] = rx_buffer[1];
 80012b4:	4b34      	ldr	r3, [pc, #208]	; (8001388 <startSerialComms+0x104>)
 80012b6:	785a      	ldrb	r2, [r3, #1]
 80012b8:	4b36      	ldr	r3, [pc, #216]	; (8001394 <startSerialComms+0x110>)
 80012ba:	701a      	strb	r2, [r3, #0]
				angle_1.bytes[1] = rx_buffer[2];
 80012bc:	4b32      	ldr	r3, [pc, #200]	; (8001388 <startSerialComms+0x104>)
 80012be:	789a      	ldrb	r2, [r3, #2]
 80012c0:	4b34      	ldr	r3, [pc, #208]	; (8001394 <startSerialComms+0x110>)
 80012c2:	705a      	strb	r2, [r3, #1]
				angle_1.bytes[2] = rx_buffer[3];
 80012c4:	4b30      	ldr	r3, [pc, #192]	; (8001388 <startSerialComms+0x104>)
 80012c6:	78da      	ldrb	r2, [r3, #3]
 80012c8:	4b32      	ldr	r3, [pc, #200]	; (8001394 <startSerialComms+0x110>)
 80012ca:	709a      	strb	r2, [r3, #2]
				angle_1.bytes[3] = rx_buffer[4];
 80012cc:	4b2e      	ldr	r3, [pc, #184]	; (8001388 <startSerialComms+0x104>)
 80012ce:	791a      	ldrb	r2, [r3, #4]
 80012d0:	4b30      	ldr	r3, [pc, #192]	; (8001394 <startSerialComms+0x110>)
 80012d2:	70da      	strb	r2, [r3, #3]
				angle_2.bytes[0] = rx_buffer[5];
 80012d4:	4b2c      	ldr	r3, [pc, #176]	; (8001388 <startSerialComms+0x104>)
 80012d6:	795a      	ldrb	r2, [r3, #5]
 80012d8:	4b2f      	ldr	r3, [pc, #188]	; (8001398 <startSerialComms+0x114>)
 80012da:	701a      	strb	r2, [r3, #0]
				angle_2.bytes[1] = rx_buffer[6];
 80012dc:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <startSerialComms+0x104>)
 80012de:	799a      	ldrb	r2, [r3, #6]
 80012e0:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <startSerialComms+0x114>)
 80012e2:	705a      	strb	r2, [r3, #1]
				angle_2.bytes[2] = rx_buffer[7];
 80012e4:	4b28      	ldr	r3, [pc, #160]	; (8001388 <startSerialComms+0x104>)
 80012e6:	79da      	ldrb	r2, [r3, #7]
 80012e8:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <startSerialComms+0x114>)
 80012ea:	709a      	strb	r2, [r3, #2]
				angle_2.bytes[3] = rx_buffer[8];
 80012ec:	4b26      	ldr	r3, [pc, #152]	; (8001388 <startSerialComms+0x104>)
 80012ee:	7a1a      	ldrb	r2, [r3, #8]
 80012f0:	4b29      	ldr	r3, [pc, #164]	; (8001398 <startSerialComms+0x114>)
 80012f2:	70da      	strb	r2, [r3, #3]
				angle_3.bytes[0] = rx_buffer[9];
 80012f4:	4b24      	ldr	r3, [pc, #144]	; (8001388 <startSerialComms+0x104>)
 80012f6:	7a5a      	ldrb	r2, [r3, #9]
 80012f8:	4b28      	ldr	r3, [pc, #160]	; (800139c <startSerialComms+0x118>)
 80012fa:	701a      	strb	r2, [r3, #0]
				angle_3.bytes[1] = rx_buffer[10];
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <startSerialComms+0x104>)
 80012fe:	7a9a      	ldrb	r2, [r3, #10]
 8001300:	4b26      	ldr	r3, [pc, #152]	; (800139c <startSerialComms+0x118>)
 8001302:	705a      	strb	r2, [r3, #1]
				angle_3.bytes[2] = rx_buffer[11];
 8001304:	4b20      	ldr	r3, [pc, #128]	; (8001388 <startSerialComms+0x104>)
 8001306:	7ada      	ldrb	r2, [r3, #11]
 8001308:	4b24      	ldr	r3, [pc, #144]	; (800139c <startSerialComms+0x118>)
 800130a:	709a      	strb	r2, [r3, #2]
				angle_3.bytes[3] = rx_buffer[12];
 800130c:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <startSerialComms+0x104>)
 800130e:	7b1a      	ldrb	r2, [r3, #12]
 8001310:	4b22      	ldr	r3, [pc, #136]	; (800139c <startSerialComms+0x118>)
 8001312:	70da      	strb	r2, [r3, #3]
				setAngle1(info_handler, angle_1.float_value);
 8001314:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <startSerialComms+0x110>)
 8001316:	edd3 7a00 	vldr	s15, [r3]
 800131a:	eeb0 0a67 	vmov.f32	s0, s15
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff fd0e 	bl	8000d40 <setAngle1>
				setAngle2(info_handler, angle_2.float_value);
 8001324:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <startSerialComms+0x114>)
 8001326:	edd3 7a00 	vldr	s15, [r3]
 800132a:	eeb0 0a67 	vmov.f32	s0, s15
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff fd21 	bl	8000d76 <setAngle2>
				setAngle3(info_handler, angle_3.float_value);
 8001334:	4b19      	ldr	r3, [pc, #100]	; (800139c <startSerialComms+0x118>)
 8001336:	edd3 7a00 	vldr	s15, [r3]
 800133a:	eeb0 0a67 	vmov.f32	s0, s15
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fd34 	bl	8000dac <setAngle3>
			}
		}
		if(data_send == true){
 8001344:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <startSerialComms+0x11c>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d118      	bne.n	800137e <startSerialComms+0xfa>
			//ticks.float_value= info_handler->ticks;
			//HAL_UART_Transmit(&huart2, ticks.bytes, sizeof(ticks.bytes), 1000);

			HAL_UART_Transmit(&huart2, angle_1.bytes, sizeof(angle_1.bytes), 1000);
 800134c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001350:	2204      	movs	r2, #4
 8001352:	4910      	ldr	r1, [pc, #64]	; (8001394 <startSerialComms+0x110>)
 8001354:	480d      	ldr	r0, [pc, #52]	; (800138c <startSerialComms+0x108>)
 8001356:	f003 fd8e 	bl	8004e76 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, angle_2.bytes, sizeof(angle_2.bytes), 1000);
 800135a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135e:	2204      	movs	r2, #4
 8001360:	490d      	ldr	r1, [pc, #52]	; (8001398 <startSerialComms+0x114>)
 8001362:	480a      	ldr	r0, [pc, #40]	; (800138c <startSerialComms+0x108>)
 8001364:	f003 fd87 	bl	8004e76 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, angle_3.bytes, sizeof(angle_3.bytes), 1000);
 8001368:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136c:	2204      	movs	r2, #4
 800136e:	490b      	ldr	r1, [pc, #44]	; (800139c <startSerialComms+0x118>)
 8001370:	4806      	ldr	r0, [pc, #24]	; (800138c <startSerialComms+0x108>)
 8001372:	f003 fd80 	bl	8004e76 <HAL_UART_Transmit>

			osDelay(500);
 8001376:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800137a:	f004 fc14 	bl	8005ba6 <osDelay>
		}
		osDelay(100);
 800137e:	2064      	movs	r0, #100	; 0x64
 8001380:	f004 fc11 	bl	8005ba6 <osDelay>
		if(data_received == true){
 8001384:	e787      	b.n	8001296 <startSerialComms+0x12>
 8001386:	bf00      	nop
 8001388:	2000003c 	.word	0x2000003c
 800138c:	2000424c 	.word	0x2000424c
 8001390:	2000004a 	.word	0x2000004a
 8001394:	20000030 	.word	0x20000030
 8001398:	20000034 	.word	0x20000034
 800139c:	20000038 	.word	0x20000038
 80013a0:	2000004b 	.word	0x2000004b

080013a4 <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a07      	ldr	r2, [pc, #28]	; (80013d0 <HAL_UART_RxCpltCallback+0x2c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d102      	bne.n	80013bc <HAL_UART_RxCpltCallback+0x18>
		data_received = true;
 80013b6:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <HAL_UART_RxCpltCallback+0x30>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t*) rx_buffer, RECEIVED_BYTES);
 80013bc:	220e      	movs	r2, #14
 80013be:	4906      	ldr	r1, [pc, #24]	; (80013d8 <HAL_UART_RxCpltCallback+0x34>)
 80013c0:	4806      	ldr	r0, [pc, #24]	; (80013dc <HAL_UART_RxCpltCallback+0x38>)
 80013c2:	f003 fdea 	bl	8004f9a <HAL_UART_Receive_IT>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40004400 	.word	0x40004400
 80013d4:	2000004a 	.word	0x2000004a
 80013d8:	2000003c 	.word	0x2000003c
 80013dc:	2000424c 	.word	0x2000424c

080013e0 <_ZN3PIDC1Effffff>:
#include "Task/PID/PID.hpp"


PID::PID(float kp, float kd, float ki, float max_output, float min_output, float update_rate){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	61f8      	str	r0, [r7, #28]
 80013e8:	ed87 0a06 	vstr	s0, [r7, #24]
 80013ec:	edc7 0a05 	vstr	s1, [r7, #20]
 80013f0:	ed87 1a04 	vstr	s2, [r7, #16]
 80013f4:	edc7 1a03 	vstr	s3, [r7, #12]
 80013f8:	ed87 2a02 	vstr	s4, [r7, #8]
 80013fc:	edc7 2a01 	vstr	s5, [r7, #4]
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	4a15      	ldr	r2, [pc, #84]	; (8001458 <_ZN3PIDC1Effffff+0x78>)
 8001404:	611a      	str	r2, [r3, #16]
	kp_ = kp;
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	601a      	str	r2, [r3, #0]
	ki_ = ki;
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	609a      	str	r2, [r3, #8]
	kd_ = kd;
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	605a      	str	r2, [r3, #4]
	pid_update_seconds = update_rate;
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	60da      	str	r2, [r3, #12]
	max_pid_output_ = max_output;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	619a      	str	r2, [r3, #24]
	min_pid_output_ = min_output;
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	615a      	str	r2, [r3, #20]
	pid_.Kp = kp_;
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	63da      	str	r2, [r3, #60]	; 0x3c
	pid_.Ki = ki_;
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	641a      	str	r2, [r3, #64]	; 0x40
	pid_.Kd = kd_;
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	645a      	str	r2, [r3, #68]	; 0x44
	arm_pid_init_f32(&pid_, 1);
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3324      	adds	r3, #36	; 0x24
 8001446:	2101      	movs	r1, #1
 8001448:	4618      	mov	r0, r3
 800144a:	f001 fae6 	bl	8002a1a <arm_pid_init_f32>
}
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	4618      	mov	r0, r3
 8001452:	3720      	adds	r7, #32
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40a00000 	.word	0x40a00000

0800145c <_ZN3PID9updatePIDEff>:

float PID::updatePID(float setpoint_position, float current_position){
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	; 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	ed87 0a02 	vstr	s0, [r7, #8]
 8001468:	edc7 0a01 	vstr	s1, [r7, #4]
	error_ = setpoint_position - current_position;
 800146c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001470:	edd7 7a01 	vldr	s15, [r7, #4]
 8001474:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	edc3 7a07 	vstr	s15, [r3, #28]
	if(error_ < 3.0f && error_ > -3.0f) error_ = 0;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	edd3 7a07 	vldr	s15, [r3, #28]
 8001484:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001488:	eef4 7ac7 	vcmpe.f32	s15, s14
 800148c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001490:	d50d      	bpl.n	80014ae <_ZN3PID9updatePIDEff+0x52>
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	edd3 7a07 	vldr	s15, [r3, #28]
 8001498:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 800149c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a4:	dd03      	ble.n	80014ae <_ZN3PID9updatePIDEff+0x52>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
	output = arm_pid_f32(&pid_, error_);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	61fa      	str	r2, [r7, #28]
 80014ba:	61bb      	str	r3, [r7, #24]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	ed93 7a00 	vldr	s14, [r3]
 80014c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80014c6:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	edd3 6a01 	vldr	s13, [r3, #4]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80014d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80014da:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	edd3 6a02 	vldr	s13, [r3, #8]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80014ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80014f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fc:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Update state */
    S->state[1] = S->state[0];
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	68da      	ldr	r2, [r3, #12]
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	621a      	str	r2, [r3, #32]
	if(output > max_pid_output_) output = max_pid_output_;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	edd3 7a06 	vldr	s15, [r3, #24]
 8001526:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800152a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152e:	dd04      	ble.n	800153a <_ZN3PID9updatePIDEff+0xde>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	699a      	ldr	r2, [r3, #24]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	621a      	str	r2, [r3, #32]
 8001538:	e00e      	b.n	8001558 <_ZN3PID9updatePIDEff+0xfc>
	else if(output < min_pid_output_) output = min_pid_output_;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	edd3 7a05 	vldr	s15, [r3, #20]
 8001546:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800154a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154e:	d503      	bpl.n	8001558 <_ZN3PID9updatePIDEff+0xfc>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	695a      	ldr	r2, [r3, #20]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	621a      	str	r2, [r3, #32]
	//if(error_ < 2.0f && error_ > -2.0f) output = 0;
	return output;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	ee07 3a90 	vmov	s15, r3
}
 8001560:	eeb0 0a67 	vmov.f32	s0, s15
 8001564:	3724      	adds	r7, #36	; 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <PID1Node>:

float output_pid_1=0;
float current_angle_1 = 0;
int hall_1_flag = 0;

void PID1Node(RobotInfoHandler *robot_info_handler){
 8001570:	b580      	push	{r7, lr}
 8001572:	b0a4      	sub	sp, #144	; 0x90
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

	// Pins definition for motor 1
	Pin motor_1_a{MOTOR_1_L_GPIO_Port, MOTOR_1_L_Pin};
 8001578:	4a5b      	ldr	r2, [pc, #364]	; (80016e8 <PID1Node+0x178>)
 800157a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800157e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001582:	e883 0003 	stmia.w	r3, {r0, r1}
	Pin motor_1_b{MOTOR_1_R_GPIO_Port, MOTOR_1_R_Pin};
 8001586:	4a59      	ldr	r2, [pc, #356]	; (80016ec <PID1Node+0x17c>)
 8001588:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800158c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001590:	e883 0003 	stmia.w	r3, {r0, r1}

	// Timer definition for motor 1
	MotorChannel motor_1_timer{&MOTOR_1_TIMER, MOTOR_1_CHANNEL};
 8001594:	4a56      	ldr	r2, [pc, #344]	; (80016f0 <PID1Node+0x180>)
 8001596:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800159a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800159e:	e883 0003 	stmia.w	r3, {r0, r1}

	// Motor 1 object creation
	Motor motor1(motor_1_timer, motor_1_a, motor_1_b);
 80015a2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015a6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80015aa:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80015ae:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80015b2:	f7ff fca5 	bl	8000f00 <_ZN5MotorC1ER12MotorChannelR3PinS3_>

	// Encoder 1 object creation
	Encoder encoder1(&ENCODER_1_TIMER, ENCODER_1_STEPS);
 80015b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015ba:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80016f4 <PID1Node+0x184>
 80015be:	494e      	ldr	r1, [pc, #312]	; (80016f8 <PID1Node+0x188>)
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fc0f 	bl	8000de4 <_ZN7EncoderC1EP17TIM_HandleTypeDeff>

	// PID 1 object creation
	PID pid1(KP_CONST_1, KD_CONST_1, KI_CONST_1, MAX_PID_OUTPUT, MIN_PID_OUTPUT, PID_UPDATE_TIME_S);
 80015c6:	f107 030c 	add.w	r3, r7, #12
 80015ca:	eddf 2a4c 	vldr	s5, [pc, #304]	; 80016fc <PID1Node+0x18c>
 80015ce:	ed9f 2a4c 	vldr	s4, [pc, #304]	; 8001700 <PID1Node+0x190>
 80015d2:	eddf 1a4c 	vldr	s3, [pc, #304]	; 8001704 <PID1Node+0x194>
 80015d6:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
 80015da:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80015de:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8001708 <PID1Node+0x198>
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fefc 	bl	80013e0 <_ZN3PIDC1Effffff>

	if(robot_info_handler->angle_1 == 0){
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f6:	d11a      	bne.n	800162e <PID1Node+0xbe>
		// Check if the hall is in the initial position
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7) == GPIO_PIN_RESET){		// Cambiar por el pin del hall 1
 80015f8:	2180      	movs	r1, #128	; 0x80
 80015fa:	4844      	ldr	r0, [pc, #272]	; (800170c <PID1Node+0x19c>)
 80015fc:	f001 fd96 	bl	800312c <HAL_GPIO_ReadPin>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	bf0c      	ite	eq
 8001606:	2301      	moveq	r3, #1
 8001608:	2300      	movne	r3, #0
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d009      	beq.n	8001624 <PID1Node+0xb4>
			current_angle_1 = 0;
 8001610:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <PID1Node+0x1a0>)
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
			encoder1.resetTicksCounter();
 8001618:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fc5f 	bl	8000ee0 <_ZN7Encoder17resetTicksCounterEv>
 8001622:	e004      	b.n	800162e <PID1Node+0xbe>
		}
		else	motor1.goHomePosition();
 8001624:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fd39 	bl	80010a0 <_ZN5Motor14goHomePositionEv>
	}

	while(1){
		if(hall_1_flag == 1){
 800162e:	4b39      	ldr	r3, [pc, #228]	; (8001714 <PID1Node+0x1a4>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d10b      	bne.n	800164e <PID1Node+0xde>
			hall_1_flag = 0;
 8001636:	4b37      	ldr	r3, [pc, #220]	; (8001714 <PID1Node+0x1a4>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
			motor1.stopMotor();
 800163c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fdc5 	bl	80011d0 <_ZN5Motor9stopMotorEv>
			current_angle_1 = 0;
 8001646:	4b32      	ldr	r3, [pc, #200]	; (8001710 <PID1Node+0x1a0>)
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
		}
		current_angle_1 = encoder1.getAngle();
 800164e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fbe8 	bl	8000e28 <_ZN7Encoder8getAngleEv>
 8001658:	eef0 7a40 	vmov.f32	s15, s0
 800165c:	4b2c      	ldr	r3, [pc, #176]	; (8001710 <PID1Node+0x1a0>)
 800165e:	edc3 7a00 	vstr	s15, [r3]
		output_pid_1 = pid1.updatePID(robot_info_handler->angle_1, current_angle_1);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	4b29      	ldr	r3, [pc, #164]	; (8001710 <PID1Node+0x1a0>)
 800166a:	ed93 7a00 	vldr	s14, [r3]
 800166e:	f107 030c 	add.w	r3, r7, #12
 8001672:	eef0 0a47 	vmov.f32	s1, s14
 8001676:	eeb0 0a67 	vmov.f32	s0, s15
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff feee 	bl	800145c <_ZN3PID9updatePIDEff>
 8001680:	eef0 7a40 	vmov.f32	s15, s0
 8001684:	4b24      	ldr	r3, [pc, #144]	; (8001718 <PID1Node+0x1a8>)
 8001686:	edc3 7a00 	vstr	s15, [r3]
		if(output_pid_1 > 0) motor1.turnRight(output_pid_1);
 800168a:	4b23      	ldr	r3, [pc, #140]	; (8001718 <PID1Node+0x1a8>)
 800168c:	edd3 7a00 	vldr	s15, [r3]
 8001690:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001698:	dd0c      	ble.n	80016b4 <PID1Node+0x144>
 800169a:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <PID1Node+0x1a8>)
 800169c:	edd3 7a00 	vldr	s15, [r3]
 80016a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016a8:	ee17 1a90 	vmov	r1, s15
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fca5 	bl	8000ffc <_ZN5Motor9turnRightEm>
 80016b2:	e015      	b.n	80016e0 <PID1Node+0x170>
		else if (output_pid_1 < 0) motor1.turnLeft(-output_pid_1);
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <PID1Node+0x1a8>)
 80016b6:	edd3 7a00 	vldr	s15, [r3]
 80016ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c2:	d50d      	bpl.n	80016e0 <PID1Node+0x170>
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <PID1Node+0x1a8>)
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	eef1 7a67 	vneg.f32	s15, s15
 80016ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016d2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016d6:	ee17 1a90 	vmov	r1, s15
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fc3c 	bl	8000f58 <_ZN5Motor8turnLeftEm>
		osDelay(PID_UPDATE_TIME_mS);
 80016e0:	203c      	movs	r0, #60	; 0x3c
 80016e2:	f004 fa60 	bl	8005ba6 <osDelay>
		if(hall_1_flag == 1){
 80016e6:	e7a2      	b.n	800162e <PID1Node+0xbe>
 80016e8:	080082c8 	.word	0x080082c8
 80016ec:	080082d0 	.word	0x080082d0
 80016f0:	080082d8 	.word	0x080082d8
 80016f4:	469d3e00 	.word	0x469d3e00
 80016f8:	20004130 	.word	0x20004130
 80016fc:	3d75c28f 	.word	0x3d75c28f
 8001700:	c47a0000 	.word	0xc47a0000
 8001704:	447a0000 	.word	0x447a0000
 8001708:	44480000 	.word	0x44480000
 800170c:	40020c00 	.word	0x40020c00
 8001710:	20000050 	.word	0x20000050
 8001714:	20000054 	.word	0x20000054
 8001718:	2000004c 	.word	0x2000004c

0800171c <PID2Node>:
float output_pid_2 = 0;
float current_angle_2 = 0;
int hall_2_flag = 0;
float pulses_2;

void PID2Node(RobotInfoHandler *robot_info_handler){
 800171c:	b580      	push	{r7, lr}
 800171e:	b0a4      	sub	sp, #144	; 0x90
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]

	// Pins definition for motor 2
	Pin motor_2_a{MOTOR_2_L_GPIO_Port, MOTOR_2_L_Pin};
 8001724:	4a5f      	ldr	r2, [pc, #380]	; (80018a4 <PID2Node+0x188>)
 8001726:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800172a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800172e:	e883 0003 	stmia.w	r3, {r0, r1}
	Pin motor_2_b{MOTOR_2_R_GPIO_Port, MOTOR_2_R_Pin};
 8001732:	4a5d      	ldr	r2, [pc, #372]	; (80018a8 <PID2Node+0x18c>)
 8001734:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001738:	e892 0003 	ldmia.w	r2, {r0, r1}
 800173c:	e883 0003 	stmia.w	r3, {r0, r1}

	// Timer definition for motor 2
	MotorChannel motor_2_timer{&MOTOR_2_TIMER, MOTOR_2_CHANNEL};
 8001740:	4b5a      	ldr	r3, [pc, #360]	; (80018ac <PID2Node+0x190>)
 8001742:	67bb      	str	r3, [r7, #120]	; 0x78
 8001744:	2300      	movs	r3, #0
 8001746:	67fb      	str	r3, [r7, #124]	; 0x7c

	// Motor 2 object creation
	Motor motor2(motor_2_timer, motor_2_a, motor_2_b);
 8001748:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800174c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001750:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001754:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8001758:	f7ff fbd2 	bl	8000f00 <_ZN5MotorC1ER12MotorChannelR3PinS3_>

	// Encoder 2 object creation
	Encoder encoder2(&ENCODER_2_TIMER, ENCODER_2_STEPS);
 800175c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001760:	ed9f 0a53 	vldr	s0, [pc, #332]	; 80018b0 <PID2Node+0x194>
 8001764:	4953      	ldr	r1, [pc, #332]	; (80018b4 <PID2Node+0x198>)
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fb3c 	bl	8000de4 <_ZN7EncoderC1EP17TIM_HandleTypeDeff>

	// PID 2 object creation
	PID pid2(KP_CONST_2, KD_CONST_2, KI_CONST_2, MAX_PID_OUTPUT, MIN_PID_OUTPUT, PID_UPDATE_TIME_S);
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	eddf 2a51 	vldr	s5, [pc, #324]	; 80018b8 <PID2Node+0x19c>
 8001774:	ed9f 2a51 	vldr	s4, [pc, #324]	; 80018bc <PID2Node+0x1a0>
 8001778:	eddf 1a51 	vldr	s3, [pc, #324]	; 80018c0 <PID2Node+0x1a4>
 800177c:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 8001780:	eddf 0a50 	vldr	s1, [pc, #320]	; 80018c4 <PID2Node+0x1a8>
 8001784:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80018c8 <PID2Node+0x1ac>
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fe29 	bl	80013e0 <_ZN3PIDC1Effffff>

	//float current_angle = 0;
	if(robot_info_handler->angle_2 == 0){
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	edd3 7a01 	vldr	s15, [r3, #4]
 8001794:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179c:	d11a      	bne.n	80017d4 <PID2Node+0xb8>
		// Check if the hall is in the initial position
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6) == GPIO_PIN_RESET){
 800179e:	2140      	movs	r1, #64	; 0x40
 80017a0:	484a      	ldr	r0, [pc, #296]	; (80018cc <PID2Node+0x1b0>)
 80017a2:	f001 fcc3 	bl	800312c <HAL_GPIO_ReadPin>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	bf0c      	ite	eq
 80017ac:	2301      	moveq	r3, #1
 80017ae:	2300      	movne	r3, #0
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d009      	beq.n	80017ca <PID2Node+0xae>
			current_angle_2 = 0;
 80017b6:	4b46      	ldr	r3, [pc, #280]	; (80018d0 <PID2Node+0x1b4>)
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
			encoder2.resetTicksCounter();
 80017be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fb8c 	bl	8000ee0 <_ZN7Encoder17resetTicksCounterEv>
 80017c8:	e004      	b.n	80017d4 <PID2Node+0xb8>
		}
		else	motor2.goHomePosition();
 80017ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fc66 	bl	80010a0 <_ZN5Motor14goHomePositionEv>
	}

	while(1){
		if(hall_2_flag == 1){
 80017d4:	4b3f      	ldr	r3, [pc, #252]	; (80018d4 <PID2Node+0x1b8>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d10b      	bne.n	80017f4 <PID2Node+0xd8>
			hall_2_flag = 0;
 80017dc:	4b3d      	ldr	r3, [pc, #244]	; (80018d4 <PID2Node+0x1b8>)
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
			motor2.stopMotor();
 80017e2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fcf2 	bl	80011d0 <_ZN5Motor9stopMotorEv>
			current_angle_2 = 0;
 80017ec:	4b38      	ldr	r3, [pc, #224]	; (80018d0 <PID2Node+0x1b4>)
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
		}
		pulses_2 = encoder2.getPulses();
 80017f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fb57 	bl	8000eac <_ZN7Encoder9getPulsesEv>
 80017fe:	eef0 7a40 	vmov.f32	s15, s0
 8001802:	4b35      	ldr	r3, [pc, #212]	; (80018d8 <PID2Node+0x1bc>)
 8001804:	edc3 7a00 	vstr	s15, [r3]
		current_angle_2 = encoder2.getAngle();
 8001808:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fb0b 	bl	8000e28 <_ZN7Encoder8getAngleEv>
 8001812:	eef0 7a40 	vmov.f32	s15, s0
 8001816:	4b2e      	ldr	r3, [pc, #184]	; (80018d0 <PID2Node+0x1b4>)
 8001818:	edc3 7a00 	vstr	s15, [r3]
		output_pid_2 = pid2.updatePID(robot_info_handler->angle_2, current_angle_2);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001822:	4b2b      	ldr	r3, [pc, #172]	; (80018d0 <PID2Node+0x1b4>)
 8001824:	ed93 7a00 	vldr	s14, [r3]
 8001828:	f107 030c 	add.w	r3, r7, #12
 800182c:	eef0 0a47 	vmov.f32	s1, s14
 8001830:	eeb0 0a67 	vmov.f32	s0, s15
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fe11 	bl	800145c <_ZN3PID9updatePIDEff>
 800183a:	eef0 7a40 	vmov.f32	s15, s0
 800183e:	4b27      	ldr	r3, [pc, #156]	; (80018dc <PID2Node+0x1c0>)
 8001840:	edc3 7a00 	vstr	s15, [r3]
		if(output_pid_2 > 0) motor2.turnLeft(output_pid_2);
 8001844:	4b25      	ldr	r3, [pc, #148]	; (80018dc <PID2Node+0x1c0>)
 8001846:	edd3 7a00 	vldr	s15, [r3]
 800184a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800184e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001852:	dd0c      	ble.n	800186e <PID2Node+0x152>
 8001854:	4b21      	ldr	r3, [pc, #132]	; (80018dc <PID2Node+0x1c0>)
 8001856:	edd3 7a00 	vldr	s15, [r3]
 800185a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800185e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001862:	ee17 1a90 	vmov	r1, s15
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fb76 	bl	8000f58 <_ZN5Motor8turnLeftEm>
 800186c:	e015      	b.n	800189a <PID2Node+0x17e>
		else if (output_pid_2 < 0) motor2.turnRight(-output_pid_2);
 800186e:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <PID2Node+0x1c0>)
 8001870:	edd3 7a00 	vldr	s15, [r3]
 8001874:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187c:	d50d      	bpl.n	800189a <PID2Node+0x17e>
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <PID2Node+0x1c0>)
 8001880:	edd3 7a00 	vldr	s15, [r3]
 8001884:	eef1 7a67 	vneg.f32	s15, s15
 8001888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800188c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001890:	ee17 1a90 	vmov	r1, s15
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fbb1 	bl	8000ffc <_ZN5Motor9turnRightEm>
		osDelay(PID_UPDATE_TIME_mS);
 800189a:	203c      	movs	r0, #60	; 0x3c
 800189c:	f004 f983 	bl	8005ba6 <osDelay>
		if(hall_2_flag == 1){
 80018a0:	e798      	b.n	80017d4 <PID2Node+0xb8>
 80018a2:	bf00      	nop
 80018a4:	080082e0 	.word	0x080082e0
 80018a8:	080082e8 	.word	0x080082e8
 80018ac:	200041c0 	.word	0x200041c0
 80018b0:	469d3e00 	.word	0x469d3e00
 80018b4:	200040e8 	.word	0x200040e8
 80018b8:	3d75c28f 	.word	0x3d75c28f
 80018bc:	c47a0000 	.word	0xc47a0000
 80018c0:	447a0000 	.word	0x447a0000
 80018c4:	3dcccccd 	.word	0x3dcccccd
 80018c8:	43480000 	.word	0x43480000
 80018cc:	40020c00 	.word	0x40020c00
 80018d0:	2000005c 	.word	0x2000005c
 80018d4:	20000060 	.word	0x20000060
 80018d8:	20000064 	.word	0x20000064
 80018dc:	20000058 	.word	0x20000058

080018e0 <PID3Node>:

float current_angle_3 = 0, output_pid_3 = 0;
int hall_3_flag = 0;
float pulses_3;

void PID3Node(RobotInfoHandler *robot_info_handler){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b0a4      	sub	sp, #144	; 0x90
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	// Pins definition for motor 3
	Pin motor_3_a{MOTOR_3_L_GPIO_Port, MOTOR_3_L_Pin};
 80018e8:	4a60      	ldr	r2, [pc, #384]	; (8001a6c <PID3Node+0x18c>)
 80018ea:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80018ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018f2:	e883 0003 	stmia.w	r3, {r0, r1}
	Pin motor_3_b{MOTOR_3_R_GPIO_Port, MOTOR_3_R_Pin};
 80018f6:	4a5e      	ldr	r2, [pc, #376]	; (8001a70 <PID3Node+0x190>)
 80018f8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001900:	e883 0003 	stmia.w	r3, {r0, r1}

	// Timer definition for motor 3
	MotorChannel motor_3_timer{&MOTOR_3_TIMER, MOTOR_3_CHANNEL};
 8001904:	4a5b      	ldr	r2, [pc, #364]	; (8001a74 <PID3Node+0x194>)
 8001906:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800190a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800190e:	e883 0003 	stmia.w	r3, {r0, r1}

	// Motor 3 object creation
	Motor motor3(motor_3_timer, motor_3_a, motor_3_b);
 8001912:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001916:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800191a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800191e:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8001922:	f7ff faed 	bl	8000f00 <_ZN5MotorC1ER12MotorChannelR3PinS3_>

	// Encoder 3 object creation
	Encoder encoder3(&ENCODER_3_TIMER, ENCODER_3_STEPS);
 8001926:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800192a:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8001a78 <PID3Node+0x198>
 800192e:	4953      	ldr	r1, [pc, #332]	; (8001a7c <PID3Node+0x19c>)
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fa57 	bl	8000de4 <_ZN7EncoderC1EP17TIM_HandleTypeDeff>

	// PID 3 object creation
	PID pid3(KP_CONST_3, KD_CONST_3, KI_CONST_3, MAX_PID_OUTPUT, MIN_PID_OUTPUT, PID_UPDATE_TIME_S);
 8001936:	f107 030c 	add.w	r3, r7, #12
 800193a:	eddf 2a51 	vldr	s5, [pc, #324]	; 8001a80 <PID3Node+0x1a0>
 800193e:	ed9f 2a51 	vldr	s4, [pc, #324]	; 8001a84 <PID3Node+0x1a4>
 8001942:	eddf 1a51 	vldr	s3, [pc, #324]	; 8001a88 <PID3Node+0x1a8>
 8001946:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
 800194a:	eddf 0a50 	vldr	s1, [pc, #320]	; 8001a8c <PID3Node+0x1ac>
 800194e:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8001a90 <PID3Node+0x1b0>
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fd44 	bl	80013e0 <_ZN3PIDC1Effffff>

	//float current_angle = 0, output_pid_3 = 0;
	if(robot_info_handler->angle_3 == 0){
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	edd3 7a02 	vldr	s15, [r3, #8]
 800195e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001966:	d11a      	bne.n	800199e <PID3Node+0xbe>
		// Check if the hall is in the initial position
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5) == GPIO_PIN_RESET){				// Change for PIN for hall 3
 8001968:	2120      	movs	r1, #32
 800196a:	484a      	ldr	r0, [pc, #296]	; (8001a94 <PID3Node+0x1b4>)
 800196c:	f001 fbde 	bl	800312c <HAL_GPIO_ReadPin>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	bf0c      	ite	eq
 8001976:	2301      	moveq	r3, #1
 8001978:	2300      	movne	r3, #0
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	d009      	beq.n	8001994 <PID3Node+0xb4>
			current_angle_3 = 0;
 8001980:	4b45      	ldr	r3, [pc, #276]	; (8001a98 <PID3Node+0x1b8>)
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
			encoder3.resetTicksCounter();
 8001988:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff faa7 	bl	8000ee0 <_ZN7Encoder17resetTicksCounterEv>
 8001992:	e004      	b.n	800199e <PID3Node+0xbe>
		}
		else{
			motor3.goHomePosition();
 8001994:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fb81 	bl	80010a0 <_ZN5Motor14goHomePositionEv>
		}
	}

	while(1){
		if(hall_3_flag == 1){
 800199e:	4b3f      	ldr	r3, [pc, #252]	; (8001a9c <PID3Node+0x1bc>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d10b      	bne.n	80019be <PID3Node+0xde>
			hall_3_flag = 0;
 80019a6:	4b3d      	ldr	r3, [pc, #244]	; (8001a9c <PID3Node+0x1bc>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
			motor3.stopMotor();
 80019ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fc0d 	bl	80011d0 <_ZN5Motor9stopMotorEv>
			current_angle_3 = 0;
 80019b6:	4b38      	ldr	r3, [pc, #224]	; (8001a98 <PID3Node+0x1b8>)
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
		}
		pulses_3 = encoder3.getPulses();
 80019be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fa72 	bl	8000eac <_ZN7Encoder9getPulsesEv>
 80019c8:	eef0 7a40 	vmov.f32	s15, s0
 80019cc:	4b34      	ldr	r3, [pc, #208]	; (8001aa0 <PID3Node+0x1c0>)
 80019ce:	edc3 7a00 	vstr	s15, [r3]
		current_angle_3 = encoder3.getAngle();
 80019d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fa26 	bl	8000e28 <_ZN7Encoder8getAngleEv>
 80019dc:	eef0 7a40 	vmov.f32	s15, s0
 80019e0:	4b2d      	ldr	r3, [pc, #180]	; (8001a98 <PID3Node+0x1b8>)
 80019e2:	edc3 7a00 	vstr	s15, [r3]
		output_pid_3 = pid3.updatePID(robot_info_handler->angle_3, current_angle_3);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80019ec:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <PID3Node+0x1b8>)
 80019ee:	ed93 7a00 	vldr	s14, [r3]
 80019f2:	f107 030c 	add.w	r3, r7, #12
 80019f6:	eef0 0a47 	vmov.f32	s1, s14
 80019fa:	eeb0 0a67 	vmov.f32	s0, s15
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fd2c 	bl	800145c <_ZN3PID9updatePIDEff>
 8001a04:	eef0 7a40 	vmov.f32	s15, s0
 8001a08:	4b26      	ldr	r3, [pc, #152]	; (8001aa4 <PID3Node+0x1c4>)
 8001a0a:	edc3 7a00 	vstr	s15, [r3]
		if(output_pid_3 > 0) motor3.turnLeft(output_pid_3);
 8001a0e:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <PID3Node+0x1c4>)
 8001a10:	edd3 7a00 	vldr	s15, [r3]
 8001a14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1c:	dd0c      	ble.n	8001a38 <PID3Node+0x158>
 8001a1e:	4b21      	ldr	r3, [pc, #132]	; (8001aa4 <PID3Node+0x1c4>)
 8001a20:	edd3 7a00 	vldr	s15, [r3]
 8001a24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a28:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a2c:	ee17 1a90 	vmov	r1, s15
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fa91 	bl	8000f58 <_ZN5Motor8turnLeftEm>
 8001a36:	e015      	b.n	8001a64 <PID3Node+0x184>
		else if(output_pid_3 < 0) motor3.turnRight(-output_pid_3);
 8001a38:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <PID3Node+0x1c4>)
 8001a3a:	edd3 7a00 	vldr	s15, [r3]
 8001a3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a46:	d50d      	bpl.n	8001a64 <PID3Node+0x184>
 8001a48:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <PID3Node+0x1c4>)
 8001a4a:	edd3 7a00 	vldr	s15, [r3]
 8001a4e:	eef1 7a67 	vneg.f32	s15, s15
 8001a52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a56:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a5a:	ee17 1a90 	vmov	r1, s15
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff facc 	bl	8000ffc <_ZN5Motor9turnRightEm>
		osDelay(PID_UPDATE_TIME_mS);
 8001a64:	203c      	movs	r0, #60	; 0x3c
 8001a66:	f004 f89e 	bl	8005ba6 <osDelay>
		if(hall_3_flag == 1){
 8001a6a:	e798      	b.n	800199e <PID3Node+0xbe>
 8001a6c:	080082f0 	.word	0x080082f0
 8001a70:	080082f8 	.word	0x080082f8
 8001a74:	08008300 	.word	0x08008300
 8001a78:	45872000 	.word	0x45872000
 8001a7c:	20004178 	.word	0x20004178
 8001a80:	3d75c28f 	.word	0x3d75c28f
 8001a84:	c47a0000 	.word	0xc47a0000
 8001a88:	447a0000 	.word	0x447a0000
 8001a8c:	3dcccccd 	.word	0x3dcccccd
 8001a90:	428c0000 	.word	0x428c0000
 8001a94:	40020c00 	.word	0x40020c00
 8001a98:	20000068 	.word	0x20000068
 8001a9c:	20000070 	.word	0x20000070
 8001aa0:	20000074 	.word	0x20000074
 8001aa4:	2000006c 	.word	0x2000006c

08001aa8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4a07      	ldr	r2, [pc, #28]	; (8001ad4 <vApplicationGetIdleTaskMemory+0x2c>)
 8001ab8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	4a06      	ldr	r2, [pc, #24]	; (8001ad8 <vApplicationGetIdleTaskMemory+0x30>)
 8001abe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2280      	movs	r2, #128	; 0x80
 8001ac4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001ac6:	bf00      	nop
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000078 	.word	0x20000078
 8001ad8:	200000cc 	.word	0x200000cc

08001adc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001adc:	b5b0      	push	{r4, r5, r7, lr}
 8001ade:	b0a6      	sub	sp, #152	; 0x98
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of mutex */
  osMutexDef(mutex);
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  mutexHandle = osMutexCreate(osMutex(mutex));
 8001aee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001af2:	4618      	mov	r0, r3
 8001af4:	f004 f86b 	bl	8005bce <osMutexCreate>
 8001af8:	4603      	mov	r3, r0
 8001afa:	4a31      	ldr	r2, [pc, #196]	; (8001bc0 <MX_FREERTOS_Init+0xe4>)
 8001afc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8001afe:	4b31      	ldr	r3, [pc, #196]	; (8001bc4 <MX_FREERTOS_Init+0xe8>)
 8001b00:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001b04:	461d      	mov	r5, r3
 8001b06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001b12:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b16:	2100      	movs	r1, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f003 fff8 	bl	8005b0e <osThreadCreate>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4a29      	ldr	r2, [pc, #164]	; (8001bc8 <MX_FREERTOS_Init+0xec>)
 8001b22:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskPID1 */
  osThreadDef(taskPID1, startPID1, osPriorityIdle, 0, 512);
 8001b24:	4b29      	ldr	r3, [pc, #164]	; (8001bcc <MX_FREERTOS_Init+0xf0>)
 8001b26:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001b2a:	461d      	mov	r5, r3
 8001b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskPID1Handle = osThreadCreate(osThread(taskPID1), NULL);
 8001b38:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f003 ffe5 	bl	8005b0e <osThreadCreate>
 8001b44:	4603      	mov	r3, r0
 8001b46:	4a22      	ldr	r2, [pc, #136]	; (8001bd0 <MX_FREERTOS_Init+0xf4>)
 8001b48:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskPID2 */
  osThreadDef(taskPID2, startPID2, osPriorityIdle, 0, 512);
 8001b4a:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <MX_FREERTOS_Init+0xf8>)
 8001b4c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001b50:	461d      	mov	r5, r3
 8001b52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskPID2Handle = osThreadCreate(osThread(taskPID2), NULL);
 8001b5e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b62:	2100      	movs	r1, #0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f003 ffd2 	bl	8005b0e <osThreadCreate>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4a1a      	ldr	r2, [pc, #104]	; (8001bd8 <MX_FREERTOS_Init+0xfc>)
 8001b6e:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskPID3 */
  osThreadDef(taskPID3, startPID3, osPriorityNormal, 0, 512);
 8001b70:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <MX_FREERTOS_Init+0x100>)
 8001b72:	f107 0420 	add.w	r4, r7, #32
 8001b76:	461d      	mov	r5, r3
 8001b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskPID3Handle = osThreadCreate(osThread(taskPID3), NULL);
 8001b84:	f107 0320 	add.w	r3, r7, #32
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f003 ffbf 	bl	8005b0e <osThreadCreate>
 8001b90:	4603      	mov	r3, r0
 8001b92:	4a13      	ldr	r2, [pc, #76]	; (8001be0 <MX_FREERTOS_Init+0x104>)
 8001b94:	6013      	str	r3, [r2, #0]

  /* definition and creation of ROSComms */
  osThreadDef(ROSComms, startROSComms, osPriorityNormal, 0, 1024);
 8001b96:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <MX_FREERTOS_Init+0x108>)
 8001b98:	1d3c      	adds	r4, r7, #4
 8001b9a:	461d      	mov	r5, r3
 8001b9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ba0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ba4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ROSCommsHandle = osThreadCreate(osThread(ROSComms), NULL);
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	2100      	movs	r1, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f003 ffae 	bl	8005b0e <osThreadCreate>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4a0c      	ldr	r2, [pc, #48]	; (8001be8 <MX_FREERTOS_Init+0x10c>)
 8001bb6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001bb8:	bf00      	nop
 8001bba:	3798      	adds	r7, #152	; 0x98
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bdb0      	pop	{r4, r5, r7, pc}
 8001bc0:	2000402c 	.word	0x2000402c
 8001bc4:	08008344 	.word	0x08008344
 8001bc8:	20004020 	.word	0x20004020
 8001bcc:	08008360 	.word	0x08008360
 8001bd0:	20004028 	.word	0x20004028
 8001bd4:	0800837c 	.word	0x0800837c
 8001bd8:	20004034 	.word	0x20004034
 8001bdc:	08008398 	.word	0x08008398
 8001be0:	20004024 	.word	0x20004024
 8001be4:	080083b4 	.word	0x080083b4
 8001be8:	20004030 	.word	0x20004030

08001bec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8001bf4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bf8:	4803      	ldr	r0, [pc, #12]	; (8001c08 <StartDefaultTask+0x1c>)
 8001bfa:	f001 fac8 	bl	800318e <HAL_GPIO_TogglePin>
    osDelay(2000);
 8001bfe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c02:	f003 ffd0 	bl	8005ba6 <osDelay>
	HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8001c06:	e7f5      	b.n	8001bf4 <StartDefaultTask+0x8>
 8001c08:	40021000 	.word	0x40021000

08001c0c <startPID1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPID1 */
void startPID1(void const * argument)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPID1 */
	PID1Node(&robot_info_handler);
 8001c14:	4803      	ldr	r0, [pc, #12]	; (8001c24 <startPID1+0x18>)
 8001c16:	f7ff fcab 	bl	8001570 <PID1Node>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8001c1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c1e:	f003 ffc2 	bl	8005ba6 <osDelay>
 8001c22:	e7fa      	b.n	8001c1a <startPID1+0xe>
 8001c24:	20004038 	.word	0x20004038

08001c28 <startPID2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPID2 */
void startPID2(void const * argument)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPID2 */
	PID2Node(&robot_info_handler);
 8001c30:	4803      	ldr	r0, [pc, #12]	; (8001c40 <startPID2+0x18>)
 8001c32:	f7ff fd73 	bl	800171c <PID2Node>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8001c36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c3a:	f003 ffb4 	bl	8005ba6 <osDelay>
 8001c3e:	e7fa      	b.n	8001c36 <startPID2+0xe>
 8001c40:	20004038 	.word	0x20004038

08001c44 <startPID3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPID3 */
void startPID3(void const * argument)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPID3 */
	PID3Node(&robot_info_handler);
 8001c4c:	4803      	ldr	r0, [pc, #12]	; (8001c5c <startPID3+0x18>)
 8001c4e:	f7ff fe47 	bl	80018e0 <PID3Node>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8001c52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c56:	f003 ffa6 	bl	8005ba6 <osDelay>
 8001c5a:	e7fa      	b.n	8001c52 <startPID3+0xe>
 8001c5c:	20004038 	.word	0x20004038

08001c60 <startROSComms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startROSComms */
void startROSComms(void const * argument)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startROSComms */
	robotInfoInit(&robot_info_handler, &mutexHandle);
 8001c68:	4905      	ldr	r1, [pc, #20]	; (8001c80 <startROSComms+0x20>)
 8001c6a:	4806      	ldr	r0, [pc, #24]	; (8001c84 <startROSComms+0x24>)
 8001c6c:	f7ff f84a 	bl	8000d04 <robotInfoInit>
	startSerialComms(&robot_info_handler);
 8001c70:	4804      	ldr	r0, [pc, #16]	; (8001c84 <startROSComms+0x24>)
 8001c72:	f7ff fb07 	bl	8001284 <startSerialComms>
  /* Infinite loop */
  for(;;)
  {
	osDelay(1);
 8001c76:	2001      	movs	r0, #1
 8001c78:	f003 ff95 	bl	8005ba6 <osDelay>
 8001c7c:	e7fb      	b.n	8001c76 <startROSComms+0x16>
 8001c7e:	bf00      	nop
 8001c80:	2000402c 	.word	0x2000402c
 8001c84:	20004038 	.word	0x20004038

08001c88 <HAL_GPIO_EXTI_Callback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
// Callback function for external gpio interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_6){
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	2b40      	cmp	r3, #64	; 0x40
 8001c96:	d103      	bne.n	8001ca0 <HAL_GPIO_EXTI_Callback+0x18>
		hall_2_flag = 1;
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <HAL_GPIO_EXTI_Callback+0x40>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]
		hall_3_flag = 1;
	}
	else if(GPIO_Pin == GPIO_PIN_7){						// Change PIN for hall 1
		hall_1_flag = 1;
	}
}
 8001c9e:	e00c      	b.n	8001cba <HAL_GPIO_EXTI_Callback+0x32>
	else if(GPIO_Pin == GPIO_PIN_5){						// Change for PIN for hall 3
 8001ca0:	88fb      	ldrh	r3, [r7, #6]
 8001ca2:	2b20      	cmp	r3, #32
 8001ca4:	d103      	bne.n	8001cae <HAL_GPIO_EXTI_Callback+0x26>
		hall_3_flag = 1;
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_GPIO_EXTI_Callback+0x44>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
}
 8001cac:	e005      	b.n	8001cba <HAL_GPIO_EXTI_Callback+0x32>
	else if(GPIO_Pin == GPIO_PIN_7){						// Change PIN for hall 1
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	2b80      	cmp	r3, #128	; 0x80
 8001cb2:	d102      	bne.n	8001cba <HAL_GPIO_EXTI_Callback+0x32>
		hall_1_flag = 1;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_GPIO_EXTI_Callback+0x48>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20000060 	.word	0x20000060
 8001ccc:	20000070 	.word	0x20000070
 8001cd0:	20000054 	.word	0x20000054

08001cd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08c      	sub	sp, #48	; 0x30
 8001cd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cda:	f107 031c 	add.w	r3, r7, #28
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
 8001ce6:	60da      	str	r2, [r3, #12]
 8001ce8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
 8001cee:	4b6e      	ldr	r3, [pc, #440]	; (8001ea8 <MX_GPIO_Init+0x1d4>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a6d      	ldr	r2, [pc, #436]	; (8001ea8 <MX_GPIO_Init+0x1d4>)
 8001cf4:	f043 0310 	orr.w	r3, r3, #16
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b6b      	ldr	r3, [pc, #428]	; (8001ea8 <MX_GPIO_Init+0x1d4>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0310 	and.w	r3, r3, #16
 8001d02:	61bb      	str	r3, [r7, #24]
 8001d04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	4b67      	ldr	r3, [pc, #412]	; (8001ea8 <MX_GPIO_Init+0x1d4>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a66      	ldr	r2, [pc, #408]	; (8001ea8 <MX_GPIO_Init+0x1d4>)
 8001d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b64      	ldr	r3, [pc, #400]	; (8001ea8 <MX_GPIO_Init+0x1d4>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	4b60      	ldr	r3, [pc, #384]	; (8001ea8 <MX_GPIO_Init+0x1d4>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a5f      	ldr	r2, [pc, #380]	; (8001ea8 <MX_GPIO_Init+0x1d4>)
 8001d2c:	f043 0304 	orr.w	r3, r3, #4
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b5d      	ldr	r3, [pc, #372]	; (8001ea8 <MX_GPIO_Init+0x1d4>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	4b59      	ldr	r3, [pc, #356]	; (8001ea8 <MX_GPIO_Init+0x1d4>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a58      	ldr	r2, [pc, #352]	; (8001ea8 <MX_GPIO_Init+0x1d4>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b56      	ldr	r3, [pc, #344]	; (8001ea8 <MX_GPIO_Init+0x1d4>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	4b52      	ldr	r3, [pc, #328]	; (8001ea8 <MX_GPIO_Init+0x1d4>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a51      	ldr	r2, [pc, #324]	; (8001ea8 <MX_GPIO_Init+0x1d4>)
 8001d64:	f043 0302 	orr.w	r3, r3, #2
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b4f      	ldr	r3, [pc, #316]	; (8001ea8 <MX_GPIO_Init+0x1d4>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	4b4b      	ldr	r3, [pc, #300]	; (8001ea8 <MX_GPIO_Init+0x1d4>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a4a      	ldr	r2, [pc, #296]	; (8001ea8 <MX_GPIO_Init+0x1d4>)
 8001d80:	f043 0308 	orr.w	r3, r3, #8
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b48      	ldr	r3, [pc, #288]	; (8001ea8 <MX_GPIO_Init+0x1d4>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	607b      	str	r3, [r7, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MOTOR_2_R_Pin|MOTOR_2_L_Pin|GPIO_PIN_7|LED_2_Pin, GPIO_PIN_RESET);
 8001d92:	2200      	movs	r2, #0
 8001d94:	f248 0194 	movw	r1, #32916	; 0x8094
 8001d98:	4844      	ldr	r0, [pc, #272]	; (8001eac <MX_GPIO_Init+0x1d8>)
 8001d9a:	f001 f9df 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|MOTOR_1_R_Pin, GPIO_PIN_RESET);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	210a      	movs	r1, #10
 8001da2:	4843      	ldr	r0, [pc, #268]	; (8001eb0 <MX_GPIO_Init+0x1dc>)
 8001da4:	f001 f9da 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_1_L_GPIO_Port, MOTOR_1_L_Pin, GPIO_PIN_RESET);
 8001da8:	2200      	movs	r2, #0
 8001daa:	2110      	movs	r1, #16
 8001dac:	4841      	ldr	r0, [pc, #260]	; (8001eb4 <MX_GPIO_Init+0x1e0>)
 8001dae:	f001 f9d5 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001db2:	2200      	movs	r2, #0
 8001db4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001db8:	483f      	ldr	r0, [pc, #252]	; (8001eb8 <MX_GPIO_Init+0x1e4>)
 8001dba:	f001 f9cf 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR_3_R_Pin|MOTOR_3_L_Pin, GPIO_PIN_RESET);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8001dc4:	483d      	ldr	r0, [pc, #244]	; (8001ebc <MX_GPIO_Init+0x1e8>)
 8001dc6:	f001 f9c9 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PE7 PEPin */
  GPIO_InitStruct.Pin = MOTOR_2_R_Pin|MOTOR_2_L_Pin|GPIO_PIN_7|LED_2_Pin;
 8001dca:	f248 0394 	movw	r3, #32916	; 0x8094
 8001dce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ddc:	f107 031c 	add.w	r3, r7, #28
 8001de0:	4619      	mov	r1, r3
 8001de2:	4832      	ldr	r0, [pc, #200]	; (8001eac <MX_GPIO_Init+0x1d8>)
 8001de4:	f001 f806 	bl	8002df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|MOTOR_1_R_Pin;
 8001de8:	230a      	movs	r3, #10
 8001dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dec:	2301      	movs	r3, #1
 8001dee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	482c      	ldr	r0, [pc, #176]	; (8001eb0 <MX_GPIO_Init+0x1dc>)
 8001e00:	f000 fff8 	bl	8002df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_1_L_Pin;
 8001e04:	2310      	movs	r3, #16
 8001e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MOTOR_1_L_GPIO_Port, &GPIO_InitStruct);
 8001e14:	f107 031c 	add.w	r3, r7, #28
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4826      	ldr	r0, [pc, #152]	; (8001eb4 <MX_GPIO_Init+0x1e0>)
 8001e1c:	f000 ffea 	bl	8002df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001e20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e26:	2300      	movs	r3, #0
 8001e28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001e2e:	f107 031c 	add.w	r3, r7, #28
 8001e32:	4619      	mov	r1, r3
 8001e34:	481d      	ldr	r0, [pc, #116]	; (8001eac <MX_GPIO_Init+0x1d8>)
 8001e36:	f000 ffdd 	bl	8002df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001e3a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e40:	2301      	movs	r3, #1
 8001e42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4c:	f107 031c 	add.w	r3, r7, #28
 8001e50:	4619      	mov	r1, r3
 8001e52:	4819      	ldr	r0, [pc, #100]	; (8001eb8 <MX_GPIO_Init+0x1e4>)
 8001e54:	f000 ffce 	bl	8002df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = MOTOR_3_R_Pin|MOTOR_3_L_Pin;
 8001e58:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e66:	2300      	movs	r3, #0
 8001e68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e6a:	f107 031c 	add.w	r3, r7, #28
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4812      	ldr	r0, [pc, #72]	; (8001ebc <MX_GPIO_Init+0x1e8>)
 8001e72:	f000 ffbf 	bl	8002df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e76:	23e0      	movs	r3, #224	; 0xe0
 8001e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e7a:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <MX_GPIO_Init+0x1ec>)
 8001e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e82:	f107 031c 	add.w	r3, r7, #28
 8001e86:	4619      	mov	r1, r3
 8001e88:	480c      	ldr	r0, [pc, #48]	; (8001ebc <MX_GPIO_Init+0x1e8>)
 8001e8a:	f000 ffb3 	bl	8002df4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2105      	movs	r1, #5
 8001e92:	2017      	movs	r0, #23
 8001e94:	f000 fef2 	bl	8002c7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e98:	2017      	movs	r0, #23
 8001e9a:	f000 ff0b 	bl	8002cb4 <HAL_NVIC_EnableIRQ>

}
 8001e9e:	bf00      	nop
 8001ea0:	3730      	adds	r7, #48	; 0x30
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40020800 	.word	0x40020800
 8001eb4:	40020000 	.word	0x40020000
 8001eb8:	40020400 	.word	0x40020400
 8001ebc:	40020c00 	.word	0x40020c00
 8001ec0:	10210000 	.word	0x10210000

08001ec4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ec8:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <MX_I2C1_Init+0x50>)
 8001eca:	4a13      	ldr	r2, [pc, #76]	; (8001f18 <MX_I2C1_Init+0x54>)
 8001ecc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ece:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <MX_I2C1_Init+0x50>)
 8001ed0:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <MX_I2C1_Init+0x58>)
 8001ed2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <MX_I2C1_Init+0x50>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001eda:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <MX_I2C1_Init+0x50>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <MX_I2C1_Init+0x50>)
 8001ee2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ee6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <MX_I2C1_Init+0x50>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <MX_I2C1_Init+0x50>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ef4:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <MX_I2C1_Init+0x50>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <MX_I2C1_Init+0x50>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f00:	4804      	ldr	r0, [pc, #16]	; (8001f14 <MX_I2C1_Init+0x50>)
 8001f02:	f001 f977 	bl	80031f4 <HAL_I2C_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f0c:	f000 f8e8 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	2000404c 	.word	0x2000404c
 8001f18:	40005400 	.word	0x40005400
 8001f1c:	000186a0 	.word	0x000186a0

08001f20 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a19      	ldr	r2, [pc, #100]	; (8001fa4 <HAL_I2C_MspInit+0x84>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d12b      	bne.n	8001f9a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <HAL_I2C_MspInit+0x88>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <HAL_I2C_MspInit+0x88>)
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_I2C_MspInit+0x88>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f5e:	23c0      	movs	r3, #192	; 0xc0
 8001f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f62:	2312      	movs	r3, #18
 8001f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f66:	2301      	movs	r3, #1
 8001f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f6e:	2304      	movs	r3, #4
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	4619      	mov	r1, r3
 8001f78:	480c      	ldr	r0, [pc, #48]	; (8001fac <HAL_I2C_MspInit+0x8c>)
 8001f7a:	f000 ff3b 	bl	8002df4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <HAL_I2C_MspInit+0x88>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	4a08      	ldr	r2, [pc, #32]	; (8001fa8 <HAL_I2C_MspInit+0x88>)
 8001f88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_I2C_MspInit+0x88>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	3728      	adds	r7, #40	; 0x28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40005400 	.word	0x40005400
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40020400 	.word	0x40020400

08001fb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fb4:	f000 fd68 	bl	8002a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fb8:	f000 f816 	bl	8001fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fbc:	f7ff fe8a 	bl	8001cd4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001fc0:	f000 fc32 	bl	8002828 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001fc4:	f000 fa2e 	bl	8002424 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001fc8:	f000 f96a 	bl	80022a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001fcc:	f000 f9d6 	bl	800237c <MX_TIM3_Init>
  MX_TIM8_Init();
 8001fd0:	f000 fa7c 	bl	80024cc <MX_TIM8_Init>
  MX_UART5_Init();
 8001fd4:	f000 fbfe 	bl	80027d4 <MX_UART5_Init>
  MX_I2C1_Init();
 8001fd8:	f7ff ff74 	bl	8001ec4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001fdc:	f7ff fd7e 	bl	8001adc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001fe0:	f003 fd8e 	bl	8005b00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001fe4:	e7fe      	b.n	8001fe4 <main+0x34>
	...

08001fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b094      	sub	sp, #80	; 0x50
 8001fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fee:	f107 0320 	add.w	r3, r7, #32
 8001ff2:	2230      	movs	r2, #48	; 0x30
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f006 f952 	bl	80082a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ffc:	f107 030c 	add.w	r3, r7, #12
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800200c:	2300      	movs	r3, #0
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	4b28      	ldr	r3, [pc, #160]	; (80020b4 <SystemClock_Config+0xcc>)
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	4a27      	ldr	r2, [pc, #156]	; (80020b4 <SystemClock_Config+0xcc>)
 8002016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800201a:	6413      	str	r3, [r2, #64]	; 0x40
 800201c:	4b25      	ldr	r3, [pc, #148]	; (80020b4 <SystemClock_Config+0xcc>)
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002028:	2300      	movs	r3, #0
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <SystemClock_Config+0xd0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a21      	ldr	r2, [pc, #132]	; (80020b8 <SystemClock_Config+0xd0>)
 8002032:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	4b1f      	ldr	r3, [pc, #124]	; (80020b8 <SystemClock_Config+0xd0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002044:	2301      	movs	r3, #1
 8002046:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002048:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800204e:	2302      	movs	r3, #2
 8002050:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002052:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002056:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002058:	2304      	movs	r3, #4
 800205a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800205c:	23a8      	movs	r3, #168	; 0xa8
 800205e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002060:	2302      	movs	r3, #2
 8002062:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002064:	2304      	movs	r3, #4
 8002066:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002068:	f107 0320 	add.w	r3, r7, #32
 800206c:	4618      	mov	r0, r3
 800206e:	f001 fa05 	bl	800347c <HAL_RCC_OscConfig>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002078:	f000 f832 	bl	80020e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800207c:	230f      	movs	r3, #15
 800207e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002080:	2302      	movs	r3, #2
 8002082:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002088:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800208c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800208e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002092:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002094:	f107 030c 	add.w	r3, r7, #12
 8002098:	2105      	movs	r1, #5
 800209a:	4618      	mov	r0, r3
 800209c:	f001 fc66 	bl	800396c <HAL_RCC_ClockConfig>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80020a6:	f000 f81b 	bl	80020e0 <Error_Handler>
  }
}
 80020aa:	bf00      	nop
 80020ac:	3750      	adds	r7, #80	; 0x50
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40007000 	.word	0x40007000

080020bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a04      	ldr	r2, [pc, #16]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d101      	bne.n	80020d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020ce:	f000 fcfd 	bl	8002acc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40010000 	.word	0x40010000

080020e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	607b      	str	r3, [r7, #4]
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_MspInit+0x54>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	4a11      	ldr	r2, [pc, #68]	; (8002144 <HAL_MspInit+0x54>)
 8002100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002104:	6453      	str	r3, [r2, #68]	; 0x44
 8002106:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <HAL_MspInit+0x54>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	603b      	str	r3, [r7, #0]
 8002116:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_MspInit+0x54>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <HAL_MspInit+0x54>)
 800211c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002120:	6413      	str	r3, [r2, #64]	; 0x40
 8002122:	4b08      	ldr	r3, [pc, #32]	; (8002144 <HAL_MspInit+0x54>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800212e:	2200      	movs	r2, #0
 8002130:	210f      	movs	r1, #15
 8002132:	f06f 0001 	mvn.w	r0, #1
 8002136:	f000 fda1 	bl	8002c7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800

08002148 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08c      	sub	sp, #48	; 0x30
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002158:	2200      	movs	r2, #0
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	2019      	movs	r0, #25
 800215e:	f000 fd8d 	bl	8002c7c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002162:	2019      	movs	r0, #25
 8002164:	f000 fda6 	bl	8002cb4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002168:	2300      	movs	r3, #0
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	4b1f      	ldr	r3, [pc, #124]	; (80021ec <HAL_InitTick+0xa4>)
 800216e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002170:	4a1e      	ldr	r2, [pc, #120]	; (80021ec <HAL_InitTick+0xa4>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6453      	str	r3, [r2, #68]	; 0x44
 8002178:	4b1c      	ldr	r3, [pc, #112]	; (80021ec <HAL_InitTick+0xa4>)
 800217a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002184:	f107 0210 	add.w	r2, r7, #16
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	4611      	mov	r1, r2
 800218e:	4618      	mov	r0, r3
 8002190:	f001 fde8 	bl	8003d64 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002194:	f001 fdd2 	bl	8003d3c <HAL_RCC_GetPCLK2Freq>
 8002198:	4603      	mov	r3, r0
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800219e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a0:	4a13      	ldr	r2, [pc, #76]	; (80021f0 <HAL_InitTick+0xa8>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	0c9b      	lsrs	r3, r3, #18
 80021a8:	3b01      	subs	r3, #1
 80021aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_InitTick+0xac>)
 80021ae:	4a12      	ldr	r2, [pc, #72]	; (80021f8 <HAL_InitTick+0xb0>)
 80021b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80021b2:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <HAL_InitTick+0xac>)
 80021b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021b8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80021ba:	4a0e      	ldr	r2, [pc, #56]	; (80021f4 <HAL_InitTick+0xac>)
 80021bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021be:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <HAL_InitTick+0xac>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c6:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_InitTick+0xac>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80021cc:	4809      	ldr	r0, [pc, #36]	; (80021f4 <HAL_InitTick+0xac>)
 80021ce:	f001 fdfb 	bl	8003dc8 <HAL_TIM_Base_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d104      	bne.n	80021e2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80021d8:	4806      	ldr	r0, [pc, #24]	; (80021f4 <HAL_InitTick+0xac>)
 80021da:	f001 fe4f 	bl	8003e7c <HAL_TIM_Base_Start_IT>
 80021de:	4603      	mov	r3, r0
 80021e0:	e000      	b.n	80021e4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3730      	adds	r7, #48	; 0x30
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40023800 	.word	0x40023800
 80021f0:	431bde83 	.word	0x431bde83
 80021f4:	200040a0 	.word	0x200040a0
 80021f8:	40010000 	.word	0x40010000

080021fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800220e:	e7fe      	b.n	800220e <HardFault_Handler+0x4>

08002210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002214:	e7fe      	b.n	8002214 <MemManage_Handler+0x4>

08002216 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800221a:	e7fe      	b.n	800221a <BusFault_Handler+0x4>

0800221c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002220:	e7fe      	b.n	8002220 <UsageFault_Handler+0x4>

08002222 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002234:	2020      	movs	r0, #32
 8002236:	f000 ffc5 	bl	80031c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800223a:	2040      	movs	r0, #64	; 0x40
 800223c:	f000 ffc2 	bl	80031c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002240:	2080      	movs	r0, #128	; 0x80
 8002242:	f000 ffbf 	bl	80031c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002250:	4802      	ldr	r0, [pc, #8]	; (800225c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002252:	f002 f8cf 	bl	80043f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	200040a0 	.word	0x200040a0

08002260 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002264:	4802      	ldr	r0, [pc, #8]	; (8002270 <USART2_IRQHandler+0x10>)
 8002266:	f002 fec9 	bl	8004ffc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	2000424c 	.word	0x2000424c

08002274 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002278:	4b08      	ldr	r3, [pc, #32]	; (800229c <SystemInit+0x28>)
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227e:	4a07      	ldr	r2, [pc, #28]	; (800229c <SystemInit+0x28>)
 8002280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <SystemInit+0x28>)
 800228a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800228e:	609a      	str	r2, [r3, #8]
#endif
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08a      	sub	sp, #40	; 0x28
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a6:	f107 0320 	add.w	r3, r7, #32
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	605a      	str	r2, [r3, #4]
 80022b8:	609a      	str	r2, [r3, #8]
 80022ba:	60da      	str	r2, [r3, #12]
 80022bc:	611a      	str	r2, [r3, #16]
 80022be:	615a      	str	r2, [r3, #20]
 80022c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022c2:	4b2d      	ldr	r3, [pc, #180]	; (8002378 <MX_TIM2_Init+0xd8>)
 80022c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80022ca:	4b2b      	ldr	r3, [pc, #172]	; (8002378 <MX_TIM2_Init+0xd8>)
 80022cc:	2253      	movs	r2, #83	; 0x53
 80022ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d0:	4b29      	ldr	r3, [pc, #164]	; (8002378 <MX_TIM2_Init+0xd8>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80022d6:	4b28      	ldr	r3, [pc, #160]	; (8002378 <MX_TIM2_Init+0xd8>)
 80022d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022de:	4b26      	ldr	r3, [pc, #152]	; (8002378 <MX_TIM2_Init+0xd8>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022e4:	4b24      	ldr	r3, [pc, #144]	; (8002378 <MX_TIM2_Init+0xd8>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80022ea:	4823      	ldr	r0, [pc, #140]	; (8002378 <MX_TIM2_Init+0xd8>)
 80022ec:	f001 fe36 	bl	8003f5c <HAL_TIM_PWM_Init>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80022f6:	f7ff fef3 	bl	80020e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022fa:	2300      	movs	r3, #0
 80022fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022fe:	2300      	movs	r3, #0
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002302:	f107 0320 	add.w	r3, r7, #32
 8002306:	4619      	mov	r1, r3
 8002308:	481b      	ldr	r0, [pc, #108]	; (8002378 <MX_TIM2_Init+0xd8>)
 800230a:	f002 fcd7 	bl	8004cbc <HAL_TIMEx_MasterConfigSynchronization>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002314:	f7ff fee4 	bl	80020e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002318:	2360      	movs	r3, #96	; 0x60
 800231a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002320:	2300      	movs	r3, #0
 8002322:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002328:	1d3b      	adds	r3, r7, #4
 800232a:	2200      	movs	r2, #0
 800232c:	4619      	mov	r1, r3
 800232e:	4812      	ldr	r0, [pc, #72]	; (8002378 <MX_TIM2_Init+0xd8>)
 8002330:	f002 f968 	bl	8004604 <HAL_TIM_PWM_ConfigChannel>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800233a:	f7ff fed1 	bl	80020e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800233e:	1d3b      	adds	r3, r7, #4
 8002340:	2204      	movs	r2, #4
 8002342:	4619      	mov	r1, r3
 8002344:	480c      	ldr	r0, [pc, #48]	; (8002378 <MX_TIM2_Init+0xd8>)
 8002346:	f002 f95d 	bl	8004604 <HAL_TIM_PWM_ConfigChannel>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002350:	f7ff fec6 	bl	80020e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002354:	1d3b      	adds	r3, r7, #4
 8002356:	2208      	movs	r2, #8
 8002358:	4619      	mov	r1, r3
 800235a:	4807      	ldr	r0, [pc, #28]	; (8002378 <MX_TIM2_Init+0xd8>)
 800235c:	f002 f952 	bl	8004604 <HAL_TIM_PWM_ConfigChannel>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8002366:	f7ff febb 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800236a:	4803      	ldr	r0, [pc, #12]	; (8002378 <MX_TIM2_Init+0xd8>)
 800236c:	f000 f9da 	bl	8002724 <HAL_TIM_MspPostInit>

}
 8002370:	bf00      	nop
 8002372:	3728      	adds	r7, #40	; 0x28
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	200041c0 	.word	0x200041c0

0800237c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08c      	sub	sp, #48	; 0x30
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002382:	f107 030c 	add.w	r3, r7, #12
 8002386:	2224      	movs	r2, #36	; 0x24
 8002388:	2100      	movs	r1, #0
 800238a:	4618      	mov	r0, r3
 800238c:	f005 ff88 	bl	80082a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002390:	1d3b      	adds	r3, r7, #4
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002398:	4b20      	ldr	r3, [pc, #128]	; (800241c <MX_TIM3_Init+0xa0>)
 800239a:	4a21      	ldr	r2, [pc, #132]	; (8002420 <MX_TIM3_Init+0xa4>)
 800239c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800239e:	4b1f      	ldr	r3, [pc, #124]	; (800241c <MX_TIM3_Init+0xa0>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a4:	4b1d      	ldr	r3, [pc, #116]	; (800241c <MX_TIM3_Init+0xa0>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80023aa:	4b1c      	ldr	r3, [pc, #112]	; (800241c <MX_TIM3_Init+0xa0>)
 80023ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b2:	4b1a      	ldr	r3, [pc, #104]	; (800241c <MX_TIM3_Init+0xa0>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b8:	4b18      	ldr	r3, [pc, #96]	; (800241c <MX_TIM3_Init+0xa0>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80023be:	2301      	movs	r3, #1
 80023c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023c6:	2301      	movs	r3, #1
 80023c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023d2:	2300      	movs	r3, #0
 80023d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023d6:	2301      	movs	r3, #1
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023da:	2300      	movs	r3, #0
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80023e2:	f107 030c 	add.w	r3, r7, #12
 80023e6:	4619      	mov	r1, r3
 80023e8:	480c      	ldr	r0, [pc, #48]	; (800241c <MX_TIM3_Init+0xa0>)
 80023ea:	f001 fecf 	bl	800418c <HAL_TIM_Encoder_Init>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80023f4:	f7ff fe74 	bl	80020e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f8:	2300      	movs	r3, #0
 80023fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002400:	1d3b      	adds	r3, r7, #4
 8002402:	4619      	mov	r1, r3
 8002404:	4805      	ldr	r0, [pc, #20]	; (800241c <MX_TIM3_Init+0xa0>)
 8002406:	f002 fc59 	bl	8004cbc <HAL_TIMEx_MasterConfigSynchronization>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002410:	f7ff fe66 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002414:	bf00      	nop
 8002416:	3730      	adds	r7, #48	; 0x30
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20004178 	.word	0x20004178
 8002420:	40000400 	.word	0x40000400

08002424 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08c      	sub	sp, #48	; 0x30
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800242a:	f107 030c 	add.w	r3, r7, #12
 800242e:	2224      	movs	r2, #36	; 0x24
 8002430:	2100      	movs	r1, #0
 8002432:	4618      	mov	r0, r3
 8002434:	f005 ff34 	bl	80082a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002438:	1d3b      	adds	r3, r7, #4
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002440:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <MX_TIM4_Init+0xa0>)
 8002442:	4a21      	ldr	r2, [pc, #132]	; (80024c8 <MX_TIM4_Init+0xa4>)
 8002444:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002446:	4b1f      	ldr	r3, [pc, #124]	; (80024c4 <MX_TIM4_Init+0xa0>)
 8002448:	2200      	movs	r2, #0
 800244a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800244c:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <MX_TIM4_Init+0xa0>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20127;
 8002452:	4b1c      	ldr	r3, [pc, #112]	; (80024c4 <MX_TIM4_Init+0xa0>)
 8002454:	f644 629f 	movw	r2, #20127	; 0x4e9f
 8002458:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800245a:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <MX_TIM4_Init+0xa0>)
 800245c:	2200      	movs	r2, #0
 800245e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002460:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <MX_TIM4_Init+0xa0>)
 8002462:	2200      	movs	r2, #0
 8002464:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002466:	2301      	movs	r3, #1
 8002468:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800246e:	2301      	movs	r3, #1
 8002470:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002472:	2300      	movs	r3, #0
 8002474:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002476:	230f      	movs	r3, #15
 8002478:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800247a:	2300      	movs	r3, #0
 800247c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800247e:	2301      	movs	r3, #1
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002482:	2300      	movs	r3, #0
 8002484:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002486:	230f      	movs	r3, #15
 8002488:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800248a:	f107 030c 	add.w	r3, r7, #12
 800248e:	4619      	mov	r1, r3
 8002490:	480c      	ldr	r0, [pc, #48]	; (80024c4 <MX_TIM4_Init+0xa0>)
 8002492:	f001 fe7b 	bl	800418c <HAL_TIM_Encoder_Init>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800249c:	f7ff fe20 	bl	80020e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a0:	2300      	movs	r3, #0
 80024a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	4619      	mov	r1, r3
 80024ac:	4805      	ldr	r0, [pc, #20]	; (80024c4 <MX_TIM4_Init+0xa0>)
 80024ae:	f002 fc05 	bl	8004cbc <HAL_TIMEx_MasterConfigSynchronization>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80024b8:	f7ff fe12 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80024bc:	bf00      	nop
 80024be:	3730      	adds	r7, #48	; 0x30
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20004130 	.word	0x20004130
 80024c8:	40000800 	.word	0x40000800

080024cc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08c      	sub	sp, #48	; 0x30
 80024d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024d2:	f107 030c 	add.w	r3, r7, #12
 80024d6:	2224      	movs	r2, #36	; 0x24
 80024d8:	2100      	movs	r1, #0
 80024da:	4618      	mov	r0, r3
 80024dc:	f005 fee0 	bl	80082a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e0:	1d3b      	adds	r3, r7, #4
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80024e8:	4b22      	ldr	r3, [pc, #136]	; (8002574 <MX_TIM8_Init+0xa8>)
 80024ea:	4a23      	ldr	r2, [pc, #140]	; (8002578 <MX_TIM8_Init+0xac>)
 80024ec:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80024ee:	4b21      	ldr	r3, [pc, #132]	; (8002574 <MX_TIM8_Init+0xa8>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f4:	4b1f      	ldr	r3, [pc, #124]	; (8002574 <MX_TIM8_Init+0xa8>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80024fa:	4b1e      	ldr	r3, [pc, #120]	; (8002574 <MX_TIM8_Init+0xa8>)
 80024fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002500:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002502:	4b1c      	ldr	r3, [pc, #112]	; (8002574 <MX_TIM8_Init+0xa8>)
 8002504:	2200      	movs	r2, #0
 8002506:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002508:	4b1a      	ldr	r3, [pc, #104]	; (8002574 <MX_TIM8_Init+0xa8>)
 800250a:	2200      	movs	r2, #0
 800250c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800250e:	4b19      	ldr	r3, [pc, #100]	; (8002574 <MX_TIM8_Init+0xa8>)
 8002510:	2200      	movs	r2, #0
 8002512:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002514:	2301      	movs	r3, #1
 8002516:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002518:	2300      	movs	r3, #0
 800251a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800251c:	2301      	movs	r3, #1
 800251e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002520:	2300      	movs	r3, #0
 8002522:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002528:	2300      	movs	r3, #0
 800252a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800252c:	2301      	movs	r3, #1
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002530:	2300      	movs	r3, #0
 8002532:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002538:	f107 030c 	add.w	r3, r7, #12
 800253c:	4619      	mov	r1, r3
 800253e:	480d      	ldr	r0, [pc, #52]	; (8002574 <MX_TIM8_Init+0xa8>)
 8002540:	f001 fe24 	bl	800418c <HAL_TIM_Encoder_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800254a:	f7ff fdc9 	bl	80020e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800254e:	2300      	movs	r3, #0
 8002550:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	4619      	mov	r1, r3
 800255a:	4806      	ldr	r0, [pc, #24]	; (8002574 <MX_TIM8_Init+0xa8>)
 800255c:	f002 fbae 	bl	8004cbc <HAL_TIMEx_MasterConfigSynchronization>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8002566:	f7ff fdbb 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800256a:	bf00      	nop
 800256c:	3730      	adds	r7, #48	; 0x30
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	200040e8 	.word	0x200040e8
 8002578:	40010400 	.word	0x40010400

0800257c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800258c:	d10d      	bne.n	80025aa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	4a08      	ldr	r2, [pc, #32]	; (80025b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	6413      	str	r3, [r2, #64]	; 0x40
 800259e:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_TIM_PWM_MspInit+0x3c>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80025aa:	bf00      	nop
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800

080025bc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08e      	sub	sp, #56	; 0x38
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	60da      	str	r2, [r3, #12]
 80025d2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a4b      	ldr	r2, [pc, #300]	; (8002708 <HAL_TIM_Encoder_MspInit+0x14c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d12c      	bne.n	8002638 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	623b      	str	r3, [r7, #32]
 80025e2:	4b4a      	ldr	r3, [pc, #296]	; (800270c <HAL_TIM_Encoder_MspInit+0x150>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	4a49      	ldr	r2, [pc, #292]	; (800270c <HAL_TIM_Encoder_MspInit+0x150>)
 80025e8:	f043 0302 	orr.w	r3, r3, #2
 80025ec:	6413      	str	r3, [r2, #64]	; 0x40
 80025ee:	4b47      	ldr	r3, [pc, #284]	; (800270c <HAL_TIM_Encoder_MspInit+0x150>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	623b      	str	r3, [r7, #32]
 80025f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	4b43      	ldr	r3, [pc, #268]	; (800270c <HAL_TIM_Encoder_MspInit+0x150>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	4a42      	ldr	r2, [pc, #264]	; (800270c <HAL_TIM_Encoder_MspInit+0x150>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6313      	str	r3, [r2, #48]	; 0x30
 800260a:	4b40      	ldr	r3, [pc, #256]	; (800270c <HAL_TIM_Encoder_MspInit+0x150>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	61fb      	str	r3, [r7, #28]
 8002614:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002616:	23c0      	movs	r3, #192	; 0xc0
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261a:	2302      	movs	r3, #2
 800261c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002622:	2300      	movs	r3, #0
 8002624:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002626:	2302      	movs	r3, #2
 8002628:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800262e:	4619      	mov	r1, r3
 8002630:	4837      	ldr	r0, [pc, #220]	; (8002710 <HAL_TIM_Encoder_MspInit+0x154>)
 8002632:	f000 fbdf 	bl	8002df4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002636:	e063      	b.n	8002700 <HAL_TIM_Encoder_MspInit+0x144>
  else if(tim_encoderHandle->Instance==TIM4)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a35      	ldr	r2, [pc, #212]	; (8002714 <HAL_TIM_Encoder_MspInit+0x158>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d12d      	bne.n	800269e <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	61bb      	str	r3, [r7, #24]
 8002646:	4b31      	ldr	r3, [pc, #196]	; (800270c <HAL_TIM_Encoder_MspInit+0x150>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	4a30      	ldr	r2, [pc, #192]	; (800270c <HAL_TIM_Encoder_MspInit+0x150>)
 800264c:	f043 0304 	orr.w	r3, r3, #4
 8002650:	6413      	str	r3, [r2, #64]	; 0x40
 8002652:	4b2e      	ldr	r3, [pc, #184]	; (800270c <HAL_TIM_Encoder_MspInit+0x150>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	61bb      	str	r3, [r7, #24]
 800265c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	4b2a      	ldr	r3, [pc, #168]	; (800270c <HAL_TIM_Encoder_MspInit+0x150>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	4a29      	ldr	r2, [pc, #164]	; (800270c <HAL_TIM_Encoder_MspInit+0x150>)
 8002668:	f043 0308 	orr.w	r3, r3, #8
 800266c:	6313      	str	r3, [r2, #48]	; 0x30
 800266e:	4b27      	ldr	r3, [pc, #156]	; (800270c <HAL_TIM_Encoder_MspInit+0x150>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800267a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	2302      	movs	r3, #2
 8002682:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002688:	2300      	movs	r3, #0
 800268a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800268c:	2302      	movs	r3, #2
 800268e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002694:	4619      	mov	r1, r3
 8002696:	4820      	ldr	r0, [pc, #128]	; (8002718 <HAL_TIM_Encoder_MspInit+0x15c>)
 8002698:	f000 fbac 	bl	8002df4 <HAL_GPIO_Init>
}
 800269c:	e030      	b.n	8002700 <HAL_TIM_Encoder_MspInit+0x144>
  else if(tim_encoderHandle->Instance==TIM8)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a1e      	ldr	r2, [pc, #120]	; (800271c <HAL_TIM_Encoder_MspInit+0x160>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d12b      	bne.n	8002700 <HAL_TIM_Encoder_MspInit+0x144>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80026a8:	2300      	movs	r3, #0
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	4b17      	ldr	r3, [pc, #92]	; (800270c <HAL_TIM_Encoder_MspInit+0x150>)
 80026ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b0:	4a16      	ldr	r2, [pc, #88]	; (800270c <HAL_TIM_Encoder_MspInit+0x150>)
 80026b2:	f043 0302 	orr.w	r3, r3, #2
 80026b6:	6453      	str	r3, [r2, #68]	; 0x44
 80026b8:	4b14      	ldr	r3, [pc, #80]	; (800270c <HAL_TIM_Encoder_MspInit+0x150>)
 80026ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c4:	2300      	movs	r3, #0
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	4b10      	ldr	r3, [pc, #64]	; (800270c <HAL_TIM_Encoder_MspInit+0x150>)
 80026ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026cc:	4a0f      	ldr	r2, [pc, #60]	; (800270c <HAL_TIM_Encoder_MspInit+0x150>)
 80026ce:	f043 0304 	orr.w	r3, r3, #4
 80026d2:	6313      	str	r3, [r2, #48]	; 0x30
 80026d4:	4b0d      	ldr	r3, [pc, #52]	; (800270c <HAL_TIM_Encoder_MspInit+0x150>)
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026e0:	23c0      	movs	r3, #192	; 0xc0
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e4:	2302      	movs	r3, #2
 80026e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ec:	2300      	movs	r3, #0
 80026ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80026f0:	2303      	movs	r3, #3
 80026f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f8:	4619      	mov	r1, r3
 80026fa:	4809      	ldr	r0, [pc, #36]	; (8002720 <HAL_TIM_Encoder_MspInit+0x164>)
 80026fc:	f000 fb7a 	bl	8002df4 <HAL_GPIO_Init>
}
 8002700:	bf00      	nop
 8002702:	3738      	adds	r7, #56	; 0x38
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40000400 	.word	0x40000400
 800270c:	40023800 	.word	0x40023800
 8002710:	40020000 	.word	0x40020000
 8002714:	40000800 	.word	0x40000800
 8002718:	40020c00 	.word	0x40020c00
 800271c:	40010400 	.word	0x40010400
 8002720:	40020800 	.word	0x40020800

08002724 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08a      	sub	sp, #40	; 0x28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	60da      	str	r2, [r3, #12]
 800273a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002744:	d13c      	bne.n	80027c0 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	4b1f      	ldr	r3, [pc, #124]	; (80027c8 <HAL_TIM_MspPostInit+0xa4>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	4a1e      	ldr	r2, [pc, #120]	; (80027c8 <HAL_TIM_MspPostInit+0xa4>)
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	6313      	str	r3, [r2, #48]	; 0x30
 8002756:	4b1c      	ldr	r3, [pc, #112]	; (80027c8 <HAL_TIM_MspPostInit+0xa4>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <HAL_TIM_MspPostInit+0xa4>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	4a17      	ldr	r2, [pc, #92]	; (80027c8 <HAL_TIM_MspPostInit+0xa4>)
 800276c:	f043 0302 	orr.w	r3, r3, #2
 8002770:	6313      	str	r3, [r2, #48]	; 0x30
 8002772:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <HAL_TIM_MspPostInit+0xa4>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_2_Pin|MOTOR_1_Pin;
 800277e:	2303      	movs	r3, #3
 8002780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002782:	2302      	movs	r3, #2
 8002784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278a:	2300      	movs	r3, #0
 800278c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800278e:	2301      	movs	r3, #1
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002792:	f107 0314 	add.w	r3, r7, #20
 8002796:	4619      	mov	r1, r3
 8002798:	480c      	ldr	r0, [pc, #48]	; (80027cc <HAL_TIM_MspPostInit+0xa8>)
 800279a:	f000 fb2b 	bl	8002df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_3_Pin;
 800279e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a4:	2302      	movs	r3, #2
 80027a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ac:	2300      	movs	r3, #0
 80027ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027b0:	2301      	movs	r3, #1
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_3_GPIO_Port, &GPIO_InitStruct);
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	4619      	mov	r1, r3
 80027ba:	4805      	ldr	r0, [pc, #20]	; (80027d0 <HAL_TIM_MspPostInit+0xac>)
 80027bc:	f000 fb1a 	bl	8002df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80027c0:	bf00      	nop
 80027c2:	3728      	adds	r7, #40	; 0x28
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40020000 	.word	0x40020000
 80027d0:	40020400 	.word	0x40020400

080027d4 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart2;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80027d8:	4b11      	ldr	r3, [pc, #68]	; (8002820 <MX_UART5_Init+0x4c>)
 80027da:	4a12      	ldr	r2, [pc, #72]	; (8002824 <MX_UART5_Init+0x50>)
 80027dc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80027de:	4b10      	ldr	r3, [pc, #64]	; (8002820 <MX_UART5_Init+0x4c>)
 80027e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80027e4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80027e6:	4b0e      	ldr	r3, [pc, #56]	; (8002820 <MX_UART5_Init+0x4c>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80027ec:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <MX_UART5_Init+0x4c>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80027f2:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <MX_UART5_Init+0x4c>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80027f8:	4b09      	ldr	r3, [pc, #36]	; (8002820 <MX_UART5_Init+0x4c>)
 80027fa:	220c      	movs	r2, #12
 80027fc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027fe:	4b08      	ldr	r3, [pc, #32]	; (8002820 <MX_UART5_Init+0x4c>)
 8002800:	2200      	movs	r2, #0
 8002802:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002804:	4b06      	ldr	r3, [pc, #24]	; (8002820 <MX_UART5_Init+0x4c>)
 8002806:	2200      	movs	r2, #0
 8002808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800280a:	4805      	ldr	r0, [pc, #20]	; (8002820 <MX_UART5_Init+0x4c>)
 800280c:	f002 fae6 	bl	8004ddc <HAL_UART_Init>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002816:	f7ff fc63 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20004208 	.word	0x20004208
 8002824:	40005000 	.word	0x40005000

08002828 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800282c:	4b11      	ldr	r3, [pc, #68]	; (8002874 <MX_USART2_UART_Init+0x4c>)
 800282e:	4a12      	ldr	r2, [pc, #72]	; (8002878 <MX_USART2_UART_Init+0x50>)
 8002830:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8002832:	4b10      	ldr	r3, [pc, #64]	; (8002874 <MX_USART2_UART_Init+0x4c>)
 8002834:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002838:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800283a:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <MX_USART2_UART_Init+0x4c>)
 800283c:	2200      	movs	r2, #0
 800283e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002840:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <MX_USART2_UART_Init+0x4c>)
 8002842:	2200      	movs	r2, #0
 8002844:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002846:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <MX_USART2_UART_Init+0x4c>)
 8002848:	2200      	movs	r2, #0
 800284a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800284c:	4b09      	ldr	r3, [pc, #36]	; (8002874 <MX_USART2_UART_Init+0x4c>)
 800284e:	220c      	movs	r2, #12
 8002850:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002852:	4b08      	ldr	r3, [pc, #32]	; (8002874 <MX_USART2_UART_Init+0x4c>)
 8002854:	2200      	movs	r2, #0
 8002856:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <MX_USART2_UART_Init+0x4c>)
 800285a:	2200      	movs	r2, #0
 800285c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800285e:	4805      	ldr	r0, [pc, #20]	; (8002874 <MX_USART2_UART_Init+0x4c>)
 8002860:	f002 fabc 	bl	8004ddc <HAL_UART_Init>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800286a:	f7ff fc39 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	2000424c 	.word	0x2000424c
 8002878:	40004400 	.word	0x40004400

0800287c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08c      	sub	sp, #48	; 0x30
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002884:	f107 031c 	add.w	r3, r7, #28
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]
 8002892:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a45      	ldr	r2, [pc, #276]	; (80029b0 <HAL_UART_MspInit+0x134>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d14b      	bne.n	8002936 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
 80028a2:	4b44      	ldr	r3, [pc, #272]	; (80029b4 <HAL_UART_MspInit+0x138>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	4a43      	ldr	r2, [pc, #268]	; (80029b4 <HAL_UART_MspInit+0x138>)
 80028a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ac:	6413      	str	r3, [r2, #64]	; 0x40
 80028ae:	4b41      	ldr	r3, [pc, #260]	; (80029b4 <HAL_UART_MspInit+0x138>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028b6:	61bb      	str	r3, [r7, #24]
 80028b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	4b3d      	ldr	r3, [pc, #244]	; (80029b4 <HAL_UART_MspInit+0x138>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	4a3c      	ldr	r2, [pc, #240]	; (80029b4 <HAL_UART_MspInit+0x138>)
 80028c4:	f043 0304 	orr.w	r3, r3, #4
 80028c8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ca:	4b3a      	ldr	r3, [pc, #232]	; (80029b4 <HAL_UART_MspInit+0x138>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	4b36      	ldr	r3, [pc, #216]	; (80029b4 <HAL_UART_MspInit+0x138>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	4a35      	ldr	r2, [pc, #212]	; (80029b4 <HAL_UART_MspInit+0x138>)
 80028e0:	f043 0308 	orr.w	r3, r3, #8
 80028e4:	6313      	str	r3, [r2, #48]	; 0x30
 80028e6:	4b33      	ldr	r3, [pc, #204]	; (80029b4 <HAL_UART_MspInit+0x138>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80028f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f8:	2302      	movs	r3, #2
 80028fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028fc:	2301      	movs	r3, #1
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002900:	2303      	movs	r3, #3
 8002902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002904:	2308      	movs	r3, #8
 8002906:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002908:	f107 031c 	add.w	r3, r7, #28
 800290c:	4619      	mov	r1, r3
 800290e:	482a      	ldr	r0, [pc, #168]	; (80029b8 <HAL_UART_MspInit+0x13c>)
 8002910:	f000 fa70 	bl	8002df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002914:	2304      	movs	r3, #4
 8002916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002918:	2302      	movs	r3, #2
 800291a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800291c:	2301      	movs	r3, #1
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002920:	2303      	movs	r3, #3
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002924:	2308      	movs	r3, #8
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002928:	f107 031c 	add.w	r3, r7, #28
 800292c:	4619      	mov	r1, r3
 800292e:	4823      	ldr	r0, [pc, #140]	; (80029bc <HAL_UART_MspInit+0x140>)
 8002930:	f000 fa60 	bl	8002df4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002934:	e038      	b.n	80029a8 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a21      	ldr	r2, [pc, #132]	; (80029c0 <HAL_UART_MspInit+0x144>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d133      	bne.n	80029a8 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <HAL_UART_MspInit+0x138>)
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	4a1a      	ldr	r2, [pc, #104]	; (80029b4 <HAL_UART_MspInit+0x138>)
 800294a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800294e:	6413      	str	r3, [r2, #64]	; 0x40
 8002950:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <HAL_UART_MspInit+0x138>)
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295c:	2300      	movs	r3, #0
 800295e:	60bb      	str	r3, [r7, #8]
 8002960:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <HAL_UART_MspInit+0x138>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	4a13      	ldr	r2, [pc, #76]	; (80029b4 <HAL_UART_MspInit+0x138>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6313      	str	r3, [r2, #48]	; 0x30
 800296c:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <HAL_UART_MspInit+0x138>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002978:	230c      	movs	r3, #12
 800297a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297c:	2302      	movs	r3, #2
 800297e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002984:	2303      	movs	r3, #3
 8002986:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002988:	2307      	movs	r3, #7
 800298a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298c:	f107 031c 	add.w	r3, r7, #28
 8002990:	4619      	mov	r1, r3
 8002992:	480c      	ldr	r0, [pc, #48]	; (80029c4 <HAL_UART_MspInit+0x148>)
 8002994:	f000 fa2e 	bl	8002df4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002998:	2200      	movs	r2, #0
 800299a:	2105      	movs	r1, #5
 800299c:	2026      	movs	r0, #38	; 0x26
 800299e:	f000 f96d 	bl	8002c7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029a2:	2026      	movs	r0, #38	; 0x26
 80029a4:	f000 f986 	bl	8002cb4 <HAL_NVIC_EnableIRQ>
}
 80029a8:	bf00      	nop
 80029aa:	3730      	adds	r7, #48	; 0x30
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40005000 	.word	0x40005000
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40020800 	.word	0x40020800
 80029bc:	40020c00 	.word	0x40020c00
 80029c0:	40004400 	.word	0x40004400
 80029c4:	40020000 	.word	0x40020000

080029c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80029c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029ce:	e003      	b.n	80029d8 <LoopCopyDataInit>

080029d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029d6:	3104      	adds	r1, #4

080029d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029d8:	480b      	ldr	r0, [pc, #44]	; (8002a08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029da:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029e0:	d3f6      	bcc.n	80029d0 <CopyDataInit>
  ldr  r2, =_sbss
 80029e2:	4a0b      	ldr	r2, [pc, #44]	; (8002a10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80029e4:	e002      	b.n	80029ec <LoopFillZerobss>

080029e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80029e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80029e8:	f842 3b04 	str.w	r3, [r2], #4

080029ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80029ec:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80029ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80029f0:	d3f9      	bcc.n	80029e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029f2:	f7ff fc3f 	bl	8002274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029f6:	f005 fc21 	bl	800823c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029fa:	f7ff fad9 	bl	8001fb0 <main>
  bx  lr    
 80029fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a00:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002a04:	08008400 	.word	0x08008400
  ldr  r0, =_sdata
 8002a08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a0c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8002a10:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002a14:	20004294 	.word	0x20004294

08002a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a18:	e7fe      	b.n	8002a18 <ADC_IRQHandler>

08002a1a <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	6039      	str	r1, [r7, #0]

  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	ed93 7a06 	vldr	s14, [r3, #24]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0 * S->Kd);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	edd3 7a06 	vldr	s15, [r3, #24]
 8002a4a:	eeb1 7a67 	vneg.f32	s14, s15
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a54:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1a      	ldr	r2, [r3, #32]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d006      	beq.n	8002a7e <arm_pid_init_f32+0x64>
  {
    /* Clear the state buffer.  The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	330c      	adds	r3, #12
 8002a74:	220c      	movs	r2, #12
 8002a76:	2100      	movs	r1, #0
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f005 fc11 	bl	80082a0 <memset>
  }

}
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a8c:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <HAL_Init+0x40>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a0d      	ldr	r2, [pc, #52]	; (8002ac8 <HAL_Init+0x40>)
 8002a92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a98:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_Init+0x40>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <HAL_Init+0x40>)
 8002a9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aa4:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <HAL_Init+0x40>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a07      	ldr	r2, [pc, #28]	; (8002ac8 <HAL_Init+0x40>)
 8002aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ab0:	2003      	movs	r0, #3
 8002ab2:	f000 f8d8 	bl	8002c66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f7ff fb46 	bl	8002148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002abc:	f7ff fb18 	bl	80020f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40023c00 	.word	0x40023c00

08002acc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ad0:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_IncTick+0x20>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <HAL_IncTick+0x24>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4413      	add	r3, r2
 8002adc:	4a04      	ldr	r2, [pc, #16]	; (8002af0 <HAL_IncTick+0x24>)
 8002ade:	6013      	str	r3, [r2, #0]
}
 8002ae0:	bf00      	nop
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	20000008 	.word	0x20000008
 8002af0:	20004290 	.word	0x20004290

08002af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return uwTick;
 8002af8:	4b03      	ldr	r3, [pc, #12]	; (8002b08 <HAL_GetTick+0x14>)
 8002afa:	681b      	ldr	r3, [r3, #0]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	20004290 	.word	0x20004290

08002b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <__NVIC_SetPriorityGrouping+0x44>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b28:	4013      	ands	r3, r2
 8002b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b3e:	4a04      	ldr	r2, [pc, #16]	; (8002b50 <__NVIC_SetPriorityGrouping+0x44>)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	60d3      	str	r3, [r2, #12]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b58:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <__NVIC_GetPriorityGrouping+0x18>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	0a1b      	lsrs	r3, r3, #8
 8002b5e:	f003 0307 	and.w	r3, r3, #7
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	db0b      	blt.n	8002b9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	f003 021f 	and.w	r2, r3, #31
 8002b88:	4907      	ldr	r1, [pc, #28]	; (8002ba8 <__NVIC_EnableIRQ+0x38>)
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	095b      	lsrs	r3, r3, #5
 8002b90:	2001      	movs	r0, #1
 8002b92:	fa00 f202 	lsl.w	r2, r0, r2
 8002b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	e000e100 	.word	0xe000e100

08002bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	6039      	str	r1, [r7, #0]
 8002bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	db0a      	blt.n	8002bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	490c      	ldr	r1, [pc, #48]	; (8002bf8 <__NVIC_SetPriority+0x4c>)
 8002bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bca:	0112      	lsls	r2, r2, #4
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	440b      	add	r3, r1
 8002bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd4:	e00a      	b.n	8002bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	4908      	ldr	r1, [pc, #32]	; (8002bfc <__NVIC_SetPriority+0x50>)
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	3b04      	subs	r3, #4
 8002be4:	0112      	lsls	r2, r2, #4
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	440b      	add	r3, r1
 8002bea:	761a      	strb	r2, [r3, #24]
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	e000e100 	.word	0xe000e100
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b089      	sub	sp, #36	; 0x24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f1c3 0307 	rsb	r3, r3, #7
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	bf28      	it	cs
 8002c1e:	2304      	movcs	r3, #4
 8002c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3304      	adds	r3, #4
 8002c26:	2b06      	cmp	r3, #6
 8002c28:	d902      	bls.n	8002c30 <NVIC_EncodePriority+0x30>
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3b03      	subs	r3, #3
 8002c2e:	e000      	b.n	8002c32 <NVIC_EncodePriority+0x32>
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c34:	f04f 32ff 	mov.w	r2, #4294967295
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43da      	mvns	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	401a      	ands	r2, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c48:	f04f 31ff 	mov.w	r1, #4294967295
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c52:	43d9      	mvns	r1, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	4313      	orrs	r3, r2
         );
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3724      	adds	r7, #36	; 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b082      	sub	sp, #8
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff ff4c 	bl	8002b0c <__NVIC_SetPriorityGrouping>
}
 8002c74:	bf00      	nop
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c8e:	f7ff ff61 	bl	8002b54 <__NVIC_GetPriorityGrouping>
 8002c92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	68b9      	ldr	r1, [r7, #8]
 8002c98:	6978      	ldr	r0, [r7, #20]
 8002c9a:	f7ff ffb1 	bl	8002c00 <NVIC_EncodePriority>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff ff80 	bl	8002bac <__NVIC_SetPriority>
}
 8002cac:	bf00      	nop
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff ff54 	bl	8002b70 <__NVIC_EnableIRQ>
}
 8002cc8:	bf00      	nop
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cdc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cde:	f7ff ff09 	bl	8002af4 <HAL_GetTick>
 8002ce2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d008      	beq.n	8002d02 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2280      	movs	r2, #128	; 0x80
 8002cf4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e052      	b.n	8002da8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0216 	bic.w	r2, r2, #22
 8002d10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695a      	ldr	r2, [r3, #20]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d20:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d103      	bne.n	8002d32 <HAL_DMA_Abort+0x62>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d007      	beq.n	8002d42 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0208 	bic.w	r2, r2, #8
 8002d40:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0201 	bic.w	r2, r2, #1
 8002d50:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d52:	e013      	b.n	8002d7c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d54:	f7ff fece 	bl	8002af4 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b05      	cmp	r3, #5
 8002d60:	d90c      	bls.n	8002d7c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2220      	movs	r2, #32
 8002d66:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2203      	movs	r2, #3
 8002d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e015      	b.n	8002da8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1e4      	bne.n	8002d54 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8e:	223f      	movs	r2, #63	; 0x3f
 8002d90:	409a      	lsls	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d004      	beq.n	8002dce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2280      	movs	r2, #128	; 0x80
 8002dc8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e00c      	b.n	8002de8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2205      	movs	r2, #5
 8002dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0201 	bic.w	r2, r2, #1
 8002de4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b089      	sub	sp, #36	; 0x24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61fb      	str	r3, [r7, #28]
 8002e0e:	e16b      	b.n	80030e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e10:	2201      	movs	r2, #1
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4013      	ands	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	f040 815a 	bne.w	80030e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d005      	beq.n	8002e46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d130      	bne.n	8002ea8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	2203      	movs	r2, #3
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43db      	mvns	r3, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	f003 0201 	and.w	r2, r3, #1
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d017      	beq.n	8002ee4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	2203      	movs	r2, #3
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d123      	bne.n	8002f38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	08da      	lsrs	r2, r3, #3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3208      	adds	r2, #8
 8002ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	220f      	movs	r2, #15
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	08da      	lsrs	r2, r3, #3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3208      	adds	r2, #8
 8002f32:	69b9      	ldr	r1, [r7, #24]
 8002f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	2203      	movs	r2, #3
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 0203 	and.w	r2, r3, #3
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 80b4 	beq.w	80030e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	4b60      	ldr	r3, [pc, #384]	; (8003100 <HAL_GPIO_Init+0x30c>)
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f82:	4a5f      	ldr	r2, [pc, #380]	; (8003100 <HAL_GPIO_Init+0x30c>)
 8002f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f88:	6453      	str	r3, [r2, #68]	; 0x44
 8002f8a:	4b5d      	ldr	r3, [pc, #372]	; (8003100 <HAL_GPIO_Init+0x30c>)
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f96:	4a5b      	ldr	r2, [pc, #364]	; (8003104 <HAL_GPIO_Init+0x310>)
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	089b      	lsrs	r3, r3, #2
 8002f9c:	3302      	adds	r3, #2
 8002f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	220f      	movs	r2, #15
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a52      	ldr	r2, [pc, #328]	; (8003108 <HAL_GPIO_Init+0x314>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d02b      	beq.n	800301a <HAL_GPIO_Init+0x226>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a51      	ldr	r2, [pc, #324]	; (800310c <HAL_GPIO_Init+0x318>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d025      	beq.n	8003016 <HAL_GPIO_Init+0x222>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a50      	ldr	r2, [pc, #320]	; (8003110 <HAL_GPIO_Init+0x31c>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d01f      	beq.n	8003012 <HAL_GPIO_Init+0x21e>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a4f      	ldr	r2, [pc, #316]	; (8003114 <HAL_GPIO_Init+0x320>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d019      	beq.n	800300e <HAL_GPIO_Init+0x21a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a4e      	ldr	r2, [pc, #312]	; (8003118 <HAL_GPIO_Init+0x324>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d013      	beq.n	800300a <HAL_GPIO_Init+0x216>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a4d      	ldr	r2, [pc, #308]	; (800311c <HAL_GPIO_Init+0x328>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d00d      	beq.n	8003006 <HAL_GPIO_Init+0x212>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a4c      	ldr	r2, [pc, #304]	; (8003120 <HAL_GPIO_Init+0x32c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d007      	beq.n	8003002 <HAL_GPIO_Init+0x20e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a4b      	ldr	r2, [pc, #300]	; (8003124 <HAL_GPIO_Init+0x330>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d101      	bne.n	8002ffe <HAL_GPIO_Init+0x20a>
 8002ffa:	2307      	movs	r3, #7
 8002ffc:	e00e      	b.n	800301c <HAL_GPIO_Init+0x228>
 8002ffe:	2308      	movs	r3, #8
 8003000:	e00c      	b.n	800301c <HAL_GPIO_Init+0x228>
 8003002:	2306      	movs	r3, #6
 8003004:	e00a      	b.n	800301c <HAL_GPIO_Init+0x228>
 8003006:	2305      	movs	r3, #5
 8003008:	e008      	b.n	800301c <HAL_GPIO_Init+0x228>
 800300a:	2304      	movs	r3, #4
 800300c:	e006      	b.n	800301c <HAL_GPIO_Init+0x228>
 800300e:	2303      	movs	r3, #3
 8003010:	e004      	b.n	800301c <HAL_GPIO_Init+0x228>
 8003012:	2302      	movs	r3, #2
 8003014:	e002      	b.n	800301c <HAL_GPIO_Init+0x228>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <HAL_GPIO_Init+0x228>
 800301a:	2300      	movs	r3, #0
 800301c:	69fa      	ldr	r2, [r7, #28]
 800301e:	f002 0203 	and.w	r2, r2, #3
 8003022:	0092      	lsls	r2, r2, #2
 8003024:	4093      	lsls	r3, r2
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4313      	orrs	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800302c:	4935      	ldr	r1, [pc, #212]	; (8003104 <HAL_GPIO_Init+0x310>)
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	089b      	lsrs	r3, r3, #2
 8003032:	3302      	adds	r3, #2
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800303a:	4b3b      	ldr	r3, [pc, #236]	; (8003128 <HAL_GPIO_Init+0x334>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	43db      	mvns	r3, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4013      	ands	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800305e:	4a32      	ldr	r2, [pc, #200]	; (8003128 <HAL_GPIO_Init+0x334>)
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003064:	4b30      	ldr	r3, [pc, #192]	; (8003128 <HAL_GPIO_Init+0x334>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003088:	4a27      	ldr	r2, [pc, #156]	; (8003128 <HAL_GPIO_Init+0x334>)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800308e:	4b26      	ldr	r3, [pc, #152]	; (8003128 <HAL_GPIO_Init+0x334>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	43db      	mvns	r3, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4013      	ands	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030b2:	4a1d      	ldr	r2, [pc, #116]	; (8003128 <HAL_GPIO_Init+0x334>)
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030b8:	4b1b      	ldr	r3, [pc, #108]	; (8003128 <HAL_GPIO_Init+0x334>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030dc:	4a12      	ldr	r2, [pc, #72]	; (8003128 <HAL_GPIO_Init+0x334>)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	3301      	adds	r3, #1
 80030e6:	61fb      	str	r3, [r7, #28]
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	2b0f      	cmp	r3, #15
 80030ec:	f67f ae90 	bls.w	8002e10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030f0:	bf00      	nop
 80030f2:	bf00      	nop
 80030f4:	3724      	adds	r7, #36	; 0x24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40023800 	.word	0x40023800
 8003104:	40013800 	.word	0x40013800
 8003108:	40020000 	.word	0x40020000
 800310c:	40020400 	.word	0x40020400
 8003110:	40020800 	.word	0x40020800
 8003114:	40020c00 	.word	0x40020c00
 8003118:	40021000 	.word	0x40021000
 800311c:	40021400 	.word	0x40021400
 8003120:	40021800 	.word	0x40021800
 8003124:	40021c00 	.word	0x40021c00
 8003128:	40013c00 	.word	0x40013c00

0800312c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	460b      	mov	r3, r1
 8003136:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	887b      	ldrh	r3, [r7, #2]
 800313e:	4013      	ands	r3, r2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003144:	2301      	movs	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
 8003148:	e001      	b.n	800314e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800314a:	2300      	movs	r3, #0
 800314c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800314e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	807b      	strh	r3, [r7, #2]
 8003168:	4613      	mov	r3, r2
 800316a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800316c:	787b      	ldrb	r3, [r7, #1]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003172:	887a      	ldrh	r2, [r7, #2]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003178:	e003      	b.n	8003182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800317a:	887b      	ldrh	r3, [r7, #2]
 800317c:	041a      	lsls	r2, r3, #16
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	619a      	str	r2, [r3, #24]
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800318e:	b480      	push	{r7}
 8003190:	b085      	sub	sp, #20
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	460b      	mov	r3, r1
 8003198:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031a0:	887a      	ldrh	r2, [r7, #2]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4013      	ands	r3, r2
 80031a6:	041a      	lsls	r2, r3, #16
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	43d9      	mvns	r1, r3
 80031ac:	887b      	ldrh	r3, [r7, #2]
 80031ae:	400b      	ands	r3, r1
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	619a      	str	r2, [r3, #24]
}
 80031b6:	bf00      	nop
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
	...

080031c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80031ce:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031d0:	695a      	ldr	r2, [r3, #20]
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	4013      	ands	r3, r2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d006      	beq.n	80031e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031da:	4a05      	ldr	r2, [pc, #20]	; (80031f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031dc:	88fb      	ldrh	r3, [r7, #6]
 80031de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031e0:	88fb      	ldrh	r3, [r7, #6]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fe fd50 	bl	8001c88 <HAL_GPIO_EXTI_Callback>
  }
}
 80031e8:	bf00      	nop
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40013c00 	.word	0x40013c00

080031f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e12b      	b.n	800345e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fe fe80 	bl	8001f20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2224      	movs	r2, #36	; 0x24
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0201 	bic.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003246:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003256:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003258:	f000 fd5c 	bl	8003d14 <HAL_RCC_GetPCLK1Freq>
 800325c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4a81      	ldr	r2, [pc, #516]	; (8003468 <HAL_I2C_Init+0x274>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d807      	bhi.n	8003278 <HAL_I2C_Init+0x84>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4a80      	ldr	r2, [pc, #512]	; (800346c <HAL_I2C_Init+0x278>)
 800326c:	4293      	cmp	r3, r2
 800326e:	bf94      	ite	ls
 8003270:	2301      	movls	r3, #1
 8003272:	2300      	movhi	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	e006      	b.n	8003286 <HAL_I2C_Init+0x92>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4a7d      	ldr	r2, [pc, #500]	; (8003470 <HAL_I2C_Init+0x27c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	bf94      	ite	ls
 8003280:	2301      	movls	r3, #1
 8003282:	2300      	movhi	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e0e7      	b.n	800345e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4a78      	ldr	r2, [pc, #480]	; (8003474 <HAL_I2C_Init+0x280>)
 8003292:	fba2 2303 	umull	r2, r3, r2, r3
 8003296:	0c9b      	lsrs	r3, r3, #18
 8003298:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	4a6a      	ldr	r2, [pc, #424]	; (8003468 <HAL_I2C_Init+0x274>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d802      	bhi.n	80032c8 <HAL_I2C_Init+0xd4>
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	3301      	adds	r3, #1
 80032c6:	e009      	b.n	80032dc <HAL_I2C_Init+0xe8>
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032ce:	fb02 f303 	mul.w	r3, r2, r3
 80032d2:	4a69      	ldr	r2, [pc, #420]	; (8003478 <HAL_I2C_Init+0x284>)
 80032d4:	fba2 2303 	umull	r2, r3, r2, r3
 80032d8:	099b      	lsrs	r3, r3, #6
 80032da:	3301      	adds	r3, #1
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6812      	ldr	r2, [r2, #0]
 80032e0:	430b      	orrs	r3, r1
 80032e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	495c      	ldr	r1, [pc, #368]	; (8003468 <HAL_I2C_Init+0x274>)
 80032f8:	428b      	cmp	r3, r1
 80032fa:	d819      	bhi.n	8003330 <HAL_I2C_Init+0x13c>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	1e59      	subs	r1, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	fbb1 f3f3 	udiv	r3, r1, r3
 800330a:	1c59      	adds	r1, r3, #1
 800330c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003310:	400b      	ands	r3, r1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <HAL_I2C_Init+0x138>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	1e59      	subs	r1, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	fbb1 f3f3 	udiv	r3, r1, r3
 8003324:	3301      	adds	r3, #1
 8003326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800332a:	e051      	b.n	80033d0 <HAL_I2C_Init+0x1dc>
 800332c:	2304      	movs	r3, #4
 800332e:	e04f      	b.n	80033d0 <HAL_I2C_Init+0x1dc>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d111      	bne.n	800335c <HAL_I2C_Init+0x168>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	1e58      	subs	r0, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6859      	ldr	r1, [r3, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	440b      	add	r3, r1
 8003346:	fbb0 f3f3 	udiv	r3, r0, r3
 800334a:	3301      	adds	r3, #1
 800334c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003350:	2b00      	cmp	r3, #0
 8003352:	bf0c      	ite	eq
 8003354:	2301      	moveq	r3, #1
 8003356:	2300      	movne	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	e012      	b.n	8003382 <HAL_I2C_Init+0x18e>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	1e58      	subs	r0, r3, #1
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6859      	ldr	r1, [r3, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	0099      	lsls	r1, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003372:	3301      	adds	r3, #1
 8003374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003378:	2b00      	cmp	r3, #0
 800337a:	bf0c      	ite	eq
 800337c:	2301      	moveq	r3, #1
 800337e:	2300      	movne	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <HAL_I2C_Init+0x196>
 8003386:	2301      	movs	r3, #1
 8003388:	e022      	b.n	80033d0 <HAL_I2C_Init+0x1dc>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10e      	bne.n	80033b0 <HAL_I2C_Init+0x1bc>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	1e58      	subs	r0, r3, #1
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6859      	ldr	r1, [r3, #4]
 800339a:	460b      	mov	r3, r1
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	440b      	add	r3, r1
 80033a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80033a4:	3301      	adds	r3, #1
 80033a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ae:	e00f      	b.n	80033d0 <HAL_I2C_Init+0x1dc>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	1e58      	subs	r0, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6859      	ldr	r1, [r3, #4]
 80033b8:	460b      	mov	r3, r1
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	0099      	lsls	r1, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033c6:	3301      	adds	r3, #1
 80033c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	6809      	ldr	r1, [r1, #0]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69da      	ldr	r2, [r3, #28]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6911      	ldr	r1, [r2, #16]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	68d2      	ldr	r2, [r2, #12]
 800340a:	4311      	orrs	r1, r2
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6812      	ldr	r2, [r2, #0]
 8003410:	430b      	orrs	r3, r1
 8003412:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695a      	ldr	r2, [r3, #20]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0201 	orr.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2220      	movs	r2, #32
 800344a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	000186a0 	.word	0x000186a0
 800346c:	001e847f 	.word	0x001e847f
 8003470:	003d08ff 	.word	0x003d08ff
 8003474:	431bde83 	.word	0x431bde83
 8003478:	10624dd3 	.word	0x10624dd3

0800347c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e264      	b.n	8003958 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d075      	beq.n	8003586 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800349a:	4ba3      	ldr	r3, [pc, #652]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 030c 	and.w	r3, r3, #12
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d00c      	beq.n	80034c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034a6:	4ba0      	ldr	r3, [pc, #640]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ae:	2b08      	cmp	r3, #8
 80034b0:	d112      	bne.n	80034d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034b2:	4b9d      	ldr	r3, [pc, #628]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034be:	d10b      	bne.n	80034d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c0:	4b99      	ldr	r3, [pc, #612]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d05b      	beq.n	8003584 <HAL_RCC_OscConfig+0x108>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d157      	bne.n	8003584 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e23f      	b.n	8003958 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e0:	d106      	bne.n	80034f0 <HAL_RCC_OscConfig+0x74>
 80034e2:	4b91      	ldr	r3, [pc, #580]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a90      	ldr	r2, [pc, #576]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 80034e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	e01d      	b.n	800352c <HAL_RCC_OscConfig+0xb0>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034f8:	d10c      	bne.n	8003514 <HAL_RCC_OscConfig+0x98>
 80034fa:	4b8b      	ldr	r3, [pc, #556]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a8a      	ldr	r2, [pc, #552]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 8003500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	4b88      	ldr	r3, [pc, #544]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a87      	ldr	r2, [pc, #540]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 800350c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	e00b      	b.n	800352c <HAL_RCC_OscConfig+0xb0>
 8003514:	4b84      	ldr	r3, [pc, #528]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a83      	ldr	r2, [pc, #524]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 800351a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	4b81      	ldr	r3, [pc, #516]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a80      	ldr	r2, [pc, #512]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 8003526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800352a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d013      	beq.n	800355c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003534:	f7ff fade 	bl	8002af4 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800353c:	f7ff fada 	bl	8002af4 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b64      	cmp	r3, #100	; 0x64
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e204      	b.n	8003958 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354e:	4b76      	ldr	r3, [pc, #472]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0f0      	beq.n	800353c <HAL_RCC_OscConfig+0xc0>
 800355a:	e014      	b.n	8003586 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355c:	f7ff faca 	bl	8002af4 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003564:	f7ff fac6 	bl	8002af4 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b64      	cmp	r3, #100	; 0x64
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e1f0      	b.n	8003958 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003576:	4b6c      	ldr	r3, [pc, #432]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f0      	bne.n	8003564 <HAL_RCC_OscConfig+0xe8>
 8003582:	e000      	b.n	8003586 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d063      	beq.n	800365a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003592:	4b65      	ldr	r3, [pc, #404]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 030c 	and.w	r3, r3, #12
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00b      	beq.n	80035b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800359e:	4b62      	ldr	r3, [pc, #392]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d11c      	bne.n	80035e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035aa:	4b5f      	ldr	r3, [pc, #380]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d116      	bne.n	80035e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b6:	4b5c      	ldr	r3, [pc, #368]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d005      	beq.n	80035ce <HAL_RCC_OscConfig+0x152>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d001      	beq.n	80035ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e1c4      	b.n	8003958 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ce:	4b56      	ldr	r3, [pc, #344]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4952      	ldr	r1, [pc, #328]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035e2:	e03a      	b.n	800365a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d020      	beq.n	800362e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035ec:	4b4f      	ldr	r3, [pc, #316]	; (800372c <HAL_RCC_OscConfig+0x2b0>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f2:	f7ff fa7f 	bl	8002af4 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035fa:	f7ff fa7b 	bl	8002af4 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e1a5      	b.n	8003958 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360c:	4b46      	ldr	r3, [pc, #280]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0f0      	beq.n	80035fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003618:	4b43      	ldr	r3, [pc, #268]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	4940      	ldr	r1, [pc, #256]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 8003628:	4313      	orrs	r3, r2
 800362a:	600b      	str	r3, [r1, #0]
 800362c:	e015      	b.n	800365a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800362e:	4b3f      	ldr	r3, [pc, #252]	; (800372c <HAL_RCC_OscConfig+0x2b0>)
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7ff fa5e 	bl	8002af4 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800363c:	f7ff fa5a 	bl	8002af4 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e184      	b.n	8003958 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800364e:	4b36      	ldr	r3, [pc, #216]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d030      	beq.n	80036c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d016      	beq.n	800369c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800366e:	4b30      	ldr	r3, [pc, #192]	; (8003730 <HAL_RCC_OscConfig+0x2b4>)
 8003670:	2201      	movs	r2, #1
 8003672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003674:	f7ff fa3e 	bl	8002af4 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800367c:	f7ff fa3a 	bl	8002af4 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e164      	b.n	8003958 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800368e:	4b26      	ldr	r3, [pc, #152]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 8003690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0f0      	beq.n	800367c <HAL_RCC_OscConfig+0x200>
 800369a:	e015      	b.n	80036c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800369c:	4b24      	ldr	r3, [pc, #144]	; (8003730 <HAL_RCC_OscConfig+0x2b4>)
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a2:	f7ff fa27 	bl	8002af4 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036aa:	f7ff fa23 	bl	8002af4 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e14d      	b.n	8003958 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036bc:	4b1a      	ldr	r3, [pc, #104]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 80036be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1f0      	bne.n	80036aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 80a0 	beq.w	8003816 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036d6:	2300      	movs	r3, #0
 80036d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036da:	4b13      	ldr	r3, [pc, #76]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10f      	bne.n	8003706 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	4b0f      	ldr	r3, [pc, #60]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	4a0e      	ldr	r2, [pc, #56]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 80036f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f4:	6413      	str	r3, [r2, #64]	; 0x40
 80036f6:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <HAL_RCC_OscConfig+0x2ac>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fe:	60bb      	str	r3, [r7, #8]
 8003700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003702:	2301      	movs	r3, #1
 8003704:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003706:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <HAL_RCC_OscConfig+0x2b8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370e:	2b00      	cmp	r3, #0
 8003710:	d121      	bne.n	8003756 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003712:	4b08      	ldr	r3, [pc, #32]	; (8003734 <HAL_RCC_OscConfig+0x2b8>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a07      	ldr	r2, [pc, #28]	; (8003734 <HAL_RCC_OscConfig+0x2b8>)
 8003718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800371c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800371e:	f7ff f9e9 	bl	8002af4 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003724:	e011      	b.n	800374a <HAL_RCC_OscConfig+0x2ce>
 8003726:	bf00      	nop
 8003728:	40023800 	.word	0x40023800
 800372c:	42470000 	.word	0x42470000
 8003730:	42470e80 	.word	0x42470e80
 8003734:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003738:	f7ff f9dc 	bl	8002af4 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e106      	b.n	8003958 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374a:	4b85      	ldr	r3, [pc, #532]	; (8003960 <HAL_RCC_OscConfig+0x4e4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d106      	bne.n	800376c <HAL_RCC_OscConfig+0x2f0>
 800375e:	4b81      	ldr	r3, [pc, #516]	; (8003964 <HAL_RCC_OscConfig+0x4e8>)
 8003760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003762:	4a80      	ldr	r2, [pc, #512]	; (8003964 <HAL_RCC_OscConfig+0x4e8>)
 8003764:	f043 0301 	orr.w	r3, r3, #1
 8003768:	6713      	str	r3, [r2, #112]	; 0x70
 800376a:	e01c      	b.n	80037a6 <HAL_RCC_OscConfig+0x32a>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b05      	cmp	r3, #5
 8003772:	d10c      	bne.n	800378e <HAL_RCC_OscConfig+0x312>
 8003774:	4b7b      	ldr	r3, [pc, #492]	; (8003964 <HAL_RCC_OscConfig+0x4e8>)
 8003776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003778:	4a7a      	ldr	r2, [pc, #488]	; (8003964 <HAL_RCC_OscConfig+0x4e8>)
 800377a:	f043 0304 	orr.w	r3, r3, #4
 800377e:	6713      	str	r3, [r2, #112]	; 0x70
 8003780:	4b78      	ldr	r3, [pc, #480]	; (8003964 <HAL_RCC_OscConfig+0x4e8>)
 8003782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003784:	4a77      	ldr	r2, [pc, #476]	; (8003964 <HAL_RCC_OscConfig+0x4e8>)
 8003786:	f043 0301 	orr.w	r3, r3, #1
 800378a:	6713      	str	r3, [r2, #112]	; 0x70
 800378c:	e00b      	b.n	80037a6 <HAL_RCC_OscConfig+0x32a>
 800378e:	4b75      	ldr	r3, [pc, #468]	; (8003964 <HAL_RCC_OscConfig+0x4e8>)
 8003790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003792:	4a74      	ldr	r2, [pc, #464]	; (8003964 <HAL_RCC_OscConfig+0x4e8>)
 8003794:	f023 0301 	bic.w	r3, r3, #1
 8003798:	6713      	str	r3, [r2, #112]	; 0x70
 800379a:	4b72      	ldr	r3, [pc, #456]	; (8003964 <HAL_RCC_OscConfig+0x4e8>)
 800379c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379e:	4a71      	ldr	r2, [pc, #452]	; (8003964 <HAL_RCC_OscConfig+0x4e8>)
 80037a0:	f023 0304 	bic.w	r3, r3, #4
 80037a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d015      	beq.n	80037da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ae:	f7ff f9a1 	bl	8002af4 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b4:	e00a      	b.n	80037cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037b6:	f7ff f99d 	bl	8002af4 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e0c5      	b.n	8003958 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037cc:	4b65      	ldr	r3, [pc, #404]	; (8003964 <HAL_RCC_OscConfig+0x4e8>)
 80037ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0ee      	beq.n	80037b6 <HAL_RCC_OscConfig+0x33a>
 80037d8:	e014      	b.n	8003804 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037da:	f7ff f98b 	bl	8002af4 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e0:	e00a      	b.n	80037f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037e2:	f7ff f987 	bl	8002af4 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e0af      	b.n	8003958 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f8:	4b5a      	ldr	r3, [pc, #360]	; (8003964 <HAL_RCC_OscConfig+0x4e8>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1ee      	bne.n	80037e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003804:	7dfb      	ldrb	r3, [r7, #23]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d105      	bne.n	8003816 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800380a:	4b56      	ldr	r3, [pc, #344]	; (8003964 <HAL_RCC_OscConfig+0x4e8>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	4a55      	ldr	r2, [pc, #340]	; (8003964 <HAL_RCC_OscConfig+0x4e8>)
 8003810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003814:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 809b 	beq.w	8003956 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003820:	4b50      	ldr	r3, [pc, #320]	; (8003964 <HAL_RCC_OscConfig+0x4e8>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 030c 	and.w	r3, r3, #12
 8003828:	2b08      	cmp	r3, #8
 800382a:	d05c      	beq.n	80038e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d141      	bne.n	80038b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003834:	4b4c      	ldr	r3, [pc, #304]	; (8003968 <HAL_RCC_OscConfig+0x4ec>)
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383a:	f7ff f95b 	bl	8002af4 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003842:	f7ff f957 	bl	8002af4 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e081      	b.n	8003958 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003854:	4b43      	ldr	r3, [pc, #268]	; (8003964 <HAL_RCC_OscConfig+0x4e8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1f0      	bne.n	8003842 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	69da      	ldr	r2, [r3, #28]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	431a      	orrs	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	019b      	lsls	r3, r3, #6
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003876:	085b      	lsrs	r3, r3, #1
 8003878:	3b01      	subs	r3, #1
 800387a:	041b      	lsls	r3, r3, #16
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	061b      	lsls	r3, r3, #24
 8003884:	4937      	ldr	r1, [pc, #220]	; (8003964 <HAL_RCC_OscConfig+0x4e8>)
 8003886:	4313      	orrs	r3, r2
 8003888:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800388a:	4b37      	ldr	r3, [pc, #220]	; (8003968 <HAL_RCC_OscConfig+0x4ec>)
 800388c:	2201      	movs	r2, #1
 800388e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003890:	f7ff f930 	bl	8002af4 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003898:	f7ff f92c 	bl	8002af4 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e056      	b.n	8003958 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038aa:	4b2e      	ldr	r3, [pc, #184]	; (8003964 <HAL_RCC_OscConfig+0x4e8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCC_OscConfig+0x41c>
 80038b6:	e04e      	b.n	8003956 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b8:	4b2b      	ldr	r3, [pc, #172]	; (8003968 <HAL_RCC_OscConfig+0x4ec>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038be:	f7ff f919 	bl	8002af4 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c6:	f7ff f915 	bl	8002af4 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e03f      	b.n	8003958 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d8:	4b22      	ldr	r3, [pc, #136]	; (8003964 <HAL_RCC_OscConfig+0x4e8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1f0      	bne.n	80038c6 <HAL_RCC_OscConfig+0x44a>
 80038e4:	e037      	b.n	8003956 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e032      	b.n	8003958 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038f2:	4b1c      	ldr	r3, [pc, #112]	; (8003964 <HAL_RCC_OscConfig+0x4e8>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d028      	beq.n	8003952 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800390a:	429a      	cmp	r2, r3
 800390c:	d121      	bne.n	8003952 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003918:	429a      	cmp	r2, r3
 800391a:	d11a      	bne.n	8003952 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003922:	4013      	ands	r3, r2
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003928:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800392a:	4293      	cmp	r3, r2
 800392c:	d111      	bne.n	8003952 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	085b      	lsrs	r3, r3, #1
 800393a:	3b01      	subs	r3, #1
 800393c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800393e:	429a      	cmp	r2, r3
 8003940:	d107      	bne.n	8003952 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800394e:	429a      	cmp	r2, r3
 8003950:	d001      	beq.n	8003956 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40007000 	.word	0x40007000
 8003964:	40023800 	.word	0x40023800
 8003968:	42470060 	.word	0x42470060

0800396c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0cc      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003980:	4b68      	ldr	r3, [pc, #416]	; (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d90c      	bls.n	80039a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398e:	4b65      	ldr	r3, [pc, #404]	; (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003996:	4b63      	ldr	r3, [pc, #396]	; (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d001      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0b8      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d020      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d005      	beq.n	80039cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039c0:	4b59      	ldr	r3, [pc, #356]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	4a58      	ldr	r2, [pc, #352]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039d8:	4b53      	ldr	r3, [pc, #332]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	4a52      	ldr	r2, [pc, #328]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e4:	4b50      	ldr	r3, [pc, #320]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	494d      	ldr	r1, [pc, #308]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d044      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d107      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0a:	4b47      	ldr	r3, [pc, #284]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d119      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e07f      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d003      	beq.n	8003a2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d107      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a2a:	4b3f      	ldr	r3, [pc, #252]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d109      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e06f      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a3a:	4b3b      	ldr	r3, [pc, #236]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e067      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a4a:	4b37      	ldr	r3, [pc, #220]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f023 0203 	bic.w	r2, r3, #3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	4934      	ldr	r1, [pc, #208]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a5c:	f7ff f84a 	bl	8002af4 <HAL_GetTick>
 8003a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a62:	e00a      	b.n	8003a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a64:	f7ff f846 	bl	8002af4 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e04f      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7a:	4b2b      	ldr	r3, [pc, #172]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 020c 	and.w	r2, r3, #12
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d1eb      	bne.n	8003a64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a8c:	4b25      	ldr	r3, [pc, #148]	; (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d20c      	bcs.n	8003ab4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9a:	4b22      	ldr	r3, [pc, #136]	; (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa2:	4b20      	ldr	r3, [pc, #128]	; (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d001      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e032      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ac0:	4b19      	ldr	r3, [pc, #100]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	4916      	ldr	r1, [pc, #88]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d009      	beq.n	8003af2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ade:	4b12      	ldr	r3, [pc, #72]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	490e      	ldr	r1, [pc, #56]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003af2:	f000 f821 	bl	8003b38 <HAL_RCC_GetSysClockFreq>
 8003af6:	4602      	mov	r2, r0
 8003af8:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	091b      	lsrs	r3, r3, #4
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	490a      	ldr	r1, [pc, #40]	; (8003b2c <HAL_RCC_ClockConfig+0x1c0>)
 8003b04:	5ccb      	ldrb	r3, [r1, r3]
 8003b06:	fa22 f303 	lsr.w	r3, r2, r3
 8003b0a:	4a09      	ldr	r2, [pc, #36]	; (8003b30 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b0e:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <HAL_RCC_ClockConfig+0x1c8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fe fb18 	bl	8002148 <HAL_InitTick>

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40023c00 	.word	0x40023c00
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	080083d8 	.word	0x080083d8
 8003b30:	20000000 	.word	0x20000000
 8003b34:	20000004 	.word	0x20000004

08003b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b3c:	b084      	sub	sp, #16
 8003b3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	607b      	str	r3, [r7, #4]
 8003b44:	2300      	movs	r3, #0
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b50:	4b67      	ldr	r3, [pc, #412]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 030c 	and.w	r3, r3, #12
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d00d      	beq.n	8003b78 <HAL_RCC_GetSysClockFreq+0x40>
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	f200 80bd 	bhi.w	8003cdc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <HAL_RCC_GetSysClockFreq+0x34>
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d003      	beq.n	8003b72 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b6a:	e0b7      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b6c:	4b61      	ldr	r3, [pc, #388]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b6e:	60bb      	str	r3, [r7, #8]
       break;
 8003b70:	e0b7      	b.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b72:	4b61      	ldr	r3, [pc, #388]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003b74:	60bb      	str	r3, [r7, #8]
      break;
 8003b76:	e0b4      	b.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b78:	4b5d      	ldr	r3, [pc, #372]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b80:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b82:	4b5b      	ldr	r3, [pc, #364]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d04d      	beq.n	8003c2a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b8e:	4b58      	ldr	r3, [pc, #352]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	099b      	lsrs	r3, r3, #6
 8003b94:	461a      	mov	r2, r3
 8003b96:	f04f 0300 	mov.w	r3, #0
 8003b9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b9e:	f04f 0100 	mov.w	r1, #0
 8003ba2:	ea02 0800 	and.w	r8, r2, r0
 8003ba6:	ea03 0901 	and.w	r9, r3, r1
 8003baa:	4640      	mov	r0, r8
 8003bac:	4649      	mov	r1, r9
 8003bae:	f04f 0200 	mov.w	r2, #0
 8003bb2:	f04f 0300 	mov.w	r3, #0
 8003bb6:	014b      	lsls	r3, r1, #5
 8003bb8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bbc:	0142      	lsls	r2, r0, #5
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	ebb0 0008 	subs.w	r0, r0, r8
 8003bc6:	eb61 0109 	sbc.w	r1, r1, r9
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	018b      	lsls	r3, r1, #6
 8003bd4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bd8:	0182      	lsls	r2, r0, #6
 8003bda:	1a12      	subs	r2, r2, r0
 8003bdc:	eb63 0301 	sbc.w	r3, r3, r1
 8003be0:	f04f 0000 	mov.w	r0, #0
 8003be4:	f04f 0100 	mov.w	r1, #0
 8003be8:	00d9      	lsls	r1, r3, #3
 8003bea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bee:	00d0      	lsls	r0, r2, #3
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	eb12 0208 	adds.w	r2, r2, r8
 8003bf8:	eb43 0309 	adc.w	r3, r3, r9
 8003bfc:	f04f 0000 	mov.w	r0, #0
 8003c00:	f04f 0100 	mov.w	r1, #0
 8003c04:	0259      	lsls	r1, r3, #9
 8003c06:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003c0a:	0250      	lsls	r0, r2, #9
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	4610      	mov	r0, r2
 8003c12:	4619      	mov	r1, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	461a      	mov	r2, r3
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	f7fc fef6 	bl	8000a0c <__aeabi_uldivmod>
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	4613      	mov	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	e04a      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c2a:	4b31      	ldr	r3, [pc, #196]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	099b      	lsrs	r3, r3, #6
 8003c30:	461a      	mov	r2, r3
 8003c32:	f04f 0300 	mov.w	r3, #0
 8003c36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c3a:	f04f 0100 	mov.w	r1, #0
 8003c3e:	ea02 0400 	and.w	r4, r2, r0
 8003c42:	ea03 0501 	and.w	r5, r3, r1
 8003c46:	4620      	mov	r0, r4
 8003c48:	4629      	mov	r1, r5
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	f04f 0300 	mov.w	r3, #0
 8003c52:	014b      	lsls	r3, r1, #5
 8003c54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c58:	0142      	lsls	r2, r0, #5
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	1b00      	subs	r0, r0, r4
 8003c60:	eb61 0105 	sbc.w	r1, r1, r5
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	018b      	lsls	r3, r1, #6
 8003c6e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c72:	0182      	lsls	r2, r0, #6
 8003c74:	1a12      	subs	r2, r2, r0
 8003c76:	eb63 0301 	sbc.w	r3, r3, r1
 8003c7a:	f04f 0000 	mov.w	r0, #0
 8003c7e:	f04f 0100 	mov.w	r1, #0
 8003c82:	00d9      	lsls	r1, r3, #3
 8003c84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c88:	00d0      	lsls	r0, r2, #3
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	1912      	adds	r2, r2, r4
 8003c90:	eb45 0303 	adc.w	r3, r5, r3
 8003c94:	f04f 0000 	mov.w	r0, #0
 8003c98:	f04f 0100 	mov.w	r1, #0
 8003c9c:	0299      	lsls	r1, r3, #10
 8003c9e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003ca2:	0290      	lsls	r0, r2, #10
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4619      	mov	r1, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	f7fc feaa 	bl	8000a0c <__aeabi_uldivmod>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	0c1b      	lsrs	r3, r3, #16
 8003cc6:	f003 0303 	and.w	r3, r3, #3
 8003cca:	3301      	adds	r3, #1
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd8:	60bb      	str	r3, [r7, #8]
      break;
 8003cda:	e002      	b.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cdc:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003cde:	60bb      	str	r3, [r7, #8]
      break;
 8003ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003cee:	bf00      	nop
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	00f42400 	.word	0x00f42400
 8003cf8:	007a1200 	.word	0x007a1200

08003cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d00:	4b03      	ldr	r3, [pc, #12]	; (8003d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d02:	681b      	ldr	r3, [r3, #0]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	20000000 	.word	0x20000000

08003d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d18:	f7ff fff0 	bl	8003cfc <HAL_RCC_GetHCLKFreq>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	0a9b      	lsrs	r3, r3, #10
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	4903      	ldr	r1, [pc, #12]	; (8003d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d2a:	5ccb      	ldrb	r3, [r1, r3]
 8003d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40023800 	.word	0x40023800
 8003d38:	080083e8 	.word	0x080083e8

08003d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d40:	f7ff ffdc 	bl	8003cfc <HAL_RCC_GetHCLKFreq>
 8003d44:	4602      	mov	r2, r0
 8003d46:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	0b5b      	lsrs	r3, r3, #13
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	4903      	ldr	r1, [pc, #12]	; (8003d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d52:	5ccb      	ldrb	r3, [r1, r3]
 8003d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	080083e8 	.word	0x080083e8

08003d64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	220f      	movs	r2, #15
 8003d72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d74:	4b12      	ldr	r3, [pc, #72]	; (8003dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 0203 	and.w	r2, r3, #3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d80:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003d98:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	08db      	lsrs	r3, r3, #3
 8003d9e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003da6:	4b07      	ldr	r3, [pc, #28]	; (8003dc4 <HAL_RCC_GetClockConfig+0x60>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0207 	and.w	r2, r3, #7
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	601a      	str	r2, [r3, #0]
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	40023c00 	.word	0x40023c00

08003dc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e041      	b.n	8003e5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d106      	bne.n	8003df4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f839 	bl	8003e66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3304      	adds	r3, #4
 8003e04:	4619      	mov	r1, r3
 8003e06:	4610      	mov	r0, r2
 8003e08:	f000 fce2 	bl	80047d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
	...

08003e7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d001      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e04e      	b.n	8003f32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0201 	orr.w	r2, r2, #1
 8003eaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a23      	ldr	r2, [pc, #140]	; (8003f40 <HAL_TIM_Base_Start_IT+0xc4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d022      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x80>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ebe:	d01d      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x80>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a1f      	ldr	r2, [pc, #124]	; (8003f44 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d018      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x80>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1e      	ldr	r2, [pc, #120]	; (8003f48 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d013      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x80>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a1c      	ldr	r2, [pc, #112]	; (8003f4c <HAL_TIM_Base_Start_IT+0xd0>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00e      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x80>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1b      	ldr	r2, [pc, #108]	; (8003f50 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d009      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x80>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a19      	ldr	r2, [pc, #100]	; (8003f54 <HAL_TIM_Base_Start_IT+0xd8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d004      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x80>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a18      	ldr	r2, [pc, #96]	; (8003f58 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d111      	bne.n	8003f20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b06      	cmp	r3, #6
 8003f0c:	d010      	beq.n	8003f30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 0201 	orr.w	r2, r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1e:	e007      	b.n	8003f30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0201 	orr.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40010000 	.word	0x40010000
 8003f44:	40000400 	.word	0x40000400
 8003f48:	40000800 	.word	0x40000800
 8003f4c:	40000c00 	.word	0x40000c00
 8003f50:	40010400 	.word	0x40010400
 8003f54:	40014000 	.word	0x40014000
 8003f58:	40001800 	.word	0x40001800

08003f5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e041      	b.n	8003ff2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d106      	bne.n	8003f88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7fe fafa 	bl	800257c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3304      	adds	r3, #4
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	f000 fc18 	bl	80047d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
	...

08003ffc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d109      	bne.n	8004020 <HAL_TIM_PWM_Start+0x24>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b01      	cmp	r3, #1
 8004016:	bf14      	ite	ne
 8004018:	2301      	movne	r3, #1
 800401a:	2300      	moveq	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	e022      	b.n	8004066 <HAL_TIM_PWM_Start+0x6a>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	2b04      	cmp	r3, #4
 8004024:	d109      	bne.n	800403a <HAL_TIM_PWM_Start+0x3e>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b01      	cmp	r3, #1
 8004030:	bf14      	ite	ne
 8004032:	2301      	movne	r3, #1
 8004034:	2300      	moveq	r3, #0
 8004036:	b2db      	uxtb	r3, r3
 8004038:	e015      	b.n	8004066 <HAL_TIM_PWM_Start+0x6a>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b08      	cmp	r3, #8
 800403e:	d109      	bne.n	8004054 <HAL_TIM_PWM_Start+0x58>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b01      	cmp	r3, #1
 800404a:	bf14      	ite	ne
 800404c:	2301      	movne	r3, #1
 800404e:	2300      	moveq	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	e008      	b.n	8004066 <HAL_TIM_PWM_Start+0x6a>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b01      	cmp	r3, #1
 800405e:	bf14      	ite	ne
 8004060:	2301      	movne	r3, #1
 8004062:	2300      	moveq	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e07c      	b.n	8004168 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d104      	bne.n	800407e <HAL_TIM_PWM_Start+0x82>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800407c:	e013      	b.n	80040a6 <HAL_TIM_PWM_Start+0xaa>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b04      	cmp	r3, #4
 8004082:	d104      	bne.n	800408e <HAL_TIM_PWM_Start+0x92>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800408c:	e00b      	b.n	80040a6 <HAL_TIM_PWM_Start+0xaa>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b08      	cmp	r3, #8
 8004092:	d104      	bne.n	800409e <HAL_TIM_PWM_Start+0xa2>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800409c:	e003      	b.n	80040a6 <HAL_TIM_PWM_Start+0xaa>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2202      	movs	r2, #2
 80040a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2201      	movs	r2, #1
 80040ac:	6839      	ldr	r1, [r7, #0]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 fdde 	bl	8004c70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a2d      	ldr	r2, [pc, #180]	; (8004170 <HAL_TIM_PWM_Start+0x174>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d004      	beq.n	80040c8 <HAL_TIM_PWM_Start+0xcc>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a2c      	ldr	r2, [pc, #176]	; (8004174 <HAL_TIM_PWM_Start+0x178>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d101      	bne.n	80040cc <HAL_TIM_PWM_Start+0xd0>
 80040c8:	2301      	movs	r3, #1
 80040ca:	e000      	b.n	80040ce <HAL_TIM_PWM_Start+0xd2>
 80040cc:	2300      	movs	r3, #0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d007      	beq.n	80040e2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a22      	ldr	r2, [pc, #136]	; (8004170 <HAL_TIM_PWM_Start+0x174>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d022      	beq.n	8004132 <HAL_TIM_PWM_Start+0x136>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f4:	d01d      	beq.n	8004132 <HAL_TIM_PWM_Start+0x136>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a1f      	ldr	r2, [pc, #124]	; (8004178 <HAL_TIM_PWM_Start+0x17c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d018      	beq.n	8004132 <HAL_TIM_PWM_Start+0x136>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a1d      	ldr	r2, [pc, #116]	; (800417c <HAL_TIM_PWM_Start+0x180>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d013      	beq.n	8004132 <HAL_TIM_PWM_Start+0x136>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a1c      	ldr	r2, [pc, #112]	; (8004180 <HAL_TIM_PWM_Start+0x184>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d00e      	beq.n	8004132 <HAL_TIM_PWM_Start+0x136>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a16      	ldr	r2, [pc, #88]	; (8004174 <HAL_TIM_PWM_Start+0x178>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d009      	beq.n	8004132 <HAL_TIM_PWM_Start+0x136>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a18      	ldr	r2, [pc, #96]	; (8004184 <HAL_TIM_PWM_Start+0x188>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d004      	beq.n	8004132 <HAL_TIM_PWM_Start+0x136>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a16      	ldr	r2, [pc, #88]	; (8004188 <HAL_TIM_PWM_Start+0x18c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d111      	bne.n	8004156 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2b06      	cmp	r3, #6
 8004142:	d010      	beq.n	8004166 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0201 	orr.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004154:	e007      	b.n	8004166 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f042 0201 	orr.w	r2, r2, #1
 8004164:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40010000 	.word	0x40010000
 8004174:	40010400 	.word	0x40010400
 8004178:	40000400 	.word	0x40000400
 800417c:	40000800 	.word	0x40000800
 8004180:	40000c00 	.word	0x40000c00
 8004184:	40014000 	.word	0x40014000
 8004188:	40001800 	.word	0x40001800

0800418c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e097      	b.n	80042d0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d106      	bne.n	80041ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7fe fa01 	bl	80025bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2202      	movs	r2, #2
 80041be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6812      	ldr	r2, [r2, #0]
 80041cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041d0:	f023 0307 	bic.w	r3, r3, #7
 80041d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3304      	adds	r3, #4
 80041de:	4619      	mov	r1, r3
 80041e0:	4610      	mov	r0, r2
 80041e2:	f000 faf5 	bl	80047d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	4313      	orrs	r3, r2
 8004206:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420e:	f023 0303 	bic.w	r3, r3, #3
 8004212:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	021b      	lsls	r3, r3, #8
 800421e:	4313      	orrs	r3, r2
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800422c:	f023 030c 	bic.w	r3, r3, #12
 8004230:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004238:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800423c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	021b      	lsls	r3, r3, #8
 8004248:	4313      	orrs	r3, r2
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	011a      	lsls	r2, r3, #4
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	031b      	lsls	r3, r3, #12
 800425c:	4313      	orrs	r3, r2
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800426a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004272:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	4313      	orrs	r3, r2
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	4313      	orrs	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042e8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042f0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042f8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004300:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d110      	bne.n	800432a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004308:	7bfb      	ldrb	r3, [r7, #15]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d102      	bne.n	8004314 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800430e:	7b7b      	ldrb	r3, [r7, #13]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d001      	beq.n	8004318 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e069      	b.n	80043ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004328:	e031      	b.n	800438e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b04      	cmp	r3, #4
 800432e:	d110      	bne.n	8004352 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004330:	7bbb      	ldrb	r3, [r7, #14]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d102      	bne.n	800433c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004336:	7b3b      	ldrb	r3, [r7, #12]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d001      	beq.n	8004340 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e055      	b.n	80043ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004350:	e01d      	b.n	800438e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004352:	7bfb      	ldrb	r3, [r7, #15]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d108      	bne.n	800436a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004358:	7bbb      	ldrb	r3, [r7, #14]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d105      	bne.n	800436a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800435e:	7b7b      	ldrb	r3, [r7, #13]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d102      	bne.n	800436a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004364:	7b3b      	ldrb	r3, [r7, #12]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d001      	beq.n	800436e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e03e      	b.n	80043ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2202      	movs	r2, #2
 8004372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2202      	movs	r2, #2
 800437a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2202      	movs	r2, #2
 8004382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2202      	movs	r2, #2
 800438a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <HAL_TIM_Encoder_Start+0xc4>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	2b04      	cmp	r3, #4
 8004398:	d008      	beq.n	80043ac <HAL_TIM_Encoder_Start+0xd4>
 800439a:	e00f      	b.n	80043bc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2201      	movs	r2, #1
 80043a2:	2100      	movs	r1, #0
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fc63 	bl	8004c70 <TIM_CCxChannelCmd>
      break;
 80043aa:	e016      	b.n	80043da <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2201      	movs	r2, #1
 80043b2:	2104      	movs	r1, #4
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 fc5b 	bl	8004c70 <TIM_CCxChannelCmd>
      break;
 80043ba:	e00e      	b.n	80043da <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2201      	movs	r2, #1
 80043c2:	2100      	movs	r1, #0
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 fc53 	bl	8004c70 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2201      	movs	r2, #1
 80043d0:	2104      	movs	r1, #4
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fc4c 	bl	8004c70 <TIM_CCxChannelCmd>
      break;
 80043d8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f042 0201 	orr.w	r2, r2, #1
 80043e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b02      	cmp	r3, #2
 8004408:	d122      	bne.n	8004450 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b02      	cmp	r3, #2
 8004416:	d11b      	bne.n	8004450 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f06f 0202 	mvn.w	r2, #2
 8004420:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f9ac 	bl	8004794 <HAL_TIM_IC_CaptureCallback>
 800443c:	e005      	b.n	800444a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f99e 	bl	8004780 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f9af 	bl	80047a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b04      	cmp	r3, #4
 800445c:	d122      	bne.n	80044a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b04      	cmp	r3, #4
 800446a:	d11b      	bne.n	80044a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f06f 0204 	mvn.w	r2, #4
 8004474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2202      	movs	r2, #2
 800447a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f982 	bl	8004794 <HAL_TIM_IC_CaptureCallback>
 8004490:	e005      	b.n	800449e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f974 	bl	8004780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f985 	bl	80047a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d122      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d11b      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0208 	mvn.w	r2, #8
 80044c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2204      	movs	r2, #4
 80044ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f958 	bl	8004794 <HAL_TIM_IC_CaptureCallback>
 80044e4:	e005      	b.n	80044f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f94a 	bl	8004780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f95b 	bl	80047a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	f003 0310 	and.w	r3, r3, #16
 8004502:	2b10      	cmp	r3, #16
 8004504:	d122      	bne.n	800454c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f003 0310 	and.w	r3, r3, #16
 8004510:	2b10      	cmp	r3, #16
 8004512:	d11b      	bne.n	800454c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f06f 0210 	mvn.w	r2, #16
 800451c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2208      	movs	r2, #8
 8004522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f92e 	bl	8004794 <HAL_TIM_IC_CaptureCallback>
 8004538:	e005      	b.n	8004546 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f920 	bl	8004780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f931 	bl	80047a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b01      	cmp	r3, #1
 8004558:	d10e      	bne.n	8004578 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b01      	cmp	r3, #1
 8004566:	d107      	bne.n	8004578 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f06f 0201 	mvn.w	r2, #1
 8004570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fd fda2 	bl	80020bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004582:	2b80      	cmp	r3, #128	; 0x80
 8004584:	d10e      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004590:	2b80      	cmp	r3, #128	; 0x80
 8004592:	d107      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800459c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 fc12 	bl	8004dc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ae:	2b40      	cmp	r3, #64	; 0x40
 80045b0:	d10e      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045bc:	2b40      	cmp	r3, #64	; 0x40
 80045be:	d107      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f8f6 	bl	80047bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f003 0320 	and.w	r3, r3, #32
 80045da:	2b20      	cmp	r3, #32
 80045dc:	d10e      	bne.n	80045fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f003 0320 	and.w	r3, r3, #32
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d107      	bne.n	80045fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f06f 0220 	mvn.w	r2, #32
 80045f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fbdc 	bl	8004db4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045fc:	bf00      	nop
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800461a:	2302      	movs	r3, #2
 800461c:	e0ac      	b.n	8004778 <HAL_TIM_PWM_ConfigChannel+0x174>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b0c      	cmp	r3, #12
 800462a:	f200 809f 	bhi.w	800476c <HAL_TIM_PWM_ConfigChannel+0x168>
 800462e:	a201      	add	r2, pc, #4	; (adr r2, 8004634 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004634:	08004669 	.word	0x08004669
 8004638:	0800476d 	.word	0x0800476d
 800463c:	0800476d 	.word	0x0800476d
 8004640:	0800476d 	.word	0x0800476d
 8004644:	080046a9 	.word	0x080046a9
 8004648:	0800476d 	.word	0x0800476d
 800464c:	0800476d 	.word	0x0800476d
 8004650:	0800476d 	.word	0x0800476d
 8004654:	080046eb 	.word	0x080046eb
 8004658:	0800476d 	.word	0x0800476d
 800465c:	0800476d 	.word	0x0800476d
 8004660:	0800476d 	.word	0x0800476d
 8004664:	0800472b 	.word	0x0800472b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68b9      	ldr	r1, [r7, #8]
 800466e:	4618      	mov	r0, r3
 8004670:	f000 f94e 	bl	8004910 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0208 	orr.w	r2, r2, #8
 8004682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699a      	ldr	r2, [r3, #24]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0204 	bic.w	r2, r2, #4
 8004692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6999      	ldr	r1, [r3, #24]
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	691a      	ldr	r2, [r3, #16]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	619a      	str	r2, [r3, #24]
      break;
 80046a6:	e062      	b.n	800476e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68b9      	ldr	r1, [r7, #8]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 f99e 	bl	80049f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699a      	ldr	r2, [r3, #24]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699a      	ldr	r2, [r3, #24]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6999      	ldr	r1, [r3, #24]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	021a      	lsls	r2, r3, #8
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	619a      	str	r2, [r3, #24]
      break;
 80046e8:	e041      	b.n	800476e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68b9      	ldr	r1, [r7, #8]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 f9f3 	bl	8004adc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69da      	ldr	r2, [r3, #28]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f042 0208 	orr.w	r2, r2, #8
 8004704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69da      	ldr	r2, [r3, #28]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0204 	bic.w	r2, r2, #4
 8004714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69d9      	ldr	r1, [r3, #28]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	61da      	str	r2, [r3, #28]
      break;
 8004728:	e021      	b.n	800476e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	4618      	mov	r0, r3
 8004732:	f000 fa47 	bl	8004bc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	69da      	ldr	r2, [r3, #28]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69da      	ldr	r2, [r3, #28]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69d9      	ldr	r1, [r3, #28]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	021a      	lsls	r2, r3, #8
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	61da      	str	r2, [r3, #28]
      break;
 800476a:	e000      	b.n	800476e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800476c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a40      	ldr	r2, [pc, #256]	; (80048e4 <TIM_Base_SetConfig+0x114>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d013      	beq.n	8004810 <TIM_Base_SetConfig+0x40>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ee:	d00f      	beq.n	8004810 <TIM_Base_SetConfig+0x40>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a3d      	ldr	r2, [pc, #244]	; (80048e8 <TIM_Base_SetConfig+0x118>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d00b      	beq.n	8004810 <TIM_Base_SetConfig+0x40>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a3c      	ldr	r2, [pc, #240]	; (80048ec <TIM_Base_SetConfig+0x11c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d007      	beq.n	8004810 <TIM_Base_SetConfig+0x40>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a3b      	ldr	r2, [pc, #236]	; (80048f0 <TIM_Base_SetConfig+0x120>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d003      	beq.n	8004810 <TIM_Base_SetConfig+0x40>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a3a      	ldr	r2, [pc, #232]	; (80048f4 <TIM_Base_SetConfig+0x124>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d108      	bne.n	8004822 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a2f      	ldr	r2, [pc, #188]	; (80048e4 <TIM_Base_SetConfig+0x114>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d02b      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004830:	d027      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a2c      	ldr	r2, [pc, #176]	; (80048e8 <TIM_Base_SetConfig+0x118>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d023      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a2b      	ldr	r2, [pc, #172]	; (80048ec <TIM_Base_SetConfig+0x11c>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d01f      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a2a      	ldr	r2, [pc, #168]	; (80048f0 <TIM_Base_SetConfig+0x120>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d01b      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a29      	ldr	r2, [pc, #164]	; (80048f4 <TIM_Base_SetConfig+0x124>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d017      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a28      	ldr	r2, [pc, #160]	; (80048f8 <TIM_Base_SetConfig+0x128>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d013      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a27      	ldr	r2, [pc, #156]	; (80048fc <TIM_Base_SetConfig+0x12c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00f      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a26      	ldr	r2, [pc, #152]	; (8004900 <TIM_Base_SetConfig+0x130>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d00b      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a25      	ldr	r2, [pc, #148]	; (8004904 <TIM_Base_SetConfig+0x134>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d007      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a24      	ldr	r2, [pc, #144]	; (8004908 <TIM_Base_SetConfig+0x138>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d003      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a23      	ldr	r2, [pc, #140]	; (800490c <TIM_Base_SetConfig+0x13c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d108      	bne.n	8004894 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	4313      	orrs	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a0a      	ldr	r2, [pc, #40]	; (80048e4 <TIM_Base_SetConfig+0x114>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d003      	beq.n	80048c8 <TIM_Base_SetConfig+0xf8>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a0c      	ldr	r2, [pc, #48]	; (80048f4 <TIM_Base_SetConfig+0x124>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d103      	bne.n	80048d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	615a      	str	r2, [r3, #20]
}
 80048d6:	bf00      	nop
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	40010000 	.word	0x40010000
 80048e8:	40000400 	.word	0x40000400
 80048ec:	40000800 	.word	0x40000800
 80048f0:	40000c00 	.word	0x40000c00
 80048f4:	40010400 	.word	0x40010400
 80048f8:	40014000 	.word	0x40014000
 80048fc:	40014400 	.word	0x40014400
 8004900:	40014800 	.word	0x40014800
 8004904:	40001800 	.word	0x40001800
 8004908:	40001c00 	.word	0x40001c00
 800490c:	40002000 	.word	0x40002000

08004910 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	f023 0201 	bic.w	r2, r3, #1
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0303 	bic.w	r3, r3, #3
 8004946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f023 0302 	bic.w	r3, r3, #2
 8004958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	4313      	orrs	r3, r2
 8004962:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a20      	ldr	r2, [pc, #128]	; (80049e8 <TIM_OC1_SetConfig+0xd8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d003      	beq.n	8004974 <TIM_OC1_SetConfig+0x64>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a1f      	ldr	r2, [pc, #124]	; (80049ec <TIM_OC1_SetConfig+0xdc>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d10c      	bne.n	800498e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f023 0308 	bic.w	r3, r3, #8
 800497a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	4313      	orrs	r3, r2
 8004984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f023 0304 	bic.w	r3, r3, #4
 800498c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a15      	ldr	r2, [pc, #84]	; (80049e8 <TIM_OC1_SetConfig+0xd8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d003      	beq.n	800499e <TIM_OC1_SetConfig+0x8e>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a14      	ldr	r2, [pc, #80]	; (80049ec <TIM_OC1_SetConfig+0xdc>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d111      	bne.n	80049c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	621a      	str	r2, [r3, #32]
}
 80049dc:	bf00      	nop
 80049de:	371c      	adds	r7, #28
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	40010000 	.word	0x40010000
 80049ec:	40010400 	.word	0x40010400

080049f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	f023 0210 	bic.w	r2, r3, #16
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	021b      	lsls	r3, r3, #8
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f023 0320 	bic.w	r3, r3, #32
 8004a3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a22      	ldr	r2, [pc, #136]	; (8004ad4 <TIM_OC2_SetConfig+0xe4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d003      	beq.n	8004a58 <TIM_OC2_SetConfig+0x68>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a21      	ldr	r2, [pc, #132]	; (8004ad8 <TIM_OC2_SetConfig+0xe8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d10d      	bne.n	8004a74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a17      	ldr	r2, [pc, #92]	; (8004ad4 <TIM_OC2_SetConfig+0xe4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d003      	beq.n	8004a84 <TIM_OC2_SetConfig+0x94>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a16      	ldr	r2, [pc, #88]	; (8004ad8 <TIM_OC2_SetConfig+0xe8>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d113      	bne.n	8004aac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	621a      	str	r2, [r3, #32]
}
 8004ac6:	bf00      	nop
 8004ac8:	371c      	adds	r7, #28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	40010000 	.word	0x40010000
 8004ad8:	40010400 	.word	0x40010400

08004adc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 0303 	bic.w	r3, r3, #3
 8004b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	021b      	lsls	r3, r3, #8
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a21      	ldr	r2, [pc, #132]	; (8004bbc <TIM_OC3_SetConfig+0xe0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d003      	beq.n	8004b42 <TIM_OC3_SetConfig+0x66>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a20      	ldr	r2, [pc, #128]	; (8004bc0 <TIM_OC3_SetConfig+0xe4>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d10d      	bne.n	8004b5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	021b      	lsls	r3, r3, #8
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a16      	ldr	r2, [pc, #88]	; (8004bbc <TIM_OC3_SetConfig+0xe0>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d003      	beq.n	8004b6e <TIM_OC3_SetConfig+0x92>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a15      	ldr	r2, [pc, #84]	; (8004bc0 <TIM_OC3_SetConfig+0xe4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d113      	bne.n	8004b96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	011b      	lsls	r3, r3, #4
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	621a      	str	r2, [r3, #32]
}
 8004bb0:	bf00      	nop
 8004bb2:	371c      	adds	r7, #28
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	40010000 	.word	0x40010000
 8004bc0:	40010400 	.word	0x40010400

08004bc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	021b      	lsls	r3, r3, #8
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	031b      	lsls	r3, r3, #12
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a12      	ldr	r2, [pc, #72]	; (8004c68 <TIM_OC4_SetConfig+0xa4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d003      	beq.n	8004c2c <TIM_OC4_SetConfig+0x68>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a11      	ldr	r2, [pc, #68]	; (8004c6c <TIM_OC4_SetConfig+0xa8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d109      	bne.n	8004c40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	019b      	lsls	r3, r3, #6
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	621a      	str	r2, [r3, #32]
}
 8004c5a:	bf00      	nop
 8004c5c:	371c      	adds	r7, #28
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	40010000 	.word	0x40010000
 8004c6c:	40010400 	.word	0x40010400

08004c70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f003 031f 	and.w	r3, r3, #31
 8004c82:	2201      	movs	r2, #1
 8004c84:	fa02 f303 	lsl.w	r3, r2, r3
 8004c88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a1a      	ldr	r2, [r3, #32]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	43db      	mvns	r3, r3
 8004c92:	401a      	ands	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6a1a      	ldr	r2, [r3, #32]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f003 031f 	and.w	r3, r3, #31
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	621a      	str	r2, [r3, #32]
}
 8004cae:	bf00      	nop
 8004cb0:	371c      	adds	r7, #28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
	...

08004cbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d101      	bne.n	8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	e05a      	b.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a21      	ldr	r2, [pc, #132]	; (8004d98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d022      	beq.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d20:	d01d      	beq.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a1d      	ldr	r2, [pc, #116]	; (8004d9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d018      	beq.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a1b      	ldr	r2, [pc, #108]	; (8004da0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d013      	beq.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a1a      	ldr	r2, [pc, #104]	; (8004da4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d00e      	beq.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a18      	ldr	r2, [pc, #96]	; (8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d009      	beq.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a17      	ldr	r2, [pc, #92]	; (8004dac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d004      	beq.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a15      	ldr	r2, [pc, #84]	; (8004db0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d10c      	bne.n	8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40010000 	.word	0x40010000
 8004d9c:	40000400 	.word	0x40000400
 8004da0:	40000800 	.word	0x40000800
 8004da4:	40000c00 	.word	0x40000c00
 8004da8:	40010400 	.word	0x40010400
 8004dac:	40014000 	.word	0x40014000
 8004db0:	40001800 	.word	0x40001800

08004db4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e03f      	b.n	8004e6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fd fd3a 	bl	800287c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2224      	movs	r2, #36	; 0x24
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 fc7b 	bl	800571c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	691a      	ldr	r2, [r3, #16]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	695a      	ldr	r2, [r3, #20]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b08a      	sub	sp, #40	; 0x28
 8004e7a:	af02      	add	r7, sp, #8
 8004e7c:	60f8      	str	r0, [r7, #12]
 8004e7e:	60b9      	str	r1, [r7, #8]
 8004e80:	603b      	str	r3, [r7, #0]
 8004e82:	4613      	mov	r3, r2
 8004e84:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e86:	2300      	movs	r3, #0
 8004e88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b20      	cmp	r3, #32
 8004e94:	d17c      	bne.n	8004f90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <HAL_UART_Transmit+0x2c>
 8004e9c:	88fb      	ldrh	r3, [r7, #6]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e075      	b.n	8004f92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d101      	bne.n	8004eb4 <HAL_UART_Transmit+0x3e>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	e06e      	b.n	8004f92 <HAL_UART_Transmit+0x11c>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2221      	movs	r2, #33	; 0x21
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eca:	f7fd fe13 	bl	8002af4 <HAL_GetTick>
 8004ece:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	88fa      	ldrh	r2, [r7, #6]
 8004ed4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	88fa      	ldrh	r2, [r7, #6]
 8004eda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee4:	d108      	bne.n	8004ef8 <HAL_UART_Transmit+0x82>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d104      	bne.n	8004ef8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	61bb      	str	r3, [r7, #24]
 8004ef6:	e003      	b.n	8004f00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004efc:	2300      	movs	r3, #0
 8004efe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004f08:	e02a      	b.n	8004f60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	2200      	movs	r2, #0
 8004f12:	2180      	movs	r1, #128	; 0x80
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 fa3d 	bl	8005394 <UART_WaitOnFlagUntilTimeout>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e036      	b.n	8004f92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10b      	bne.n	8004f42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	3302      	adds	r3, #2
 8004f3e:	61bb      	str	r3, [r7, #24]
 8004f40:	e007      	b.n	8004f52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	781a      	ldrb	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1cf      	bne.n	8004f0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2200      	movs	r2, #0
 8004f72:	2140      	movs	r1, #64	; 0x40
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 fa0d 	bl	8005394 <UART_WaitOnFlagUntilTimeout>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e006      	b.n	8004f92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	e000      	b.n	8004f92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f90:	2302      	movs	r3, #2
  }
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3720      	adds	r7, #32
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	60f8      	str	r0, [r7, #12]
 8004fa2:	60b9      	str	r1, [r7, #8]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b20      	cmp	r3, #32
 8004fb2:	d11d      	bne.n	8004ff0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d002      	beq.n	8004fc0 <HAL_UART_Receive_IT+0x26>
 8004fba:	88fb      	ldrh	r3, [r7, #6]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d101      	bne.n	8004fc4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e016      	b.n	8004ff2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d101      	bne.n	8004fd2 <HAL_UART_Receive_IT+0x38>
 8004fce:	2302      	movs	r3, #2
 8004fd0:	e00f      	b.n	8004ff2 <HAL_UART_Receive_IT+0x58>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004fe0:	88fb      	ldrh	r3, [r7, #6]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	68b9      	ldr	r1, [r7, #8]
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 fa1e 	bl	8005428 <UART_Start_Receive_IT>
 8004fec:	4603      	mov	r3, r0
 8004fee:	e000      	b.n	8004ff2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004ff0:	2302      	movs	r3, #2
  }
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
	...

08004ffc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b08a      	sub	sp, #40	; 0x28
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800501c:	2300      	movs	r3, #0
 800501e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005020:	2300      	movs	r3, #0
 8005022:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	f003 030f 	and.w	r3, r3, #15
 800502a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10d      	bne.n	800504e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	f003 0320 	and.w	r3, r3, #32
 8005038:	2b00      	cmp	r3, #0
 800503a:	d008      	beq.n	800504e <HAL_UART_IRQHandler+0x52>
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	f003 0320 	and.w	r3, r3, #32
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fad1 	bl	80055ee <UART_Receive_IT>
      return;
 800504c:	e17c      	b.n	8005348 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 80b1 	beq.w	80051b8 <HAL_UART_IRQHandler+0x1bc>
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	d105      	bne.n	800506c <HAL_UART_IRQHandler+0x70>
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 80a6 	beq.w	80051b8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00a      	beq.n	800508c <HAL_UART_IRQHandler+0x90>
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800507c:	2b00      	cmp	r3, #0
 800507e:	d005      	beq.n	800508c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005084:	f043 0201 	orr.w	r2, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	f003 0304 	and.w	r3, r3, #4
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <HAL_UART_IRQHandler+0xb0>
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	d005      	beq.n	80050ac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a4:	f043 0202 	orr.w	r2, r3, #2
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <HAL_UART_IRQHandler+0xd0>
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d005      	beq.n	80050cc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	f043 0204 	orr.w	r2, r3, #4
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00f      	beq.n	80050f6 <HAL_UART_IRQHandler+0xfa>
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	f003 0320 	and.w	r3, r3, #32
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d104      	bne.n	80050ea <HAL_UART_IRQHandler+0xee>
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d005      	beq.n	80050f6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	f043 0208 	orr.w	r2, r3, #8
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 811f 	beq.w	800533e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	f003 0320 	and.w	r3, r3, #32
 8005106:	2b00      	cmp	r3, #0
 8005108:	d007      	beq.n	800511a <HAL_UART_IRQHandler+0x11e>
 800510a:	6a3b      	ldr	r3, [r7, #32]
 800510c:	f003 0320 	and.w	r3, r3, #32
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fa6a 	bl	80055ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005124:	2b40      	cmp	r3, #64	; 0x40
 8005126:	bf0c      	ite	eq
 8005128:	2301      	moveq	r3, #1
 800512a:	2300      	movne	r3, #0
 800512c:	b2db      	uxtb	r3, r3
 800512e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005134:	f003 0308 	and.w	r3, r3, #8
 8005138:	2b00      	cmp	r3, #0
 800513a:	d102      	bne.n	8005142 <HAL_UART_IRQHandler+0x146>
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d031      	beq.n	80051a6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f9aa 	bl	800549c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005152:	2b40      	cmp	r3, #64	; 0x40
 8005154:	d123      	bne.n	800519e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	695a      	ldr	r2, [r3, #20]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005164:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	2b00      	cmp	r3, #0
 800516c:	d013      	beq.n	8005196 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	4a77      	ldr	r2, [pc, #476]	; (8005350 <HAL_UART_IRQHandler+0x354>)
 8005174:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517a:	4618      	mov	r0, r3
 800517c:	f7fd fe18 	bl	8002db0 <HAL_DMA_Abort_IT>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d016      	beq.n	80051b4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005190:	4610      	mov	r0, r2
 8005192:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005194:	e00e      	b.n	80051b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f8e6 	bl	8005368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800519c:	e00a      	b.n	80051b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f8e2 	bl	8005368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a4:	e006      	b.n	80051b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f8de 	bl	8005368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80051b2:	e0c4      	b.n	800533e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b4:	bf00      	nop
    return;
 80051b6:	e0c2      	b.n	800533e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051bc:	2b01      	cmp	r3, #1
 80051be:	f040 80a2 	bne.w	8005306 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	f003 0310 	and.w	r3, r3, #16
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 809c 	beq.w	8005306 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	f003 0310 	and.w	r3, r3, #16
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 8096 	beq.w	8005306 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fa:	2b40      	cmp	r3, #64	; 0x40
 80051fc:	d14f      	bne.n	800529e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005208:	8a3b      	ldrh	r3, [r7, #16]
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 8099 	beq.w	8005342 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005214:	8a3a      	ldrh	r2, [r7, #16]
 8005216:	429a      	cmp	r2, r3
 8005218:	f080 8093 	bcs.w	8005342 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	8a3a      	ldrh	r2, [r7, #16]
 8005220:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800522c:	d02b      	beq.n	8005286 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68da      	ldr	r2, [r3, #12]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800523c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695a      	ldr	r2, [r3, #20]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0201 	bic.w	r2, r2, #1
 800524c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695a      	ldr	r2, [r3, #20]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800525c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2220      	movs	r2, #32
 8005262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68da      	ldr	r2, [r3, #12]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 0210 	bic.w	r2, r2, #16
 800527a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005280:	4618      	mov	r0, r3
 8005282:	f7fd fd25 	bl	8002cd0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800528e:	b29b      	uxth	r3, r3
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	b29b      	uxth	r3, r3
 8005294:	4619      	mov	r1, r3
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f870 	bl	800537c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800529c:	e051      	b.n	8005342 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d047      	beq.n	8005346 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80052b6:	8a7b      	ldrh	r3, [r7, #18]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d044      	beq.n	8005346 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052ca:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	695a      	ldr	r2, [r3, #20]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 0201 	bic.w	r2, r2, #1
 80052da:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2220      	movs	r2, #32
 80052e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68da      	ldr	r2, [r3, #12]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0210 	bic.w	r2, r2, #16
 80052f8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052fa:	8a7b      	ldrh	r3, [r7, #18]
 80052fc:	4619      	mov	r1, r3
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f83c 	bl	800537c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005304:	e01f      	b.n	8005346 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530c:	2b00      	cmp	r3, #0
 800530e:	d008      	beq.n	8005322 <HAL_UART_IRQHandler+0x326>
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f8ff 	bl	800551e <UART_Transmit_IT>
    return;
 8005320:	e012      	b.n	8005348 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00d      	beq.n	8005348 <HAL_UART_IRQHandler+0x34c>
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005332:	2b00      	cmp	r3, #0
 8005334:	d008      	beq.n	8005348 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f941 	bl	80055be <UART_EndTransmit_IT>
    return;
 800533c:	e004      	b.n	8005348 <HAL_UART_IRQHandler+0x34c>
    return;
 800533e:	bf00      	nop
 8005340:	e002      	b.n	8005348 <HAL_UART_IRQHandler+0x34c>
      return;
 8005342:	bf00      	nop
 8005344:	e000      	b.n	8005348 <HAL_UART_IRQHandler+0x34c>
      return;
 8005346:	bf00      	nop
  }
}
 8005348:	3728      	adds	r7, #40	; 0x28
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	080054f7 	.word	0x080054f7

08005354 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	460b      	mov	r3, r1
 8005386:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	603b      	str	r3, [r7, #0]
 80053a0:	4613      	mov	r3, r2
 80053a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053a4:	e02c      	b.n	8005400 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ac:	d028      	beq.n	8005400 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d007      	beq.n	80053c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80053b4:	f7fd fb9e 	bl	8002af4 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d21d      	bcs.n	8005400 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80053d2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695a      	ldr	r2, [r3, #20]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0201 	bic.w	r2, r2, #1
 80053e2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2220      	movs	r2, #32
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e00f      	b.n	8005420 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	4013      	ands	r3, r2
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	429a      	cmp	r2, r3
 800540e:	bf0c      	ite	eq
 8005410:	2301      	moveq	r3, #1
 8005412:	2300      	movne	r3, #0
 8005414:	b2db      	uxtb	r3, r3
 8005416:	461a      	mov	r2, r3
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	429a      	cmp	r2, r3
 800541c:	d0c3      	beq.n	80053a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	4613      	mov	r3, r2
 8005434:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	88fa      	ldrh	r2, [r7, #6]
 8005440:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	88fa      	ldrh	r2, [r7, #6]
 8005446:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2222      	movs	r2, #34	; 0x22
 8005452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68da      	ldr	r2, [r3, #12]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800546c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	695a      	ldr	r2, [r3, #20]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f042 0201 	orr.w	r2, r2, #1
 800547c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f042 0220 	orr.w	r2, r2, #32
 800548c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80054b2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695a      	ldr	r2, [r3, #20]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0201 	bic.w	r2, r2, #1
 80054c2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d107      	bne.n	80054dc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 0210 	bic.w	r2, r2, #16
 80054da:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2220      	movs	r2, #32
 80054e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b084      	sub	sp, #16
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005502:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f7ff ff29 	bl	8005368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005516:	bf00      	nop
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800551e:	b480      	push	{r7}
 8005520:	b085      	sub	sp, #20
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b21      	cmp	r3, #33	; 0x21
 8005530:	d13e      	bne.n	80055b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800553a:	d114      	bne.n	8005566 <UART_Transmit_IT+0x48>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d110      	bne.n	8005566 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	461a      	mov	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005558:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	1c9a      	adds	r2, r3, #2
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	621a      	str	r2, [r3, #32]
 8005564:	e008      	b.n	8005578 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	1c59      	adds	r1, r3, #1
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	6211      	str	r1, [r2, #32]
 8005570:	781a      	ldrb	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800557c:	b29b      	uxth	r3, r3
 800557e:	3b01      	subs	r3, #1
 8005580:	b29b      	uxth	r3, r3
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	4619      	mov	r1, r3
 8005586:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10f      	bne.n	80055ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68da      	ldr	r2, [r3, #12]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800559a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80055ac:	2300      	movs	r3, #0
 80055ae:	e000      	b.n	80055b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80055b0:	2302      	movs	r3, #2
  }
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b082      	sub	sp, #8
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68da      	ldr	r2, [r3, #12]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2220      	movs	r2, #32
 80055da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7ff feb8 	bl	8005354 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b084      	sub	sp, #16
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b22      	cmp	r3, #34	; 0x22
 8005600:	f040 8087 	bne.w	8005712 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800560c:	d117      	bne.n	800563e <UART_Receive_IT+0x50>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d113      	bne.n	800563e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005616:	2300      	movs	r3, #0
 8005618:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	b29b      	uxth	r3, r3
 8005628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800562c:	b29a      	uxth	r2, r3
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005636:	1c9a      	adds	r2, r3, #2
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	629a      	str	r2, [r3, #40]	; 0x28
 800563c:	e026      	b.n	800568c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005642:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005644:	2300      	movs	r3, #0
 8005646:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005650:	d007      	beq.n	8005662 <UART_Receive_IT+0x74>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10a      	bne.n	8005670 <UART_Receive_IT+0x82>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d106      	bne.n	8005670 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	b2da      	uxtb	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	701a      	strb	r2, [r3, #0]
 800566e:	e008      	b.n	8005682 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	b2db      	uxtb	r3, r3
 8005678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800567c:	b2da      	uxtb	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005686:	1c5a      	adds	r2, r3, #1
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005690:	b29b      	uxth	r3, r3
 8005692:	3b01      	subs	r3, #1
 8005694:	b29b      	uxth	r3, r3
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	4619      	mov	r1, r3
 800569a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800569c:	2b00      	cmp	r3, #0
 800569e:	d136      	bne.n	800570e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 0220 	bic.w	r2, r2, #32
 80056ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68da      	ldr	r2, [r3, #12]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	695a      	ldr	r2, [r3, #20]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0201 	bic.w	r2, r2, #1
 80056ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d10e      	bne.n	80056fe <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0210 	bic.w	r2, r2, #16
 80056ee:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056f4:	4619      	mov	r1, r3
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7ff fe40 	bl	800537c <HAL_UARTEx_RxEventCallback>
 80056fc:	e002      	b.n	8005704 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7fb fe50 	bl	80013a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	e002      	b.n	8005714 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	e000      	b.n	8005714 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005712:	2302      	movs	r3, #2
  }
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800571c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005720:	b09f      	sub	sp, #124	; 0x7c
 8005722:	af00      	add	r7, sp, #0
 8005724:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005732:	68d9      	ldr	r1, [r3, #12]
 8005734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	ea40 0301 	orr.w	r3, r0, r1
 800573c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800573e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	431a      	orrs	r2, r3
 8005748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	431a      	orrs	r2, r3
 800574e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	4313      	orrs	r3, r2
 8005754:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005760:	f021 010c 	bic.w	r1, r1, #12
 8005764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800576a:	430b      	orrs	r3, r1
 800576c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800576e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800577a:	6999      	ldr	r1, [r3, #24]
 800577c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	ea40 0301 	orr.w	r3, r0, r1
 8005784:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	4bc5      	ldr	r3, [pc, #788]	; (8005aa0 <UART_SetConfig+0x384>)
 800578c:	429a      	cmp	r2, r3
 800578e:	d004      	beq.n	800579a <UART_SetConfig+0x7e>
 8005790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	4bc3      	ldr	r3, [pc, #780]	; (8005aa4 <UART_SetConfig+0x388>)
 8005796:	429a      	cmp	r2, r3
 8005798:	d103      	bne.n	80057a2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800579a:	f7fe facf 	bl	8003d3c <HAL_RCC_GetPCLK2Freq>
 800579e:	6778      	str	r0, [r7, #116]	; 0x74
 80057a0:	e002      	b.n	80057a8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057a2:	f7fe fab7 	bl	8003d14 <HAL_RCC_GetPCLK1Freq>
 80057a6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057b0:	f040 80b6 	bne.w	8005920 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057b6:	461c      	mov	r4, r3
 80057b8:	f04f 0500 	mov.w	r5, #0
 80057bc:	4622      	mov	r2, r4
 80057be:	462b      	mov	r3, r5
 80057c0:	1891      	adds	r1, r2, r2
 80057c2:	6439      	str	r1, [r7, #64]	; 0x40
 80057c4:	415b      	adcs	r3, r3
 80057c6:	647b      	str	r3, [r7, #68]	; 0x44
 80057c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057cc:	1912      	adds	r2, r2, r4
 80057ce:	eb45 0303 	adc.w	r3, r5, r3
 80057d2:	f04f 0000 	mov.w	r0, #0
 80057d6:	f04f 0100 	mov.w	r1, #0
 80057da:	00d9      	lsls	r1, r3, #3
 80057dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057e0:	00d0      	lsls	r0, r2, #3
 80057e2:	4602      	mov	r2, r0
 80057e4:	460b      	mov	r3, r1
 80057e6:	1911      	adds	r1, r2, r4
 80057e8:	6639      	str	r1, [r7, #96]	; 0x60
 80057ea:	416b      	adcs	r3, r5
 80057ec:	667b      	str	r3, [r7, #100]	; 0x64
 80057ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	461a      	mov	r2, r3
 80057f4:	f04f 0300 	mov.w	r3, #0
 80057f8:	1891      	adds	r1, r2, r2
 80057fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80057fc:	415b      	adcs	r3, r3
 80057fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005800:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005804:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005808:	f7fb f900 	bl	8000a0c <__aeabi_uldivmod>
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	4ba5      	ldr	r3, [pc, #660]	; (8005aa8 <UART_SetConfig+0x38c>)
 8005812:	fba3 2302 	umull	r2, r3, r3, r2
 8005816:	095b      	lsrs	r3, r3, #5
 8005818:	011e      	lsls	r6, r3, #4
 800581a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800581c:	461c      	mov	r4, r3
 800581e:	f04f 0500 	mov.w	r5, #0
 8005822:	4622      	mov	r2, r4
 8005824:	462b      	mov	r3, r5
 8005826:	1891      	adds	r1, r2, r2
 8005828:	6339      	str	r1, [r7, #48]	; 0x30
 800582a:	415b      	adcs	r3, r3
 800582c:	637b      	str	r3, [r7, #52]	; 0x34
 800582e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005832:	1912      	adds	r2, r2, r4
 8005834:	eb45 0303 	adc.w	r3, r5, r3
 8005838:	f04f 0000 	mov.w	r0, #0
 800583c:	f04f 0100 	mov.w	r1, #0
 8005840:	00d9      	lsls	r1, r3, #3
 8005842:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005846:	00d0      	lsls	r0, r2, #3
 8005848:	4602      	mov	r2, r0
 800584a:	460b      	mov	r3, r1
 800584c:	1911      	adds	r1, r2, r4
 800584e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005850:	416b      	adcs	r3, r5
 8005852:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	461a      	mov	r2, r3
 800585a:	f04f 0300 	mov.w	r3, #0
 800585e:	1891      	adds	r1, r2, r2
 8005860:	62b9      	str	r1, [r7, #40]	; 0x28
 8005862:	415b      	adcs	r3, r3
 8005864:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005866:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800586a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800586e:	f7fb f8cd 	bl	8000a0c <__aeabi_uldivmod>
 8005872:	4602      	mov	r2, r0
 8005874:	460b      	mov	r3, r1
 8005876:	4b8c      	ldr	r3, [pc, #560]	; (8005aa8 <UART_SetConfig+0x38c>)
 8005878:	fba3 1302 	umull	r1, r3, r3, r2
 800587c:	095b      	lsrs	r3, r3, #5
 800587e:	2164      	movs	r1, #100	; 0x64
 8005880:	fb01 f303 	mul.w	r3, r1, r3
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	3332      	adds	r3, #50	; 0x32
 800588a:	4a87      	ldr	r2, [pc, #540]	; (8005aa8 <UART_SetConfig+0x38c>)
 800588c:	fba2 2303 	umull	r2, r3, r2, r3
 8005890:	095b      	lsrs	r3, r3, #5
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005898:	441e      	add	r6, r3
 800589a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800589c:	4618      	mov	r0, r3
 800589e:	f04f 0100 	mov.w	r1, #0
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	1894      	adds	r4, r2, r2
 80058a8:	623c      	str	r4, [r7, #32]
 80058aa:	415b      	adcs	r3, r3
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
 80058ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058b2:	1812      	adds	r2, r2, r0
 80058b4:	eb41 0303 	adc.w	r3, r1, r3
 80058b8:	f04f 0400 	mov.w	r4, #0
 80058bc:	f04f 0500 	mov.w	r5, #0
 80058c0:	00dd      	lsls	r5, r3, #3
 80058c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058c6:	00d4      	lsls	r4, r2, #3
 80058c8:	4622      	mov	r2, r4
 80058ca:	462b      	mov	r3, r5
 80058cc:	1814      	adds	r4, r2, r0
 80058ce:	653c      	str	r4, [r7, #80]	; 0x50
 80058d0:	414b      	adcs	r3, r1
 80058d2:	657b      	str	r3, [r7, #84]	; 0x54
 80058d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	461a      	mov	r2, r3
 80058da:	f04f 0300 	mov.w	r3, #0
 80058de:	1891      	adds	r1, r2, r2
 80058e0:	61b9      	str	r1, [r7, #24]
 80058e2:	415b      	adcs	r3, r3
 80058e4:	61fb      	str	r3, [r7, #28]
 80058e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80058ee:	f7fb f88d 	bl	8000a0c <__aeabi_uldivmod>
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	4b6c      	ldr	r3, [pc, #432]	; (8005aa8 <UART_SetConfig+0x38c>)
 80058f8:	fba3 1302 	umull	r1, r3, r3, r2
 80058fc:	095b      	lsrs	r3, r3, #5
 80058fe:	2164      	movs	r1, #100	; 0x64
 8005900:	fb01 f303 	mul.w	r3, r1, r3
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	3332      	adds	r3, #50	; 0x32
 800590a:	4a67      	ldr	r2, [pc, #412]	; (8005aa8 <UART_SetConfig+0x38c>)
 800590c:	fba2 2303 	umull	r2, r3, r2, r3
 8005910:	095b      	lsrs	r3, r3, #5
 8005912:	f003 0207 	and.w	r2, r3, #7
 8005916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4432      	add	r2, r6
 800591c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800591e:	e0b9      	b.n	8005a94 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005920:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005922:	461c      	mov	r4, r3
 8005924:	f04f 0500 	mov.w	r5, #0
 8005928:	4622      	mov	r2, r4
 800592a:	462b      	mov	r3, r5
 800592c:	1891      	adds	r1, r2, r2
 800592e:	6139      	str	r1, [r7, #16]
 8005930:	415b      	adcs	r3, r3
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005938:	1912      	adds	r2, r2, r4
 800593a:	eb45 0303 	adc.w	r3, r5, r3
 800593e:	f04f 0000 	mov.w	r0, #0
 8005942:	f04f 0100 	mov.w	r1, #0
 8005946:	00d9      	lsls	r1, r3, #3
 8005948:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800594c:	00d0      	lsls	r0, r2, #3
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	eb12 0804 	adds.w	r8, r2, r4
 8005956:	eb43 0905 	adc.w	r9, r3, r5
 800595a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	4618      	mov	r0, r3
 8005960:	f04f 0100 	mov.w	r1, #0
 8005964:	f04f 0200 	mov.w	r2, #0
 8005968:	f04f 0300 	mov.w	r3, #0
 800596c:	008b      	lsls	r3, r1, #2
 800596e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005972:	0082      	lsls	r2, r0, #2
 8005974:	4640      	mov	r0, r8
 8005976:	4649      	mov	r1, r9
 8005978:	f7fb f848 	bl	8000a0c <__aeabi_uldivmod>
 800597c:	4602      	mov	r2, r0
 800597e:	460b      	mov	r3, r1
 8005980:	4b49      	ldr	r3, [pc, #292]	; (8005aa8 <UART_SetConfig+0x38c>)
 8005982:	fba3 2302 	umull	r2, r3, r3, r2
 8005986:	095b      	lsrs	r3, r3, #5
 8005988:	011e      	lsls	r6, r3, #4
 800598a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800598c:	4618      	mov	r0, r3
 800598e:	f04f 0100 	mov.w	r1, #0
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	1894      	adds	r4, r2, r2
 8005998:	60bc      	str	r4, [r7, #8]
 800599a:	415b      	adcs	r3, r3
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059a2:	1812      	adds	r2, r2, r0
 80059a4:	eb41 0303 	adc.w	r3, r1, r3
 80059a8:	f04f 0400 	mov.w	r4, #0
 80059ac:	f04f 0500 	mov.w	r5, #0
 80059b0:	00dd      	lsls	r5, r3, #3
 80059b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059b6:	00d4      	lsls	r4, r2, #3
 80059b8:	4622      	mov	r2, r4
 80059ba:	462b      	mov	r3, r5
 80059bc:	1814      	adds	r4, r2, r0
 80059be:	64bc      	str	r4, [r7, #72]	; 0x48
 80059c0:	414b      	adcs	r3, r1
 80059c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f04f 0100 	mov.w	r1, #0
 80059ce:	f04f 0200 	mov.w	r2, #0
 80059d2:	f04f 0300 	mov.w	r3, #0
 80059d6:	008b      	lsls	r3, r1, #2
 80059d8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059dc:	0082      	lsls	r2, r0, #2
 80059de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80059e2:	f7fb f813 	bl	8000a0c <__aeabi_uldivmod>
 80059e6:	4602      	mov	r2, r0
 80059e8:	460b      	mov	r3, r1
 80059ea:	4b2f      	ldr	r3, [pc, #188]	; (8005aa8 <UART_SetConfig+0x38c>)
 80059ec:	fba3 1302 	umull	r1, r3, r3, r2
 80059f0:	095b      	lsrs	r3, r3, #5
 80059f2:	2164      	movs	r1, #100	; 0x64
 80059f4:	fb01 f303 	mul.w	r3, r1, r3
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	3332      	adds	r3, #50	; 0x32
 80059fe:	4a2a      	ldr	r2, [pc, #168]	; (8005aa8 <UART_SetConfig+0x38c>)
 8005a00:	fba2 2303 	umull	r2, r3, r2, r3
 8005a04:	095b      	lsrs	r3, r3, #5
 8005a06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a0a:	441e      	add	r6, r3
 8005a0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f04f 0100 	mov.w	r1, #0
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	1894      	adds	r4, r2, r2
 8005a1a:	603c      	str	r4, [r7, #0]
 8005a1c:	415b      	adcs	r3, r3
 8005a1e:	607b      	str	r3, [r7, #4]
 8005a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a24:	1812      	adds	r2, r2, r0
 8005a26:	eb41 0303 	adc.w	r3, r1, r3
 8005a2a:	f04f 0400 	mov.w	r4, #0
 8005a2e:	f04f 0500 	mov.w	r5, #0
 8005a32:	00dd      	lsls	r5, r3, #3
 8005a34:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a38:	00d4      	lsls	r4, r2, #3
 8005a3a:	4622      	mov	r2, r4
 8005a3c:	462b      	mov	r3, r5
 8005a3e:	eb12 0a00 	adds.w	sl, r2, r0
 8005a42:	eb43 0b01 	adc.w	fp, r3, r1
 8005a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f04f 0100 	mov.w	r1, #0
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	f04f 0300 	mov.w	r3, #0
 8005a58:	008b      	lsls	r3, r1, #2
 8005a5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a5e:	0082      	lsls	r2, r0, #2
 8005a60:	4650      	mov	r0, sl
 8005a62:	4659      	mov	r1, fp
 8005a64:	f7fa ffd2 	bl	8000a0c <__aeabi_uldivmod>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4b0e      	ldr	r3, [pc, #56]	; (8005aa8 <UART_SetConfig+0x38c>)
 8005a6e:	fba3 1302 	umull	r1, r3, r3, r2
 8005a72:	095b      	lsrs	r3, r3, #5
 8005a74:	2164      	movs	r1, #100	; 0x64
 8005a76:	fb01 f303 	mul.w	r3, r1, r3
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	011b      	lsls	r3, r3, #4
 8005a7e:	3332      	adds	r3, #50	; 0x32
 8005a80:	4a09      	ldr	r2, [pc, #36]	; (8005aa8 <UART_SetConfig+0x38c>)
 8005a82:	fba2 2303 	umull	r2, r3, r2, r3
 8005a86:	095b      	lsrs	r3, r3, #5
 8005a88:	f003 020f 	and.w	r2, r3, #15
 8005a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4432      	add	r2, r6
 8005a92:	609a      	str	r2, [r3, #8]
}
 8005a94:	bf00      	nop
 8005a96:	377c      	adds	r7, #124	; 0x7c
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a9e:	bf00      	nop
 8005aa0:	40011000 	.word	0x40011000
 8005aa4:	40011400 	.word	0x40011400
 8005aa8:	51eb851f 	.word	0x51eb851f

08005aac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005aba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005abe:	2b84      	cmp	r3, #132	; 0x84
 8005ac0:	d005      	beq.n	8005ace <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005ac2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4413      	add	r3, r2
 8005aca:	3303      	adds	r3, #3
 8005acc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005ace:	68fb      	ldr	r3, [r7, #12]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ae2:	f3ef 8305 	mrs	r3, IPSR
 8005ae6:	607b      	str	r3, [r7, #4]
  return(result);
 8005ae8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	bf14      	ite	ne
 8005aee:	2301      	movne	r3, #1
 8005af0:	2300      	moveq	r3, #0
 8005af2:	b2db      	uxtb	r3, r3
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005b04:	f001 f942 	bl	8006d8c <vTaskStartScheduler>
  
  return osOK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005b0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b10:	b089      	sub	sp, #36	; 0x24
 8005b12:	af04      	add	r7, sp, #16
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d020      	beq.n	8005b62 <osThreadCreate+0x54>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d01c      	beq.n	8005b62 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685c      	ldr	r4, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681d      	ldr	r5, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691e      	ldr	r6, [r3, #16]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7ff ffb6 	bl	8005aac <makeFreeRtosPriority>
 8005b40:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b4a:	9202      	str	r2, [sp, #8]
 8005b4c:	9301      	str	r3, [sp, #4]
 8005b4e:	9100      	str	r1, [sp, #0]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	4632      	mov	r2, r6
 8005b54:	4629      	mov	r1, r5
 8005b56:	4620      	mov	r0, r4
 8005b58:	f000 ff50 	bl	80069fc <xTaskCreateStatic>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	e01c      	b.n	8005b9c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685c      	ldr	r4, [r3, #4]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b6e:	b29e      	uxth	r6, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7ff ff98 	bl	8005aac <makeFreeRtosPriority>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	f107 030c 	add.w	r3, r7, #12
 8005b82:	9301      	str	r3, [sp, #4]
 8005b84:	9200      	str	r2, [sp, #0]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	4632      	mov	r2, r6
 8005b8a:	4629      	mov	r1, r5
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	f000 ff92 	bl	8006ab6 <xTaskCreate>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d001      	beq.n	8005b9c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	e000      	b.n	8005b9e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ba6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b084      	sub	sp, #16
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <osDelay+0x16>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	e000      	b.n	8005bbe <osDelay+0x18>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f001 f8b0 	bl	8006d24 <vTaskDelay>
  
  return osOK;
 8005bc4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b082      	sub	sp, #8
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d007      	beq.n	8005bee <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	4619      	mov	r1, r3
 8005be4:	2001      	movs	r0, #1
 8005be6:	f000 faae 	bl	8006146 <xQueueCreateMutexStatic>
 8005bea:	4603      	mov	r3, r0
 8005bec:	e003      	b.n	8005bf6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005bee:	2001      	movs	r0, #1
 8005bf0:	f000 fa91 	bl	8006116 <xQueueCreateMutex>
 8005bf4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
	...

08005c00 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <osMutexWait+0x18>
    return osErrorParameter;
 8005c14:	2380      	movs	r3, #128	; 0x80
 8005c16:	e03a      	b.n	8005c8e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c22:	d103      	bne.n	8005c2c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005c24:	f04f 33ff 	mov.w	r3, #4294967295
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	e009      	b.n	8005c40 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d006      	beq.n	8005c40 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <osMutexWait+0x40>
      ticks = 1;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005c40:	f7ff ff4c 	bl	8005adc <inHandlerMode>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d017      	beq.n	8005c7a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005c4a:	f107 0308 	add.w	r3, r7, #8
 8005c4e:	461a      	mov	r2, r3
 8005c50:	2100      	movs	r1, #0
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fd2a 	bl	80066ac <xQueueReceiveFromISR>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d001      	beq.n	8005c62 <osMutexWait+0x62>
      return osErrorOS;
 8005c5e:	23ff      	movs	r3, #255	; 0xff
 8005c60:	e015      	b.n	8005c8e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d011      	beq.n	8005c8c <osMutexWait+0x8c>
 8005c68:	4b0b      	ldr	r3, [pc, #44]	; (8005c98 <osMutexWait+0x98>)
 8005c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c6e:	601a      	str	r2, [r3, #0]
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	e008      	b.n	8005c8c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005c7a:	68f9      	ldr	r1, [r7, #12]
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 fc09 	bl	8006494 <xQueueSemaphoreTake>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d001      	beq.n	8005c8c <osMutexWait+0x8c>
    return osErrorOS;
 8005c88:	23ff      	movs	r3, #255	; 0xff
 8005c8a:	e000      	b.n	8005c8e <osMutexWait+0x8e>
  }
  
  return osOK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	e000ed04 	.word	0xe000ed04

08005c9c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005cac:	f7ff ff16 	bl	8005adc <inHandlerMode>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d016      	beq.n	8005ce4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005cb6:	f107 0308 	add.w	r3, r7, #8
 8005cba:	4619      	mov	r1, r3
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 fb5b 	bl	8006378 <xQueueGiveFromISR>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d001      	beq.n	8005ccc <osMutexRelease+0x30>
      return osErrorOS;
 8005cc8:	23ff      	movs	r3, #255	; 0xff
 8005cca:	e017      	b.n	8005cfc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d013      	beq.n	8005cfa <osMutexRelease+0x5e>
 8005cd2:	4b0c      	ldr	r3, [pc, #48]	; (8005d04 <osMutexRelease+0x68>)
 8005cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cd8:	601a      	str	r2, [r3, #0]
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	e00a      	b.n	8005cfa <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	2100      	movs	r1, #0
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fa46 	bl	800617c <xQueueGenericSend>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d001      	beq.n	8005cfa <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005cf6:	23ff      	movs	r3, #255	; 0xff
 8005cf8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	e000ed04 	.word	0xe000ed04

08005d08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f103 0208 	add.w	r2, r3, #8
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f103 0208 	add.w	r2, r3, #8
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f103 0208 	add.w	r2, r3, #8
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d56:	bf00      	nop
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d62:	b480      	push	{r7}
 8005d64:	b085      	sub	sp, #20
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	689a      	ldr	r2, [r3, #8]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	683a      	ldr	r2, [r7, #0]
 8005d8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	601a      	str	r2, [r3, #0]
}
 8005d9e:	bf00      	nop
 8005da0:	3714      	adds	r7, #20
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005daa:	b480      	push	{r7}
 8005dac:	b085      	sub	sp, #20
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc0:	d103      	bne.n	8005dca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	e00c      	b.n	8005de4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	3308      	adds	r3, #8
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	e002      	b.n	8005dd8 <vListInsert+0x2e>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d2f6      	bcs.n	8005dd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	601a      	str	r2, [r3, #0]
}
 8005e10:	bf00      	nop
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	6892      	ldr	r2, [r2, #8]
 8005e32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	6852      	ldr	r2, [r2, #4]
 8005e3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d103      	bne.n	8005e50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	1e5a      	subs	r2, r3, #1
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10a      	bne.n	8005e9a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e88:	f383 8811 	msr	BASEPRI, r3
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e96:	bf00      	nop
 8005e98:	e7fe      	b.n	8005e98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e9a:	f001 fec3 	bl	8007c24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea6:	68f9      	ldr	r1, [r7, #12]
 8005ea8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005eaa:	fb01 f303 	mul.w	r3, r1, r3
 8005eae:	441a      	add	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	68f9      	ldr	r1, [r7, #12]
 8005ece:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ed0:	fb01 f303 	mul.w	r3, r1, r3
 8005ed4:	441a      	add	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	22ff      	movs	r2, #255	; 0xff
 8005ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	22ff      	movs	r2, #255	; 0xff
 8005ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d114      	bne.n	8005f1a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d01a      	beq.n	8005f2e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	3310      	adds	r3, #16
 8005efc:	4618      	mov	r0, r3
 8005efe:	f001 f987 	bl	8007210 <xTaskRemoveFromEventList>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d012      	beq.n	8005f2e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f08:	4b0c      	ldr	r3, [pc, #48]	; (8005f3c <xQueueGenericReset+0xcc>)
 8005f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	e009      	b.n	8005f2e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	3310      	adds	r3, #16
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7ff fef2 	bl	8005d08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	3324      	adds	r3, #36	; 0x24
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7ff feed 	bl	8005d08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f2e:	f001 fea9 	bl	8007c84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f32:	2301      	movs	r3, #1
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	e000ed04 	.word	0xe000ed04

08005f40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b08e      	sub	sp, #56	; 0x38
 8005f44:	af02      	add	r7, sp, #8
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
 8005f4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10a      	bne.n	8005f6a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f66:	bf00      	nop
 8005f68:	e7fe      	b.n	8005f68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10a      	bne.n	8005f86 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f82:	bf00      	nop
 8005f84:	e7fe      	b.n	8005f84 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d002      	beq.n	8005f92 <xQueueGenericCreateStatic+0x52>
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <xQueueGenericCreateStatic+0x56>
 8005f92:	2301      	movs	r3, #1
 8005f94:	e000      	b.n	8005f98 <xQueueGenericCreateStatic+0x58>
 8005f96:	2300      	movs	r3, #0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10a      	bne.n	8005fb2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	623b      	str	r3, [r7, #32]
}
 8005fae:	bf00      	nop
 8005fb0:	e7fe      	b.n	8005fb0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d102      	bne.n	8005fbe <xQueueGenericCreateStatic+0x7e>
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <xQueueGenericCreateStatic+0x82>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e000      	b.n	8005fc4 <xQueueGenericCreateStatic+0x84>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10a      	bne.n	8005fde <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fcc:	f383 8811 	msr	BASEPRI, r3
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	61fb      	str	r3, [r7, #28]
}
 8005fda:	bf00      	nop
 8005fdc:	e7fe      	b.n	8005fdc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005fde:	2348      	movs	r3, #72	; 0x48
 8005fe0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2b48      	cmp	r3, #72	; 0x48
 8005fe6:	d00a      	beq.n	8005ffe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	61bb      	str	r3, [r7, #24]
}
 8005ffa:	bf00      	nop
 8005ffc:	e7fe      	b.n	8005ffc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005ffe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00d      	beq.n	8006026 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800600a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006012:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	4613      	mov	r3, r2
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	68b9      	ldr	r1, [r7, #8]
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 f83f 	bl	80060a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006028:	4618      	mov	r0, r3
 800602a:	3730      	adds	r7, #48	; 0x30
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006030:	b580      	push	{r7, lr}
 8006032:	b08a      	sub	sp, #40	; 0x28
 8006034:	af02      	add	r7, sp, #8
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	4613      	mov	r3, r2
 800603c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10a      	bne.n	800605a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	613b      	str	r3, [r7, #16]
}
 8006056:	bf00      	nop
 8006058:	e7fe      	b.n	8006058 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	fb02 f303 	mul.w	r3, r2, r3
 8006062:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	3348      	adds	r3, #72	; 0x48
 8006068:	4618      	mov	r0, r3
 800606a:	f001 fefd 	bl	8007e68 <pvPortMalloc>
 800606e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d011      	beq.n	800609a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	3348      	adds	r3, #72	; 0x48
 800607e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006088:	79fa      	ldrb	r2, [r7, #7]
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	4613      	mov	r3, r2
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	68b9      	ldr	r1, [r7, #8]
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 f805 	bl	80060a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800609a:	69bb      	ldr	r3, [r7, #24]
	}
 800609c:	4618      	mov	r0, r3
 800609e:	3720      	adds	r7, #32
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
 80060b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d103      	bne.n	80060c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	69ba      	ldr	r2, [r7, #24]
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	e002      	b.n	80060c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80060d2:	2101      	movs	r1, #1
 80060d4:	69b8      	ldr	r0, [r7, #24]
 80060d6:	f7ff fecb 	bl	8005e70 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80060da:	bf00      	nop
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b082      	sub	sp, #8
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00e      	beq.n	800610e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006102:	2300      	movs	r3, #0
 8006104:	2200      	movs	r2, #0
 8006106:	2100      	movs	r1, #0
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f837 	bl	800617c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800610e:	bf00      	nop
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006116:	b580      	push	{r7, lr}
 8006118:	b086      	sub	sp, #24
 800611a:	af00      	add	r7, sp, #0
 800611c:	4603      	mov	r3, r0
 800611e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006120:	2301      	movs	r3, #1
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	2300      	movs	r3, #0
 8006126:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006128:	79fb      	ldrb	r3, [r7, #7]
 800612a:	461a      	mov	r2, r3
 800612c:	6939      	ldr	r1, [r7, #16]
 800612e:	6978      	ldr	r0, [r7, #20]
 8006130:	f7ff ff7e 	bl	8006030 <xQueueGenericCreate>
 8006134:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f7ff ffd3 	bl	80060e2 <prvInitialiseMutex>

		return xNewQueue;
 800613c:	68fb      	ldr	r3, [r7, #12]
	}
 800613e:	4618      	mov	r0, r3
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006146:	b580      	push	{r7, lr}
 8006148:	b088      	sub	sp, #32
 800614a:	af02      	add	r7, sp, #8
 800614c:	4603      	mov	r3, r0
 800614e:	6039      	str	r1, [r7, #0]
 8006150:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006152:	2301      	movs	r3, #1
 8006154:	617b      	str	r3, [r7, #20]
 8006156:	2300      	movs	r3, #0
 8006158:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800615a:	79fb      	ldrb	r3, [r7, #7]
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	2200      	movs	r2, #0
 8006162:	6939      	ldr	r1, [r7, #16]
 8006164:	6978      	ldr	r0, [r7, #20]
 8006166:	f7ff feeb 	bl	8005f40 <xQueueGenericCreateStatic>
 800616a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f7ff ffb8 	bl	80060e2 <prvInitialiseMutex>

		return xNewQueue;
 8006172:	68fb      	ldr	r3, [r7, #12]
	}
 8006174:	4618      	mov	r0, r3
 8006176:	3718      	adds	r7, #24
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b08e      	sub	sp, #56	; 0x38
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
 8006188:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800618a:	2300      	movs	r3, #0
 800618c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10a      	bne.n	80061ae <xQueueGenericSend+0x32>
	__asm volatile
 8006198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619c:	f383 8811 	msr	BASEPRI, r3
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061aa:	bf00      	nop
 80061ac:	e7fe      	b.n	80061ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d103      	bne.n	80061bc <xQueueGenericSend+0x40>
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <xQueueGenericSend+0x44>
 80061bc:	2301      	movs	r3, #1
 80061be:	e000      	b.n	80061c2 <xQueueGenericSend+0x46>
 80061c0:	2300      	movs	r3, #0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10a      	bne.n	80061dc <xQueueGenericSend+0x60>
	__asm volatile
 80061c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061d8:	bf00      	nop
 80061da:	e7fe      	b.n	80061da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d103      	bne.n	80061ea <xQueueGenericSend+0x6e>
 80061e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d101      	bne.n	80061ee <xQueueGenericSend+0x72>
 80061ea:	2301      	movs	r3, #1
 80061ec:	e000      	b.n	80061f0 <xQueueGenericSend+0x74>
 80061ee:	2300      	movs	r3, #0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10a      	bne.n	800620a <xQueueGenericSend+0x8e>
	__asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	623b      	str	r3, [r7, #32]
}
 8006206:	bf00      	nop
 8006208:	e7fe      	b.n	8006208 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800620a:	f001 f9bd 	bl	8007588 <xTaskGetSchedulerState>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d102      	bne.n	800621a <xQueueGenericSend+0x9e>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <xQueueGenericSend+0xa2>
 800621a:	2301      	movs	r3, #1
 800621c:	e000      	b.n	8006220 <xQueueGenericSend+0xa4>
 800621e:	2300      	movs	r3, #0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10a      	bne.n	800623a <xQueueGenericSend+0xbe>
	__asm volatile
 8006224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006228:	f383 8811 	msr	BASEPRI, r3
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	61fb      	str	r3, [r7, #28]
}
 8006236:	bf00      	nop
 8006238:	e7fe      	b.n	8006238 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800623a:	f001 fcf3 	bl	8007c24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006246:	429a      	cmp	r2, r3
 8006248:	d302      	bcc.n	8006250 <xQueueGenericSend+0xd4>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b02      	cmp	r3, #2
 800624e:	d129      	bne.n	80062a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	68b9      	ldr	r1, [r7, #8]
 8006254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006256:	f000 fac1 	bl	80067dc <prvCopyDataToQueue>
 800625a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800625c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	2b00      	cmp	r3, #0
 8006262:	d010      	beq.n	8006286 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006266:	3324      	adds	r3, #36	; 0x24
 8006268:	4618      	mov	r0, r3
 800626a:	f000 ffd1 	bl	8007210 <xTaskRemoveFromEventList>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d013      	beq.n	800629c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006274:	4b3f      	ldr	r3, [pc, #252]	; (8006374 <xQueueGenericSend+0x1f8>)
 8006276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	e00a      	b.n	800629c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006288:	2b00      	cmp	r3, #0
 800628a:	d007      	beq.n	800629c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800628c:	4b39      	ldr	r3, [pc, #228]	; (8006374 <xQueueGenericSend+0x1f8>)
 800628e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006292:	601a      	str	r2, [r3, #0]
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800629c:	f001 fcf2 	bl	8007c84 <vPortExitCritical>
				return pdPASS;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e063      	b.n	800636c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d103      	bne.n	80062b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062aa:	f001 fceb 	bl	8007c84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80062ae:	2300      	movs	r3, #0
 80062b0:	e05c      	b.n	800636c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d106      	bne.n	80062c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062b8:	f107 0314 	add.w	r3, r7, #20
 80062bc:	4618      	mov	r0, r3
 80062be:	f001 f809 	bl	80072d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062c2:	2301      	movs	r3, #1
 80062c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062c6:	f001 fcdd 	bl	8007c84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062ca:	f000 fdbf 	bl	8006e4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062ce:	f001 fca9 	bl	8007c24 <vPortEnterCritical>
 80062d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062d8:	b25b      	sxtb	r3, r3
 80062da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062de:	d103      	bne.n	80062e8 <xQueueGenericSend+0x16c>
 80062e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062ee:	b25b      	sxtb	r3, r3
 80062f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f4:	d103      	bne.n	80062fe <xQueueGenericSend+0x182>
 80062f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062fe:	f001 fcc1 	bl	8007c84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006302:	1d3a      	adds	r2, r7, #4
 8006304:	f107 0314 	add.w	r3, r7, #20
 8006308:	4611      	mov	r1, r2
 800630a:	4618      	mov	r0, r3
 800630c:	f000 fff8 	bl	8007300 <xTaskCheckForTimeOut>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d124      	bne.n	8006360 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006316:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006318:	f000 fb58 	bl	80069cc <prvIsQueueFull>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d018      	beq.n	8006354 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006324:	3310      	adds	r3, #16
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	4611      	mov	r1, r2
 800632a:	4618      	mov	r0, r3
 800632c:	f000 ff4c 	bl	80071c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006332:	f000 fae3 	bl	80068fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006336:	f000 fd97 	bl	8006e68 <xTaskResumeAll>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	f47f af7c 	bne.w	800623a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006342:	4b0c      	ldr	r3, [pc, #48]	; (8006374 <xQueueGenericSend+0x1f8>)
 8006344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006348:	601a      	str	r2, [r3, #0]
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	e772      	b.n	800623a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006356:	f000 fad1 	bl	80068fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800635a:	f000 fd85 	bl	8006e68 <xTaskResumeAll>
 800635e:	e76c      	b.n	800623a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006360:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006362:	f000 facb 	bl	80068fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006366:	f000 fd7f 	bl	8006e68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800636a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800636c:	4618      	mov	r0, r3
 800636e:	3738      	adds	r7, #56	; 0x38
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	e000ed04 	.word	0xe000ed04

08006378 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08e      	sub	sp, #56	; 0x38
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10a      	bne.n	80063a2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800638c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006390:	f383 8811 	msr	BASEPRI, r3
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	623b      	str	r3, [r7, #32]
}
 800639e:	bf00      	nop
 80063a0:	e7fe      	b.n	80063a0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80063a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <xQueueGiveFromISR+0x48>
	__asm volatile
 80063aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	61fb      	str	r3, [r7, #28]
}
 80063bc:	bf00      	nop
 80063be:	e7fe      	b.n	80063be <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80063c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d103      	bne.n	80063d0 <xQueueGiveFromISR+0x58>
 80063c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <xQueueGiveFromISR+0x5c>
 80063d0:	2301      	movs	r3, #1
 80063d2:	e000      	b.n	80063d6 <xQueueGiveFromISR+0x5e>
 80063d4:	2300      	movs	r3, #0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10a      	bne.n	80063f0 <xQueueGiveFromISR+0x78>
	__asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	61bb      	str	r3, [r7, #24]
}
 80063ec:	bf00      	nop
 80063ee:	e7fe      	b.n	80063ee <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063f0:	f001 fcfa 	bl	8007de8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80063f4:	f3ef 8211 	mrs	r2, BASEPRI
 80063f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	617a      	str	r2, [r7, #20]
 800640a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800640c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800640e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006414:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800641a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800641c:	429a      	cmp	r2, r3
 800641e:	d22b      	bcs.n	8006478 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006422:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800642a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642c:	1c5a      	adds	r2, r3, #1
 800642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006430:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006432:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643a:	d112      	bne.n	8006462 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800643c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	2b00      	cmp	r3, #0
 8006442:	d016      	beq.n	8006472 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006446:	3324      	adds	r3, #36	; 0x24
 8006448:	4618      	mov	r0, r3
 800644a:	f000 fee1 	bl	8007210 <xTaskRemoveFromEventList>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00e      	beq.n	8006472 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00b      	beq.n	8006472 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2201      	movs	r2, #1
 800645e:	601a      	str	r2, [r3, #0]
 8006460:	e007      	b.n	8006472 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006462:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006466:	3301      	adds	r3, #1
 8006468:	b2db      	uxtb	r3, r3
 800646a:	b25a      	sxtb	r2, r3
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006472:	2301      	movs	r3, #1
 8006474:	637b      	str	r3, [r7, #52]	; 0x34
 8006476:	e001      	b.n	800647c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006478:	2300      	movs	r3, #0
 800647a:	637b      	str	r3, [r7, #52]	; 0x34
 800647c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006486:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800648a:	4618      	mov	r0, r3
 800648c:	3738      	adds	r7, #56	; 0x38
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
	...

08006494 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b08e      	sub	sp, #56	; 0x38
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800649e:	2300      	movs	r3, #0
 80064a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80064a6:	2300      	movs	r3, #0
 80064a8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80064aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10a      	bne.n	80064c6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	623b      	str	r3, [r7, #32]
}
 80064c2:	bf00      	nop
 80064c4:	e7fe      	b.n	80064c4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80064c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00a      	beq.n	80064e4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80064ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	61fb      	str	r3, [r7, #28]
}
 80064e0:	bf00      	nop
 80064e2:	e7fe      	b.n	80064e2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064e4:	f001 f850 	bl	8007588 <xTaskGetSchedulerState>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d102      	bne.n	80064f4 <xQueueSemaphoreTake+0x60>
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d101      	bne.n	80064f8 <xQueueSemaphoreTake+0x64>
 80064f4:	2301      	movs	r3, #1
 80064f6:	e000      	b.n	80064fa <xQueueSemaphoreTake+0x66>
 80064f8:	2300      	movs	r3, #0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10a      	bne.n	8006514 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	61bb      	str	r3, [r7, #24]
}
 8006510:	bf00      	nop
 8006512:	e7fe      	b.n	8006512 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006514:	f001 fb86 	bl	8007c24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006520:	2b00      	cmp	r3, #0
 8006522:	d024      	beq.n	800656e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006526:	1e5a      	subs	r2, r3, #1
 8006528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800652c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d104      	bne.n	800653e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006534:	f001 f9d0 	bl	80078d8 <pvTaskIncrementMutexHeldCount>
 8006538:	4602      	mov	r2, r0
 800653a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800653e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00f      	beq.n	8006566 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006548:	3310      	adds	r3, #16
 800654a:	4618      	mov	r0, r3
 800654c:	f000 fe60 	bl	8007210 <xTaskRemoveFromEventList>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d007      	beq.n	8006566 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006556:	4b54      	ldr	r3, [pc, #336]	; (80066a8 <xQueueSemaphoreTake+0x214>)
 8006558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800655c:	601a      	str	r2, [r3, #0]
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006566:	f001 fb8d 	bl	8007c84 <vPortExitCritical>
				return pdPASS;
 800656a:	2301      	movs	r3, #1
 800656c:	e097      	b.n	800669e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d111      	bne.n	8006598 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00a      	beq.n	8006590 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800657a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657e:	f383 8811 	msr	BASEPRI, r3
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	f3bf 8f4f 	dsb	sy
 800658a:	617b      	str	r3, [r7, #20]
}
 800658c:	bf00      	nop
 800658e:	e7fe      	b.n	800658e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006590:	f001 fb78 	bl	8007c84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006594:	2300      	movs	r3, #0
 8006596:	e082      	b.n	800669e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800659a:	2b00      	cmp	r3, #0
 800659c:	d106      	bne.n	80065ac <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800659e:	f107 030c 	add.w	r3, r7, #12
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 fe96 	bl	80072d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065a8:	2301      	movs	r3, #1
 80065aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065ac:	f001 fb6a 	bl	8007c84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065b0:	f000 fc4c 	bl	8006e4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065b4:	f001 fb36 	bl	8007c24 <vPortEnterCritical>
 80065b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065be:	b25b      	sxtb	r3, r3
 80065c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c4:	d103      	bne.n	80065ce <xQueueSemaphoreTake+0x13a>
 80065c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065d4:	b25b      	sxtb	r3, r3
 80065d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065da:	d103      	bne.n	80065e4 <xQueueSemaphoreTake+0x150>
 80065dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065e4:	f001 fb4e 	bl	8007c84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065e8:	463a      	mov	r2, r7
 80065ea:	f107 030c 	add.w	r3, r7, #12
 80065ee:	4611      	mov	r1, r2
 80065f0:	4618      	mov	r0, r3
 80065f2:	f000 fe85 	bl	8007300 <xTaskCheckForTimeOut>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d132      	bne.n	8006662 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80065fe:	f000 f9cf 	bl	80069a0 <prvIsQueueEmpty>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d026      	beq.n	8006656 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d109      	bne.n	8006624 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006610:	f001 fb08 	bl	8007c24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	4618      	mov	r0, r3
 800661a:	f000 ffd3 	bl	80075c4 <xTaskPriorityInherit>
 800661e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006620:	f001 fb30 	bl	8007c84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006626:	3324      	adds	r3, #36	; 0x24
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	4611      	mov	r1, r2
 800662c:	4618      	mov	r0, r3
 800662e:	f000 fdcb 	bl	80071c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006632:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006634:	f000 f962 	bl	80068fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006638:	f000 fc16 	bl	8006e68 <xTaskResumeAll>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	f47f af68 	bne.w	8006514 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006644:	4b18      	ldr	r3, [pc, #96]	; (80066a8 <xQueueSemaphoreTake+0x214>)
 8006646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	e75e      	b.n	8006514 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006656:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006658:	f000 f950 	bl	80068fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800665c:	f000 fc04 	bl	8006e68 <xTaskResumeAll>
 8006660:	e758      	b.n	8006514 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006662:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006664:	f000 f94a 	bl	80068fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006668:	f000 fbfe 	bl	8006e68 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800666c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800666e:	f000 f997 	bl	80069a0 <prvIsQueueEmpty>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	f43f af4d 	beq.w	8006514 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00d      	beq.n	800669c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006680:	f001 fad0 	bl	8007c24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006684:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006686:	f000 f891 	bl	80067ac <prvGetDisinheritPriorityAfterTimeout>
 800668a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006692:	4618      	mov	r0, r3
 8006694:	f001 f892 	bl	80077bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006698:	f001 faf4 	bl	8007c84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800669c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3738      	adds	r7, #56	; 0x38
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	e000ed04 	.word	0xe000ed04

080066ac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08e      	sub	sp, #56	; 0x38
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80066bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10a      	bne.n	80066d8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80066c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c6:	f383 8811 	msr	BASEPRI, r3
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	623b      	str	r3, [r7, #32]
}
 80066d4:	bf00      	nop
 80066d6:	e7fe      	b.n	80066d6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d103      	bne.n	80066e6 <xQueueReceiveFromISR+0x3a>
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <xQueueReceiveFromISR+0x3e>
 80066e6:	2301      	movs	r3, #1
 80066e8:	e000      	b.n	80066ec <xQueueReceiveFromISR+0x40>
 80066ea:	2300      	movs	r3, #0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10a      	bne.n	8006706 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80066f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	61fb      	str	r3, [r7, #28]
}
 8006702:	bf00      	nop
 8006704:	e7fe      	b.n	8006704 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006706:	f001 fb6f 	bl	8007de8 <vPortValidateInterruptPriority>
	__asm volatile
 800670a:	f3ef 8211 	mrs	r2, BASEPRI
 800670e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	61ba      	str	r2, [r7, #24]
 8006720:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006722:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006724:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800672c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672e:	2b00      	cmp	r3, #0
 8006730:	d02f      	beq.n	8006792 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006734:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800673c:	68b9      	ldr	r1, [r7, #8]
 800673e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006740:	f000 f8b6 	bl	80068b0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006746:	1e5a      	subs	r2, r3, #1
 8006748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800674c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006754:	d112      	bne.n	800677c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d016      	beq.n	800678c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	3310      	adds	r3, #16
 8006762:	4618      	mov	r0, r3
 8006764:	f000 fd54 	bl	8007210 <xTaskRemoveFromEventList>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00e      	beq.n	800678c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00b      	beq.n	800678c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	601a      	str	r2, [r3, #0]
 800677a:	e007      	b.n	800678c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800677c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006780:	3301      	adds	r3, #1
 8006782:	b2db      	uxtb	r3, r3
 8006784:	b25a      	sxtb	r2, r3
 8006786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800678c:	2301      	movs	r3, #1
 800678e:	637b      	str	r3, [r7, #52]	; 0x34
 8006790:	e001      	b.n	8006796 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006792:	2300      	movs	r3, #0
 8006794:	637b      	str	r3, [r7, #52]	; 0x34
 8006796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006798:	613b      	str	r3, [r7, #16]
	__asm volatile
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f383 8811 	msr	BASEPRI, r3
}
 80067a0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3738      	adds	r7, #56	; 0x38
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d006      	beq.n	80067ca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f1c3 0307 	rsb	r3, r3, #7
 80067c6:	60fb      	str	r3, [r7, #12]
 80067c8:	e001      	b.n	80067ce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80067ce:	68fb      	ldr	r3, [r7, #12]
	}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80067e8:	2300      	movs	r3, #0
 80067ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10d      	bne.n	8006816 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d14d      	bne.n	800689e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	4618      	mov	r0, r3
 8006808:	f000 ff52 	bl	80076b0 <xTaskPriorityDisinherit>
 800680c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	609a      	str	r2, [r3, #8]
 8006814:	e043      	b.n	800689e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d119      	bne.n	8006850 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6858      	ldr	r0, [r3, #4]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006824:	461a      	mov	r2, r3
 8006826:	68b9      	ldr	r1, [r7, #8]
 8006828:	f001 fd2c 	bl	8008284 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	685a      	ldr	r2, [r3, #4]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006834:	441a      	add	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	429a      	cmp	r2, r3
 8006844:	d32b      	bcc.n	800689e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	605a      	str	r2, [r3, #4]
 800684e:	e026      	b.n	800689e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	68d8      	ldr	r0, [r3, #12]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006858:	461a      	mov	r2, r3
 800685a:	68b9      	ldr	r1, [r7, #8]
 800685c:	f001 fd12 	bl	8008284 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006868:	425b      	negs	r3, r3
 800686a:	441a      	add	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	68da      	ldr	r2, [r3, #12]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	429a      	cmp	r2, r3
 800687a:	d207      	bcs.n	800688c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	689a      	ldr	r2, [r3, #8]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006884:	425b      	negs	r3, r3
 8006886:	441a      	add	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b02      	cmp	r3, #2
 8006890:	d105      	bne.n	800689e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d002      	beq.n	800689e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	3b01      	subs	r3, #1
 800689c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	1c5a      	adds	r2, r3, #1
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80068a6:	697b      	ldr	r3, [r7, #20]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3718      	adds	r7, #24
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d018      	beq.n	80068f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	68da      	ldr	r2, [r3, #12]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ca:	441a      	add	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68da      	ldr	r2, [r3, #12]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d303      	bcc.n	80068e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	68d9      	ldr	r1, [r3, #12]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ec:	461a      	mov	r2, r3
 80068ee:	6838      	ldr	r0, [r7, #0]
 80068f0:	f001 fcc8 	bl	8008284 <memcpy>
	}
}
 80068f4:	bf00      	nop
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006904:	f001 f98e 	bl	8007c24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800690e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006910:	e011      	b.n	8006936 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006916:	2b00      	cmp	r3, #0
 8006918:	d012      	beq.n	8006940 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	3324      	adds	r3, #36	; 0x24
 800691e:	4618      	mov	r0, r3
 8006920:	f000 fc76 	bl	8007210 <xTaskRemoveFromEventList>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800692a:	f000 fd4b 	bl	80073c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800692e:	7bfb      	ldrb	r3, [r7, #15]
 8006930:	3b01      	subs	r3, #1
 8006932:	b2db      	uxtb	r3, r3
 8006934:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800693a:	2b00      	cmp	r3, #0
 800693c:	dce9      	bgt.n	8006912 <prvUnlockQueue+0x16>
 800693e:	e000      	b.n	8006942 <prvUnlockQueue+0x46>
					break;
 8006940:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	22ff      	movs	r2, #255	; 0xff
 8006946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800694a:	f001 f99b 	bl	8007c84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800694e:	f001 f969 	bl	8007c24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006958:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800695a:	e011      	b.n	8006980 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d012      	beq.n	800698a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	3310      	adds	r3, #16
 8006968:	4618      	mov	r0, r3
 800696a:	f000 fc51 	bl	8007210 <xTaskRemoveFromEventList>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006974:	f000 fd26 	bl	80073c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006978:	7bbb      	ldrb	r3, [r7, #14]
 800697a:	3b01      	subs	r3, #1
 800697c:	b2db      	uxtb	r3, r3
 800697e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006980:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006984:	2b00      	cmp	r3, #0
 8006986:	dce9      	bgt.n	800695c <prvUnlockQueue+0x60>
 8006988:	e000      	b.n	800698c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800698a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	22ff      	movs	r2, #255	; 0xff
 8006990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006994:	f001 f976 	bl	8007c84 <vPortExitCritical>
}
 8006998:	bf00      	nop
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069a8:	f001 f93c 	bl	8007c24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d102      	bne.n	80069ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80069b4:	2301      	movs	r3, #1
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	e001      	b.n	80069be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80069ba:	2300      	movs	r3, #0
 80069bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80069be:	f001 f961 	bl	8007c84 <vPortExitCritical>

	return xReturn;
 80069c2:	68fb      	ldr	r3, [r7, #12]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069d4:	f001 f926 	bl	8007c24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d102      	bne.n	80069ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80069e4:	2301      	movs	r3, #1
 80069e6:	60fb      	str	r3, [r7, #12]
 80069e8:	e001      	b.n	80069ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80069ea:	2300      	movs	r3, #0
 80069ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80069ee:	f001 f949 	bl	8007c84 <vPortExitCritical>

	return xReturn;
 80069f2:	68fb      	ldr	r3, [r7, #12]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b08e      	sub	sp, #56	; 0x38
 8006a00:	af04      	add	r7, sp, #16
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
 8006a08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10a      	bne.n	8006a26 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	623b      	str	r3, [r7, #32]
}
 8006a22:	bf00      	nop
 8006a24:	e7fe      	b.n	8006a24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10a      	bne.n	8006a42 <xTaskCreateStatic+0x46>
	__asm volatile
 8006a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	61fb      	str	r3, [r7, #28]
}
 8006a3e:	bf00      	nop
 8006a40:	e7fe      	b.n	8006a40 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a42:	2354      	movs	r3, #84	; 0x54
 8006a44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	2b54      	cmp	r3, #84	; 0x54
 8006a4a:	d00a      	beq.n	8006a62 <xTaskCreateStatic+0x66>
	__asm volatile
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	61bb      	str	r3, [r7, #24]
}
 8006a5e:	bf00      	nop
 8006a60:	e7fe      	b.n	8006a60 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a62:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d01e      	beq.n	8006aa8 <xTaskCreateStatic+0xac>
 8006a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d01b      	beq.n	8006aa8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	2202      	movs	r2, #2
 8006a7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a82:	2300      	movs	r3, #0
 8006a84:	9303      	str	r3, [sp, #12]
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	9302      	str	r3, [sp, #8]
 8006a8a:	f107 0314 	add.w	r3, r7, #20
 8006a8e:	9301      	str	r3, [sp, #4]
 8006a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	68b9      	ldr	r1, [r7, #8]
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f000 f850 	bl	8006b40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006aa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006aa2:	f000 f8d5 	bl	8006c50 <prvAddNewTaskToReadyList>
 8006aa6:	e001      	b.n	8006aac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006aac:	697b      	ldr	r3, [r7, #20]
	}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3728      	adds	r7, #40	; 0x28
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b08c      	sub	sp, #48	; 0x30
 8006aba:	af04      	add	r7, sp, #16
 8006abc:	60f8      	str	r0, [r7, #12]
 8006abe:	60b9      	str	r1, [r7, #8]
 8006ac0:	603b      	str	r3, [r7, #0]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ac6:	88fb      	ldrh	r3, [r7, #6]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4618      	mov	r0, r3
 8006acc:	f001 f9cc 	bl	8007e68 <pvPortMalloc>
 8006ad0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00e      	beq.n	8006af6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006ad8:	2054      	movs	r0, #84	; 0x54
 8006ada:	f001 f9c5 	bl	8007e68 <pvPortMalloc>
 8006ade:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d003      	beq.n	8006aee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	631a      	str	r2, [r3, #48]	; 0x30
 8006aec:	e005      	b.n	8006afa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006aee:	6978      	ldr	r0, [r7, #20]
 8006af0:	f001 fa86 	bl	8008000 <vPortFree>
 8006af4:	e001      	b.n	8006afa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d017      	beq.n	8006b30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b08:	88fa      	ldrh	r2, [r7, #6]
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	9303      	str	r3, [sp, #12]
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	9302      	str	r3, [sp, #8]
 8006b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b14:	9301      	str	r3, [sp, #4]
 8006b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	68b9      	ldr	r1, [r7, #8]
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f000 f80e 	bl	8006b40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b24:	69f8      	ldr	r0, [r7, #28]
 8006b26:	f000 f893 	bl	8006c50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	61bb      	str	r3, [r7, #24]
 8006b2e:	e002      	b.n	8006b36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b30:	f04f 33ff 	mov.w	r3, #4294967295
 8006b34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b36:	69bb      	ldr	r3, [r7, #24]
	}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3720      	adds	r7, #32
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b088      	sub	sp, #32
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
 8006b4c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	f023 0307 	bic.w	r3, r3, #7
 8006b66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	f003 0307 	and.w	r3, r3, #7
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00a      	beq.n	8006b88 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	617b      	str	r3, [r7, #20]
}
 8006b84:	bf00      	nop
 8006b86:	e7fe      	b.n	8006b86 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d01f      	beq.n	8006bce <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b8e:	2300      	movs	r3, #0
 8006b90:	61fb      	str	r3, [r7, #28]
 8006b92:	e012      	b.n	8006bba <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	4413      	add	r3, r2
 8006b9a:	7819      	ldrb	r1, [r3, #0]
 8006b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	3334      	adds	r3, #52	; 0x34
 8006ba4:	460a      	mov	r2, r1
 8006ba6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	4413      	add	r3, r2
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d006      	beq.n	8006bc2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	61fb      	str	r3, [r7, #28]
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	2b0f      	cmp	r3, #15
 8006bbe:	d9e9      	bls.n	8006b94 <prvInitialiseNewTask+0x54>
 8006bc0:	e000      	b.n	8006bc4 <prvInitialiseNewTask+0x84>
			{
				break;
 8006bc2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bcc:	e003      	b.n	8006bd6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd8:	2b06      	cmp	r3, #6
 8006bda:	d901      	bls.n	8006be0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006bdc:	2306      	movs	r3, #6
 8006bde:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006be4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bee:	2200      	movs	r2, #0
 8006bf0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7ff f8a6 	bl	8005d48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfe:	3318      	adds	r3, #24
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7ff f8a1 	bl	8005d48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0e:	f1c3 0207 	rsb	r2, r3, #7
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1e:	2200      	movs	r2, #0
 8006c20:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	68f9      	ldr	r1, [r7, #12]
 8006c2e:	69b8      	ldr	r0, [r7, #24]
 8006c30:	f000 fecc 	bl	80079cc <pxPortInitialiseStack>
 8006c34:	4602      	mov	r2, r0
 8006c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c38:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c46:	bf00      	nop
 8006c48:	3720      	adds	r7, #32
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
	...

08006c50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c58:	f000 ffe4 	bl	8007c24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c5c:	4b2a      	ldr	r3, [pc, #168]	; (8006d08 <prvAddNewTaskToReadyList+0xb8>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	3301      	adds	r3, #1
 8006c62:	4a29      	ldr	r2, [pc, #164]	; (8006d08 <prvAddNewTaskToReadyList+0xb8>)
 8006c64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c66:	4b29      	ldr	r3, [pc, #164]	; (8006d0c <prvAddNewTaskToReadyList+0xbc>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d109      	bne.n	8006c82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c6e:	4a27      	ldr	r2, [pc, #156]	; (8006d0c <prvAddNewTaskToReadyList+0xbc>)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c74:	4b24      	ldr	r3, [pc, #144]	; (8006d08 <prvAddNewTaskToReadyList+0xb8>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d110      	bne.n	8006c9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c7c:	f000 fbc6 	bl	800740c <prvInitialiseTaskLists>
 8006c80:	e00d      	b.n	8006c9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c82:	4b23      	ldr	r3, [pc, #140]	; (8006d10 <prvAddNewTaskToReadyList+0xc0>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d109      	bne.n	8006c9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c8a:	4b20      	ldr	r3, [pc, #128]	; (8006d0c <prvAddNewTaskToReadyList+0xbc>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d802      	bhi.n	8006c9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c98:	4a1c      	ldr	r2, [pc, #112]	; (8006d0c <prvAddNewTaskToReadyList+0xbc>)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c9e:	4b1d      	ldr	r3, [pc, #116]	; (8006d14 <prvAddNewTaskToReadyList+0xc4>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	4a1b      	ldr	r2, [pc, #108]	; (8006d14 <prvAddNewTaskToReadyList+0xc4>)
 8006ca6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cac:	2201      	movs	r2, #1
 8006cae:	409a      	lsls	r2, r3
 8006cb0:	4b19      	ldr	r3, [pc, #100]	; (8006d18 <prvAddNewTaskToReadyList+0xc8>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	4a18      	ldr	r2, [pc, #96]	; (8006d18 <prvAddNewTaskToReadyList+0xc8>)
 8006cb8:	6013      	str	r3, [r2, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4a15      	ldr	r2, [pc, #84]	; (8006d1c <prvAddNewTaskToReadyList+0xcc>)
 8006cc8:	441a      	add	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	3304      	adds	r3, #4
 8006cce:	4619      	mov	r1, r3
 8006cd0:	4610      	mov	r0, r2
 8006cd2:	f7ff f846 	bl	8005d62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006cd6:	f000 ffd5 	bl	8007c84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006cda:	4b0d      	ldr	r3, [pc, #52]	; (8006d10 <prvAddNewTaskToReadyList+0xc0>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00e      	beq.n	8006d00 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ce2:	4b0a      	ldr	r3, [pc, #40]	; (8006d0c <prvAddNewTaskToReadyList+0xbc>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d207      	bcs.n	8006d00 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cf0:	4b0b      	ldr	r3, [pc, #44]	; (8006d20 <prvAddNewTaskToReadyList+0xd0>)
 8006cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d00:	bf00      	nop
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	200003cc 	.word	0x200003cc
 8006d0c:	200002cc 	.word	0x200002cc
 8006d10:	200003d8 	.word	0x200003d8
 8006d14:	200003e8 	.word	0x200003e8
 8006d18:	200003d4 	.word	0x200003d4
 8006d1c:	200002d0 	.word	0x200002d0
 8006d20:	e000ed04 	.word	0xe000ed04

08006d24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d017      	beq.n	8006d66 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d36:	4b13      	ldr	r3, [pc, #76]	; (8006d84 <vTaskDelay+0x60>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00a      	beq.n	8006d54 <vTaskDelay+0x30>
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	60bb      	str	r3, [r7, #8]
}
 8006d50:	bf00      	nop
 8006d52:	e7fe      	b.n	8006d52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d54:	f000 f87a 	bl	8006e4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d58:	2100      	movs	r1, #0
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fdd0 	bl	8007900 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d60:	f000 f882 	bl	8006e68 <xTaskResumeAll>
 8006d64:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d107      	bne.n	8006d7c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006d6c:	4b06      	ldr	r3, [pc, #24]	; (8006d88 <vTaskDelay+0x64>)
 8006d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d7c:	bf00      	nop
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	200003f4 	.word	0x200003f4
 8006d88:	e000ed04 	.word	0xe000ed04

08006d8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b08a      	sub	sp, #40	; 0x28
 8006d90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d92:	2300      	movs	r3, #0
 8006d94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d96:	2300      	movs	r3, #0
 8006d98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d9a:	463a      	mov	r2, r7
 8006d9c:	1d39      	adds	r1, r7, #4
 8006d9e:	f107 0308 	add.w	r3, r7, #8
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7fa fe80 	bl	8001aa8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	9202      	str	r2, [sp, #8]
 8006db0:	9301      	str	r3, [sp, #4]
 8006db2:	2300      	movs	r3, #0
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	2300      	movs	r3, #0
 8006db8:	460a      	mov	r2, r1
 8006dba:	491e      	ldr	r1, [pc, #120]	; (8006e34 <vTaskStartScheduler+0xa8>)
 8006dbc:	481e      	ldr	r0, [pc, #120]	; (8006e38 <vTaskStartScheduler+0xac>)
 8006dbe:	f7ff fe1d 	bl	80069fc <xTaskCreateStatic>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	4a1d      	ldr	r2, [pc, #116]	; (8006e3c <vTaskStartScheduler+0xb0>)
 8006dc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006dc8:	4b1c      	ldr	r3, [pc, #112]	; (8006e3c <vTaskStartScheduler+0xb0>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	617b      	str	r3, [r7, #20]
 8006dd4:	e001      	b.n	8006dda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d116      	bne.n	8006e0e <vTaskStartScheduler+0x82>
	__asm volatile
 8006de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	613b      	str	r3, [r7, #16]
}
 8006df2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006df4:	4b12      	ldr	r3, [pc, #72]	; (8006e40 <vTaskStartScheduler+0xb4>)
 8006df6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dfa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006dfc:	4b11      	ldr	r3, [pc, #68]	; (8006e44 <vTaskStartScheduler+0xb8>)
 8006dfe:	2201      	movs	r2, #1
 8006e00:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e02:	4b11      	ldr	r3, [pc, #68]	; (8006e48 <vTaskStartScheduler+0xbc>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e08:	f000 fe6a 	bl	8007ae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e0c:	e00e      	b.n	8006e2c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e14:	d10a      	bne.n	8006e2c <vTaskStartScheduler+0xa0>
	__asm volatile
 8006e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1a:	f383 8811 	msr	BASEPRI, r3
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	f3bf 8f4f 	dsb	sy
 8006e26:	60fb      	str	r3, [r7, #12]
}
 8006e28:	bf00      	nop
 8006e2a:	e7fe      	b.n	8006e2a <vTaskStartScheduler+0x9e>
}
 8006e2c:	bf00      	nop
 8006e2e:	3718      	adds	r7, #24
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	080083d0 	.word	0x080083d0
 8006e38:	080073dd 	.word	0x080073dd
 8006e3c:	200003f0 	.word	0x200003f0
 8006e40:	200003ec 	.word	0x200003ec
 8006e44:	200003d8 	.word	0x200003d8
 8006e48:	200003d0 	.word	0x200003d0

08006e4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e50:	4b04      	ldr	r3, [pc, #16]	; (8006e64 <vTaskSuspendAll+0x18>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3301      	adds	r3, #1
 8006e56:	4a03      	ldr	r2, [pc, #12]	; (8006e64 <vTaskSuspendAll+0x18>)
 8006e58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e5a:	bf00      	nop
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr
 8006e64:	200003f4 	.word	0x200003f4

08006e68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e72:	2300      	movs	r3, #0
 8006e74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e76:	4b41      	ldr	r3, [pc, #260]	; (8006f7c <xTaskResumeAll+0x114>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10a      	bne.n	8006e94 <xTaskResumeAll+0x2c>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	603b      	str	r3, [r7, #0]
}
 8006e90:	bf00      	nop
 8006e92:	e7fe      	b.n	8006e92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e94:	f000 fec6 	bl	8007c24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e98:	4b38      	ldr	r3, [pc, #224]	; (8006f7c <xTaskResumeAll+0x114>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	4a37      	ldr	r2, [pc, #220]	; (8006f7c <xTaskResumeAll+0x114>)
 8006ea0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ea2:	4b36      	ldr	r3, [pc, #216]	; (8006f7c <xTaskResumeAll+0x114>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d161      	bne.n	8006f6e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006eaa:	4b35      	ldr	r3, [pc, #212]	; (8006f80 <xTaskResumeAll+0x118>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d05d      	beq.n	8006f6e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006eb2:	e02e      	b.n	8006f12 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eb4:	4b33      	ldr	r3, [pc, #204]	; (8006f84 <xTaskResumeAll+0x11c>)
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	3318      	adds	r3, #24
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7fe ffab 	bl	8005e1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	3304      	adds	r3, #4
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7fe ffa6 	bl	8005e1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	409a      	lsls	r2, r3
 8006ed8:	4b2b      	ldr	r3, [pc, #172]	; (8006f88 <xTaskResumeAll+0x120>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	4a2a      	ldr	r2, [pc, #168]	; (8006f88 <xTaskResumeAll+0x120>)
 8006ee0:	6013      	str	r3, [r2, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4a27      	ldr	r2, [pc, #156]	; (8006f8c <xTaskResumeAll+0x124>)
 8006ef0:	441a      	add	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	4610      	mov	r0, r2
 8006efa:	f7fe ff32 	bl	8005d62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f02:	4b23      	ldr	r3, [pc, #140]	; (8006f90 <xTaskResumeAll+0x128>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d302      	bcc.n	8006f12 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006f0c:	4b21      	ldr	r3, [pc, #132]	; (8006f94 <xTaskResumeAll+0x12c>)
 8006f0e:	2201      	movs	r2, #1
 8006f10:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f12:	4b1c      	ldr	r3, [pc, #112]	; (8006f84 <xTaskResumeAll+0x11c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1cc      	bne.n	8006eb4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d001      	beq.n	8006f24 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f20:	f000 fb12 	bl	8007548 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f24:	4b1c      	ldr	r3, [pc, #112]	; (8006f98 <xTaskResumeAll+0x130>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d010      	beq.n	8006f52 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f30:	f000 f836 	bl	8006fa0 <xTaskIncrementTick>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d002      	beq.n	8006f40 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006f3a:	4b16      	ldr	r3, [pc, #88]	; (8006f94 <xTaskResumeAll+0x12c>)
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1f1      	bne.n	8006f30 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006f4c:	4b12      	ldr	r3, [pc, #72]	; (8006f98 <xTaskResumeAll+0x130>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f52:	4b10      	ldr	r3, [pc, #64]	; (8006f94 <xTaskResumeAll+0x12c>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d009      	beq.n	8006f6e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f5e:	4b0f      	ldr	r3, [pc, #60]	; (8006f9c <xTaskResumeAll+0x134>)
 8006f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f64:	601a      	str	r2, [r3, #0]
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f6e:	f000 fe89 	bl	8007c84 <vPortExitCritical>

	return xAlreadyYielded;
 8006f72:	68bb      	ldr	r3, [r7, #8]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	200003f4 	.word	0x200003f4
 8006f80:	200003cc 	.word	0x200003cc
 8006f84:	2000038c 	.word	0x2000038c
 8006f88:	200003d4 	.word	0x200003d4
 8006f8c:	200002d0 	.word	0x200002d0
 8006f90:	200002cc 	.word	0x200002cc
 8006f94:	200003e0 	.word	0x200003e0
 8006f98:	200003dc 	.word	0x200003dc
 8006f9c:	e000ed04 	.word	0xe000ed04

08006fa0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006faa:	4b4e      	ldr	r3, [pc, #312]	; (80070e4 <xTaskIncrementTick+0x144>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f040 808e 	bne.w	80070d0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006fb4:	4b4c      	ldr	r3, [pc, #304]	; (80070e8 <xTaskIncrementTick+0x148>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006fbc:	4a4a      	ldr	r2, [pc, #296]	; (80070e8 <xTaskIncrementTick+0x148>)
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d120      	bne.n	800700a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006fc8:	4b48      	ldr	r3, [pc, #288]	; (80070ec <xTaskIncrementTick+0x14c>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00a      	beq.n	8006fe8 <xTaskIncrementTick+0x48>
	__asm volatile
 8006fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd6:	f383 8811 	msr	BASEPRI, r3
 8006fda:	f3bf 8f6f 	isb	sy
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	603b      	str	r3, [r7, #0]
}
 8006fe4:	bf00      	nop
 8006fe6:	e7fe      	b.n	8006fe6 <xTaskIncrementTick+0x46>
 8006fe8:	4b40      	ldr	r3, [pc, #256]	; (80070ec <xTaskIncrementTick+0x14c>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	60fb      	str	r3, [r7, #12]
 8006fee:	4b40      	ldr	r3, [pc, #256]	; (80070f0 <xTaskIncrementTick+0x150>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a3e      	ldr	r2, [pc, #248]	; (80070ec <xTaskIncrementTick+0x14c>)
 8006ff4:	6013      	str	r3, [r2, #0]
 8006ff6:	4a3e      	ldr	r2, [pc, #248]	; (80070f0 <xTaskIncrementTick+0x150>)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6013      	str	r3, [r2, #0]
 8006ffc:	4b3d      	ldr	r3, [pc, #244]	; (80070f4 <xTaskIncrementTick+0x154>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3301      	adds	r3, #1
 8007002:	4a3c      	ldr	r2, [pc, #240]	; (80070f4 <xTaskIncrementTick+0x154>)
 8007004:	6013      	str	r3, [r2, #0]
 8007006:	f000 fa9f 	bl	8007548 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800700a:	4b3b      	ldr	r3, [pc, #236]	; (80070f8 <xTaskIncrementTick+0x158>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	429a      	cmp	r2, r3
 8007012:	d348      	bcc.n	80070a6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007014:	4b35      	ldr	r3, [pc, #212]	; (80070ec <xTaskIncrementTick+0x14c>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d104      	bne.n	8007028 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800701e:	4b36      	ldr	r3, [pc, #216]	; (80070f8 <xTaskIncrementTick+0x158>)
 8007020:	f04f 32ff 	mov.w	r2, #4294967295
 8007024:	601a      	str	r2, [r3, #0]
					break;
 8007026:	e03e      	b.n	80070a6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007028:	4b30      	ldr	r3, [pc, #192]	; (80070ec <xTaskIncrementTick+0x14c>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	429a      	cmp	r2, r3
 800703e:	d203      	bcs.n	8007048 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007040:	4a2d      	ldr	r2, [pc, #180]	; (80070f8 <xTaskIncrementTick+0x158>)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007046:	e02e      	b.n	80070a6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	3304      	adds	r3, #4
 800704c:	4618      	mov	r0, r3
 800704e:	f7fe fee5 	bl	8005e1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007056:	2b00      	cmp	r3, #0
 8007058:	d004      	beq.n	8007064 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	3318      	adds	r3, #24
 800705e:	4618      	mov	r0, r3
 8007060:	f7fe fedc 	bl	8005e1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007068:	2201      	movs	r2, #1
 800706a:	409a      	lsls	r2, r3
 800706c:	4b23      	ldr	r3, [pc, #140]	; (80070fc <xTaskIncrementTick+0x15c>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4313      	orrs	r3, r2
 8007072:	4a22      	ldr	r2, [pc, #136]	; (80070fc <xTaskIncrementTick+0x15c>)
 8007074:	6013      	str	r3, [r2, #0]
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707a:	4613      	mov	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4a1f      	ldr	r2, [pc, #124]	; (8007100 <xTaskIncrementTick+0x160>)
 8007084:	441a      	add	r2, r3
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	3304      	adds	r3, #4
 800708a:	4619      	mov	r1, r3
 800708c:	4610      	mov	r0, r2
 800708e:	f7fe fe68 	bl	8005d62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007096:	4b1b      	ldr	r3, [pc, #108]	; (8007104 <xTaskIncrementTick+0x164>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709c:	429a      	cmp	r2, r3
 800709e:	d3b9      	bcc.n	8007014 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80070a0:	2301      	movs	r3, #1
 80070a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070a4:	e7b6      	b.n	8007014 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070a6:	4b17      	ldr	r3, [pc, #92]	; (8007104 <xTaskIncrementTick+0x164>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ac:	4914      	ldr	r1, [pc, #80]	; (8007100 <xTaskIncrementTick+0x160>)
 80070ae:	4613      	mov	r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4413      	add	r3, r2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	440b      	add	r3, r1
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d901      	bls.n	80070c2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80070be:	2301      	movs	r3, #1
 80070c0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80070c2:	4b11      	ldr	r3, [pc, #68]	; (8007108 <xTaskIncrementTick+0x168>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d007      	beq.n	80070da <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80070ca:	2301      	movs	r3, #1
 80070cc:	617b      	str	r3, [r7, #20]
 80070ce:	e004      	b.n	80070da <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80070d0:	4b0e      	ldr	r3, [pc, #56]	; (800710c <xTaskIncrementTick+0x16c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3301      	adds	r3, #1
 80070d6:	4a0d      	ldr	r2, [pc, #52]	; (800710c <xTaskIncrementTick+0x16c>)
 80070d8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80070da:	697b      	ldr	r3, [r7, #20]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3718      	adds	r7, #24
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	200003f4 	.word	0x200003f4
 80070e8:	200003d0 	.word	0x200003d0
 80070ec:	20000384 	.word	0x20000384
 80070f0:	20000388 	.word	0x20000388
 80070f4:	200003e4 	.word	0x200003e4
 80070f8:	200003ec 	.word	0x200003ec
 80070fc:	200003d4 	.word	0x200003d4
 8007100:	200002d0 	.word	0x200002d0
 8007104:	200002cc 	.word	0x200002cc
 8007108:	200003e0 	.word	0x200003e0
 800710c:	200003dc 	.word	0x200003dc

08007110 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007110:	b480      	push	{r7}
 8007112:	b087      	sub	sp, #28
 8007114:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007116:	4b27      	ldr	r3, [pc, #156]	; (80071b4 <vTaskSwitchContext+0xa4>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d003      	beq.n	8007126 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800711e:	4b26      	ldr	r3, [pc, #152]	; (80071b8 <vTaskSwitchContext+0xa8>)
 8007120:	2201      	movs	r2, #1
 8007122:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007124:	e03f      	b.n	80071a6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007126:	4b24      	ldr	r3, [pc, #144]	; (80071b8 <vTaskSwitchContext+0xa8>)
 8007128:	2200      	movs	r2, #0
 800712a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800712c:	4b23      	ldr	r3, [pc, #140]	; (80071bc <vTaskSwitchContext+0xac>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	fab3 f383 	clz	r3, r3
 8007138:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800713a:	7afb      	ldrb	r3, [r7, #11]
 800713c:	f1c3 031f 	rsb	r3, r3, #31
 8007140:	617b      	str	r3, [r7, #20]
 8007142:	491f      	ldr	r1, [pc, #124]	; (80071c0 <vTaskSwitchContext+0xb0>)
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	4613      	mov	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	440b      	add	r3, r1
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10a      	bne.n	800716c <vTaskSwitchContext+0x5c>
	__asm volatile
 8007156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	607b      	str	r3, [r7, #4]
}
 8007168:	bf00      	nop
 800716a:	e7fe      	b.n	800716a <vTaskSwitchContext+0x5a>
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	4613      	mov	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4413      	add	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4a12      	ldr	r2, [pc, #72]	; (80071c0 <vTaskSwitchContext+0xb0>)
 8007178:	4413      	add	r3, r2
 800717a:	613b      	str	r3, [r7, #16]
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	685a      	ldr	r2, [r3, #4]
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	605a      	str	r2, [r3, #4]
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	685a      	ldr	r2, [r3, #4]
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	3308      	adds	r3, #8
 800718e:	429a      	cmp	r2, r3
 8007190:	d104      	bne.n	800719c <vTaskSwitchContext+0x8c>
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	685a      	ldr	r2, [r3, #4]
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	605a      	str	r2, [r3, #4]
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	4a08      	ldr	r2, [pc, #32]	; (80071c4 <vTaskSwitchContext+0xb4>)
 80071a4:	6013      	str	r3, [r2, #0]
}
 80071a6:	bf00      	nop
 80071a8:	371c      	adds	r7, #28
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	200003f4 	.word	0x200003f4
 80071b8:	200003e0 	.word	0x200003e0
 80071bc:	200003d4 	.word	0x200003d4
 80071c0:	200002d0 	.word	0x200002d0
 80071c4:	200002cc 	.word	0x200002cc

080071c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10a      	bne.n	80071ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80071d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071dc:	f383 8811 	msr	BASEPRI, r3
 80071e0:	f3bf 8f6f 	isb	sy
 80071e4:	f3bf 8f4f 	dsb	sy
 80071e8:	60fb      	str	r3, [r7, #12]
}
 80071ea:	bf00      	nop
 80071ec:	e7fe      	b.n	80071ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071ee:	4b07      	ldr	r3, [pc, #28]	; (800720c <vTaskPlaceOnEventList+0x44>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3318      	adds	r3, #24
 80071f4:	4619      	mov	r1, r3
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f7fe fdd7 	bl	8005daa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80071fc:	2101      	movs	r1, #1
 80071fe:	6838      	ldr	r0, [r7, #0]
 8007200:	f000 fb7e 	bl	8007900 <prvAddCurrentTaskToDelayedList>
}
 8007204:	bf00      	nop
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	200002cc 	.word	0x200002cc

08007210 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b086      	sub	sp, #24
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10a      	bne.n	800723c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722a:	f383 8811 	msr	BASEPRI, r3
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	f3bf 8f4f 	dsb	sy
 8007236:	60fb      	str	r3, [r7, #12]
}
 8007238:	bf00      	nop
 800723a:	e7fe      	b.n	800723a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	3318      	adds	r3, #24
 8007240:	4618      	mov	r0, r3
 8007242:	f7fe fdeb 	bl	8005e1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007246:	4b1d      	ldr	r3, [pc, #116]	; (80072bc <xTaskRemoveFromEventList+0xac>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d11c      	bne.n	8007288 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	3304      	adds	r3, #4
 8007252:	4618      	mov	r0, r3
 8007254:	f7fe fde2 	bl	8005e1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725c:	2201      	movs	r2, #1
 800725e:	409a      	lsls	r2, r3
 8007260:	4b17      	ldr	r3, [pc, #92]	; (80072c0 <xTaskRemoveFromEventList+0xb0>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4313      	orrs	r3, r2
 8007266:	4a16      	ldr	r2, [pc, #88]	; (80072c0 <xTaskRemoveFromEventList+0xb0>)
 8007268:	6013      	str	r3, [r2, #0]
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800726e:	4613      	mov	r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4413      	add	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4a13      	ldr	r2, [pc, #76]	; (80072c4 <xTaskRemoveFromEventList+0xb4>)
 8007278:	441a      	add	r2, r3
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	3304      	adds	r3, #4
 800727e:	4619      	mov	r1, r3
 8007280:	4610      	mov	r0, r2
 8007282:	f7fe fd6e 	bl	8005d62 <vListInsertEnd>
 8007286:	e005      	b.n	8007294 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	3318      	adds	r3, #24
 800728c:	4619      	mov	r1, r3
 800728e:	480e      	ldr	r0, [pc, #56]	; (80072c8 <xTaskRemoveFromEventList+0xb8>)
 8007290:	f7fe fd67 	bl	8005d62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007298:	4b0c      	ldr	r3, [pc, #48]	; (80072cc <xTaskRemoveFromEventList+0xbc>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729e:	429a      	cmp	r2, r3
 80072a0:	d905      	bls.n	80072ae <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80072a2:	2301      	movs	r3, #1
 80072a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80072a6:	4b0a      	ldr	r3, [pc, #40]	; (80072d0 <xTaskRemoveFromEventList+0xc0>)
 80072a8:	2201      	movs	r2, #1
 80072aa:	601a      	str	r2, [r3, #0]
 80072ac:	e001      	b.n	80072b2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80072ae:	2300      	movs	r3, #0
 80072b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80072b2:	697b      	ldr	r3, [r7, #20]
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3718      	adds	r7, #24
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	200003f4 	.word	0x200003f4
 80072c0:	200003d4 	.word	0x200003d4
 80072c4:	200002d0 	.word	0x200002d0
 80072c8:	2000038c 	.word	0x2000038c
 80072cc:	200002cc 	.word	0x200002cc
 80072d0:	200003e0 	.word	0x200003e0

080072d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80072dc:	4b06      	ldr	r3, [pc, #24]	; (80072f8 <vTaskInternalSetTimeOutState+0x24>)
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80072e4:	4b05      	ldr	r3, [pc, #20]	; (80072fc <vTaskInternalSetTimeOutState+0x28>)
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	605a      	str	r2, [r3, #4]
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	200003e4 	.word	0x200003e4
 80072fc:	200003d0 	.word	0x200003d0

08007300 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b088      	sub	sp, #32
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10a      	bne.n	8007326 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007314:	f383 8811 	msr	BASEPRI, r3
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	613b      	str	r3, [r7, #16]
}
 8007322:	bf00      	nop
 8007324:	e7fe      	b.n	8007324 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10a      	bne.n	8007342 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800732c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007330:	f383 8811 	msr	BASEPRI, r3
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	60fb      	str	r3, [r7, #12]
}
 800733e:	bf00      	nop
 8007340:	e7fe      	b.n	8007340 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007342:	f000 fc6f 	bl	8007c24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007346:	4b1d      	ldr	r3, [pc, #116]	; (80073bc <xTaskCheckForTimeOut+0xbc>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	69ba      	ldr	r2, [r7, #24]
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800735e:	d102      	bne.n	8007366 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007360:	2300      	movs	r3, #0
 8007362:	61fb      	str	r3, [r7, #28]
 8007364:	e023      	b.n	80073ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	4b15      	ldr	r3, [pc, #84]	; (80073c0 <xTaskCheckForTimeOut+0xc0>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	429a      	cmp	r2, r3
 8007370:	d007      	beq.n	8007382 <xTaskCheckForTimeOut+0x82>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	69ba      	ldr	r2, [r7, #24]
 8007378:	429a      	cmp	r2, r3
 800737a:	d302      	bcc.n	8007382 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800737c:	2301      	movs	r3, #1
 800737e:	61fb      	str	r3, [r7, #28]
 8007380:	e015      	b.n	80073ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	429a      	cmp	r2, r3
 800738a:	d20b      	bcs.n	80073a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	1ad2      	subs	r2, r2, r3
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f7ff ff9b 	bl	80072d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800739e:	2300      	movs	r3, #0
 80073a0:	61fb      	str	r3, [r7, #28]
 80073a2:	e004      	b.n	80073ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	2200      	movs	r2, #0
 80073a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80073aa:	2301      	movs	r3, #1
 80073ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80073ae:	f000 fc69 	bl	8007c84 <vPortExitCritical>

	return xReturn;
 80073b2:	69fb      	ldr	r3, [r7, #28]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3720      	adds	r7, #32
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	200003d0 	.word	0x200003d0
 80073c0:	200003e4 	.word	0x200003e4

080073c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80073c4:	b480      	push	{r7}
 80073c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80073c8:	4b03      	ldr	r3, [pc, #12]	; (80073d8 <vTaskMissedYield+0x14>)
 80073ca:	2201      	movs	r2, #1
 80073cc:	601a      	str	r2, [r3, #0]
}
 80073ce:	bf00      	nop
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr
 80073d8:	200003e0 	.word	0x200003e0

080073dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80073e4:	f000 f852 	bl	800748c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80073e8:	4b06      	ldr	r3, [pc, #24]	; (8007404 <prvIdleTask+0x28>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d9f9      	bls.n	80073e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80073f0:	4b05      	ldr	r3, [pc, #20]	; (8007408 <prvIdleTask+0x2c>)
 80073f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073f6:	601a      	str	r2, [r3, #0]
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007400:	e7f0      	b.n	80073e4 <prvIdleTask+0x8>
 8007402:	bf00      	nop
 8007404:	200002d0 	.word	0x200002d0
 8007408:	e000ed04 	.word	0xe000ed04

0800740c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007412:	2300      	movs	r3, #0
 8007414:	607b      	str	r3, [r7, #4]
 8007416:	e00c      	b.n	8007432 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	4613      	mov	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4a12      	ldr	r2, [pc, #72]	; (800746c <prvInitialiseTaskLists+0x60>)
 8007424:	4413      	add	r3, r2
 8007426:	4618      	mov	r0, r3
 8007428:	f7fe fc6e 	bl	8005d08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	3301      	adds	r3, #1
 8007430:	607b      	str	r3, [r7, #4]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2b06      	cmp	r3, #6
 8007436:	d9ef      	bls.n	8007418 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007438:	480d      	ldr	r0, [pc, #52]	; (8007470 <prvInitialiseTaskLists+0x64>)
 800743a:	f7fe fc65 	bl	8005d08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800743e:	480d      	ldr	r0, [pc, #52]	; (8007474 <prvInitialiseTaskLists+0x68>)
 8007440:	f7fe fc62 	bl	8005d08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007444:	480c      	ldr	r0, [pc, #48]	; (8007478 <prvInitialiseTaskLists+0x6c>)
 8007446:	f7fe fc5f 	bl	8005d08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800744a:	480c      	ldr	r0, [pc, #48]	; (800747c <prvInitialiseTaskLists+0x70>)
 800744c:	f7fe fc5c 	bl	8005d08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007450:	480b      	ldr	r0, [pc, #44]	; (8007480 <prvInitialiseTaskLists+0x74>)
 8007452:	f7fe fc59 	bl	8005d08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007456:	4b0b      	ldr	r3, [pc, #44]	; (8007484 <prvInitialiseTaskLists+0x78>)
 8007458:	4a05      	ldr	r2, [pc, #20]	; (8007470 <prvInitialiseTaskLists+0x64>)
 800745a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800745c:	4b0a      	ldr	r3, [pc, #40]	; (8007488 <prvInitialiseTaskLists+0x7c>)
 800745e:	4a05      	ldr	r2, [pc, #20]	; (8007474 <prvInitialiseTaskLists+0x68>)
 8007460:	601a      	str	r2, [r3, #0]
}
 8007462:	bf00      	nop
 8007464:	3708      	adds	r7, #8
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	200002d0 	.word	0x200002d0
 8007470:	2000035c 	.word	0x2000035c
 8007474:	20000370 	.word	0x20000370
 8007478:	2000038c 	.word	0x2000038c
 800747c:	200003a0 	.word	0x200003a0
 8007480:	200003b8 	.word	0x200003b8
 8007484:	20000384 	.word	0x20000384
 8007488:	20000388 	.word	0x20000388

0800748c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007492:	e019      	b.n	80074c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007494:	f000 fbc6 	bl	8007c24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007498:	4b10      	ldr	r3, [pc, #64]	; (80074dc <prvCheckTasksWaitingTermination+0x50>)
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	3304      	adds	r3, #4
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7fe fcb9 	bl	8005e1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80074aa:	4b0d      	ldr	r3, [pc, #52]	; (80074e0 <prvCheckTasksWaitingTermination+0x54>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3b01      	subs	r3, #1
 80074b0:	4a0b      	ldr	r2, [pc, #44]	; (80074e0 <prvCheckTasksWaitingTermination+0x54>)
 80074b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80074b4:	4b0b      	ldr	r3, [pc, #44]	; (80074e4 <prvCheckTasksWaitingTermination+0x58>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	3b01      	subs	r3, #1
 80074ba:	4a0a      	ldr	r2, [pc, #40]	; (80074e4 <prvCheckTasksWaitingTermination+0x58>)
 80074bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80074be:	f000 fbe1 	bl	8007c84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f810 	bl	80074e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074c8:	4b06      	ldr	r3, [pc, #24]	; (80074e4 <prvCheckTasksWaitingTermination+0x58>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1e1      	bne.n	8007494 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80074d0:	bf00      	nop
 80074d2:	bf00      	nop
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	200003a0 	.word	0x200003a0
 80074e0:	200003cc 	.word	0x200003cc
 80074e4:	200003b4 	.word	0x200003b4

080074e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d108      	bne.n	800750c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fe:	4618      	mov	r0, r3
 8007500:	f000 fd7e 	bl	8008000 <vPortFree>
				vPortFree( pxTCB );
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fd7b 	bl	8008000 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800750a:	e018      	b.n	800753e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007512:	2b01      	cmp	r3, #1
 8007514:	d103      	bne.n	800751e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fd72 	bl	8008000 <vPortFree>
	}
 800751c:	e00f      	b.n	800753e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007524:	2b02      	cmp	r3, #2
 8007526:	d00a      	beq.n	800753e <prvDeleteTCB+0x56>
	__asm volatile
 8007528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752c:	f383 8811 	msr	BASEPRI, r3
 8007530:	f3bf 8f6f 	isb	sy
 8007534:	f3bf 8f4f 	dsb	sy
 8007538:	60fb      	str	r3, [r7, #12]
}
 800753a:	bf00      	nop
 800753c:	e7fe      	b.n	800753c <prvDeleteTCB+0x54>
	}
 800753e:	bf00      	nop
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
	...

08007548 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800754e:	4b0c      	ldr	r3, [pc, #48]	; (8007580 <prvResetNextTaskUnblockTime+0x38>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d104      	bne.n	8007562 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007558:	4b0a      	ldr	r3, [pc, #40]	; (8007584 <prvResetNextTaskUnblockTime+0x3c>)
 800755a:	f04f 32ff 	mov.w	r2, #4294967295
 800755e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007560:	e008      	b.n	8007574 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007562:	4b07      	ldr	r3, [pc, #28]	; (8007580 <prvResetNextTaskUnblockTime+0x38>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	4a04      	ldr	r2, [pc, #16]	; (8007584 <prvResetNextTaskUnblockTime+0x3c>)
 8007572:	6013      	str	r3, [r2, #0]
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr
 8007580:	20000384 	.word	0x20000384
 8007584:	200003ec 	.word	0x200003ec

08007588 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800758e:	4b0b      	ldr	r3, [pc, #44]	; (80075bc <xTaskGetSchedulerState+0x34>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d102      	bne.n	800759c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007596:	2301      	movs	r3, #1
 8007598:	607b      	str	r3, [r7, #4]
 800759a:	e008      	b.n	80075ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800759c:	4b08      	ldr	r3, [pc, #32]	; (80075c0 <xTaskGetSchedulerState+0x38>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d102      	bne.n	80075aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80075a4:	2302      	movs	r3, #2
 80075a6:	607b      	str	r3, [r7, #4]
 80075a8:	e001      	b.n	80075ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80075aa:	2300      	movs	r3, #0
 80075ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80075ae:	687b      	ldr	r3, [r7, #4]
	}
 80075b0:	4618      	mov	r0, r3
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr
 80075bc:	200003d8 	.word	0x200003d8
 80075c0:	200003f4 	.word	0x200003f4

080075c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80075d0:	2300      	movs	r3, #0
 80075d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d05e      	beq.n	8007698 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075de:	4b31      	ldr	r3, [pc, #196]	; (80076a4 <xTaskPriorityInherit+0xe0>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d24e      	bcs.n	8007686 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	db06      	blt.n	80075fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075f0:	4b2c      	ldr	r3, [pc, #176]	; (80076a4 <xTaskPriorityInherit+0xe0>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f6:	f1c3 0207 	rsb	r2, r3, #7
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	6959      	ldr	r1, [r3, #20]
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007606:	4613      	mov	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4a26      	ldr	r2, [pc, #152]	; (80076a8 <xTaskPriorityInherit+0xe4>)
 8007610:	4413      	add	r3, r2
 8007612:	4299      	cmp	r1, r3
 8007614:	d12f      	bne.n	8007676 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	3304      	adds	r3, #4
 800761a:	4618      	mov	r0, r3
 800761c:	f7fe fbfe 	bl	8005e1c <uxListRemove>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10a      	bne.n	800763c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762a:	2201      	movs	r2, #1
 800762c:	fa02 f303 	lsl.w	r3, r2, r3
 8007630:	43da      	mvns	r2, r3
 8007632:	4b1e      	ldr	r3, [pc, #120]	; (80076ac <xTaskPriorityInherit+0xe8>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4013      	ands	r3, r2
 8007638:	4a1c      	ldr	r2, [pc, #112]	; (80076ac <xTaskPriorityInherit+0xe8>)
 800763a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800763c:	4b19      	ldr	r3, [pc, #100]	; (80076a4 <xTaskPriorityInherit+0xe0>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764a:	2201      	movs	r2, #1
 800764c:	409a      	lsls	r2, r3
 800764e:	4b17      	ldr	r3, [pc, #92]	; (80076ac <xTaskPriorityInherit+0xe8>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4313      	orrs	r3, r2
 8007654:	4a15      	ldr	r2, [pc, #84]	; (80076ac <xTaskPriorityInherit+0xe8>)
 8007656:	6013      	str	r3, [r2, #0]
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800765c:	4613      	mov	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4a10      	ldr	r2, [pc, #64]	; (80076a8 <xTaskPriorityInherit+0xe4>)
 8007666:	441a      	add	r2, r3
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	3304      	adds	r3, #4
 800766c:	4619      	mov	r1, r3
 800766e:	4610      	mov	r0, r2
 8007670:	f7fe fb77 	bl	8005d62 <vListInsertEnd>
 8007674:	e004      	b.n	8007680 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007676:	4b0b      	ldr	r3, [pc, #44]	; (80076a4 <xTaskPriorityInherit+0xe0>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007680:	2301      	movs	r3, #1
 8007682:	60fb      	str	r3, [r7, #12]
 8007684:	e008      	b.n	8007698 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800768a:	4b06      	ldr	r3, [pc, #24]	; (80076a4 <xTaskPriorityInherit+0xe0>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007690:	429a      	cmp	r2, r3
 8007692:	d201      	bcs.n	8007698 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007694:	2301      	movs	r3, #1
 8007696:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007698:	68fb      	ldr	r3, [r7, #12]
	}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	200002cc 	.word	0x200002cc
 80076a8:	200002d0 	.word	0x200002d0
 80076ac:	200003d4 	.word	0x200003d4

080076b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80076bc:	2300      	movs	r3, #0
 80076be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d06e      	beq.n	80077a4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076c6:	4b3a      	ldr	r3, [pc, #232]	; (80077b0 <xTaskPriorityDisinherit+0x100>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	693a      	ldr	r2, [r7, #16]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d00a      	beq.n	80076e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	60fb      	str	r3, [r7, #12]
}
 80076e2:	bf00      	nop
 80076e4:	e7fe      	b.n	80076e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10a      	bne.n	8007704 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80076ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f2:	f383 8811 	msr	BASEPRI, r3
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	60bb      	str	r3, [r7, #8]
}
 8007700:	bf00      	nop
 8007702:	e7fe      	b.n	8007702 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007708:	1e5a      	subs	r2, r3, #1
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007716:	429a      	cmp	r2, r3
 8007718:	d044      	beq.n	80077a4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800771e:	2b00      	cmp	r3, #0
 8007720:	d140      	bne.n	80077a4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	3304      	adds	r3, #4
 8007726:	4618      	mov	r0, r3
 8007728:	f7fe fb78 	bl	8005e1c <uxListRemove>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d115      	bne.n	800775e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007736:	491f      	ldr	r1, [pc, #124]	; (80077b4 <xTaskPriorityDisinherit+0x104>)
 8007738:	4613      	mov	r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4413      	add	r3, r2
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	440b      	add	r3, r1
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10a      	bne.n	800775e <xTaskPriorityDisinherit+0xae>
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774c:	2201      	movs	r2, #1
 800774e:	fa02 f303 	lsl.w	r3, r2, r3
 8007752:	43da      	mvns	r2, r3
 8007754:	4b18      	ldr	r3, [pc, #96]	; (80077b8 <xTaskPriorityDisinherit+0x108>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4013      	ands	r3, r2
 800775a:	4a17      	ldr	r2, [pc, #92]	; (80077b8 <xTaskPriorityDisinherit+0x108>)
 800775c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776a:	f1c3 0207 	rsb	r2, r3, #7
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007776:	2201      	movs	r2, #1
 8007778:	409a      	lsls	r2, r3
 800777a:	4b0f      	ldr	r3, [pc, #60]	; (80077b8 <xTaskPriorityDisinherit+0x108>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4313      	orrs	r3, r2
 8007780:	4a0d      	ldr	r2, [pc, #52]	; (80077b8 <xTaskPriorityDisinherit+0x108>)
 8007782:	6013      	str	r3, [r2, #0]
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007788:	4613      	mov	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	4413      	add	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4a08      	ldr	r2, [pc, #32]	; (80077b4 <xTaskPriorityDisinherit+0x104>)
 8007792:	441a      	add	r2, r3
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	3304      	adds	r3, #4
 8007798:	4619      	mov	r1, r3
 800779a:	4610      	mov	r0, r2
 800779c:	f7fe fae1 	bl	8005d62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077a0:	2301      	movs	r3, #1
 80077a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077a4:	697b      	ldr	r3, [r7, #20]
	}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3718      	adds	r7, #24
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	200002cc 	.word	0x200002cc
 80077b4:	200002d0 	.word	0x200002d0
 80077b8:	200003d4 	.word	0x200003d4

080077bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b088      	sub	sp, #32
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80077ca:	2301      	movs	r3, #1
 80077cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d077      	beq.n	80078c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10a      	bne.n	80077f2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80077dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e0:	f383 8811 	msr	BASEPRI, r3
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	60fb      	str	r3, [r7, #12]
}
 80077ee:	bf00      	nop
 80077f0:	e7fe      	b.n	80077f0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d902      	bls.n	8007802 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	61fb      	str	r3, [r7, #28]
 8007800:	e002      	b.n	8007808 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007806:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780c:	69fa      	ldr	r2, [r7, #28]
 800780e:	429a      	cmp	r2, r3
 8007810:	d058      	beq.n	80078c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	429a      	cmp	r2, r3
 800781a:	d153      	bne.n	80078c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800781c:	4b2b      	ldr	r3, [pc, #172]	; (80078cc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	69ba      	ldr	r2, [r7, #24]
 8007822:	429a      	cmp	r2, r3
 8007824:	d10a      	bne.n	800783c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782a:	f383 8811 	msr	BASEPRI, r3
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	60bb      	str	r3, [r7, #8]
}
 8007838:	bf00      	nop
 800783a:	e7fe      	b.n	800783a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007840:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	69fa      	ldr	r2, [r7, #28]
 8007846:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	2b00      	cmp	r3, #0
 800784e:	db04      	blt.n	800785a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	f1c3 0207 	rsb	r2, r3, #7
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	6959      	ldr	r1, [r3, #20]
 800785e:	693a      	ldr	r2, [r7, #16]
 8007860:	4613      	mov	r3, r2
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	4413      	add	r3, r2
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	4a19      	ldr	r2, [pc, #100]	; (80078d0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800786a:	4413      	add	r3, r2
 800786c:	4299      	cmp	r1, r3
 800786e:	d129      	bne.n	80078c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	3304      	adds	r3, #4
 8007874:	4618      	mov	r0, r3
 8007876:	f7fe fad1 	bl	8005e1c <uxListRemove>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d10a      	bne.n	8007896 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007884:	2201      	movs	r2, #1
 8007886:	fa02 f303 	lsl.w	r3, r2, r3
 800788a:	43da      	mvns	r2, r3
 800788c:	4b11      	ldr	r3, [pc, #68]	; (80078d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4013      	ands	r3, r2
 8007892:	4a10      	ldr	r2, [pc, #64]	; (80078d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007894:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789a:	2201      	movs	r2, #1
 800789c:	409a      	lsls	r2, r3
 800789e:	4b0d      	ldr	r3, [pc, #52]	; (80078d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	4a0b      	ldr	r2, [pc, #44]	; (80078d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80078a6:	6013      	str	r3, [r2, #0]
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ac:	4613      	mov	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4a06      	ldr	r2, [pc, #24]	; (80078d0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80078b6:	441a      	add	r2, r3
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	3304      	adds	r3, #4
 80078bc:	4619      	mov	r1, r3
 80078be:	4610      	mov	r0, r2
 80078c0:	f7fe fa4f 	bl	8005d62 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078c4:	bf00      	nop
 80078c6:	3720      	adds	r7, #32
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	200002cc 	.word	0x200002cc
 80078d0:	200002d0 	.word	0x200002d0
 80078d4:	200003d4 	.word	0x200003d4

080078d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80078d8:	b480      	push	{r7}
 80078da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80078dc:	4b07      	ldr	r3, [pc, #28]	; (80078fc <pvTaskIncrementMutexHeldCount+0x24>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d004      	beq.n	80078ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80078e4:	4b05      	ldr	r3, [pc, #20]	; (80078fc <pvTaskIncrementMutexHeldCount+0x24>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078ea:	3201      	adds	r2, #1
 80078ec:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80078ee:	4b03      	ldr	r3, [pc, #12]	; (80078fc <pvTaskIncrementMutexHeldCount+0x24>)
 80078f0:	681b      	ldr	r3, [r3, #0]
	}
 80078f2:	4618      	mov	r0, r3
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	200002cc 	.word	0x200002cc

08007900 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800790a:	4b29      	ldr	r3, [pc, #164]	; (80079b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007910:	4b28      	ldr	r3, [pc, #160]	; (80079b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	3304      	adds	r3, #4
 8007916:	4618      	mov	r0, r3
 8007918:	f7fe fa80 	bl	8005e1c <uxListRemove>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10b      	bne.n	800793a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007922:	4b24      	ldr	r3, [pc, #144]	; (80079b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007928:	2201      	movs	r2, #1
 800792a:	fa02 f303 	lsl.w	r3, r2, r3
 800792e:	43da      	mvns	r2, r3
 8007930:	4b21      	ldr	r3, [pc, #132]	; (80079b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4013      	ands	r3, r2
 8007936:	4a20      	ldr	r2, [pc, #128]	; (80079b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007938:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007940:	d10a      	bne.n	8007958 <prvAddCurrentTaskToDelayedList+0x58>
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d007      	beq.n	8007958 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007948:	4b1a      	ldr	r3, [pc, #104]	; (80079b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3304      	adds	r3, #4
 800794e:	4619      	mov	r1, r3
 8007950:	481a      	ldr	r0, [pc, #104]	; (80079bc <prvAddCurrentTaskToDelayedList+0xbc>)
 8007952:	f7fe fa06 	bl	8005d62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007956:	e026      	b.n	80079a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4413      	add	r3, r2
 800795e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007960:	4b14      	ldr	r3, [pc, #80]	; (80079b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007968:	68ba      	ldr	r2, [r7, #8]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	429a      	cmp	r2, r3
 800796e:	d209      	bcs.n	8007984 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007970:	4b13      	ldr	r3, [pc, #76]	; (80079c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	4b0f      	ldr	r3, [pc, #60]	; (80079b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	3304      	adds	r3, #4
 800797a:	4619      	mov	r1, r3
 800797c:	4610      	mov	r0, r2
 800797e:	f7fe fa14 	bl	8005daa <vListInsert>
}
 8007982:	e010      	b.n	80079a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007984:	4b0f      	ldr	r3, [pc, #60]	; (80079c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	4b0a      	ldr	r3, [pc, #40]	; (80079b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	3304      	adds	r3, #4
 800798e:	4619      	mov	r1, r3
 8007990:	4610      	mov	r0, r2
 8007992:	f7fe fa0a 	bl	8005daa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007996:	4b0c      	ldr	r3, [pc, #48]	; (80079c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	429a      	cmp	r2, r3
 800799e:	d202      	bcs.n	80079a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80079a0:	4a09      	ldr	r2, [pc, #36]	; (80079c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	6013      	str	r3, [r2, #0]
}
 80079a6:	bf00      	nop
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	200003d0 	.word	0x200003d0
 80079b4:	200002cc 	.word	0x200002cc
 80079b8:	200003d4 	.word	0x200003d4
 80079bc:	200003b8 	.word	0x200003b8
 80079c0:	20000388 	.word	0x20000388
 80079c4:	20000384 	.word	0x20000384
 80079c8:	200003ec 	.word	0x200003ec

080079cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	3b04      	subs	r3, #4
 80079dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80079e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	3b04      	subs	r3, #4
 80079ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	f023 0201 	bic.w	r2, r3, #1
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	3b04      	subs	r3, #4
 80079fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80079fc:	4a0c      	ldr	r2, [pc, #48]	; (8007a30 <pxPortInitialiseStack+0x64>)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	3b14      	subs	r3, #20
 8007a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	3b04      	subs	r3, #4
 8007a12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f06f 0202 	mvn.w	r2, #2
 8007a1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	3b20      	subs	r3, #32
 8007a20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a22:	68fb      	ldr	r3, [r7, #12]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3714      	adds	r7, #20
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr
 8007a30:	08007a35 	.word	0x08007a35

08007a34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a3e:	4b12      	ldr	r3, [pc, #72]	; (8007a88 <prvTaskExitError+0x54>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a46:	d00a      	beq.n	8007a5e <prvTaskExitError+0x2a>
	__asm volatile
 8007a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4c:	f383 8811 	msr	BASEPRI, r3
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	60fb      	str	r3, [r7, #12]
}
 8007a5a:	bf00      	nop
 8007a5c:	e7fe      	b.n	8007a5c <prvTaskExitError+0x28>
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	60bb      	str	r3, [r7, #8]
}
 8007a70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a72:	bf00      	nop
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d0fc      	beq.n	8007a74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a7a:	bf00      	nop
 8007a7c:	bf00      	nop
 8007a7e:	3714      	adds	r7, #20
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	2000000c 	.word	0x2000000c
 8007a8c:	00000000 	.word	0x00000000

08007a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a90:	4b07      	ldr	r3, [pc, #28]	; (8007ab0 <pxCurrentTCBConst2>)
 8007a92:	6819      	ldr	r1, [r3, #0]
 8007a94:	6808      	ldr	r0, [r1, #0]
 8007a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a9a:	f380 8809 	msr	PSP, r0
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	f04f 0000 	mov.w	r0, #0
 8007aa6:	f380 8811 	msr	BASEPRI, r0
 8007aaa:	4770      	bx	lr
 8007aac:	f3af 8000 	nop.w

08007ab0 <pxCurrentTCBConst2>:
 8007ab0:	200002cc 	.word	0x200002cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ab4:	bf00      	nop
 8007ab6:	bf00      	nop

08007ab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ab8:	4808      	ldr	r0, [pc, #32]	; (8007adc <prvPortStartFirstTask+0x24>)
 8007aba:	6800      	ldr	r0, [r0, #0]
 8007abc:	6800      	ldr	r0, [r0, #0]
 8007abe:	f380 8808 	msr	MSP, r0
 8007ac2:	f04f 0000 	mov.w	r0, #0
 8007ac6:	f380 8814 	msr	CONTROL, r0
 8007aca:	b662      	cpsie	i
 8007acc:	b661      	cpsie	f
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	f3bf 8f6f 	isb	sy
 8007ad6:	df00      	svc	0
 8007ad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007ada:	bf00      	nop
 8007adc:	e000ed08 	.word	0xe000ed08

08007ae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ae6:	4b46      	ldr	r3, [pc, #280]	; (8007c00 <xPortStartScheduler+0x120>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a46      	ldr	r2, [pc, #280]	; (8007c04 <xPortStartScheduler+0x124>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d10a      	bne.n	8007b06 <xPortStartScheduler+0x26>
	__asm volatile
 8007af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	613b      	str	r3, [r7, #16]
}
 8007b02:	bf00      	nop
 8007b04:	e7fe      	b.n	8007b04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007b06:	4b3e      	ldr	r3, [pc, #248]	; (8007c00 <xPortStartScheduler+0x120>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a3f      	ldr	r2, [pc, #252]	; (8007c08 <xPortStartScheduler+0x128>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d10a      	bne.n	8007b26 <xPortStartScheduler+0x46>
	__asm volatile
 8007b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b14:	f383 8811 	msr	BASEPRI, r3
 8007b18:	f3bf 8f6f 	isb	sy
 8007b1c:	f3bf 8f4f 	dsb	sy
 8007b20:	60fb      	str	r3, [r7, #12]
}
 8007b22:	bf00      	nop
 8007b24:	e7fe      	b.n	8007b24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b26:	4b39      	ldr	r3, [pc, #228]	; (8007c0c <xPortStartScheduler+0x12c>)
 8007b28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	22ff      	movs	r2, #255	; 0xff
 8007b36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b40:	78fb      	ldrb	r3, [r7, #3]
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007b48:	b2da      	uxtb	r2, r3
 8007b4a:	4b31      	ldr	r3, [pc, #196]	; (8007c10 <xPortStartScheduler+0x130>)
 8007b4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b4e:	4b31      	ldr	r3, [pc, #196]	; (8007c14 <xPortStartScheduler+0x134>)
 8007b50:	2207      	movs	r2, #7
 8007b52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b54:	e009      	b.n	8007b6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007b56:	4b2f      	ldr	r3, [pc, #188]	; (8007c14 <xPortStartScheduler+0x134>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	4a2d      	ldr	r2, [pc, #180]	; (8007c14 <xPortStartScheduler+0x134>)
 8007b5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b60:	78fb      	ldrb	r3, [r7, #3]
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	005b      	lsls	r3, r3, #1
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b6a:	78fb      	ldrb	r3, [r7, #3]
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b72:	2b80      	cmp	r3, #128	; 0x80
 8007b74:	d0ef      	beq.n	8007b56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b76:	4b27      	ldr	r3, [pc, #156]	; (8007c14 <xPortStartScheduler+0x134>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f1c3 0307 	rsb	r3, r3, #7
 8007b7e:	2b04      	cmp	r3, #4
 8007b80:	d00a      	beq.n	8007b98 <xPortStartScheduler+0xb8>
	__asm volatile
 8007b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b86:	f383 8811 	msr	BASEPRI, r3
 8007b8a:	f3bf 8f6f 	isb	sy
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	60bb      	str	r3, [r7, #8]
}
 8007b94:	bf00      	nop
 8007b96:	e7fe      	b.n	8007b96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b98:	4b1e      	ldr	r3, [pc, #120]	; (8007c14 <xPortStartScheduler+0x134>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	021b      	lsls	r3, r3, #8
 8007b9e:	4a1d      	ldr	r2, [pc, #116]	; (8007c14 <xPortStartScheduler+0x134>)
 8007ba0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ba2:	4b1c      	ldr	r3, [pc, #112]	; (8007c14 <xPortStartScheduler+0x134>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007baa:	4a1a      	ldr	r2, [pc, #104]	; (8007c14 <xPortStartScheduler+0x134>)
 8007bac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007bb6:	4b18      	ldr	r3, [pc, #96]	; (8007c18 <xPortStartScheduler+0x138>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a17      	ldr	r2, [pc, #92]	; (8007c18 <xPortStartScheduler+0x138>)
 8007bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007bc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007bc2:	4b15      	ldr	r3, [pc, #84]	; (8007c18 <xPortStartScheduler+0x138>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a14      	ldr	r2, [pc, #80]	; (8007c18 <xPortStartScheduler+0x138>)
 8007bc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007bcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007bce:	f000 f8dd 	bl	8007d8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007bd2:	4b12      	ldr	r3, [pc, #72]	; (8007c1c <xPortStartScheduler+0x13c>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007bd8:	f000 f8fc 	bl	8007dd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007bdc:	4b10      	ldr	r3, [pc, #64]	; (8007c20 <xPortStartScheduler+0x140>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a0f      	ldr	r2, [pc, #60]	; (8007c20 <xPortStartScheduler+0x140>)
 8007be2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007be6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007be8:	f7ff ff66 	bl	8007ab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007bec:	f7ff fa90 	bl	8007110 <vTaskSwitchContext>
	prvTaskExitError();
 8007bf0:	f7ff ff20 	bl	8007a34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3718      	adds	r7, #24
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	e000ed00 	.word	0xe000ed00
 8007c04:	410fc271 	.word	0x410fc271
 8007c08:	410fc270 	.word	0x410fc270
 8007c0c:	e000e400 	.word	0xe000e400
 8007c10:	200003f8 	.word	0x200003f8
 8007c14:	200003fc 	.word	0x200003fc
 8007c18:	e000ed20 	.word	0xe000ed20
 8007c1c:	2000000c 	.word	0x2000000c
 8007c20:	e000ef34 	.word	0xe000ef34

08007c24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
	__asm volatile
 8007c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	607b      	str	r3, [r7, #4]
}
 8007c3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c3e:	4b0f      	ldr	r3, [pc, #60]	; (8007c7c <vPortEnterCritical+0x58>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	3301      	adds	r3, #1
 8007c44:	4a0d      	ldr	r2, [pc, #52]	; (8007c7c <vPortEnterCritical+0x58>)
 8007c46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c48:	4b0c      	ldr	r3, [pc, #48]	; (8007c7c <vPortEnterCritical+0x58>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d10f      	bne.n	8007c70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c50:	4b0b      	ldr	r3, [pc, #44]	; (8007c80 <vPortEnterCritical+0x5c>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00a      	beq.n	8007c70 <vPortEnterCritical+0x4c>
	__asm volatile
 8007c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5e:	f383 8811 	msr	BASEPRI, r3
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	603b      	str	r3, [r7, #0]
}
 8007c6c:	bf00      	nop
 8007c6e:	e7fe      	b.n	8007c6e <vPortEnterCritical+0x4a>
	}
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	2000000c 	.word	0x2000000c
 8007c80:	e000ed04 	.word	0xe000ed04

08007c84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c8a:	4b12      	ldr	r3, [pc, #72]	; (8007cd4 <vPortExitCritical+0x50>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10a      	bne.n	8007ca8 <vPortExitCritical+0x24>
	__asm volatile
 8007c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	607b      	str	r3, [r7, #4]
}
 8007ca4:	bf00      	nop
 8007ca6:	e7fe      	b.n	8007ca6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ca8:	4b0a      	ldr	r3, [pc, #40]	; (8007cd4 <vPortExitCritical+0x50>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3b01      	subs	r3, #1
 8007cae:	4a09      	ldr	r2, [pc, #36]	; (8007cd4 <vPortExitCritical+0x50>)
 8007cb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007cb2:	4b08      	ldr	r3, [pc, #32]	; (8007cd4 <vPortExitCritical+0x50>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d105      	bne.n	8007cc6 <vPortExitCritical+0x42>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	f383 8811 	msr	BASEPRI, r3
}
 8007cc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007cc6:	bf00      	nop
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	2000000c 	.word	0x2000000c
	...

08007ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ce0:	f3ef 8009 	mrs	r0, PSP
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	4b15      	ldr	r3, [pc, #84]	; (8007d40 <pxCurrentTCBConst>)
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	f01e 0f10 	tst.w	lr, #16
 8007cf0:	bf08      	it	eq
 8007cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cfa:	6010      	str	r0, [r2, #0]
 8007cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d04:	f380 8811 	msr	BASEPRI, r0
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f7ff f9fe 	bl	8007110 <vTaskSwitchContext>
 8007d14:	f04f 0000 	mov.w	r0, #0
 8007d18:	f380 8811 	msr	BASEPRI, r0
 8007d1c:	bc09      	pop	{r0, r3}
 8007d1e:	6819      	ldr	r1, [r3, #0]
 8007d20:	6808      	ldr	r0, [r1, #0]
 8007d22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d26:	f01e 0f10 	tst.w	lr, #16
 8007d2a:	bf08      	it	eq
 8007d2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d30:	f380 8809 	msr	PSP, r0
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	f3af 8000 	nop.w

08007d40 <pxCurrentTCBConst>:
 8007d40:	200002cc 	.word	0x200002cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d44:	bf00      	nop
 8007d46:	bf00      	nop

08007d48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	607b      	str	r3, [r7, #4]
}
 8007d60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d62:	f7ff f91d 	bl	8006fa0 <xTaskIncrementTick>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d003      	beq.n	8007d74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d6c:	4b06      	ldr	r3, [pc, #24]	; (8007d88 <SysTick_Handler+0x40>)
 8007d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d72:	601a      	str	r2, [r3, #0]
 8007d74:	2300      	movs	r3, #0
 8007d76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	f383 8811 	msr	BASEPRI, r3
}
 8007d7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d80:	bf00      	nop
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	e000ed04 	.word	0xe000ed04

08007d8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d90:	4b0b      	ldr	r3, [pc, #44]	; (8007dc0 <vPortSetupTimerInterrupt+0x34>)
 8007d92:	2200      	movs	r2, #0
 8007d94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d96:	4b0b      	ldr	r3, [pc, #44]	; (8007dc4 <vPortSetupTimerInterrupt+0x38>)
 8007d98:	2200      	movs	r2, #0
 8007d9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d9c:	4b0a      	ldr	r3, [pc, #40]	; (8007dc8 <vPortSetupTimerInterrupt+0x3c>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a0a      	ldr	r2, [pc, #40]	; (8007dcc <vPortSetupTimerInterrupt+0x40>)
 8007da2:	fba2 2303 	umull	r2, r3, r2, r3
 8007da6:	099b      	lsrs	r3, r3, #6
 8007da8:	4a09      	ldr	r2, [pc, #36]	; (8007dd0 <vPortSetupTimerInterrupt+0x44>)
 8007daa:	3b01      	subs	r3, #1
 8007dac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007dae:	4b04      	ldr	r3, [pc, #16]	; (8007dc0 <vPortSetupTimerInterrupt+0x34>)
 8007db0:	2207      	movs	r2, #7
 8007db2:	601a      	str	r2, [r3, #0]
}
 8007db4:	bf00      	nop
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	e000e010 	.word	0xe000e010
 8007dc4:	e000e018 	.word	0xe000e018
 8007dc8:	20000000 	.word	0x20000000
 8007dcc:	10624dd3 	.word	0x10624dd3
 8007dd0:	e000e014 	.word	0xe000e014

08007dd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007dd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007de4 <vPortEnableVFP+0x10>
 8007dd8:	6801      	ldr	r1, [r0, #0]
 8007dda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007dde:	6001      	str	r1, [r0, #0]
 8007de0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007de2:	bf00      	nop
 8007de4:	e000ed88 	.word	0xe000ed88

08007de8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007dee:	f3ef 8305 	mrs	r3, IPSR
 8007df2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2b0f      	cmp	r3, #15
 8007df8:	d914      	bls.n	8007e24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007dfa:	4a17      	ldr	r2, [pc, #92]	; (8007e58 <vPortValidateInterruptPriority+0x70>)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	4413      	add	r3, r2
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e04:	4b15      	ldr	r3, [pc, #84]	; (8007e5c <vPortValidateInterruptPriority+0x74>)
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	7afa      	ldrb	r2, [r7, #11]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d20a      	bcs.n	8007e24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	607b      	str	r3, [r7, #4]
}
 8007e20:	bf00      	nop
 8007e22:	e7fe      	b.n	8007e22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e24:	4b0e      	ldr	r3, [pc, #56]	; (8007e60 <vPortValidateInterruptPriority+0x78>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007e2c:	4b0d      	ldr	r3, [pc, #52]	; (8007e64 <vPortValidateInterruptPriority+0x7c>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d90a      	bls.n	8007e4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e38:	f383 8811 	msr	BASEPRI, r3
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	603b      	str	r3, [r7, #0]
}
 8007e46:	bf00      	nop
 8007e48:	e7fe      	b.n	8007e48 <vPortValidateInterruptPriority+0x60>
	}
 8007e4a:	bf00      	nop
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	e000e3f0 	.word	0xe000e3f0
 8007e5c:	200003f8 	.word	0x200003f8
 8007e60:	e000ed0c 	.word	0xe000ed0c
 8007e64:	200003fc 	.word	0x200003fc

08007e68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b08a      	sub	sp, #40	; 0x28
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e70:	2300      	movs	r3, #0
 8007e72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e74:	f7fe ffea 	bl	8006e4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e78:	4b5b      	ldr	r3, [pc, #364]	; (8007fe8 <pvPortMalloc+0x180>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d101      	bne.n	8007e84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e80:	f000 f920 	bl	80080c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e84:	4b59      	ldr	r3, [pc, #356]	; (8007fec <pvPortMalloc+0x184>)
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f040 8093 	bne.w	8007fb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d01d      	beq.n	8007ed4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007e98:	2208      	movs	r2, #8
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f003 0307 	and.w	r3, r3, #7
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d014      	beq.n	8007ed4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f023 0307 	bic.w	r3, r3, #7
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f003 0307 	and.w	r3, r3, #7
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00a      	beq.n	8007ed4 <pvPortMalloc+0x6c>
	__asm volatile
 8007ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec2:	f383 8811 	msr	BASEPRI, r3
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	617b      	str	r3, [r7, #20]
}
 8007ed0:	bf00      	nop
 8007ed2:	e7fe      	b.n	8007ed2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d06e      	beq.n	8007fb8 <pvPortMalloc+0x150>
 8007eda:	4b45      	ldr	r3, [pc, #276]	; (8007ff0 <pvPortMalloc+0x188>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d869      	bhi.n	8007fb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ee4:	4b43      	ldr	r3, [pc, #268]	; (8007ff4 <pvPortMalloc+0x18c>)
 8007ee6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ee8:	4b42      	ldr	r3, [pc, #264]	; (8007ff4 <pvPortMalloc+0x18c>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007eee:	e004      	b.n	8007efa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d903      	bls.n	8007f0c <pvPortMalloc+0xa4>
 8007f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1f1      	bne.n	8007ef0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f0c:	4b36      	ldr	r3, [pc, #216]	; (8007fe8 <pvPortMalloc+0x180>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d050      	beq.n	8007fb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f16:	6a3b      	ldr	r3, [r7, #32]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2208      	movs	r2, #8
 8007f1c:	4413      	add	r3, r2
 8007f1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	6a3b      	ldr	r3, [r7, #32]
 8007f26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2a:	685a      	ldr	r2, [r3, #4]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	1ad2      	subs	r2, r2, r3
 8007f30:	2308      	movs	r3, #8
 8007f32:	005b      	lsls	r3, r3, #1
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d91f      	bls.n	8007f78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	f003 0307 	and.w	r3, r3, #7
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00a      	beq.n	8007f60 <pvPortMalloc+0xf8>
	__asm volatile
 8007f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f4e:	f383 8811 	msr	BASEPRI, r3
 8007f52:	f3bf 8f6f 	isb	sy
 8007f56:	f3bf 8f4f 	dsb	sy
 8007f5a:	613b      	str	r3, [r7, #16]
}
 8007f5c:	bf00      	nop
 8007f5e:	e7fe      	b.n	8007f5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f62:	685a      	ldr	r2, [r3, #4]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	1ad2      	subs	r2, r2, r3
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f72:	69b8      	ldr	r0, [r7, #24]
 8007f74:	f000 f908 	bl	8008188 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f78:	4b1d      	ldr	r3, [pc, #116]	; (8007ff0 <pvPortMalloc+0x188>)
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	4a1b      	ldr	r2, [pc, #108]	; (8007ff0 <pvPortMalloc+0x188>)
 8007f84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f86:	4b1a      	ldr	r3, [pc, #104]	; (8007ff0 <pvPortMalloc+0x188>)
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	4b1b      	ldr	r3, [pc, #108]	; (8007ff8 <pvPortMalloc+0x190>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d203      	bcs.n	8007f9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f92:	4b17      	ldr	r3, [pc, #92]	; (8007ff0 <pvPortMalloc+0x188>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a18      	ldr	r2, [pc, #96]	; (8007ff8 <pvPortMalloc+0x190>)
 8007f98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	4b13      	ldr	r3, [pc, #76]	; (8007fec <pvPortMalloc+0x184>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	431a      	orrs	r2, r3
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007faa:	2200      	movs	r2, #0
 8007fac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007fae:	4b13      	ldr	r3, [pc, #76]	; (8007ffc <pvPortMalloc+0x194>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	4a11      	ldr	r2, [pc, #68]	; (8007ffc <pvPortMalloc+0x194>)
 8007fb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007fb8:	f7fe ff56 	bl	8006e68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	f003 0307 	and.w	r3, r3, #7
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00a      	beq.n	8007fdc <pvPortMalloc+0x174>
	__asm volatile
 8007fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fca:	f383 8811 	msr	BASEPRI, r3
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	60fb      	str	r3, [r7, #12]
}
 8007fd8:	bf00      	nop
 8007fda:	e7fe      	b.n	8007fda <pvPortMalloc+0x172>
	return pvReturn;
 8007fdc:	69fb      	ldr	r3, [r7, #28]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3728      	adds	r7, #40	; 0x28
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	20004008 	.word	0x20004008
 8007fec:	2000401c 	.word	0x2000401c
 8007ff0:	2000400c 	.word	0x2000400c
 8007ff4:	20004000 	.word	0x20004000
 8007ff8:	20004010 	.word	0x20004010
 8007ffc:	20004014 	.word	0x20004014

08008000 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d04d      	beq.n	80080ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008012:	2308      	movs	r3, #8
 8008014:	425b      	negs	r3, r3
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	4413      	add	r3, r2
 800801a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	685a      	ldr	r2, [r3, #4]
 8008024:	4b24      	ldr	r3, [pc, #144]	; (80080b8 <vPortFree+0xb8>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4013      	ands	r3, r2
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10a      	bne.n	8008044 <vPortFree+0x44>
	__asm volatile
 800802e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	60fb      	str	r3, [r7, #12]
}
 8008040:	bf00      	nop
 8008042:	e7fe      	b.n	8008042 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00a      	beq.n	8008062 <vPortFree+0x62>
	__asm volatile
 800804c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008050:	f383 8811 	msr	BASEPRI, r3
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	60bb      	str	r3, [r7, #8]
}
 800805e:	bf00      	nop
 8008060:	e7fe      	b.n	8008060 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	685a      	ldr	r2, [r3, #4]
 8008066:	4b14      	ldr	r3, [pc, #80]	; (80080b8 <vPortFree+0xb8>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4013      	ands	r3, r2
 800806c:	2b00      	cmp	r3, #0
 800806e:	d01e      	beq.n	80080ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d11a      	bne.n	80080ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	685a      	ldr	r2, [r3, #4]
 800807c:	4b0e      	ldr	r3, [pc, #56]	; (80080b8 <vPortFree+0xb8>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	43db      	mvns	r3, r3
 8008082:	401a      	ands	r2, r3
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008088:	f7fe fee0 	bl	8006e4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	685a      	ldr	r2, [r3, #4]
 8008090:	4b0a      	ldr	r3, [pc, #40]	; (80080bc <vPortFree+0xbc>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4413      	add	r3, r2
 8008096:	4a09      	ldr	r2, [pc, #36]	; (80080bc <vPortFree+0xbc>)
 8008098:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800809a:	6938      	ldr	r0, [r7, #16]
 800809c:	f000 f874 	bl	8008188 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80080a0:	4b07      	ldr	r3, [pc, #28]	; (80080c0 <vPortFree+0xc0>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	3301      	adds	r3, #1
 80080a6:	4a06      	ldr	r2, [pc, #24]	; (80080c0 <vPortFree+0xc0>)
 80080a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80080aa:	f7fe fedd 	bl	8006e68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80080ae:	bf00      	nop
 80080b0:	3718      	adds	r7, #24
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	2000401c 	.word	0x2000401c
 80080bc:	2000400c 	.word	0x2000400c
 80080c0:	20004018 	.word	0x20004018

080080c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80080ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80080ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80080d0:	4b27      	ldr	r3, [pc, #156]	; (8008170 <prvHeapInit+0xac>)
 80080d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f003 0307 	and.w	r3, r3, #7
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00c      	beq.n	80080f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	3307      	adds	r3, #7
 80080e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f023 0307 	bic.w	r3, r3, #7
 80080ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	4a1f      	ldr	r2, [pc, #124]	; (8008170 <prvHeapInit+0xac>)
 80080f4:	4413      	add	r3, r2
 80080f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80080fc:	4a1d      	ldr	r2, [pc, #116]	; (8008174 <prvHeapInit+0xb0>)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008102:	4b1c      	ldr	r3, [pc, #112]	; (8008174 <prvHeapInit+0xb0>)
 8008104:	2200      	movs	r2, #0
 8008106:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	4413      	add	r3, r2
 800810e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008110:	2208      	movs	r2, #8
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	1a9b      	subs	r3, r3, r2
 8008116:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f023 0307 	bic.w	r3, r3, #7
 800811e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	4a15      	ldr	r2, [pc, #84]	; (8008178 <prvHeapInit+0xb4>)
 8008124:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008126:	4b14      	ldr	r3, [pc, #80]	; (8008178 <prvHeapInit+0xb4>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2200      	movs	r2, #0
 800812c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800812e:	4b12      	ldr	r3, [pc, #72]	; (8008178 <prvHeapInit+0xb4>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2200      	movs	r2, #0
 8008134:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	1ad2      	subs	r2, r2, r3
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008144:	4b0c      	ldr	r3, [pc, #48]	; (8008178 <prvHeapInit+0xb4>)
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	4a0a      	ldr	r2, [pc, #40]	; (800817c <prvHeapInit+0xb8>)
 8008152:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	4a09      	ldr	r2, [pc, #36]	; (8008180 <prvHeapInit+0xbc>)
 800815a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800815c:	4b09      	ldr	r3, [pc, #36]	; (8008184 <prvHeapInit+0xc0>)
 800815e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008162:	601a      	str	r2, [r3, #0]
}
 8008164:	bf00      	nop
 8008166:	3714      	adds	r7, #20
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr
 8008170:	20000400 	.word	0x20000400
 8008174:	20004000 	.word	0x20004000
 8008178:	20004008 	.word	0x20004008
 800817c:	20004010 	.word	0x20004010
 8008180:	2000400c 	.word	0x2000400c
 8008184:	2000401c 	.word	0x2000401c

08008188 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008190:	4b28      	ldr	r3, [pc, #160]	; (8008234 <prvInsertBlockIntoFreeList+0xac>)
 8008192:	60fb      	str	r3, [r7, #12]
 8008194:	e002      	b.n	800819c <prvInsertBlockIntoFreeList+0x14>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	60fb      	str	r3, [r7, #12]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d8f7      	bhi.n	8008196 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	4413      	add	r3, r2
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d108      	bne.n	80081ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	685a      	ldr	r2, [r3, #4]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	441a      	add	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	441a      	add	r2, r3
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d118      	bne.n	8008210 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	4b15      	ldr	r3, [pc, #84]	; (8008238 <prvInsertBlockIntoFreeList+0xb0>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d00d      	beq.n	8008206 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	685a      	ldr	r2, [r3, #4]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	441a      	add	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	601a      	str	r2, [r3, #0]
 8008204:	e008      	b.n	8008218 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008206:	4b0c      	ldr	r3, [pc, #48]	; (8008238 <prvInsertBlockIntoFreeList+0xb0>)
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	601a      	str	r2, [r3, #0]
 800820e:	e003      	b.n	8008218 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	429a      	cmp	r2, r3
 800821e:	d002      	beq.n	8008226 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008226:	bf00      	nop
 8008228:	3714      	adds	r7, #20
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	20004000 	.word	0x20004000
 8008238:	20004008 	.word	0x20004008

0800823c <__libc_init_array>:
 800823c:	b570      	push	{r4, r5, r6, lr}
 800823e:	4d0d      	ldr	r5, [pc, #52]	; (8008274 <__libc_init_array+0x38>)
 8008240:	4c0d      	ldr	r4, [pc, #52]	; (8008278 <__libc_init_array+0x3c>)
 8008242:	1b64      	subs	r4, r4, r5
 8008244:	10a4      	asrs	r4, r4, #2
 8008246:	2600      	movs	r6, #0
 8008248:	42a6      	cmp	r6, r4
 800824a:	d109      	bne.n	8008260 <__libc_init_array+0x24>
 800824c:	4d0b      	ldr	r5, [pc, #44]	; (800827c <__libc_init_array+0x40>)
 800824e:	4c0c      	ldr	r4, [pc, #48]	; (8008280 <__libc_init_array+0x44>)
 8008250:	f000 f82e 	bl	80082b0 <_init>
 8008254:	1b64      	subs	r4, r4, r5
 8008256:	10a4      	asrs	r4, r4, #2
 8008258:	2600      	movs	r6, #0
 800825a:	42a6      	cmp	r6, r4
 800825c:	d105      	bne.n	800826a <__libc_init_array+0x2e>
 800825e:	bd70      	pop	{r4, r5, r6, pc}
 8008260:	f855 3b04 	ldr.w	r3, [r5], #4
 8008264:	4798      	blx	r3
 8008266:	3601      	adds	r6, #1
 8008268:	e7ee      	b.n	8008248 <__libc_init_array+0xc>
 800826a:	f855 3b04 	ldr.w	r3, [r5], #4
 800826e:	4798      	blx	r3
 8008270:	3601      	adds	r6, #1
 8008272:	e7f2      	b.n	800825a <__libc_init_array+0x1e>
 8008274:	080083f8 	.word	0x080083f8
 8008278:	080083f8 	.word	0x080083f8
 800827c:	080083f8 	.word	0x080083f8
 8008280:	080083fc 	.word	0x080083fc

08008284 <memcpy>:
 8008284:	440a      	add	r2, r1
 8008286:	4291      	cmp	r1, r2
 8008288:	f100 33ff 	add.w	r3, r0, #4294967295
 800828c:	d100      	bne.n	8008290 <memcpy+0xc>
 800828e:	4770      	bx	lr
 8008290:	b510      	push	{r4, lr}
 8008292:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008296:	f803 4f01 	strb.w	r4, [r3, #1]!
 800829a:	4291      	cmp	r1, r2
 800829c:	d1f9      	bne.n	8008292 <memcpy+0xe>
 800829e:	bd10      	pop	{r4, pc}

080082a0 <memset>:
 80082a0:	4402      	add	r2, r0
 80082a2:	4603      	mov	r3, r0
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d100      	bne.n	80082aa <memset+0xa>
 80082a8:	4770      	bx	lr
 80082aa:	f803 1b01 	strb.w	r1, [r3], #1
 80082ae:	e7f9      	b.n	80082a4 <memset+0x4>

080082b0 <_init>:
 80082b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b2:	bf00      	nop
 80082b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082b6:	bc08      	pop	{r3}
 80082b8:	469e      	mov	lr, r3
 80082ba:	4770      	bx	lr

080082bc <_fini>:
 80082bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082be:	bf00      	nop
 80082c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082c2:	bc08      	pop	{r3}
 80082c4:	469e      	mov	lr, r3
 80082c6:	4770      	bx	lr
